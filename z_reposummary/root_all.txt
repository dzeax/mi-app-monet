===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\eslint.config.mjs =====
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\middleware.ts =====
// middleware.ts
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs';

export async function middleware(req: NextRequest) {
  const res = NextResponse.next();
  const supabase = createMiddlewareClient({ req, res });
  const {
    data: { session },
  } = await supabase.auth.getSession();

  const { pathname, searchParams } = req.nextUrl;

  // Rutas pÃºblicas
  const isPublic =
    pathname.startsWith('/login') ||
    pathname.startsWith('/register') ||
    pathname.startsWith('/reset') ||
    pathname.startsWith('/_next') ||
    pathname.startsWith('/favicon') ||
    pathname.startsWith('/api/public') ||
    pathname.startsWith('/assets');

  if (isPublic) return res;

  if (!session) {
    const url = req.nextUrl.clone();
    url.pathname = '/login';
    url.searchParams.set('redirect', pathname + (searchParams.toString() ? `?${searchParams}` : ''));
    return NextResponse.redirect(url);
  }

  return res;
}

export const config = {
  matcher: ['/((?!.*\\.).*)'], // todo menos archivos estÃ¡ticos
};

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\next-env.d.ts =====
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\next.config.ts =====
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\package-lock.json =====
{
  "name": "mi-app-monet",
  "version": "0.1.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "mi-app-monet",
      "version": "0.1.0",
      "dependencies": {
        "@hookform/resolvers": "^5.2.1",
        "@supabase/auth-helpers-nextjs": "^0.10.0",
        "@supabase/supabase-js": "^2.56.0",
        "date-fns": "^4.1.0",
        "next": "15.4.6",
        "react": "19.1.0",
        "react-dom": "19.1.0",
        "react-hook-form": "^7.62.0",
        "recharts": "^3.1.2",
        "zod": "^4.0.15"
      },
      "devDependencies": {
        "@eslint/eslintrc": "^3",
        "@tailwindcss/postcss": "^4.1.11",
        "@types/node": "^20",
        "@types/react": "^19",
        "@types/react-dom": "^19",
        "autoprefixer": "^10.4.21",
        "concurrently": "^9.2.0",
        "eslint": "^9",
        "eslint-config-next": "15.4.6",
        "postcss": "^8.5.6",
        "tailwindcss": "^4.1.11",
        "typescript": "^5"
      }
    },
    "node_modules/@alloc/quick-lru": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
      "integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.7.0.tgz",
      "integrity": "sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/config-array": {
      "version": "0.21.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.21.0.tgz",
      "integrity": "sha512-ENIdc4iLu0d93HeYirvKmrzshzofPw6VkZRKQGe9Nv46ZnWUzcF1xV01dcvEg/1wXUR61OmmlSfyeyO7EvjLxQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/object-schema": "^2.1.6",
        "debug": "^4.3.1",
        "minimatch": "^3.1.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/config-helpers": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.3.0.tgz",
      "integrity": "sha512-ViuymvFmcJi04qdZeDc2whTHryouGcDlaxPqarTD0ZE10ISpxGUVZGZDx4w01upyIynL3iu6IXH2bS1NhclQMw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/core": {
      "version": "0.15.1",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.15.1.tgz",
      "integrity": "sha512-bkOp+iumZCCbt1K1CmWf0R9pM5yKpDv+ZXtvSyQpudrI9kuFLp+bM2WOPXImuD/ceQuaa8f5pj93Y7zyECIGNA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@types/json-schema": "^7.0.15"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.1.tgz",
      "integrity": "sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^10.0.1",
        "globals": "^14.0.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/js": {
      "version": "9.32.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.32.0.tgz",
      "integrity": "sha512-BBpRFZK3eX6uMLKz8WxFOBIFFcGFJ/g8XuwjTHCqHROSIsopI+ddn/d5Cfh36+7+e5edVS8dbSHnBNhrLEX0zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      }
    },
    "node_modules/@eslint/object-schema": {
      "version": "2.1.6",
      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.6.tgz",
      "integrity": "sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit": {
      "version": "0.3.4",
      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.3.4.tgz",
      "integrity": "sha512-Ul5l+lHEcw3L5+k8POx6r74mxEYKG5kOb6Xpy2gCRW6zweT6TEhAf8vhxGgjhqrd/VO/Dirhsb+1hNpD1ue9hw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/core": "^0.15.1",
        "levn": "^0.4.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@hookform/resolvers": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/@hookform/resolvers/-/resolvers-5.2.1.tgz",
      "integrity": "sha512-u0+6X58gkjMcxur1wRWokA7XsiiBJ6aK17aPZxhkoYiK5J+HcTx0Vhu9ovXe6H+dVpO6cjrn2FkJTryXEMlryQ==",
      "license": "MIT",
      "dependencies": {
        "@standard-schema/utils": "^0.3.0"
      },
      "peerDependencies": {
        "react-hook-form": "^7.55.0"
      }
    },
    "node_modules/@humanfs/core": {
      "version": "0.19.1",
      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node": {
      "version": "0.16.6",
      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz",
      "integrity": "sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanfs/core": "^0.19.1",
        "@humanwhocodes/retry": "^0.3.0"
      },
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node/node_modules/@humanwhocodes/retry": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
      "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/retry": {
      "version": "0.4.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.3.tgz",
      "integrity": "sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@img/sharp-win32-x64": {
      "version": "0.34.3",
      "resolved": "https://registry.npmjs.org/@img/sharp-win32-x64/-/sharp-win32-x64-0.34.3.tgz",
      "integrity": "sha512-OWwz05d++TxzLEv4VnsTz5CmZ6mI6S05sfQGEMrNrQcOEERbX46332IvE7pO/EUiw7jUrrS40z/M7kPyjfl04g==",
      "cpu": [
        "x64"
      ],
      "license": "Apache-2.0 AND LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@isaacs/fs-minipass": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/@isaacs/fs-minipass/-/fs-minipass-4.0.1.tgz",
      "integrity": "sha512-wgm9Ehl2jpeqP3zw/7mo3kRHFp5MEDhqAdwy1fTGkHAwnkGOVsgpvQhL8B5n1qlb01jV3n/bI0ZfZp5lWA1k4w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "minipass": "^7.0.4"
      },
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.12",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.12.tgz",
      "integrity": "sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.4.tgz",
      "integrity": "sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.29",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
      "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@next/env": {
      "version": "15.4.6",
      "resolved": "https://registry.npmjs.org/@next/env/-/env-15.4.6.tgz",
      "integrity": "sha512-yHDKVTcHrZy/8TWhj0B23ylKv5ypocuCwey9ZqPyv4rPdUdRzpGCkSi03t04KBPyU96kxVtUqx6O3nE1kpxASQ==",
      "license": "MIT"
    },
    "node_modules/@next/eslint-plugin-next": {
      "version": "15.4.6",
      "resolved": "https://registry.npmjs.org/@next/eslint-plugin-next/-/eslint-plugin-next-15.4.6.tgz",
      "integrity": "sha512-2NOu3ln+BTcpnbIDuxx6MNq+pRrCyey4WSXGaJIyt0D2TYicHeO9QrUENNjcf673n3B1s7hsiV5xBYRCK1Q8kA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-glob": "3.3.1"
      }
    },
    "node_modules/@next/swc-darwin-arm64": {
      "version": "15.4.6",
      "resolved": "https://registry.npmjs.org/@next/swc-darwin-arm64/-/swc-darwin-arm64-15.4.6.tgz",
      "integrity": "sha512-667R0RTP4DwxzmrqTs4Lr5dcEda9OxuZsVFsjVtxVMVhzSpo6nLclXejJVfQo2/g7/Z9qF3ETDmN3h65mTjpTQ==",
      "cpu": [
        "arm64"
      ],
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-darwin-x64": {
      "version": "15.4.6",
      "resolved": "https://registry.npmjs.org/@next/swc-darwin-x64/-/swc-darwin-x64-15.4.6.tgz",
      "integrity": "sha512-KMSFoistFkaiQYVQQnaU9MPWtp/3m0kn2Xed1Ces5ll+ag1+rlac20sxG+MqhH2qYWX1O2GFOATQXEyxKiIscg==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-arm64-gnu": {
      "version": "15.4.6",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-gnu/-/swc-linux-arm64-gnu-15.4.6.tgz",
      "integrity": "sha512-PnOx1YdO0W7m/HWFeYd2A6JtBO8O8Eb9h6nfJia2Dw1sRHoHpNf6lN1U4GKFRzRDBi9Nq2GrHk9PF3Vmwf7XVw==",
      "cpu": [
        "arm64"
      ],
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-arm64-musl": {
      "version": "15.4.6",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-musl/-/swc-linux-arm64-musl-15.4.6.tgz",
      "integrity": "sha512-XBbuQddtY1p5FGPc2naMO0kqs4YYtLYK/8aPausI5lyOjr4J77KTG9mtlU4P3NwkLI1+OjsPzKVvSJdMs3cFaw==",
      "cpu": [
        "arm64"
      ],
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-x64-gnu": {
      "version": "15.4.6",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-gnu/-/swc-linux-x64-gnu-15.4.6.tgz",
      "integrity": "sha512-+WTeK7Qdw82ez3U9JgD+igBAP75gqZ1vbK6R8PlEEuY0OIe5FuYXA4aTjL811kWPf7hNeslD4hHK2WoM9W0IgA==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-x64-musl": {
      "version": "15.4.6",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-musl/-/swc-linux-x64-musl-15.4.6.tgz",
      "integrity": "sha512-XP824mCbgQsK20jlXKrUpZoh/iO3vUWhMpxCz8oYeagoiZ4V0TQiKy0ASji1KK6IAe3DYGfj5RfKP6+L2020OQ==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-win32-arm64-msvc": {
      "version": "15.4.6",
      "resolved": "https://registry.npmjs.org/@next/swc-win32-arm64-msvc/-/swc-win32-arm64-msvc-15.4.6.tgz",
      "integrity": "sha512-FxrsenhUz0LbgRkNWx6FRRJIPe/MI1JRA4W4EPd5leXO00AZ6YU8v5vfx4MDXTvN77lM/EqsE3+6d2CIeF5NYg==",
      "cpu": [
        "arm64"
      ],
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-win32-x64-msvc": {
      "version": "15.4.6",
      "resolved": "https://registry.npmjs.org/@next/swc-win32-x64-msvc/-/swc-win32-x64-msvc-15.4.6.tgz",
      "integrity": "sha512-T4ufqnZ4u88ZheczkBTtOF+eKaM14V8kbjud/XrAakoM5DKQWjW09vD6B9fsdsWS2T7D5EY31hRHdta7QKWOng==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nolyfill/is-core-module": {
      "version": "1.0.39",
      "resolved": "https://registry.npmjs.org/@nolyfill/is-core-module/-/is-core-module-1.0.39.tgz",
      "integrity": "sha512-nn5ozdjYQpUCZlWGuxcJY/KpxkWQs4DcbMCmKojjyrYDEAGy4Ce19NN4v5MduafTwJlbKc99UA8YhSVqq9yPZA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12.4.0"
      }
    },
    "node_modules/@reduxjs/toolkit": {
      "version": "2.8.2",
      "resolved": "https://registry.npmjs.org/@reduxjs/toolkit/-/toolkit-2.8.2.tgz",
      "integrity": "sha512-MYlOhQ0sLdw4ud48FoC5w0dH9VfWQjtCjreKwYTT3l+r427qYC5Y8PihNutepr8XrNaBUDQo9khWUwQxZaqt5A==",
      "license": "MIT",
      "dependencies": {
        "@standard-schema/spec": "^1.0.0",
        "@standard-schema/utils": "^0.3.0",
        "immer": "^10.0.3",
        "redux": "^5.0.1",
        "redux-thunk": "^3.1.0",
        "reselect": "^5.1.0"
      },
      "peerDependencies": {
        "react": "^16.9.0 || ^17.0.0 || ^18 || ^19",
        "react-redux": "^7.2.1 || ^8.1.3 || ^9.0.0"
      },
      "peerDependenciesMeta": {
        "react": {
          "optional": true
        },
        "react-redux": {
          "optional": true
        }
      }
    },
    "node_modules/@rtsao/scc": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@rtsao/scc/-/scc-1.1.0.tgz",
      "integrity": "sha512-zt6OdqaDoOnJ1ZYsCYGt9YmWzDXl4vQdKTyJev62gFhRGKdx7mcT54V9KIjg+d2wi9EXsPvAPKe7i7WjfVWB8g==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@rushstack/eslint-patch": {
      "version": "1.12.0",
      "resolved": "https://registry.npmjs.org/@rushstack/eslint-patch/-/eslint-patch-1.12.0.tgz",
      "integrity": "sha512-5EwMtOqvJMMa3HbmxLlF74e+3/HhwBTMcvt3nqVJgGCozO6hzIPOBlwm8mGVNR9SN2IJpxSnlxczyDjcn7qIyw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@standard-schema/spec": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@standard-schema/spec/-/spec-1.0.0.tgz",
      "integrity": "sha512-m2bOd0f2RT9k8QJx1JN85cZYyH1RqFBdlwtkSlf4tBDYLCiiZnv1fIIwacK6cqwXavOydf0NPToMQgpKq+dVlA==",
      "license": "MIT"
    },
    "node_modules/@standard-schema/utils": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/@standard-schema/utils/-/utils-0.3.0.tgz",
      "integrity": "sha512-e7Mew686owMaPJVNNLs55PUvgz371nKgwsc4vxE49zsODpJEnxgxRo2y/OKrqueavXgZNMDVj3DdHFlaSAeU8g==",
      "license": "MIT"
    },
    "node_modules/@supabase/auth-helpers-nextjs": {
      "version": "0.10.0",
      "resolved": "https://registry.npmjs.org/@supabase/auth-helpers-nextjs/-/auth-helpers-nextjs-0.10.0.tgz",
      "integrity": "sha512-2dfOGsM4yZt0oS4TPiE7bD4vf7EVz7NRz/IJrV6vLg0GP7sMUx8wndv2euLGq4BjN9lUCpu6DG/uCC8j+ylwPg==",
      "deprecated": "This package is now deprecated - please use the @supabase/ssr package instead.",
      "license": "MIT",
      "dependencies": {
        "@supabase/auth-helpers-shared": "0.7.0",
        "set-cookie-parser": "^2.6.0"
      },
      "peerDependencies": {
        "@supabase/supabase-js": "^2.39.8"
      }
    },
    "node_modules/@supabase/auth-helpers-shared": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/@supabase/auth-helpers-shared/-/auth-helpers-shared-0.7.0.tgz",
      "integrity": "sha512-FBFf2ei2R7QC+B/5wWkthMha8Ca2bWHAndN+syfuEUUfufv4mLcAgBCcgNg5nJR8L0gZfyuaxgubtOc9aW3Cpg==",
      "deprecated": "This package is now deprecated - please use the @supabase/ssr package instead.",
      "license": "MIT",
      "dependencies": {
        "jose": "^4.14.4"
      },
      "peerDependencies": {
        "@supabase/supabase-js": "^2.39.8"
      }
    },
    "node_modules/@supabase/auth-js": {
      "version": "2.71.1",
      "resolved": "https://registry.npmjs.org/@supabase/auth-js/-/auth-js-2.71.1.tgz",
      "integrity": "sha512-mMIQHBRc+SKpZFRB2qtupuzulaUhFYupNyxqDj5Jp/LyPvcWvjaJzZzObv6URtL/O6lPxkanASnotGtNpS3H2Q==",
      "license": "MIT",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.14"
      }
    },
    "node_modules/@supabase/functions-js": {
      "version": "2.4.5",
      "resolved": "https://registry.npmjs.org/@supabase/functions-js/-/functions-js-2.4.5.tgz",
      "integrity": "sha512-v5GSqb9zbosquTo6gBwIiq7W9eQ7rE5QazsK/ezNiQXdCbY+bH8D9qEaBIkhVvX4ZRW5rP03gEfw5yw9tiq4EQ==",
      "license": "MIT",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.14"
      }
    },
    "node_modules/@supabase/node-fetch": {
      "version": "2.6.15",
      "resolved": "https://registry.npmjs.org/@supabase/node-fetch/-/node-fetch-2.6.15.tgz",
      "integrity": "sha512-1ibVeYUacxWYi9i0cf5efil6adJ9WRyZBLivgjs+AUpewx1F3xPi7gLgaASI2SmIQxPoCEjAsLAzKPgMJVgOUQ==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      }
    },
    "node_modules/@supabase/postgrest-js": {
      "version": "1.21.3",
      "resolved": "https://registry.npmjs.org/@supabase/postgrest-js/-/postgrest-js-1.21.3.tgz",
      "integrity": "sha512-rg3DmmZQKEVCreXq6Am29hMVe1CzemXyIWVYyyua69y6XubfP+DzGfLxME/1uvdgwqdoaPbtjBDpEBhqxq1ZwA==",
      "license": "MIT",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.14"
      }
    },
    "node_modules/@supabase/realtime-js": {
      "version": "2.15.1",
      "resolved": "https://registry.npmjs.org/@supabase/realtime-js/-/realtime-js-2.15.1.tgz",
      "integrity": "sha512-edRFa2IrQw50kNntvUyS38hsL7t2d/psah6om6aNTLLcWem0R6bOUq7sk7DsGeSlNfuwEwWn57FdYSva6VddYw==",
      "license": "MIT",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.13",
        "@types/phoenix": "^1.6.6",
        "@types/ws": "^8.18.1",
        "ws": "^8.18.2"
      }
    },
    "node_modules/@supabase/storage-js": {
      "version": "2.11.0",
      "resolved": "https://registry.npmjs.org/@supabase/storage-js/-/storage-js-2.11.0.tgz",
      "integrity": "sha512-Y+kx/wDgd4oasAgoAq0bsbQojwQ+ejIif8uczZ9qufRHWFLMU5cODT+ApHsSrDufqUcVKt+eyxtOXSkeh2v9ww==",
      "license": "MIT",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.14"
      }
    },
    "node_modules/@supabase/supabase-js": {
      "version": "2.56.0",
      "resolved": "https://registry.npmjs.org/@supabase/supabase-js/-/supabase-js-2.56.0.tgz",
      "integrity": "sha512-XqwhHSyVnkjdliPN61CmXsmFGnFHTX2WDdwjG3Ukvdzuu3Trix+dXupYOQ3BueIyYp7B6t0yYpdQtJP2hIInyg==",
      "license": "MIT",
      "dependencies": {
        "@supabase/auth-js": "2.71.1",
        "@supabase/functions-js": "2.4.5",
        "@supabase/node-fetch": "2.6.15",
        "@supabase/postgrest-js": "1.21.3",
        "@supabase/realtime-js": "2.15.1",
        "@supabase/storage-js": "^2.10.4"
      }
    },
    "node_modules/@swc/helpers": {
      "version": "0.5.15",
      "resolved": "https://registry.npmjs.org/@swc/helpers/-/helpers-0.5.15.tgz",
      "integrity": "sha512-JQ5TuMi45Owi4/BIMAJBoSQoOJu12oOk/gADqlcUL9JEdHB8vyjUSsxqeNXnmXHjYKMi2WcYtezGEEhqUI/E2g==",
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.8.0"
      }
    },
    "node_modules/@tailwindcss/node": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/@tailwindcss/node/-/node-4.1.11.tgz",
      "integrity": "sha512-yzhzuGRmv5QyU9qLNg4GTlYI6STedBWRE7NjxP45CsFYYq9taI0zJXZBMqIC/c8fViNLhmrbpSFS57EoxUmD6Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.3.0",
        "enhanced-resolve": "^5.18.1",
        "jiti": "^2.4.2",
        "lightningcss": "1.30.1",
        "magic-string": "^0.30.17",
        "source-map-js": "^1.2.1",
        "tailwindcss": "4.1.11"
      }
    },
    "node_modules/@tailwindcss/oxide": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide/-/oxide-4.1.11.tgz",
      "integrity": "sha512-Q69XzrtAhuyfHo+5/HMgr1lAiPP/G40OMFAnws7xcFEYqcypZmdW8eGXaOUIeOl1dzPJBPENXgbjsOyhg2nkrg==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "dependencies": {
        "detect-libc": "^2.0.4",
        "tar": "^7.4.3"
      },
      "engines": {
        "node": ">= 10"
      },
      "optionalDependencies": {
        "@tailwindcss/oxide-android-arm64": "4.1.11",
        "@tailwindcss/oxide-darwin-arm64": "4.1.11",
        "@tailwindcss/oxide-darwin-x64": "4.1.11",
        "@tailwindcss/oxide-freebsd-x64": "4.1.11",
        "@tailwindcss/oxide-linux-arm-gnueabihf": "4.1.11",
        "@tailwindcss/oxide-linux-arm64-gnu": "4.1.11",
        "@tailwindcss/oxide-linux-arm64-musl": "4.1.11",
        "@tailwindcss/oxide-linux-x64-gnu": "4.1.11",
        "@tailwindcss/oxide-linux-x64-musl": "4.1.11",
        "@tailwindcss/oxide-wasm32-wasi": "4.1.11",
        "@tailwindcss/oxide-win32-arm64-msvc": "4.1.11",
        "@tailwindcss/oxide-win32-x64-msvc": "4.1.11"
      }
    },
    "node_modules/@tailwindcss/oxide-win32-x64-msvc": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-win32-x64-msvc/-/oxide-win32-x64-msvc-4.1.11.tgz",
      "integrity": "sha512-YfHoggn1j0LK7wR82TOucWc5LDCguHnoS879idHekmmiR7g9HUtMw9MI0NHatS28u/Xlkfi9w5RJWgz2Dl+5Qg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/postcss": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/@tailwindcss/postcss/-/postcss-4.1.11.tgz",
      "integrity": "sha512-q/EAIIpF6WpLhKEuQSEVMZNMIY8KhWoAemZ9eylNAih9jxMGAYPPWBn3I9QL/2jZ+e7OEz/tZkX5HwbBR4HohA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@alloc/quick-lru": "^5.2.0",
        "@tailwindcss/node": "4.1.11",
        "@tailwindcss/oxide": "4.1.11",
        "postcss": "^8.4.41",
        "tailwindcss": "4.1.11"
      }
    },
    "node_modules/@types/d3-array": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/@types/d3-array/-/d3-array-3.2.1.tgz",
      "integrity": "sha512-Y2Jn2idRrLzUfAKV2LyRImR+y4oa2AntrgID95SHJxuMUrkNXmanDSed71sRNZysveJVt1hLLemQZIady0FpEg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-color": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/@types/d3-color/-/d3-color-3.1.3.tgz",
      "integrity": "sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==",
      "license": "MIT"
    },
    "node_modules/@types/d3-ease": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-ease/-/d3-ease-3.0.2.tgz",
      "integrity": "sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==",
      "license": "MIT"
    },
    "node_modules/@types/d3-interpolate": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-interpolate/-/d3-interpolate-3.0.4.tgz",
      "integrity": "sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-color": "*"
      }
    },
    "node_modules/@types/d3-path": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/@types/d3-path/-/d3-path-3.1.1.tgz",
      "integrity": "sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-scale": {
      "version": "4.0.9",
      "resolved": "https://registry.npmjs.org/@types/d3-scale/-/d3-scale-4.0.9.tgz",
      "integrity": "sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-time": "*"
      }
    },
    "node_modules/@types/d3-shape": {
      "version": "3.1.7",
      "resolved": "https://registry.npmjs.org/@types/d3-shape/-/d3-shape-3.1.7.tgz",
      "integrity": "sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-path": "*"
      }
    },
    "node_modules/@types/d3-time": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-time/-/d3-time-3.0.4.tgz",
      "integrity": "sha512-yuzZug1nkAAaBlBBikKZTgzCeA+k1uy4ZFwWANOfKw5z5LRhV0gNA7gNkKm7HoK+HRN0wX3EkxGk0fpbWhmB7g==",
      "license": "MIT"
    },
    "node_modules/@types/d3-timer": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-timer/-/d3-timer-3.0.2.tgz",
      "integrity": "sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==",
      "license": "MIT"
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/json5": {
      "version": "0.0.29",
      "resolved": "https://registry.npmjs.org/@types/json5/-/json5-0.0.29.tgz",
      "integrity": "sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/node": {
      "version": "20.19.9",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.19.9.tgz",
      "integrity": "sha512-cuVNgarYWZqxRJDQHEB58GEONhOK79QVR/qYx4S7kcUObQvUwvFnYxJuuHUKm2aieN9X3yZB4LZsuYNU1Qphsw==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.21.0"
      }
    },
    "node_modules/@types/phoenix": {
      "version": "1.6.6",
      "resolved": "https://registry.npmjs.org/@types/phoenix/-/phoenix-1.6.6.tgz",
      "integrity": "sha512-PIzZZlEppgrpoT2QgbnDU+MMzuR6BbCjllj0bM70lWoejMeNJAxCchxnv7J3XFkI8MpygtRpzXrIlmWUBclP5A==",
      "license": "MIT"
    },
    "node_modules/@types/react": {
      "version": "19.1.9",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.9.tgz",
      "integrity": "sha512-WmdoynAX8Stew/36uTSVMcLJJ1KRh6L3IZRx1PZ7qJtBqT3dYTgyDTx8H1qoRghErydW7xw9mSJ3wS//tCRpFA==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "19.1.7",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-19.1.7.tgz",
      "integrity": "sha512-i5ZzwYpqjmrKenzkoLM2Ibzt6mAsM7pxB6BCIouEVVmgiqaMj1TjaK7hnA36hbW5aZv20kx7Lw6hWzPWg0Rurw==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^19.0.0"
      }
    },
    "node_modules/@types/use-sync-external-store": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/@types/use-sync-external-store/-/use-sync-external-store-0.0.6.tgz",
      "integrity": "sha512-zFDAD+tlpf2r4asuHEj0XH6pY6i0g5NeAHPn+15wk3BV6JA69eERFXC1gyGThDkVa1zCyKr5jox1+2LbV/AMLg==",
      "license": "MIT"
    },
    "node_modules/@types/ws": {
      "version": "8.18.1",
      "resolved": "https://registry.npmjs.org/@types/ws/-/ws-8.18.1.tgz",
      "integrity": "sha512-ThVF6DCVhA8kUGy+aazFQ4kXQ7E1Ty7A3ypFOe0IcJV8O/M511G99AW24irKrW56Wt44yG9+ij8FaqoBGkuBXg==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@typescript-eslint/eslint-plugin": {
      "version": "8.39.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-8.39.0.tgz",
      "integrity": "sha512-bhEz6OZeUR+O/6yx9Jk6ohX6H9JSFTaiY0v9/PuKT3oGK0rn0jNplLmyFUGV+a9gfYnVNwGDwS/UkLIuXNb2Rw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/regexpp": "^4.10.0",
        "@typescript-eslint/scope-manager": "8.39.0",
        "@typescript-eslint/type-utils": "8.39.0",
        "@typescript-eslint/utils": "8.39.0",
        "@typescript-eslint/visitor-keys": "8.39.0",
        "graphemer": "^1.4.0",
        "ignore": "^7.0.0",
        "natural-compare": "^1.4.0",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "@typescript-eslint/parser": "^8.39.0",
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/eslint-plugin/node_modules/ignore": {
      "version": "7.0.5",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-7.0.5.tgz",
      "integrity": "sha512-Hs59xBNfUIunMFgWAbGX5cq6893IbWg4KnrjbYwX3tx0ztorVgTDA6B2sxf8ejHJ4wz8BqGUMYlnzNBer5NvGg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/@typescript-eslint/parser": {
      "version": "8.39.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-8.39.0.tgz",
      "integrity": "sha512-g3WpVQHngx0aLXn6kfIYCZxM6rRJlWzEkVpqEFLT3SgEDsp9cpCbxxgwnE504q4H+ruSDh/VGS6nqZIDynP+vg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/scope-manager": "8.39.0",
        "@typescript-eslint/types": "8.39.0",
        "@typescript-eslint/typescript-estree": "8.39.0",
        "@typescript-eslint/visitor-keys": "8.39.0",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/project-service": {
      "version": "8.39.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/project-service/-/project-service-8.39.0.tgz",
      "integrity": "sha512-CTzJqaSq30V/Z2Og9jogzZt8lJRR5TKlAdXmWgdu4hgcC9Kww5flQ+xFvMxIBWVNdxJO7OifgdOK4PokMIWPew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/tsconfig-utils": "^8.39.0",
        "@typescript-eslint/types": "^8.39.0",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/scope-manager": {
      "version": "8.39.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-8.39.0.tgz",
      "integrity": "sha512-8QOzff9UKxOh6npZQ/4FQu4mjdOCGSdO3p44ww0hk8Vu+IGbg0tB/H1LcTARRDzGCC8pDGbh2rissBuuoPgH8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.39.0",
        "@typescript-eslint/visitor-keys": "8.39.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/tsconfig-utils": {
      "version": "8.39.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/tsconfig-utils/-/tsconfig-utils-8.39.0.tgz",
      "integrity": "sha512-Fd3/QjmFV2sKmvv3Mrj8r6N8CryYiCS8Wdb/6/rgOXAWGcFuc+VkQuG28uk/4kVNVZBQuuDHEDUpo/pQ32zsIQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/type-utils": {
      "version": "8.39.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-8.39.0.tgz",
      "integrity": "sha512-6B3z0c1DXVT2vYA9+z9axjtc09rqKUPRmijD5m9iv8iQpHBRYRMBcgxSiKTZKm6FwWw1/cI4v6em35OsKCiN5Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.39.0",
        "@typescript-eslint/typescript-estree": "8.39.0",
        "@typescript-eslint/utils": "8.39.0",
        "debug": "^4.3.4",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/types": {
      "version": "8.39.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-8.39.0.tgz",
      "integrity": "sha512-ArDdaOllnCj3yn/lzKn9s0pBQYmmyme/v1HbGIGB0GB/knFI3fWMHloC+oYTJW46tVbYnGKTMDK4ah1sC2v0Kg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree": {
      "version": "8.39.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-8.39.0.tgz",
      "integrity": "sha512-ndWdiflRMvfIgQRpckQQLiB5qAKQ7w++V4LlCHwp62eym1HLB/kw7D9f2e8ytONls/jt89TEasgvb+VwnRprsw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/project-service": "8.39.0",
        "@typescript-eslint/tsconfig-utils": "8.39.0",
        "@typescript-eslint/types": "8.39.0",
        "@typescript-eslint/visitor-keys": "8.39.0",
        "debug": "^4.3.4",
        "fast-glob": "^3.3.2",
        "is-glob": "^4.0.3",
        "minimatch": "^9.0.4",
        "semver": "^7.6.0",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/fast-glob": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.8"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/@typescript-eslint/utils": {
      "version": "8.39.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-8.39.0.tgz",
      "integrity": "sha512-4GVSvNA0Vx1Ktwvf4sFE+exxJ3QGUorQG1/A5mRfRNZtkBT2xrA/BCO2H0eALx/PnvCS6/vmYwRdDA41EoffkQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.7.0",
        "@typescript-eslint/scope-manager": "8.39.0",
        "@typescript-eslint/types": "8.39.0",
        "@typescript-eslint/typescript-estree": "8.39.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys": {
      "version": "8.39.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-8.39.0.tgz",
      "integrity": "sha512-ldgiJ+VAhQCfIjeOgu8Kj5nSxds0ktPOSO9p4+0VDH2R2pLvQraaM5Oen2d7NxzMCm+Sn/vJT+mv2H5u6b/3fA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.39.0",
        "eslint-visitor-keys": "^4.2.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@unrs/resolver-binding-win32-x64-msvc": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-win32-x64-msvc/-/resolver-binding-win32-x64-msvc-1.11.1.tgz",
      "integrity": "sha512-lrW200hZdbfRtztbygyaq/6jP6AKE8qQN2KvPcJ+x7wiD038YtnYtZ82IMNJ69GJibV7bwL3y9FgK+5w/pYt6g==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/aria-query": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/aria-query/-/aria-query-5.3.2.tgz",
      "integrity": "sha512-COROpnaoap1E2F000S62r6A60uHZnmlvomhfyT2DlTcrY1OrBKn2UhH7qn5wTC9zMvD0AY7csdPSNwKP+7WiQw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/array-buffer-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.2.tgz",
      "integrity": "sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "is-array-buffer": "^3.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array-includes": {
      "version": "3.1.9",
      "resolved": "https://registry.npmjs.org/array-includes/-/array-includes-3.1.9.tgz",
      "integrity": "sha512-FmeCCAenzH0KH381SPT5FZmiA/TmpndpcaShhfgEN9eCVjnFBqq3l1xrI42y8+PPLI6hypzou4GXw00WHmPBLQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.24.0",
        "es-object-atoms": "^1.1.1",
        "get-intrinsic": "^1.3.0",
        "is-string": "^1.1.1",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.findlast": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/array.prototype.findlast/-/array.prototype.findlast-1.2.5.tgz",
      "integrity": "sha512-CVvd6FHg1Z3POpBLxO6E6zr+rSKEQ9L6rZHAaY7lLfhKsWYUBBOuMs0e9o24oopj6H+geRCX0YJ+TJLBK2eHyQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.findlastindex": {
      "version": "1.2.6",
      "resolved": "https://registry.npmjs.org/array.prototype.findlastindex/-/array.prototype.findlastindex-1.2.6.tgz",
      "integrity": "sha512-F/TKATkzseUExPlfvmwQKGITM3DGTK+vkAsCZoDc5daVygbJBnjEUCbgkAvVFsgfXfX4YIqZ/27G3k3tdXrTxQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.9",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "es-shim-unscopables": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flat": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/array.prototype.flat/-/array.prototype.flat-1.3.3.tgz",
      "integrity": "sha512-rwG/ja1neyLqCuGZ5YYrznA62D4mZXg0i1cIskIUKSiqF3Cje9/wXAls9B9s1Wa2fomMsIv8czB8jZcPmxCXFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flatmap": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/array.prototype.flatmap/-/array.prototype.flatmap-1.3.3.tgz",
      "integrity": "sha512-Y7Wt51eKJSyi80hFrJCePGGNo5ktJCslFuboqJsbf57CCPcm5zztluPlc4/aD8sWsKvlwatezpV4U1efk8kpjg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.tosorted": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/array.prototype.tosorted/-/array.prototype.tosorted-1.1.4.tgz",
      "integrity": "sha512-p6Fx8B7b7ZhL/gmUsAy0D15WhvDccw3mnGNbZpi3pmeJdxtWsj2jEaI4Y6oo3XiHfzuSgPwKc04MYt6KgvC/wA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.3",
        "es-errors": "^1.3.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/arraybuffer.prototype.slice": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.4.tgz",
      "integrity": "sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.1",
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "is-array-buffer": "^3.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/ast-types-flow": {
      "version": "0.0.8",
      "resolved": "https://registry.npmjs.org/ast-types-flow/-/ast-types-flow-0.0.8.tgz",
      "integrity": "sha512-OH/2E5Fg20h2aPrbe+QL8JZQFko0YZaF+j4mnQ7BGhfavO7OpSLa8a0y9sBwomHdSbkhTS8TQNayBfnW5DwbvQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/async-function": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/async-function/-/async-function-1.0.0.tgz",
      "integrity": "sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/autoprefixer": {
      "version": "10.4.21",
      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.21.tgz",
      "integrity": "sha512-O+A6LWV5LDHSJD3LjHYoNi4VLsj/Whi7k6zG12xTYaU4cQ8oxQGckXNX8cRHK5yOZ/ppVHe0ZBXGzSV9jXdVbQ==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/autoprefixer"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.24.4",
        "caniuse-lite": "^1.0.30001702",
        "fraction.js": "^4.3.7",
        "normalize-range": "^0.1.2",
        "picocolors": "^1.1.1",
        "postcss-value-parser": "^4.2.0"
      },
      "bin": {
        "autoprefixer": "bin/autoprefixer"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/available-typed-arrays": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "possible-typed-array-names": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/axe-core": {
      "version": "4.10.3",
      "resolved": "https://registry.npmjs.org/axe-core/-/axe-core-4.10.3.tgz",
      "integrity": "sha512-Xm7bpRXnDSX2YE2YFfBk2FnF0ep6tmG7xPh8iHee8MIcrgq762Nkce856dYtJYLkuIoYZvGfTs/PbZhideTcEg==",
      "dev": true,
      "license": "MPL-2.0",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/axobject-query": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/axobject-query/-/axobject-query-4.1.0.tgz",
      "integrity": "sha512-qIj0G9wZbMGNLjLmg1PT6v2mE9AH2zlnADJD/2tC6E00hgmhUOfEB6greHPAfLRSufHqROIUTkw6E+M3lH0PTQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.25.1",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.1.tgz",
      "integrity": "sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001726",
        "electron-to-chromium": "^1.5.173",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.8.tgz",
      "integrity": "sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.0",
        "es-define-property": "^1.0.0",
        "get-intrinsic": "^1.2.4",
        "set-function-length": "^1.2.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001731",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001731.tgz",
      "integrity": "sha512-lDdp2/wrOmTRWuoB5DpfNkC0rJDU8DqRa6nYL6HK6sytw70QMopt/NIc/9SM7ylItlBWfACXk0tEn37UWM/+mg==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/chownr": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-3.0.0.tgz",
      "integrity": "sha512-+IxzY9BZOQd/XuYPRmrvEVjF/nqj5kgT4kEq7VofrDoM1MxoRjEWkrCC3EtLi59TVawxTAn+orJwFQcrqEN1+g==",
      "dev": true,
      "license": "BlueOak-1.0.0",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/client-only": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/client-only/-/client-only-0.0.1.tgz",
      "integrity": "sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==",
      "license": "MIT"
    },
    "node_modules/cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/clsx": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/color": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/color/-/color-4.2.3.tgz",
      "integrity": "sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "color-convert": "^2.0.1",
        "color-string": "^1.9.0"
      },
      "engines": {
        "node": ">=12.5.0"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "devOptional": true,
      "license": "MIT"
    },
    "node_modules/color-string": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz",
      "integrity": "sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "color-name": "^1.0.0",
        "simple-swizzle": "^0.2.2"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/concurrently": {
      "version": "9.2.0",
      "resolved": "https://registry.npmjs.org/concurrently/-/concurrently-9.2.0.tgz",
      "integrity": "sha512-IsB/fiXTupmagMW4MNp2lx2cdSN2FfZq78vF90LBB+zZHArbIQZjQtzXCiXnvTxCZSvXanTqFLWBjw2UkLx1SQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chalk": "^4.1.2",
        "lodash": "^4.17.21",
        "rxjs": "^7.8.1",
        "shell-quote": "^1.8.1",
        "supports-color": "^8.1.1",
        "tree-kill": "^1.2.2",
        "yargs": "^17.7.2"
      },
      "bin": {
        "conc": "dist/bin/concurrently.js",
        "concurrently": "dist/bin/concurrently.js"
      },
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/open-cli-tools/concurrently?sponsor=1"
      }
    },
    "node_modules/concurrently/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "devOptional": true,
      "license": "MIT"
    },
    "node_modules/d3-array": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/d3-array/-/d3-array-3.2.4.tgz",
      "integrity": "sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==",
      "license": "ISC",
      "dependencies": {
        "internmap": "1 - 2"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-color": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-color/-/d3-color-3.1.0.tgz",
      "integrity": "sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-ease": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-ease/-/d3-ease-3.0.1.tgz",
      "integrity": "sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-format": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-format/-/d3-format-3.1.0.tgz",
      "integrity": "sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-interpolate": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-interpolate/-/d3-interpolate-3.0.1.tgz",
      "integrity": "sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==",
      "license": "ISC",
      "dependencies": {
        "d3-color": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-path": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-path/-/d3-path-3.1.0.tgz",
      "integrity": "sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-scale": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/d3-scale/-/d3-scale-4.0.2.tgz",
      "integrity": "sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2.10.0 - 3",
        "d3-format": "1 - 3",
        "d3-interpolate": "1.2.0 - 3",
        "d3-time": "2.1.1 - 3",
        "d3-time-format": "2 - 4"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-shape": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/d3-shape/-/d3-shape-3.2.0.tgz",
      "integrity": "sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==",
      "license": "ISC",
      "dependencies": {
        "d3-path": "^3.1.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-time/-/d3-time-3.1.0.tgz",
      "integrity": "sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time-format": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/d3-time-format/-/d3-time-format-4.1.0.tgz",
      "integrity": "sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==",
      "license": "ISC",
      "dependencies": {
        "d3-time": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-timer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-timer/-/d3-timer-3.0.1.tgz",
      "integrity": "sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/damerau-levenshtein": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/damerau-levenshtein/-/damerau-levenshtein-1.0.8.tgz",
      "integrity": "sha512-sdQSFB7+llfUcQHUQO3+B8ERRj0Oa4w9POWMI/puGtuf7gFywGmkaLCElnudfTiKZV+NvHqL0ifzdrI8Ro7ESA==",
      "dev": true,
      "license": "BSD-2-Clause"
    },
    "node_modules/data-view-buffer": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-buffer/-/data-view-buffer-1.0.2.tgz",
      "integrity": "sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/data-view-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-byte-length/-/data-view-byte-length-1.0.2.tgz",
      "integrity": "sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/inspect-js"
      }
    },
    "node_modules/data-view-byte-offset": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/data-view-byte-offset/-/data-view-byte-offset-1.0.1.tgz",
      "integrity": "sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/date-fns": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-4.1.0.tgz",
      "integrity": "sha512-Ukq0owbQXxa/U3EGtsdVBkR1w7KOQ5gIBqdH2hkvknzZPYvBxb/aa6E8L7tmjFtkwZBu3UXBbjIgPo/Ez4xaNg==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/kossnocorp"
      }
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/decimal.js-light": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg==",
      "license": "MIT"
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/define-properties": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.0.1",
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/detect-libc": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz",
      "integrity": "sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==",
      "devOptional": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/doctrine": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz",
      "integrity": "sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.198",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.198.tgz",
      "integrity": "sha512-G5COfnp3w+ydVu80yprgWSfmfQaYRh9DOxfhAxstLyetKaLyl55QrNjx8C38Pc/C+RaDmb1M0Lk8wPEMQ+bGgQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/emoji-regex": {
      "version": "9.2.2",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/enhanced-resolve": {
      "version": "5.18.3",
      "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.18.3.tgz",
      "integrity": "sha512-d4lC8xfavMeBjzGr2vECC3fsGXziXZQyJxD868h2M/mBI3PwAuODxAkLkq5HYuvrPYcUtiLzsTo8U3PgX3Ocww==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.4",
        "tapable": "^2.2.0"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/es-abstract": {
      "version": "1.24.0",
      "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.24.0.tgz",
      "integrity": "sha512-WSzPgsdLtTcQwm4CROfS5ju2Wa1QQcVeT37jFjYzdFz1r9ahadC8B8/a4qxJxM+09F18iumCdRmlr96ZYkQvEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.2",
        "arraybuffer.prototype.slice": "^1.0.4",
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "data-view-buffer": "^1.0.2",
        "data-view-byte-length": "^1.0.2",
        "data-view-byte-offset": "^1.0.1",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "es-set-tostringtag": "^2.1.0",
        "es-to-primitive": "^1.3.0",
        "function.prototype.name": "^1.1.8",
        "get-intrinsic": "^1.3.0",
        "get-proto": "^1.0.1",
        "get-symbol-description": "^1.1.0",
        "globalthis": "^1.0.4",
        "gopd": "^1.2.0",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "internal-slot": "^1.1.0",
        "is-array-buffer": "^3.0.5",
        "is-callable": "^1.2.7",
        "is-data-view": "^1.0.2",
        "is-negative-zero": "^2.0.3",
        "is-regex": "^1.2.1",
        "is-set": "^2.0.3",
        "is-shared-array-buffer": "^1.0.4",
        "is-string": "^1.1.1",
        "is-typed-array": "^1.1.15",
        "is-weakref": "^1.1.1",
        "math-intrinsics": "^1.1.0",
        "object-inspect": "^1.13.4",
        "object-keys": "^1.1.1",
        "object.assign": "^4.1.7",
        "own-keys": "^1.0.1",
        "regexp.prototype.flags": "^1.5.4",
        "safe-array-concat": "^1.1.3",
        "safe-push-apply": "^1.0.0",
        "safe-regex-test": "^1.1.0",
        "set-proto": "^1.0.0",
        "stop-iteration-iterator": "^1.1.0",
        "string.prototype.trim": "^1.2.10",
        "string.prototype.trimend": "^1.0.9",
        "string.prototype.trimstart": "^1.0.8",
        "typed-array-buffer": "^1.0.3",
        "typed-array-byte-length": "^1.0.3",
        "typed-array-byte-offset": "^1.0.4",
        "typed-array-length": "^1.0.7",
        "unbox-primitive": "^1.1.0",
        "which-typed-array": "^1.1.19"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-iterator-helpers": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/es-iterator-helpers/-/es-iterator-helpers-1.2.1.tgz",
      "integrity": "sha512-uDn+FE1yrDzyC0pCo961B2IHbdM8y/ACZsKD4dG6WqrjV53BADjwa7D+1aom2rsNVfLyDgU/eigvlJGJ08OQ4w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.6",
        "es-errors": "^1.3.0",
        "es-set-tostringtag": "^2.0.3",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.6",
        "globalthis": "^1.0.4",
        "gopd": "^1.2.0",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.2.0",
        "has-symbols": "^1.1.0",
        "internal-slot": "^1.1.0",
        "iterator.prototype": "^1.1.4",
        "safe-array-concat": "^1.1.3"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-shim-unscopables": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/es-shim-unscopables/-/es-shim-unscopables-1.1.0.tgz",
      "integrity": "sha512-d9T8ucsEhh8Bi1woXCf+TIKDIROLG5WCkxg8geBCbvk22kzwC5G2OnXVMO6FUsvQlgUUXQ2itephWDLqDzbeCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-to-primitive": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.3.0.tgz",
      "integrity": "sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7",
        "is-date-object": "^1.0.5",
        "is-symbol": "^1.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/es-toolkit": {
      "version": "1.39.10",
      "resolved": "https://registry.npmjs.org/es-toolkit/-/es-toolkit-1.39.10.tgz",
      "integrity": "sha512-E0iGnTtbDhkeczB0T+mxmoVlT4YNweEKBLq7oaU4p11mecdsZpNWOglI4895Vh4usbQ+LsJiuLuI2L0Vdmfm2w==",
      "license": "MIT",
      "workspaces": [
        "docs",
        "benchmarks"
      ]
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "9.32.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.32.0.tgz",
      "integrity": "sha512-LSehfdpgMeWcTZkWZVIJl+tkZ2nuSkyyB9C27MZqFWXuph7DvaowgcTvKqxvpLW1JZIk8PN7hFY3Rj9LQ7m7lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.12.1",
        "@eslint/config-array": "^0.21.0",
        "@eslint/config-helpers": "^0.3.0",
        "@eslint/core": "^0.15.0",
        "@eslint/eslintrc": "^3.3.1",
        "@eslint/js": "9.32.0",
        "@eslint/plugin-kit": "^0.3.4",
        "@humanfs/node": "^0.16.6",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@humanwhocodes/retry": "^0.4.2",
        "@types/estree": "^1.0.6",
        "@types/json-schema": "^7.0.15",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.6",
        "debug": "^4.3.2",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^8.4.0",
        "eslint-visitor-keys": "^4.2.1",
        "espree": "^10.4.0",
        "esquery": "^1.5.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^8.0.0",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      },
      "peerDependencies": {
        "jiti": "*"
      },
      "peerDependenciesMeta": {
        "jiti": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-config-next": {
      "version": "15.4.6",
      "resolved": "https://registry.npmjs.org/eslint-config-next/-/eslint-config-next-15.4.6.tgz",
      "integrity": "sha512-4uznvw5DlTTjrZgYZjMciSdDDMO2SWIuQgUNaFyC2O3Zw3Z91XeIejeVa439yRq2CnJb/KEvE4U2AeN/66FpUA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@next/eslint-plugin-next": "15.4.6",
        "@rushstack/eslint-patch": "^1.10.3",
        "@typescript-eslint/eslint-plugin": "^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0",
        "@typescript-eslint/parser": "^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0",
        "eslint-import-resolver-node": "^0.3.6",
        "eslint-import-resolver-typescript": "^3.5.2",
        "eslint-plugin-import": "^2.31.0",
        "eslint-plugin-jsx-a11y": "^6.10.0",
        "eslint-plugin-react": "^7.37.0",
        "eslint-plugin-react-hooks": "^5.0.0"
      },
      "peerDependencies": {
        "eslint": "^7.23.0 || ^8.0.0 || ^9.0.0",
        "typescript": ">=3.3.1"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-import-resolver-node": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/eslint-import-resolver-node/-/eslint-import-resolver-node-0.3.9.tgz",
      "integrity": "sha512-WFj2isz22JahUv+B788TlO3N6zL3nNJGU8CcZbPZvVEkBPaJdCV4vy5wyghty5ROFbCRnm132v8BScu5/1BQ8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^3.2.7",
        "is-core-module": "^2.13.0",
        "resolve": "^1.22.4"
      }
    },
    "node_modules/eslint-import-resolver-node/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-import-resolver-typescript": {
      "version": "3.10.1",
      "resolved": "https://registry.npmjs.org/eslint-import-resolver-typescript/-/eslint-import-resolver-typescript-3.10.1.tgz",
      "integrity": "sha512-A1rHYb06zjMGAxdLSkN2fXPBwuSaQ0iO5M/hdyS0Ajj1VBaRp0sPD3dn1FhME3c/JluGFbwSxyCfqdSbtQLAHQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "@nolyfill/is-core-module": "1.0.39",
        "debug": "^4.4.0",
        "get-tsconfig": "^4.10.0",
        "is-bun-module": "^2.0.0",
        "stable-hash": "^0.0.5",
        "tinyglobby": "^0.2.13",
        "unrs-resolver": "^1.6.2"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint-import-resolver-typescript"
      },
      "peerDependencies": {
        "eslint": "*",
        "eslint-plugin-import": "*",
        "eslint-plugin-import-x": "*"
      },
      "peerDependenciesMeta": {
        "eslint-plugin-import": {
          "optional": true
        },
        "eslint-plugin-import-x": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-module-utils": {
      "version": "2.12.1",
      "resolved": "https://registry.npmjs.org/eslint-module-utils/-/eslint-module-utils-2.12.1.tgz",
      "integrity": "sha512-L8jSWTze7K2mTg0vos/RuLRS5soomksDPoJLXIslC7c8Wmut3bx7CPpJijDcBZtxQ5lrbUdM+s0OlNbz0DCDNw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^3.2.7"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependenciesMeta": {
        "eslint": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-module-utils/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-plugin-import": {
      "version": "2.32.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-import/-/eslint-plugin-import-2.32.0.tgz",
      "integrity": "sha512-whOE1HFo/qJDyX4SnXzP4N6zOWn79WhnCUY/iDR0mPfQZO8wcYE4JClzI2oZrhBnnMUCBCHZhO6VQyoBU95mZA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@rtsao/scc": "^1.1.0",
        "array-includes": "^3.1.9",
        "array.prototype.findlastindex": "^1.2.6",
        "array.prototype.flat": "^1.3.3",
        "array.prototype.flatmap": "^1.3.3",
        "debug": "^3.2.7",
        "doctrine": "^2.1.0",
        "eslint-import-resolver-node": "^0.3.9",
        "eslint-module-utils": "^2.12.1",
        "hasown": "^2.0.2",
        "is-core-module": "^2.16.1",
        "is-glob": "^4.0.3",
        "minimatch": "^3.1.2",
        "object.fromentries": "^2.0.8",
        "object.groupby": "^1.0.3",
        "object.values": "^1.2.1",
        "semver": "^6.3.1",
        "string.prototype.trimend": "^1.0.9",
        "tsconfig-paths": "^3.15.0"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependencies": {
        "eslint": "^2 || ^3 || ^4 || ^5 || ^6 || ^7.2.0 || ^8 || ^9"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/eslint-plugin-jsx-a11y": {
      "version": "6.10.2",
      "resolved": "https://registry.npmjs.org/eslint-plugin-jsx-a11y/-/eslint-plugin-jsx-a11y-6.10.2.tgz",
      "integrity": "sha512-scB3nz4WmG75pV8+3eRUQOHZlNSUhFNq37xnpgRkCCELU3XMvXAxLk1eqWWyE22Ki4Q01Fnsw9BA3cJHDPgn2Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "aria-query": "^5.3.2",
        "array-includes": "^3.1.8",
        "array.prototype.flatmap": "^1.3.2",
        "ast-types-flow": "^0.0.8",
        "axe-core": "^4.10.0",
        "axobject-query": "^4.1.0",
        "damerau-levenshtein": "^1.0.8",
        "emoji-regex": "^9.2.2",
        "hasown": "^2.0.2",
        "jsx-ast-utils": "^3.3.5",
        "language-tags": "^1.0.9",
        "minimatch": "^3.1.2",
        "object.fromentries": "^2.0.8",
        "safe-regex-test": "^1.0.3",
        "string.prototype.includes": "^2.0.1"
      },
      "engines": {
        "node": ">=4.0"
      },
      "peerDependencies": {
        "eslint": "^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9"
      }
    },
    "node_modules/eslint-plugin-react": {
      "version": "7.37.5",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react/-/eslint-plugin-react-7.37.5.tgz",
      "integrity": "sha512-Qteup0SqU15kdocexFNAJMvCJEfa2xUKNV4CC1xsVMrIIqEy3SQ/rqyxCWNzfrd3/ldy6HMlD2e0JDVpDg2qIA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.8",
        "array.prototype.findlast": "^1.2.5",
        "array.prototype.flatmap": "^1.3.3",
        "array.prototype.tosorted": "^1.1.4",
        "doctrine": "^2.1.0",
        "es-iterator-helpers": "^1.2.1",
        "estraverse": "^5.3.0",
        "hasown": "^2.0.2",
        "jsx-ast-utils": "^2.4.1 || ^3.0.0",
        "minimatch": "^3.1.2",
        "object.entries": "^1.1.9",
        "object.fromentries": "^2.0.8",
        "object.values": "^1.2.1",
        "prop-types": "^15.8.1",
        "resolve": "^2.0.0-next.5",
        "semver": "^6.3.1",
        "string.prototype.matchall": "^4.0.12",
        "string.prototype.repeat": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependencies": {
        "eslint": "^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9.7"
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-5.2.0.tgz",
      "integrity": "sha512-+f15FfK64YQwZdJNELETdn5ibXEUQmW1DZL6KXhNnc2heoy/sg9VJJeT7n8TlMWouzWqSWavFkIhHyIbIAEapg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0"
      }
    },
    "node_modules/eslint-plugin-react/node_modules/resolve": {
      "version": "2.0.0-next.5",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-2.0.0-next.5.tgz",
      "integrity": "sha512-U7WjGVG9sH8tvjW5SmGbQuui75FiyjAX72HX15DwBBwF9dNiQZRQAg9nnPhYy+TUnE0+VcrttuvNI8oSxZcocA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.13.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/eslint-plugin-react/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/eslint-scope": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.4.0.tgz",
      "integrity": "sha512-sNXOfKCn74rt8RICKMvJS7XKV/Xk9kA7DyJr8mJik3S7Cwgy3qlkkmyS2uQB3jiJg6VNdZd/pDBJu0nvG2NlTg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.1.tgz",
      "integrity": "sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree": {
      "version": "10.4.0",
      "resolved": "https://registry.npmjs.org/espree/-/espree-10.4.0.tgz",
      "integrity": "sha512-j6PAQ2uUr79PZhBjP5C5fhl8e39FmRnOjsD5lGnWrFU8i2G776tBK7+nP8KuQUTTyAZUwfQqXAgrVH5MbH9CYQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.15.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^4.2.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eventemitter3": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-5.0.1.tgz",
      "integrity": "sha512-GWkBvjiSZK87ELrYOSESUYeVIc9mvLLf/nXalMOS5dYrgZq9o5OVkbZAVM06CVxYsCwH9BDZFPlQTlPA1j4ahA==",
      "license": "MIT"
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-glob": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.1.tgz",
      "integrity": "sha512-kNFPyjhh5cKjrUltxs+wFx+ZkbRaxxmZ+X0ZU31SOsxCEtP9VPgtq2teZw1DebupL5GmDaNQ6yKMMVcM41iqDg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.4"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fast-glob/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fastq": {
      "version": "1.19.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/file-entry-cache": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^4.0.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.4"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/for-each": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.5.tgz",
      "integrity": "sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/fraction.js": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.3.7.tgz",
      "integrity": "sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "*"
      },
      "funding": {
        "type": "patreon",
        "url": "https://github.com/sponsors/rawify"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/function.prototype.name": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/function.prototype.name/-/function.prototype.name-1.1.8.tgz",
      "integrity": "sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "functions-have-names": "^1.2.3",
        "hasown": "^2.0.2",
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/functions-have-names": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
      "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/get-symbol-description": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/get-symbol-description/-/get-symbol-description-1.1.0.tgz",
      "integrity": "sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-tsconfig": {
      "version": "4.10.1",
      "resolved": "https://registry.npmjs.org/get-tsconfig/-/get-tsconfig-4.10.1.tgz",
      "integrity": "sha512-auHyJ4AgMz7vgS8Hp3N6HXSmlMdUyhSUrfBF16w153rxtLIEOE+HGqaBppczZvnHLqQJfiHotCYpNhl0lUROFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "resolve-pkg-maps": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/privatenumber/get-tsconfig?sponsor=1"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/globals": {
      "version": "14.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/globalthis": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.4.tgz",
      "integrity": "sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.2.1",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/graphemer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/has-bigints": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.1.0.tgz",
      "integrity": "sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-proto": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.2.0.tgz",
      "integrity": "sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/immer": {
      "version": "10.1.1",
      "resolved": "https://registry.npmjs.org/immer/-/immer-10.1.1.tgz",
      "integrity": "sha512-s2MPrmjovJcoMaHtx6K11Ra7oD05NT97w1IC5zpMkT6Atjr7H8LjaDd81iIxUYpMKSRRNMJE703M1Fhr/TctHw==",
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/immer"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/internal-slot": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.1.0.tgz",
      "integrity": "sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "hasown": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/internmap": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/internmap/-/internmap-2.0.3.tgz",
      "integrity": "sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/is-array-buffer": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.5.tgz",
      "integrity": "sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz",
      "integrity": "sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/is-async-function": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-async-function/-/is-async-function-2.1.1.tgz",
      "integrity": "sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "async-function": "^1.0.0",
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.1",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-bigint": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.1.0.tgz",
      "integrity": "sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-bigints": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-boolean-object": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.2.2.tgz",
      "integrity": "sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-bun-module": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-bun-module/-/is-bun-module-2.0.0.tgz",
      "integrity": "sha512-gNCGbnnnnFAUGKeZ9PdbyeGYJqewpmc2aKHUEMO5nQPWU9lOmv7jcmQIv+qHD8fXW6W7qfuCwX4rY9LNRjXrkQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "semver": "^7.7.1"
      }
    },
    "node_modules/is-callable": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.16.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-data-view": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-data-view/-/is-data-view-1.0.2.tgz",
      "integrity": "sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "is-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-date-object": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.1.0.tgz",
      "integrity": "sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-finalizationregistry": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-finalizationregistry/-/is-finalizationregistry-1.1.1.tgz",
      "integrity": "sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-generator-function": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-function/-/is-generator-function-1.1.0.tgz",
      "integrity": "sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.0",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-map": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-map/-/is-map-2.0.3.tgz",
      "integrity": "sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-negative-zero": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-negative-zero/-/is-negative-zero-2.0.3.tgz",
      "integrity": "sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-number-object": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.1.1.tgz",
      "integrity": "sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-regex": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.2.1.tgz",
      "integrity": "sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-set": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-set/-/is-set-2.0.3.tgz",
      "integrity": "sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-shared-array-buffer": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.4.tgz",
      "integrity": "sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-string": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.1.1.tgz",
      "integrity": "sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-symbol": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.1.1.tgz",
      "integrity": "sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-symbols": "^1.1.0",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typed-array": {
      "version": "1.1.15",
      "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.15.tgz",
      "integrity": "sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakmap": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/is-weakmap/-/is-weakmap-2.0.2.tgz",
      "integrity": "sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakref": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-weakref/-/is-weakref-1.1.1.tgz",
      "integrity": "sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakset": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/is-weakset/-/is-weakset-2.0.4.tgz",
      "integrity": "sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/iterator.prototype": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/iterator.prototype/-/iterator.prototype-1.1.5.tgz",
      "integrity": "sha512-H0dkQoCa3b2VEeKQBOxFph+JAbcrQdE7KC0UkqwpLmv2EC4P41QXP+rqo9wYodACiG5/WM5s9oDApTU8utwj9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.6",
        "get-proto": "^1.0.0",
        "has-symbols": "^1.1.0",
        "set-function-name": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/jiti": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/jiti/-/jiti-2.5.1.tgz",
      "integrity": "sha512-twQoecYPiVA5K/h6SxtORw/Bs3ar+mLUtoPSc7iMXzQzK8d7eJ/R09wmTwAjiamETn1cXYPGfNnu7DMoHgu12w==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jiti": "lib/jiti-cli.mjs"
      }
    },
    "node_modules/jose": {
      "version": "4.15.9",
      "resolved": "https://registry.npmjs.org/jose/-/jose-4.15.9.tgz",
      "integrity": "sha512-1vUQX+IdDMVPj4k8kOxgUqlcK518yluMuGZwqlr44FS1ppZB/5GWh4rZG89erpOBOJjU/OBsnCVFfapsRz6nEA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/panva"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/json5/-/json5-1.0.2.tgz",
      "integrity": "sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "minimist": "^1.2.0"
      },
      "bin": {
        "json5": "lib/cli.js"
      }
    },
    "node_modules/jsx-ast-utils": {
      "version": "3.3.5",
      "resolved": "https://registry.npmjs.org/jsx-ast-utils/-/jsx-ast-utils-3.3.5.tgz",
      "integrity": "sha512-ZZow9HBI5O6EPgSJLUb8n2NKgmVWTwCvHGwFuJlMjvLFqlGG6pjirPhtdsseaLZjSibD8eegzmYpUZwoIlj2cQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.6",
        "array.prototype.flat": "^1.3.1",
        "object.assign": "^4.1.4",
        "object.values": "^1.1.6"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/language-subtag-registry": {
      "version": "0.3.23",
      "resolved": "https://registry.npmjs.org/language-subtag-registry/-/language-subtag-registry-0.3.23.tgz",
      "integrity": "sha512-0K65Lea881pHotoGEa5gDlMxt3pctLi2RplBb7Ezh4rRdLEOtgi7n4EwK9lamnUCkKBqaeKRVebTq6BAxSkpXQ==",
      "dev": true,
      "license": "CC0-1.0"
    },
    "node_modules/language-tags": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/language-tags/-/language-tags-1.0.9.tgz",
      "integrity": "sha512-MbjN408fEndfiQXbFQ1vnd+1NoLDsnQW41410oQBXiyXDMYH5z505juWa4KUE1LqxRC7DgOgZDbKLxHIwm27hA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "language-subtag-registry": "^0.3.20"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/lightningcss": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss/-/lightningcss-1.30.1.tgz",
      "integrity": "sha512-xi6IyHML+c9+Q3W0S4fCQJOym42pyurFiJUHEcEyHS0CeKzia4yZDEsLlqOFykxOdHpNy0NmvVO31vcSqAxJCg==",
      "dev": true,
      "license": "MPL-2.0",
      "dependencies": {
        "detect-libc": "^2.0.3"
      },
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      },
      "optionalDependencies": {
        "lightningcss-darwin-arm64": "1.30.1",
        "lightningcss-darwin-x64": "1.30.1",
        "lightningcss-freebsd-x64": "1.30.1",
        "lightningcss-linux-arm-gnueabihf": "1.30.1",
        "lightningcss-linux-arm64-gnu": "1.30.1",
        "lightningcss-linux-arm64-musl": "1.30.1",
        "lightningcss-linux-x64-gnu": "1.30.1",
        "lightningcss-linux-x64-musl": "1.30.1",
        "lightningcss-win32-arm64-msvc": "1.30.1",
        "lightningcss-win32-x64-msvc": "1.30.1"
      }
    },
    "node_modules/lightningcss-win32-x64-msvc": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss-win32-x64-msvc/-/lightningcss-win32-x64-msvc-1.30.1.tgz",
      "integrity": "sha512-PVqXh48wh4T53F/1CCu8PIPCxLzWyCnn/9T5W1Jpmdy5h9Cwd+0YQS6/LwhHXSafuc61/xg9Lv5OrCby6a++jg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/magic-string": {
      "version": "0.30.17",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.17.tgz",
      "integrity": "sha512-sNPKHvyjVf7gyjwS4xGTaW/mCnF8wnjtifKBEhxfZ7E/S8tQ0rssrwGNn6q8JH/ohItJfSQp9mBtQYuTlH5QnA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/minipass": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/minizlib": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-3.0.2.tgz",
      "integrity": "sha512-oG62iEk+CYt5Xj2YqI5Xi9xWUeZhDI8jjQmC5oThVH5JGCTgIjr7ciJDzC7MBzYd//WvR1OTmP5Q38Q8ShQtVA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "minipass": "^7.1.2"
      },
      "engines": {
        "node": ">= 18"
      }
    },
    "node_modules/mkdirp": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-3.0.1.tgz",
      "integrity": "sha512-+NsyUUAZDmo6YVHzL/stxSu3t9YS1iljliy3BSDrXJ/dkn1KYdmtZODGGjLcc9XLgVVpH4KshHB8XmZgMhaBXg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "mkdirp": "dist/cjs/src/bin.js"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/napi-postinstall": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/napi-postinstall/-/napi-postinstall-0.3.2.tgz",
      "integrity": "sha512-tWVJxJHmBWLy69PvO96TZMZDrzmw5KeiZBz3RHmiM2XZ9grBJ2WgMAFVVg25nqp3ZjTFUs2Ftw1JhscL3Teliw==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "napi-postinstall": "lib/cli.js"
      },
      "engines": {
        "node": "^12.20.0 || ^14.18.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/napi-postinstall"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/next": {
      "version": "15.4.6",
      "resolved": "https://registry.npmjs.org/next/-/next-15.4.6.tgz",
      "integrity": "sha512-us++E/Q80/8+UekzB3SAGs71AlLDsadpFMXVNM/uQ0BMwsh9m3mr0UNQIfjKed8vpWXsASe+Qifrnu1oLIcKEQ==",
      "license": "MIT",
      "dependencies": {
        "@next/env": "15.4.6",
        "@swc/helpers": "0.5.15",
        "caniuse-lite": "^1.0.30001579",
        "postcss": "8.4.31",
        "styled-jsx": "5.1.6"
      },
      "bin": {
        "next": "dist/bin/next"
      },
      "engines": {
        "node": "^18.18.0 || ^19.8.0 || >= 20.0.0"
      },
      "optionalDependencies": {
        "@next/swc-darwin-arm64": "15.4.6",
        "@next/swc-darwin-x64": "15.4.6",
        "@next/swc-linux-arm64-gnu": "15.4.6",
        "@next/swc-linux-arm64-musl": "15.4.6",
        "@next/swc-linux-x64-gnu": "15.4.6",
        "@next/swc-linux-x64-musl": "15.4.6",
        "@next/swc-win32-arm64-msvc": "15.4.6",
        "@next/swc-win32-x64-msvc": "15.4.6",
        "sharp": "^0.34.3"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.1.0",
        "@playwright/test": "^1.51.1",
        "babel-plugin-react-compiler": "*",
        "react": "^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0",
        "react-dom": "^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0",
        "sass": "^1.3.0"
      },
      "peerDependenciesMeta": {
        "@opentelemetry/api": {
          "optional": true
        },
        "@playwright/test": {
          "optional": true
        },
        "babel-plugin-react-compiler": {
          "optional": true
        },
        "sass": {
          "optional": true
        }
      }
    },
    "node_modules/next/node_modules/postcss": {
      "version": "8.4.31",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.31.tgz",
      "integrity": "sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.6",
        "picocolors": "^1.0.0",
        "source-map-js": "^1.0.2"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/normalize-range": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
      "integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.assign": {
      "version": "4.1.7",
      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.7.tgz",
      "integrity": "sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0",
        "has-symbols": "^1.1.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.entries": {
      "version": "1.1.9",
      "resolved": "https://registry.npmjs.org/object.entries/-/object.entries-1.1.9.tgz",
      "integrity": "sha512-8u/hfXFRBD1O0hPUjioLhoWFHRmt6tKA4/vZPyckBr18l1KE9uHrFaFaUi8MDRTpi4uak2goyPTSNJLXX2k2Hw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.fromentries": {
      "version": "2.0.8",
      "resolved": "https://registry.npmjs.org/object.fromentries/-/object.fromentries-2.0.8.tgz",
      "integrity": "sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.groupby": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/object.groupby/-/object.groupby-1.0.3.tgz",
      "integrity": "sha512-+Lhy3TQTuzXI5hevh8sBGqbmurHbbIjAi0Z4S63nthVLmLxfbj4T54a4CfZrXIrt9iP4mVAPYMo/v99taj3wjQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.values": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/object.values/-/object.values-1.2.1.tgz",
      "integrity": "sha512-gXah6aZrcUxjWg2zR2MwouP2eHlCBzdV4pygudehaKXSGW4v2AsRQUK+lwwXhii6KFZcunEnmSUoYp5CXibxtA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/own-keys": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/own-keys/-/own-keys-1.0.1.tgz",
      "integrity": "sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.2.6",
        "object-keys": "^1.1.1",
        "safe-push-apply": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/possible-typed-array-names": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.1.0.tgz",
      "integrity": "sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/postcss": {
      "version": "8.5.6",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.11",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/postcss-value-parser": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/prop-types": {
      "version": "15.8.1",
      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.4.0",
        "object-assign": "^4.1.1",
        "react-is": "^16.13.1"
      }
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/react": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react/-/react-19.1.0.tgz",
      "integrity": "sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.1.0.tgz",
      "integrity": "sha512-Xs1hdnE+DyKgeHJeJznQmYMIBG3TKIHJJT95Q58nHLSrElKlGQqDTR2HQ9fx5CN/Gk6Vh/kupBTDLU11/nDk/g==",
      "license": "MIT",
      "dependencies": {
        "scheduler": "^0.26.0"
      },
      "peerDependencies": {
        "react": "^19.1.0"
      }
    },
    "node_modules/react-hook-form": {
      "version": "7.62.0",
      "resolved": "https://registry.npmjs.org/react-hook-form/-/react-hook-form-7.62.0.tgz",
      "integrity": "sha512-7KWFejc98xqG/F4bAxpL41NB3o1nnvQO1RWZT3TqRZYL8RryQETGfEdVnJN2fy1crCiBLLjkRBVK05j24FxJGA==",
      "license": "MIT",
      "engines": {
        "node": ">=18.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/react-hook-form"
      },
      "peerDependencies": {
        "react": "^16.8.0 || ^17 || ^18 || ^19"
      }
    },
    "node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
      "license": "MIT"
    },
    "node_modules/react-redux": {
      "version": "9.2.0",
      "resolved": "https://registry.npmjs.org/react-redux/-/react-redux-9.2.0.tgz",
      "integrity": "sha512-ROY9fvHhwOD9ySfrF0wmvu//bKCQ6AeZZq1nJNtbDC+kk5DuSuNX/n6YWYF/SYy7bSba4D4FSz8DJeKY/S/r+g==",
      "license": "MIT",
      "dependencies": {
        "@types/use-sync-external-store": "^0.0.6",
        "use-sync-external-store": "^1.4.0"
      },
      "peerDependencies": {
        "@types/react": "^18.2.25 || ^19",
        "react": "^18.0 || ^19",
        "redux": "^5.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "redux": {
          "optional": true
        }
      }
    },
    "node_modules/recharts": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/recharts/-/recharts-3.1.2.tgz",
      "integrity": "sha512-vhNbYwaxNbk/IATK0Ki29k3qvTkGqwvCgyQAQ9MavvvBwjvKnMTswdbklJpcOAoMPN/qxF3Lyqob0zO+ZXkZ4g==",
      "license": "MIT",
      "dependencies": {
        "@reduxjs/toolkit": "1.x.x || 2.x.x",
        "clsx": "^2.1.1",
        "decimal.js-light": "^2.5.1",
        "es-toolkit": "^1.39.3",
        "eventemitter3": "^5.0.1",
        "immer": "^10.1.1",
        "react-redux": "8.x.x || 9.x.x",
        "reselect": "5.1.1",
        "tiny-invariant": "^1.3.3",
        "use-sync-external-store": "^1.2.2",
        "victory-vendor": "^37.0.2"
      },
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-is": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/redux": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/redux/-/redux-5.0.1.tgz",
      "integrity": "sha512-M9/ELqF6fy8FwmkpnF0S3YKOqMyoWJ4+CS5Efg2ct3oY9daQvd/Pc71FpGZsVsbl3Cpb+IIcjBDUnnyBdQbq4w==",
      "license": "MIT"
    },
    "node_modules/redux-thunk": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/redux-thunk/-/redux-thunk-3.1.0.tgz",
      "integrity": "sha512-NW2r5T6ksUKXCabzhL9z+h206HQw/NJkcLm1GPImRQ8IzfXwRGqjVhKJGauHirT0DAuyy6hjdnMZaRoAcy0Klw==",
      "license": "MIT",
      "peerDependencies": {
        "redux": "^5.0.0"
      }
    },
    "node_modules/reflect.getprototypeof": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/reflect.getprototypeof/-/reflect.getprototypeof-1.0.10.tgz",
      "integrity": "sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.9",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.7",
        "get-proto": "^1.0.1",
        "which-builtin-type": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/regexp.prototype.flags": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.4.tgz",
      "integrity": "sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-errors": "^1.3.0",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "set-function-name": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/reselect": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/reselect/-/reselect-5.1.1.tgz",
      "integrity": "sha512-K/BG6eIky/SBpzfHZv/dd+9JBFiS4SWV7FIujVyJRux6e45+73RaUHXLmIR1f7WOMaQ0U1km6qwklRQxpJJY0w==",
      "license": "MIT"
    },
    "node_modules/resolve": {
      "version": "1.22.10",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.16.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/resolve-pkg-maps": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/resolve-pkg-maps/-/resolve-pkg-maps-1.0.0.tgz",
      "integrity": "sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/privatenumber/resolve-pkg-maps?sponsor=1"
      }
    },
    "node_modules/reusify": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/rxjs": {
      "version": "7.8.2",
      "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-7.8.2.tgz",
      "integrity": "sha512-dhKf903U/PQZY6boNNtAGdWbG85WAbjT/1xYoZIC7FAY0yWapOBQVsVrDl58W86//e1VpMNBtRV4MaXfdMySFA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.1.0"
      }
    },
    "node_modules/safe-array-concat": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/safe-array-concat/-/safe-array-concat-1.1.3.tgz",
      "integrity": "sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "has-symbols": "^1.1.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">=0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-push-apply": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/safe-push-apply/-/safe-push-apply-1.0.0.tgz",
      "integrity": "sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-regex-test": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.1.0.tgz",
      "integrity": "sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-regex": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/scheduler": {
      "version": "0.26.0",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.26.0.tgz",
      "integrity": "sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "devOptional": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/set-cookie-parser": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/set-cookie-parser/-/set-cookie-parser-2.7.1.tgz",
      "integrity": "sha512-IOc8uWeOZgnb3ptbCURJWNjWUPcO3ZnTTdzsurqERrP6nPyv+paC55vJM0LpOlT2ne+Ix+9+CRG1MNLlyZ4GjQ==",
      "license": "MIT"
    },
    "node_modules/set-function-length": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-function-name": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.2.tgz",
      "integrity": "sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "functions-have-names": "^1.2.3",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-proto": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/set-proto/-/set-proto-1.0.0.tgz",
      "integrity": "sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/sharp": {
      "version": "0.34.3",
      "resolved": "https://registry.npmjs.org/sharp/-/sharp-0.34.3.tgz",
      "integrity": "sha512-eX2IQ6nFohW4DbvHIOLRB3MHFpYqaqvXd3Tp5e/T/dSH83fxaNJQRvDMhASmkNTsNTVF2/OOopzRCt7xokgPfg==",
      "hasInstallScript": true,
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "color": "^4.2.3",
        "detect-libc": "^2.0.4",
        "semver": "^7.7.2"
      },
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-darwin-arm64": "0.34.3",
        "@img/sharp-darwin-x64": "0.34.3",
        "@img/sharp-libvips-darwin-arm64": "1.2.0",
        "@img/sharp-libvips-darwin-x64": "1.2.0",
        "@img/sharp-libvips-linux-arm": "1.2.0",
        "@img/sharp-libvips-linux-arm64": "1.2.0",
        "@img/sharp-libvips-linux-ppc64": "1.2.0",
        "@img/sharp-libvips-linux-s390x": "1.2.0",
        "@img/sharp-libvips-linux-x64": "1.2.0",
        "@img/sharp-libvips-linuxmusl-arm64": "1.2.0",
        "@img/sharp-libvips-linuxmusl-x64": "1.2.0",
        "@img/sharp-linux-arm": "0.34.3",
        "@img/sharp-linux-arm64": "0.34.3",
        "@img/sharp-linux-ppc64": "0.34.3",
        "@img/sharp-linux-s390x": "0.34.3",
        "@img/sharp-linux-x64": "0.34.3",
        "@img/sharp-linuxmusl-arm64": "0.34.3",
        "@img/sharp-linuxmusl-x64": "0.34.3",
        "@img/sharp-wasm32": "0.34.3",
        "@img/sharp-win32-arm64": "0.34.3",
        "@img/sharp-win32-ia32": "0.34.3",
        "@img/sharp-win32-x64": "0.34.3"
      }
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shell-quote": {
      "version": "1.8.3",
      "resolved": "https://registry.npmjs.org/shell-quote/-/shell-quote-1.8.3.tgz",
      "integrity": "sha512-ObmnIF4hXNg1BqhnHmgbDETF8dLPCggZWBjkQfhZpbszZnYur5DUljTcCHii5LC3J5E0yeO/1LIMyH+UvHQgyw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/simple-swizzle": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz",
      "integrity": "sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "is-arrayish": "^0.3.1"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/stable-hash": {
      "version": "0.0.5",
      "resolved": "https://registry.npmjs.org/stable-hash/-/stable-hash-0.0.5.tgz",
      "integrity": "sha512-+L3ccpzibovGXFK+Ap/f8LOS0ahMrHTf3xu7mMLSpEGU0EO9ucaysSylKo9eRDFNhWve/y275iPmIZ4z39a9iA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/stop-iteration-iterator": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/stop-iteration-iterator/-/stop-iteration-iterator-1.1.0.tgz",
      "integrity": "sha512-eLoXW/DHyl62zxY4SCaIgnRhuMr6ri4juEYARS8E6sCEqzKpOiE521Ucofdx+KnDZl5xmvGYaaKCk5FEOxJCoQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "internal-slot": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/string.prototype.includes": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/string.prototype.includes/-/string.prototype.includes-2.0.1.tgz",
      "integrity": "sha512-o7+c9bW6zpAdJHTtujeePODAhkuicdAryFsfVKwA+wGw89wJ4GTY484WTucM9hLtDEOpOvI+aHnzqnC5lHp4Rg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.3"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/string.prototype.matchall": {
      "version": "4.0.12",
      "resolved": "https://registry.npmjs.org/string.prototype.matchall/-/string.prototype.matchall-4.0.12.tgz",
      "integrity": "sha512-6CC9uyBL+/48dYizRf7H7VAYCMCNTBeM78x/VTUe9bFEaxBepPJDa1Ow99LqI/1yF7kuy7Q3cQsYMrcjGUcskA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.6",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.6",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "internal-slot": "^1.1.0",
        "regexp.prototype.flags": "^1.5.3",
        "set-function-name": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.repeat": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/string.prototype.repeat/-/string.prototype.repeat-1.0.0.tgz",
      "integrity": "sha512-0u/TldDbKD8bFCQ/4f5+mNRrXwZ8hg2w7ZR8wa16e8z9XpePWl3eGEcUD0OXpEH/VJH/2G3gjUtR3ZOiBe2S/w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.1.3",
        "es-abstract": "^1.17.5"
      }
    },
    "node_modules/string.prototype.trim": {
      "version": "1.2.10",
      "resolved": "https://registry.npmjs.org/string.prototype.trim/-/string.prototype.trim-1.2.10.tgz",
      "integrity": "sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-data-property": "^1.1.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-object-atoms": "^1.0.0",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimend": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/string.prototype.trimend/-/string.prototype.trimend-1.0.9.tgz",
      "integrity": "sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimstart": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/string.prototype.trimstart/-/string.prototype.trimstart-1.0.8.tgz",
      "integrity": "sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/styled-jsx": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/styled-jsx/-/styled-jsx-5.1.6.tgz",
      "integrity": "sha512-qSVyDTeMotdvQYoHWLNGwRFJHC+i+ZvdBRYosOFgC+Wg1vx4frN2/RG/NA7SYqqvKNLf39P2LSRA2pu6n0XYZA==",
      "license": "MIT",
      "dependencies": {
        "client-only": "0.0.1"
      },
      "engines": {
        "node": ">= 12.0.0"
      },
      "peerDependencies": {
        "react": ">= 16.8.0 || 17.x.x || ^18.0.0-0 || ^19.0.0-0"
      },
      "peerDependenciesMeta": {
        "@babel/core": {
          "optional": true
        },
        "babel-plugin-macros": {
          "optional": true
        }
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/tailwindcss": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-4.1.11.tgz",
      "integrity": "sha512-2E9TBm6MDD/xKYe+dvJZAmg3yxIEDNRc0jwlNyDg/4Fil2QcSLjFKGVff0lAf1jjeaArlG/M75Ey/EYr/OJtBA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/tapable": {
      "version": "2.2.2",
      "resolved": "https://registry.npmjs.org/tapable/-/tapable-2.2.2.tgz",
      "integrity": "sha512-Re10+NauLTMCudc7T5WLFLAwDhQ0JWdrMK+9B2M8zR5hRExKmsRDCBA7/aV/pNJFltmBFO5BAMlQFi/vq3nKOg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/tar": {
      "version": "7.4.3",
      "resolved": "https://registry.npmjs.org/tar/-/tar-7.4.3.tgz",
      "integrity": "sha512-5S7Va8hKfV7W5U6g3aYxXmlPoZVAwUMy9AOKyF2fVuZa2UD3qZjg578OrLRt8PcNN1PleVaL/5/yYATNL0ICUw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "@isaacs/fs-minipass": "^4.0.0",
        "chownr": "^3.0.0",
        "minipass": "^7.1.2",
        "minizlib": "^3.0.1",
        "mkdirp": "^3.0.1",
        "yallist": "^5.0.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/tiny-invariant": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/tiny-invariant/-/tiny-invariant-1.3.3.tgz",
      "integrity": "sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==",
      "license": "MIT"
    },
    "node_modules/tinyglobby": {
      "version": "0.2.14",
      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.14.tgz",
      "integrity": "sha512-tX5e7OM1HnYr2+a2C/4V0htOcSQcoSTH9KgJnVvNm5zm/cyEWKJ7j7YutsH9CxMdtOkkLFy2AHrMci9IM8IPZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fdir": "^6.4.4",
        "picomatch": "^4.0.2"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/SuperchupuDev"
      }
    },
    "node_modules/tinyglobby/node_modules/fdir": {
      "version": "6.4.6",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.6.tgz",
      "integrity": "sha512-hiFoqpyZcfNm1yc4u8oWCf9A2c4D3QjCrks3zmoVKVxpQRzmPNar1hUJcBG2RQHvEVGDN+Jm81ZheVLAQMK6+w==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/tinyglobby/node_modules/picomatch": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
      "license": "MIT"
    },
    "node_modules/tree-kill": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/tree-kill/-/tree-kill-1.2.2.tgz",
      "integrity": "sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "tree-kill": "cli.js"
      }
    },
    "node_modules/ts-api-utils": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-2.1.0.tgz",
      "integrity": "sha512-CUgTZL1irw8u29bzrOD/nH85jqyc74D6SshFgujOIA7osm2Rz7dYH77agkx7H4FBNxDq7Cjf+IjaX/8zwFW+ZQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18.12"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4"
      }
    },
    "node_modules/tsconfig-paths": {
      "version": "3.15.0",
      "resolved": "https://registry.npmjs.org/tsconfig-paths/-/tsconfig-paths-3.15.0.tgz",
      "integrity": "sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/json5": "^0.0.29",
        "json5": "^1.0.2",
        "minimist": "^1.2.6",
        "strip-bom": "^3.0.0"
      }
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
      "license": "0BSD"
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/typed-array-buffer": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-buffer/-/typed-array-buffer-1.0.3.tgz",
      "integrity": "sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/typed-array-byte-length": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-byte-length/-/typed-array-byte-length-1.0.3.tgz",
      "integrity": "sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-byte-offset": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/typed-array-byte-offset/-/typed-array-byte-offset-1.0.4.tgz",
      "integrity": "sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.15",
        "reflect.getprototypeof": "^1.0.9"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-length": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/typed-array-length/-/typed-array-length-1.0.7.tgz",
      "integrity": "sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "for-each": "^0.3.3",
        "gopd": "^1.0.1",
        "is-typed-array": "^1.1.13",
        "possible-typed-array-names": "^1.0.0",
        "reflect.getprototypeof": "^1.0.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typescript": {
      "version": "5.9.2",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.9.2.tgz",
      "integrity": "sha512-CWBzXQrc/qOkhidw1OzBTQuYRbfyxDXJMVJ1XNwUHGROVmuaeiEm3OslpZ1RV96d7SKKjZKrSJu3+t/xlw3R9A==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/unbox-primitive": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/unbox-primitive/-/unbox-primitive-1.1.0.tgz",
      "integrity": "sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-bigints": "^1.0.2",
        "has-symbols": "^1.1.0",
        "which-boxed-primitive": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/undici-types": {
      "version": "6.21.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
      "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
      "license": "MIT"
    },
    "node_modules/unrs-resolver": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/unrs-resolver/-/unrs-resolver-1.11.1.tgz",
      "integrity": "sha512-bSjt9pjaEBnNiGgc9rUiHGKv5l4/TGzDmYw3RhnkJGtLhbnnA/5qJj7x3dNDCRx/PJxu774LlH8lCOlB4hEfKg==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "dependencies": {
        "napi-postinstall": "^0.3.0"
      },
      "funding": {
        "url": "https://opencollective.com/unrs-resolver"
      },
      "optionalDependencies": {
        "@unrs/resolver-binding-android-arm-eabi": "1.11.1",
        "@unrs/resolver-binding-android-arm64": "1.11.1",
        "@unrs/resolver-binding-darwin-arm64": "1.11.1",
        "@unrs/resolver-binding-darwin-x64": "1.11.1",
        "@unrs/resolver-binding-freebsd-x64": "1.11.1",
        "@unrs/resolver-binding-linux-arm-gnueabihf": "1.11.1",
        "@unrs/resolver-binding-linux-arm-musleabihf": "1.11.1",
        "@unrs/resolver-binding-linux-arm64-gnu": "1.11.1",
        "@unrs/resolver-binding-linux-arm64-musl": "1.11.1",
        "@unrs/resolver-binding-linux-ppc64-gnu": "1.11.1",
        "@unrs/resolver-binding-linux-riscv64-gnu": "1.11.1",
        "@unrs/resolver-binding-linux-riscv64-musl": "1.11.1",
        "@unrs/resolver-binding-linux-s390x-gnu": "1.11.1",
        "@unrs/resolver-binding-linux-x64-gnu": "1.11.1",
        "@unrs/resolver-binding-linux-x64-musl": "1.11.1",
        "@unrs/resolver-binding-wasm32-wasi": "1.11.1",
        "@unrs/resolver-binding-win32-arm64-msvc": "1.11.1",
        "@unrs/resolver-binding-win32-ia32-msvc": "1.11.1",
        "@unrs/resolver-binding-win32-x64-msvc": "1.11.1"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/use-sync-external-store": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/use-sync-external-store/-/use-sync-external-store-1.5.0.tgz",
      "integrity": "sha512-Rb46I4cGGVBmjamjphe8L/UnvJD+uPPtTkNvX5mZgqdbavhI4EbgIWJiIHXJ8bc/i9EQGPRh4DwEURJ552Do0A==",
      "license": "MIT",
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/victory-vendor": {
      "version": "37.3.6",
      "resolved": "https://registry.npmjs.org/victory-vendor/-/victory-vendor-37.3.6.tgz",
      "integrity": "sha512-SbPDPdDBYp+5MJHhBCAyI7wKM3d5ivekigc2Dk2s7pgbZ9wIgIBYGVw4zGHBml/qTFbexrofXW6Gu4noGxrOwQ==",
      "license": "MIT AND ISC",
      "dependencies": {
        "@types/d3-array": "^3.0.3",
        "@types/d3-ease": "^3.0.0",
        "@types/d3-interpolate": "^3.0.1",
        "@types/d3-scale": "^4.0.2",
        "@types/d3-shape": "^3.1.0",
        "@types/d3-time": "^3.0.0",
        "@types/d3-timer": "^3.0.0",
        "d3-array": "^3.1.6",
        "d3-ease": "^3.0.1",
        "d3-interpolate": "^3.0.1",
        "d3-scale": "^4.0.2",
        "d3-shape": "^3.1.0",
        "d3-time": "^3.0.0",
        "d3-timer": "^3.0.1"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
      "license": "BSD-2-Clause"
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "license": "MIT",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/which-boxed-primitive": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.1.1.tgz",
      "integrity": "sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-bigint": "^1.1.0",
        "is-boolean-object": "^1.2.1",
        "is-number-object": "^1.1.1",
        "is-string": "^1.1.1",
        "is-symbol": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-builtin-type": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/which-builtin-type/-/which-builtin-type-1.2.1.tgz",
      "integrity": "sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "function.prototype.name": "^1.1.6",
        "has-tostringtag": "^1.0.2",
        "is-async-function": "^2.0.0",
        "is-date-object": "^1.1.0",
        "is-finalizationregistry": "^1.1.0",
        "is-generator-function": "^1.0.10",
        "is-regex": "^1.2.1",
        "is-weakref": "^1.0.2",
        "isarray": "^2.0.5",
        "which-boxed-primitive": "^1.1.0",
        "which-collection": "^1.0.2",
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-collection": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/which-collection/-/which-collection-1.0.2.tgz",
      "integrity": "sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-map": "^2.0.3",
        "is-set": "^2.0.3",
        "is-weakmap": "^2.0.2",
        "is-weakset": "^2.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-typed-array": {
      "version": "1.1.19",
      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.19.tgz",
      "integrity": "sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "for-each": "^0.3.5",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/ws": {
      "version": "8.18.3",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.3.tgz",
      "integrity": "sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-5.0.0.tgz",
      "integrity": "sha512-YgvUTfwqyc7UXVMrB+SImsVYSmTS8X/tSrtdNZMImM+n7+QTriRXyXim0mBrTXNeqzVF0KWGgHPeiyViFFrNDw==",
      "dev": true,
      "license": "BlueOak-1.0.0",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/yargs": {
      "version": "17.7.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/zod": {
      "version": "4.0.15",
      "resolved": "https://registry.npmjs.org/zod/-/zod-4.0.15.tgz",
      "integrity": "sha512-2IVHb9h4Mt6+UXkyMs0XbfICUh1eUrlJJAOupBHUhLRnKkruawyDddYRCs0Eizt900ntIMk9/4RksYl+FgSpcQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/colinhacks"
      }
    }
  }
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\package.json =====
{
  "name": "mi-app-monet",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "catalogs:build": "node scripts/build-catalogs.mjs"
  },
  "dependencies": {
    "@hookform/resolvers": "^5.2.1",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@supabase/supabase-js": "^2.56.0",
    "date-fns": "^4.1.0",
    "next": "15.4.6",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "react-hook-form": "^7.62.0",
    "recharts": "^3.1.2",
    "zod": "^4.0.15"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4.1.11",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.21",
    "concurrently": "^9.2.0",
    "eslint": "^9",
    "eslint-config-next": "15.4.6",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.11",
    "typescript": "^5"
  }
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\postcss.config.mjs =====
// postcss.config.mjs
export default {
  plugins: {
    '@tailwindcss/postcss': {},
  },
};

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\README.md =====
Monet Email Dashboard
App para crear y visualizar campaÃ±as de email con filtros, mÃ©tricas y acciones rÃ¡pidas.
Stack: Next.js (App Router) + Tailwind CSS v4 + React Hook Form + Zod.

ðŸš€ Quick start
bash
Copy
Edit
# Instala dependencias
npm install
# Construye catÃ¡logos (desde los .csv/.json)
npm run build:catalogs
# Arranca el entorno de desarrollo
npm run dev
# abre http://localhost:3000
ProducciÃ³n:

bash
Copy
Edit
npm run build
npm run start
ðŸ§­ Estructura (parcial)
python
Copy
Edit
app/
  page.tsx                 # layout principal (sidebar + main)
components/
  Sidebar.tsx              # Actions (botÃ³n Create campaign)
  CampaignTable.tsx        # tabla + summary sticky
  CampaignFilters.tsx      # filtros
  create-campaign/
    CreateCampaignModal.tsx# modal de alta de campaÃ±as
  ui/Combobox.tsx          # combobox headless para Campaign
context/
  CampaignDataContext.tsx  # provider (addCampaign, mÃ©tricas)
data/
  reference.ts             # normaliza catÃ¡logos, helpers y reglas
  catalogs/
    campaigns.csv          # fuente editable
    partners.csv           # fuente editable
    databases.csv          # fuente editable
    invoice_rules.json     # (opcional) reglas sobrescritura
    themes.json            # fuente editable
    *.json                 # artefactos generados (no editar a mano)
scripts/
  build-catalogs.mjs       # parser/normalizador CSV/JSON â†’ JSON
styles/
  globals.css              # Tailwind v4 + tokens + overrides
ðŸ“š CatÃ¡logos (fuentes editables)
Los catÃ¡logos se editan en data/catalogs/ y se convierten a JSON con npm run build:catalogs.
No edites los .json generados a mano: se sobreescriben.

campaigns.csv
Columnas: name,advertiser

csv
Copy
Edit
name,advertiser
Helvetia,Helvetia
Allianz sante,Allianz
...
partners.csv
Columnas: name,invoiceoffice
Valores admitidos: CAR | DAT | INT (insensible a mayÃºsculas; Internal â†’ INT).

csv
Copy
Edit
name,invoiceoffice
Oceads,CAR
Startend Marketing,DAT
Dataventure (Cardata),Internal
...
databases.csv
Columnas: id,name,geo,dbType
dbType âˆˆ B2B | B2C | Mixed (tal cual).

csv
Copy
Edit
id,name,geo,dbType
db_dat_b2c_es,DAT_B2C_ES,ES,B2C
...
invoice_rules.json (opcional)
Sobrescribe la oficina de factura por geo y/o partner.

json
Copy
Edit
[
  { "geo": "ES", "partner": "Startend Marketing", "office": "DAT" },
  { "partner": "Oceads", "office": "CAR" },
  { "geo": "IT", "office": "DAT" }
]
themes.json
Lista de temas:

json
Copy
Edit
[
  { "label": "Insurance" },
  { "label": "Automotive" },
  { "label": "Energy & Utilities" }
]
ðŸ”§ Build de catÃ¡logos
Convierte CSV/JSON a artefactos normalizados para la app:

bash
Copy
Edit
npm run build:catalogs
Hace lo siguiente:

Limpia espacios, deduplica y genera slugs/ids estables.

Mapea Internal/int â†’ INT.

Ordena por nombre para una mejor UX en selects/combobox.

Salida (generada en el mismo directorio):

bash
Copy
Edit
data/catalogs/campaigns.json
data/catalogs/partners.json
data/catalogs/databases.json
data/catalogs/invoice_rules.json
data/catalogs/themes.json
ðŸ§  Reglas de â€œInvoice officeâ€
La resoluciÃ³n vive en data/reference.ts (resolveInvoiceOffice).
Oficinas vÃ¡lidas: CAR, DAT, INT.

Precedencia:

Regla exacta geo + partner (invoice_rules.json)

Regla por partner (sin geo)

Default del partner (partners.csv)

Regla por geo (sin partner)

Fallback DAT

Consejo: usa exactamente el nombre de partner como aparece en el catÃ¡logo.

ðŸ–Šï¸ Modal â€œCreate campaignâ€ (UX/validaciones)
Combobox (Campaign) con bÃºsqueda y selecciÃ³n obligatoria desde catÃ¡logo.

Campos AUTO (readOnly, borde discontinuo): Advertiser, Invoice office, GEO, DB Type.

Campos CALC (readOnly): Routing costs, Turnover, Margin (â‚¬ & %), eCPM.

FÃ³rmulas visibles como hints inteligentes (evitan 0/0).

KPI Bar destacado: Turnover | Margin â‚¬ (% ) | eCPM.

Toasts:

Ã‰xito al guardar

Error en validaciÃ³n o excepciÃ³n

Accesibilidad & atajos:

Esc cierra el modal

Focus trap (Tab/Shift+Tab no salen del diÃ¡logo)

Enter guarda (ignora si estÃ¡s dentro del combobox)

Ctrl/Cmd + S guarda

Botones: Save y Save & add another.

ðŸ§© LÃ³gica de cÃ¡lculos (en vivo)
Routing costs (â‚¬) = vSent / 1000 * 0.18

Turnover (â‚¬) = qty * price

Margin (â‚¬) = turnover - routingCosts

Margin (%) = margin / turnover

eCPM (â‚¬) = (turnover / vSent) * 1000

Campos derivados son readOnly y se recalculan al escribir (nÃºmeros con coma/punto soportados).

ðŸ—ƒï¸ Estado & persistencia
CampaignDataProvider expone addCampaign(row) para aÃ±adir filas y refrescar tabla y mÃ©tricas.
El modal recÃ¡lcula por seguridad en el submit antes de llamar a addCampaign.

ðŸŽ¨ UI & estilos
Tailwind v4 con tokens (dark friendly) en styles/globals.css.

Inputs .input y tarjetas .card con superficies --color-surface/--color-surface-2.

Fix del icono de fecha: clase input-date + override CSS para icono claro.

âœ… Checklist al tocar catÃ¡logos
Edita .csv/.json en data/catalogs/.

Ejecuta npm run build:catalogs.

Reinicia/recarga el dev server si es necesario.

Verifica en el modal que:

Campaign autocompleta Advertiser.

Database autocompleta GEO/DB Type.

Invoice office cambia segÃºn GEO + Partner.

KPI Bar refleja bien los cÃ¡lculos.

ðŸž Troubleshooting
Invoice office siempre â€œDATâ€
Revisa: nombre del partner coincide al 100%, invoice_rules.json vÃ¡lido y npm run build:catalogs ejecutado.

No aparece campaÃ±a en el combobox
AsegÃºrate de que estÃ¡ en campaigns.csv y has reconstruido catÃ¡logos.

Icono del date oscuro
Comprueba que el input lleva className="input input-date" y el CSS global contiene el override.

ðŸ“„ Licencia
Uso interno. Â© Dataventure / EDG.

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\tailwind.config.ts =====
import type { Config } from 'tailwindcss'

const config: Config = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      // Si quieres seguir extendiendo otras utilidades, hazlo aquÃ­.
      // Los colores y la fuente Inter ya se definen en @theme de globals.css,
      // asÃ­ que no hace falta declararlos aquÃ­.
    },
  },
  plugins: [],
}

export default config

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\tsconfig.json =====
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\app\globals.css =====
/* Importa Tailwind (v4) */
@import "tailwindcss";

/* Fuente Inter de Google Fonts */
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700&display=swap");

/* -------------------------------------------------
   THEME TOKENS (Tailwind v4) â€” Default: LIGHT
   ------------------------------------------------- */
@theme {
  /* TipografÃ­a base */
  --font-sans: "Inter", ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
    "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";

  /* Colores semÃ¡nticos principales */
  --color-primary: #00bfa5;   /* verde corporativo */
  --color-accent:  #ff5252;   /* para errores/alertas */

  /* Texto/superficie para utilidades Tailwind existentes (bg-bg, text-text) */
  --color-bg:   #f5f7fb;      /* compat con bg-bg (usado en layout) */
  --color-text: #0f172a;      /* compat con text-text */

  /* Surfaces (light) */
  --color-bg-outer: #f5f7fb;  /* fondo de pÃ¡gina */
  --color-surface:  #ffffff;  /* tarjetas/paneles */
  --color-surface-2:#f2f4f7;  /* inputs/superficie secundaria */
  --color-border:   #e5e7eb;  /* borde sutil */
}

/* Helpers no expuestos en @theme (pueden cambiar con el tema) */
:root {
  --color-muted: rgba(15, 23, 42, 0.65);
  --color-hover: color-mix(in oklab, var(--color-surface) 85%, #0f172a);

  /* Paleta para charts (LIGHT) */
  --chart-1: #06b6d4; /* cyan-500 */
  --chart-2: #6366f1; /* indigo-500 */
  --chart-3: #22c55e; /* green-500 */
  --chart-4: #f59e0b; /* amber-500 */
  --chart-5: #ef4444; /* red-500 */

  --chart-axis: rgba(15, 23, 42, 0.72);
  --chart-grid: rgba(15, 23, 42, 0.08);
  --chart-grid-strong: rgba(15, 23, 42, 0.14);
  --chart-tooltip-bg: color-mix(in oklab, var(--color-surface) 92%, black);
}

/* -------------------------------------------------
   DARK THEME (forzado con data-attr) 
   ------------------------------------------------- */
html[data-theme="dark"] {
  --color-bg:        #1b1d20;
  --color-text:      #ffffff;

  --color-bg-outer:  #1b1d20;
  --color-surface:   #23262b;
  --color-surface-2: #2b2f35;
  --color-border:    #3a3f46;

  --color-muted: rgba(255,255,255,.72);
  --color-hover: rgba(255,255,255,.04);

  /* Charts (DARK) */
  --chart-1: #60a5fa; /* blue-400 */
  --chart-2: #a78bfa; /* violet-400 */
  --chart-3: #34d399; /* emerald-400 */
  --chart-4: #fbbf24; /* amber-400 */
  --chart-5: #f87171; /* red-400 */

  --chart-axis: rgba(255,255,255,.72);
  --chart-grid: rgba(255,255,255,.10);
  --chart-grid-strong: rgba(255,255,255,.16);
  --chart-tooltip-bg: color-mix(in oklab, var(--color-surface) 92%, black);
}

/* Si NO fuerzas tema con data-attr, respeta el sistema */
@media (prefers-color-scheme: dark) {
  html:not([data-theme]) {
    --color-bg:        #1b1d20;
    --color-text:      #ffffff;

    --color-bg-outer:  #1b1d20;
    --color-surface:   #23262b;
    --color-surface-2: #2b2f35;
    --color-border:    #3a3f46;

    --color-muted: rgba(255,255,255,.72);
    --color-hover: rgba(255,255,255,.04);

    --chart-1: #60a5fa;
    --chart-2: #a78bfa;
    --chart-3: #34d399;
    --chart-4: #fbbf24;
    --chart-5: #f87171;

    --chart-axis: rgba(255,255,255,.72);
    --chart-grid: rgba(255,255,255,.10);
    --chart-grid-strong: rgba(255,255,255,.16);
    --chart-tooltip-bg: color-mix(in oklab, var(--color-surface) 92%, black);
  }
}

/* -------------------------------------------------
   Global base
   ------------------------------------------------- */
html,
body {
  font-family: var(--font-sans);
  background: var(--color-bg-outer);
  color: var(--color-text);
  min-height: 100vh;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Texto secundario */
.muted { color: var(--color-muted); }

/* -------------------------------------------------
   UI building blocks (cards, inputs, buttons, tables)
   ------------------------------------------------- */

/* Card */
.card {
  @apply rounded-2xl border shadow-sm;
  background: var(--color-surface);
  border-color: var(--color-border);
  box-shadow: 0 1px 2px rgba(0,0,0,.05);
}

/* Inputs */
.input {
  @apply rounded-lg px-3 py-2 border outline-none;
  background: var(--color-surface-2);
  border-color: var(--color-border);
  color: var(--color-text);
  caret-color: var(--color-text);
}
.input::placeholder { color: color-mix(in oklab, var(--color-text) 55%, transparent); }
.input:focus {
  box-shadow: 0 0 0 3px color-mix(in oklab, var(--color-primary) 22%, transparent);
  border-color: color-mix(in oklab, var(--color-primary) 60%, var(--color-border));
}

/* BotÃ³n primario */
.btn-primary {
  @apply inline-flex items-center justify-center rounded-lg px-4 py-2 font-semibold transition-all;
  color: white;
  background: linear-gradient(180deg, #34d399 0%, #10b981 100%); /* Emerald */
  box-shadow: 0 6px 18px rgba(16,185,129,.22);
}
.btn-primary:hover { filter: brightness(1.05); }
.btn-primary:active { transform: translateY(0.5px); }

/* BotÃ³n ghost */
.btn-ghost {
  @apply inline-flex items-center justify-center rounded-lg px-4 py-2 font-medium transition-colors border;
  border-color: var(--color-border);
  color: color-mix(in oklab, var(--color-text) 85%, transparent);
  background: transparent;
}
.btn-ghost:hover { background: var(--color-hover); }

/* Tabla */
/* Solo scroll horizontal; vertical visible para que sticky use el viewport */
.table-wrap {
  overflow-x: auto;
  overflow-y: visible;

  border-radius: 1rem;
  border: 1px solid var(--color-border);
  background: var(--color-surface);
  box-shadow: 0 1px 6px rgba(0,0,0,.06);

  /* la tabla por encima de la lÃ¡mina */
  position: relative;
  z-index: 30;
}

/* ðŸ‘‡ cambia a separate para evitar glitches con sticky */
.table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
}

/* Cabeceras sticky: un Ãºnico sitio de verdad (sin otro bloque mÃ¡s abajo) */
.table thead th {
  position: sticky;
  /* usa el offset calculado; fallback al header fijo si no se define */
  top: var(--table-sticky-offset, var(--content-sticky-top, 0px));
  z-index: 45;

  background: var(--color-surface-2);
  color: color-mix(in oklab, var(--color-text) 80%, transparent);
  box-shadow: 0 1px 0 0 var(--color-border), 0 6px 16px rgba(0,0,0,.04);
  border-bottom: 1px solid var(--color-border);
}

.table tbody tr { border-bottom: 1px solid var(--color-border); }
.table tbody tr:nth-child(odd)  { background: var(--color-surface); }
.table tbody tr:nth-child(even) { background: var(--color-surface-2); }
.table tbody tr:hover { background: var(--color-hover); transition: background-color .15s ease; }
.table td { @apply text-sm py-3 px-3 align-middle; }

/* Fila SUMMARY */
.row-summary {
  background: linear-gradient(90deg, color-mix(in oklab, var(--color-primary) 18%, transparent), transparent);
  font-weight: 600;
}
.row-summary:hover {
  background: linear-gradient(90deg, color-mix(in oklab, var(--color-primary) 28%, transparent), transparent);
}

/* Ãšltima columna (acciones): compacta, pero sin forzar nowrap al popover */
.table td:last-child,
.table th:last-child { width: 1%; }
.table td:last-child [role="menu"],
.table td:last-child [data-menu],
.table td:last-child .menu,
.table td:last-child .dropdown,
.table td:last-child .popover,
.table td:last-child .actions-menu {
  white-space: normal !important;
  display: flex;
  flex-direction: column;
}

/* Altura de la fila de cabeceras */
:root {
  --th-py: 0.625rem; /* 10px â€” sÃºbelo/bÃ¡jalo a gusto (0.5rem, 0.75rem...) */
  --th-px: 0.75rem;  /* 12px horizontal */
}

.table thead th {
  padding: var(--th-py) var(--th-px);
  font-size: 13px;            /* opcional: un pelÃ­n mÃ¡s legible */
  line-height: 1.2;           /* opcional */
}

/* Inputs de fecha: respeta tema */
input[type="date"] { color-scheme: light; }
html[data-theme="dark"] input[type="date"],
html:not([data-theme]) input[type="date"]:where(:not(:root)) {
  color-scheme: dark;
}

/* Aclarar el icono del calendario (WebKit) */
input[type="date"]:hover::-webkit-calendar-picker-indicator { opacity: 1; }

/* Flash suave cuando se actualiza una fila */
.row-flash {
  animation: rowFlash 1200ms ease-out;
  background-color: color-mix(in oklab, var(--color-primary) 18%, transparent) !important;
}
@keyframes rowFlash {
  0%   { background-color: color-mix(in oklab, var(--color-primary) 28%, transparent); }
  100% { background-color: transparent; }
}

/* --- Inline errors --- */
.input-error {
  border-color: var(--color-accent) !important;
  box-shadow: 0 0 0 2px color-mix(in oklab, var(--color-accent) 18%, transparent);
}
.input-error:focus {
  outline: none;
  box-shadow: 0 0 0 3px color-mix(in oklab, var(--color-accent) 26%, transparent);
}

/* Tooltip base */
.tooltip-panel {
  background: var(--chart-tooltip-bg);
  border: 1px solid var(--color-border);
  border-radius: 0.5rem;
  padding: 0.375rem 0.5rem;
  font-size: 12px;
  max-width: 280px;
  box-shadow: 0 8px 28px rgba(0,0,0,.18);
  z-index: 60;
}

/* -------------------------------------------------
   BONUS: focus ring accesible + scrollbars suaves
   ------------------------------------------------- */
:focus-visible {
  outline: 2px solid color-mix(in oklab, var(--color-primary) 55%, transparent);
  outline-offset: 2px;
  border-radius: 6px;
}

/* Scrollbars (Chromium + Firefox) */
* {
  scrollbar-color: color-mix(in oklab, var(--color-text) 20%, transparent)
                   color-mix(in oklab, var(--color-surface-2) 100%, transparent);
  scrollbar-width: thin;
}
*::-webkit-scrollbar { height: 10px; width: 10px; }
*::-webkit-scrollbar-track { background: var(--color-surface-2); }
*::-webkit-scrollbar-thumb {
  background: color-mix(in oklab, var(--color-text) 22%, transparent);
  border-radius: 9999px;
  border: 2px solid var(--color-surface-2);
}
*::-webkit-scrollbar-thumb:hover {
  background: color-mix(in oklab, var(--color-text) 35%, transparent);
}
/* --- (2) Sombra en header sticky de la tabla --- */
.table thead th {
  position: sticky; top: 0; z-index: 10;
  background: var(--color-surface-2);
  color: color-mix(in oklab, var(--color-text) 80%, transparent);
  /* ya tenÃ­as border-bottom; aÃ±adimos sombra suave */
  box-shadow: 0 1px 0 0 var(--color-border), 0 6px 16px rgba(0,0,0,.04);
}

/* Ãšltima columna (acciones): compacta, pero sin forzar nowrap al popover */
.table td:last-child,
.table th:last-child {
  width: 1%;
  /* quitamos white-space: nowrap; */
}

/* Salvaguardas: el menÃº interno debe poder apilar sus items */
.table td:last-child [role="menu"],
.table td:last-child [data-menu],
.table td:last-child .menu,
.table td:last-child .dropdown,
.table td:last-child .popover,
.table td:last-child .actions-menu {
  white-space: normal !important;
  display: flex;
  flex-direction: column;
}

/* --- (4) Refuerzo visual para badges del SUMMARY --- */
.row-summary .badge-positive,
.row-summary .badge-negative,
.row-summary .badge-warn {
  display: inline-flex;
  align-items: center;
  gap: 4px;
  padding: 2px 6px;
  border-radius: 9999px;
  font-weight: 700;            /* bold para legibilidad */
  line-height: 1.1;
  border: 1px solid transparent;
}

.row-summary .badge-positive {
  color: var(--color-primary);
  background: color-mix(in oklab, var(--color-primary) 28%, transparent) !important;
  border-color: color-mix(in oklab, var(--color-primary) 55%, transparent);
}

.row-summary .badge-negative {
  color: var(--color-accent);
  background: color-mix(in oklab, var(--color-accent) 26%, transparent) !important;
  border-color: color-mix(in oklab, var(--color-accent) 55%, transparent);
}

.row-summary .badge-warn {
  color: color-mix(in oklab, var(--color-accent) 58%, var(--color-primary) 42%);
  background: color-mix(in oklab, var(--color-accent) 22%, var(--color-primary) 22%) !important;
  border-color: color-mix(in oklab, var(--color-accent) 45%, var(--color-primary) 20%);
}

/* =======================
   Brand Bar (Header) â€” fixed size
   ======================= */
.app-header {
  position: sticky;
  top: 0;
  z-index: 100; /* Header siempre por encima de todo */

  /* Fondo oscuro para destacar el logo */
  background: linear-gradient(180deg, #0e1116 0%, #151a22 100%);
  color: #e5e7eb;
  border-bottom: 1px solid color-mix(in oklab, white 12%, transparent);

  /* TamaÃ±o fijo (unificado) */
  --header-h: 5.5rem; /* 88px */
  --logo-h: 56px;     /* altura visual del logo */
}

/* (Opcional) Si prefieres mantener mobile mÃ¡s alto, comenta el bloque superior
   y usa este media-query. Si lo dejas, recuerda ajustar --content-sticky-top en mÃ³vil.
@media (min-width: 768px) {
  .app-header { --header-h: 5.5rem; --logo-h: 56px; }
}
*/

.app-header::after {
  content: "";
  position: absolute; left: 0; right: 0; bottom: -1px;
  height: 2px;
  background: linear-gradient(
    90deg,
    var(--color-primary) 0%,
    color-mix(in oklab, var(--color-primary), transparent 40%) 50%,
    var(--color-accent) 100%
  );
  opacity: .9;
}

.app-header .bar {
  height: var(--header-h);
  /* Sin animaciones del shrink */
  transition: none;
}

/* BotÃ³n ghost en header oscuro */
.app-header .btn-ghost {
  color: #e5e7eb;
  border-color: transparent;
  background: transparent;
}
.app-header .btn-ghost:hover { background: rgba(255,255,255,.06); }

/* Glow sutil del logo */
.app-header .brand-logo {
  filter: drop-shadow(0 0 10px rgba(255,255,255,.08));
  transition: none; /* sin transiciÃ³n ligada a scroll */
}

/* Respeta reduced motion */
@media (prefers-reduced-motion: reduce) {
  .app-header .brand-logo { transition: none; }
}

/* Espaciado vertical consistente para el mÃ³dulo de filtros */
:root {
  --filters-row-gap: .75rem;        /* mobile */
}
@media (min-width: 768px) {
  :root { --filters-row-gap: 1rem; } /* desktop */
}
.filters-stack {
  display: grid;
  grid-auto-rows: min-content;
  row-gap: var(--filters-row-gap);
}

/* === SUBCARDS (sub-superficie para fieldsets) === */
.subcard {
  border: 1px solid color-mix(in oklab, var(--color-text) 8%, var(--color-border));
  background: color-mix(in oklab, var(--color-surface-2) 92%, var(--color-surface));
  border-radius: 0.75rem; /* ~rounded-xl */
  box-shadow: 0 1px 6px rgba(0,0,0,.04);
}

/* Uniformar altura mÃ­nima de los inputs (compacto) */
.input { min-height: 2.5rem; /* 40px */ }

/* Divider mÃ¡s suave y reutilizable */
.divider-soft { height: 1px; background: color-mix(in oklab, var(--color-border), transparent 20%); }

/* Badges de campo (AUTO / CALC) mÃ¡s visibles pero sutiles */
.badge-field {
  display: inline-flex; align-items: center; gap: .25rem;
  padding: 2px 6px; border-radius: .5rem; font-size: 10px; line-height: 1; letter-spacing: .02em;
  border: 1px solid color-mix(in oklab, var(--color-primary) 30%, var(--color-border));
  color: color-mix(in oklab, var(--color-primary) 70%, var(--color-text));
  background: color-mix(in oklab, var(--color-primary) 10%, var(--color-surface-2));
}

/* Variante para CALC si quieres un matiz neutro-gris (opcional) */
.badge-field[data-variant="calc"]{
  border-color: color-mix(in oklab, var(--color-text) 18%, var(--color-border));
  color: color-mix(in oklab, var(--color-text) 80%, transparent);
  background: color-mix(in oklab, var(--color-surface-2) 96%, var(--color-surface));
}

/* Lista del Combobox mÃ¡s clara y con sombra algo mayor */
.cb-panel {
  background: var(--color-surface);
  border: 1px solid var(--color-border);
  box-shadow: 0 12px 28px rgba(0,0,0,.12);
  border-radius: .5rem;
}

/* Hover dentro del panel del combobox */
.cb-item:hover, .cb-item:focus {
  background: color-mix(in oklab, var(--color-surface-2) 80%, transparent);
}

/* Hover de inputs: 2â€“3% mÃ¡s claro */
.input:hover {
  background: color-mix(in oklab, var(--color-surface-2) 92%, white);
}
/* --- Modal chrome (header/footer) --- */
:root{
  /* Toma tokens del header si existen; fallback = mismo gradiente del header */
  --modal-chrome-bg: var(--app-header-bg, linear-gradient(180deg, #0e1116 0%, #151a22 100%));
  --modal-chrome-fg: var(--app-header-fg, #e5e7eb);
  --modal-chrome-border: #ffffff1a;   /* borde sutil */
  --modal-chrome-hover: #ffffff14;    /* hover suave */
}

.modal-chrome{
  background: var(--modal-chrome-bg);
  color: var(--modal-chrome-fg);
  border-color: var(--modal-chrome-border);
  backdrop-filter: blur(4px);
}

/* separadores sutiles + respeta el radio de la card */
.modal-header{
  box-shadow: inset 0 -1px 0 rgba(255,255,255,.05);
  border-top-left-radius: 1rem;
  border-top-right-radius: 1rem;
}
.modal-footer{
  box-shadow: inset 0  1px 0 rgba(255,255,255,.05);
  border-bottom-left-radius: 1rem;
  border-bottom-right-radius: 1rem;
}

/* botones dentro del chrome */
.modal-chrome .btn-ghost{
  color: var(--modal-chrome-fg);
  border-color: transparent;
}
.modal-chrome .btn-ghost:hover{ background: var(--modal-chrome-hover); }
.modal-chrome .btn-primary{ box-shadow: 0 10px 24px rgba(16,185,129,.25); }

/* opcional: fina â€œcintaâ€ de acento arriba del header */
.modal-chrome .accent-strip{
  position: absolute; inset: 0 auto auto 0; height: 3px; width: 100%;
  background-image: linear-gradient(90deg,
    color-mix(in srgb, var(--color-primary), transparent 40%),
    color-mix(in srgb, var(--color-accent),  transparent 40%)
  );
  opacity: .9;
}
@supports not (color-mix(in srgb, red, blue)){
  .modal-chrome .accent-strip{
    background-image: linear-gradient(90deg, var(--color-primary), var(--color-accent));
    opacity: .6;
  }
}

/* --- Edge fades en el Ã¡rea scroll del modal --- */
/* (coloca <div class="edge-fade edge-top" /> y <div class="edge-fade edge-bottom" /> dentro del contenedor scroll) */
.edge-fade{
  position: sticky;
  pointer-events: none;
  z-index: 5;
  height: 14px;
  /* el body del modal tiene padding horizontal px-5 (1.25rem) */
  margin-left: -1.25rem;
  margin-right: -1.25rem;
}
.edge-top{
  top: 0;
  margin-top: -14px;
  background: linear-gradient(to bottom,
    color-mix(in oklab, var(--color-text) 20%, transparent),
    transparent
  );
}
.edge-bottom{
  bottom: 0;
  margin-bottom: -14px;
  background: linear-gradient(to top,
    color-mix(in oklab, var(--color-text) 20%, transparent),
    transparent
  );
}

/* --- Segmented / Pill Tabs (accesibles con role="tab") --- */
.segmented {
  display: inline-flex;
  gap: .25rem;
  padding: .25rem;
  border: 1px solid var(--color-border);
  border-radius: 9999px;
  background: color-mix(in oklab, var(--color-surface-2) 92%, var(--color-surface));
  box-shadow: 0 1px 6px rgba(0,0,0,.05);
}
.segmented [role="tab"] {
  padding: .5rem .875rem;
  border-radius: 9999px;
  font-size: .875rem;
  color: color-mix(in oklab, var(--color-text) 80%, transparent);
  transition: background-color .15s ease, color .15s ease, box-shadow .15s ease;
}
.segmented [role="tab"]:hover {
  background: color-mix(in oklab, var(--color-surface) 88%, transparent);
}
.segmented [role="tab"][aria-selected="true"] {
  background: var(--color-surface);
  color: var(--color-text);
  box-shadow: 0 2px 10px rgba(0,0,0,.08);
}

/* --- Tiles de estadÃ­stica (coherentes con KPIBar) --- */
.stat-tile {
  border: 1px solid color-mix(in oklab, var(--color-text) 8%, var(--color-border));
  background: color-mix(in oklab, var(--color-surface-2) 92%, var(--color-surface));
  border-radius: .75rem; /* ~rounded-xl */
  box-shadow: 0 1px 6px rgba(0,0,0,.04);
}

/* --- Tabla editable del Manage (sub-superficie + header sticky) --- */
.manage-table {
  border: 1px solid var(--color-border);
  border-radius: .75rem;
  background: var(--color-surface);
  box-shadow: 0 1px 6px rgba(0,0,0,.06);
  overflow: hidden;
}
.manage-table thead th {
  position: sticky; top: 0; z-index: 1;
  background: var(--color-surface-2);
  color: color-mix(in oklab, var(--color-text) 80%, transparent);
  box-shadow: 0 1px 0 0 var(--color-border), 0 6px 16px rgba(0,0,0,.04);
  border-bottom: 1px solid var(--color-border);
}
/* filas (grid) bajo la cabecera */
.manage-rows > div:hover {
  background: color-mix(in oklab, var(--color-surface-2) 85%, var(--color-surface));
  transition: background-color .12s ease;
}

:root { --footer-h: 40px; } /* altura compacta */

.app-footer{
  position: fixed;
  left: 0; right: 0; bottom: 0;
  height: var(--footer-h);
  z-index: 80;                 /* por debajo de modales (100+) */
  display: flex; align-items: center;
  border-top: 1px solid var(--modal-chrome-border);
  /* la clase .modal-chrome ya aporta fondo/colores coherentes */
  padding-bottom: max(0px, env(safe-area-inset-bottom));
}

/* contenedor interno centrado */
.app-footer .inner{
  width: 100%;
  max-width: 1200px;           /* ajÃºstalo a tu ancho preferido */
  margin: 0 auto;
  padding: 0 .75rem;
  display: flex; align-items: center; justify-content: space-between;
  gap: .75rem;
  font-size: 12px;
}

/* detalles de icono */
.app-footer .heart{
  display: inline-block;
  vertical-align: -2px;
  transition: transform .2s ease;
}
.app-footer .heart:hover{ transform: scale(1.05); }

/* utilidad: aÃ±ade espacio inferior al contenido para no taparlo */
.with-app-footer{
  padding-bottom: calc(var(--footer-h) + max(0px, env(safe-area-inset-bottom)));
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\app\layout.tsx =====
// app/layout.tsx
import type { Metadata } from 'next';
import './globals.css';
import '@/styles/tw.input.css';
import AppProviders from './providers';
import AppHeader from '@/components/AppHeader';
import FooterBar from '@/components/ui/FooterBar';

export const metadata: Metadata = {
  title: 'Monet Email Dashboard',
  description: 'Campaign reporting',
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body
        className="min-h-dvh font-sans antialiased bg-[color:var(--color-bg)] text-[color:var(--color-text)]"
        // Hace que los elementos sticky (tablas/filtros) respeten la altura fija del header
        style={{ ['--content-sticky-top' as any]: '5.5rem' }}
        suppressHydrationWarning
      >
        <AppProviders>
          <div className="with-app-footer">
            <AppHeader />
            {children}
          </div>

          {/* Barra fija inferior */}
          <FooterBar />
        </AppProviders>
      </body>
    </html>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\app\page.tsx =====
'use client';

import { useState } from 'react';
import CampaignTable from '@/components/CampaignTable';
import Sidebar from '@/components/Sidebar';

export default function Page() {
  const [collapsed, setCollapsed] = useState(false);
  const [mobileOpen, setMobileOpen] = useState(false);

  return (
    <main
      data-page="email-campaigns"
      className="mx-auto w-full max-w-none px-3 md:px-4 lg:px-6 py-6"
    >
      {/* BotÃ³n flotante para abrir acciones en mÃ³vil */}
      <button
        onClick={() => setMobileOpen(true)}
        className="fixed bottom-5 left-5 z-40 md:hidden rounded-full border border-[--color-border] bg-[color:var(--color-surface)] px-4 py-2 shadow-lg"
        aria-label="Open actions"
        aria-controls="mobile-actions-drawer"
        aria-expanded={mobileOpen}
      >
        â˜° Actions
      </button>

      {/* Grid principal */}
      <div
        className={[
          'grid grid-cols-1 gap-4 md:gap-5 items-start content-start',
          collapsed
            ? 'md:grid-cols-[64px_1fr]'
            : 'md:grid-cols-[200px_1fr] lg:grid-cols-[220px_1fr]',
        ].join(' ')}
      >
        {/* Sidebar (sticky en desktop) */}
        <aside
          className="self-start md:sticky h-fit w-full"
          // MantÃ©n el sidebar pegado pero respetando el header fijo + 1rem de respiro
          style={{ top: 'calc(var(--content-sticky-top) + 1rem)' }}
        >
          {/* Desktop / tablet */}
          <div className="hidden md:block">
            <Sidebar
              collapsed={collapsed}
              onToggleCollapse={() => setCollapsed(v => !v)}
            />
          </div>

          {/* Mobile drawer */}
          {mobileOpen && (
            <div
              id="mobile-actions-drawer"
              className="fixed inset-0 z-50 md:hidden"
              role="dialog"
              aria-modal="true"
              onMouseDown={(e) => {
                if (e.target === e.currentTarget) setMobileOpen(false);
              }}
            >
              <div className="absolute inset-0 bg-black/60 backdrop-blur-sm" />
              <div className="absolute left-0 top-0 h-full w-[85%] max-w-[320px] p-3">
                <div className="card h-full p-4 overflow-y-auto">
                  <div className="flex items-center justify-between mb-2">
                    <h2 className="text-lg font-semibold">Actions</h2>
                    <button
                      className="btn-ghost"
                      onClick={() => setMobileOpen(false)}
                      aria-label="Close"
                    >
                      âœ•
                    </button>
                  </div>
                  <Sidebar
                    collapsed={false}
                    onToggleCollapse={() => {}}
                    hideCollapseToggle
                    onActionDone={() => setMobileOpen(false)}
                  />
                </div>
              </div>
            </div>
          )}
        </aside>

        {/* Contenido principal */}
        <section className="min-w-0">
          <CampaignTable />
        </section>
      </div>
    </main>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\app\providers.tsx =====
'use client';

import React from 'react';
import { AuthProvider } from '@/context/AuthContext';
import { CatalogOverridesProvider } from '@/context/CatalogOverridesContext';
import { CampaignDataProvider } from '@/context/CampaignDataContext';

// Si tienes mÃ¡s providers (ThemeProvider, Toaster, etc.), mantenlos,
// pero asegÃºrate de que AuthProvider sea el mÃ¡s exterior.

export default function AppProviders({ children }: { children: React.ReactNode }) {
  return (
    <AuthProvider>
      <CatalogOverridesProvider>
        <CampaignDataProvider>
          {children}
        </CampaignDataProvider>
      </CatalogOverridesProvider>
    </AuthProvider>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\app\(auth)\layout.tsx =====
export default function AuthLayout({ children }: { children: React.ReactNode }) {
  // Layout simple y limpio para los formularios
  return (
    <div className="min-h-screen grid place-items-center bg-neutral-50">
      <div className="w-full max-w-md bg-white rounded-xl shadow p-6">
        {children}
      </div>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\app\(auth)\login\page.tsx =====
'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';

export default function LoginPage() {
  const router = useRouter();
  const sp = useSearchParams();
  const redirect = sp.get('redirect') ?? '/';

  // âœ… Cliente de Supabase en cliente (seguro en componentes)
  const supabase = createClientComponentClient();

  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState<string | null>(null);

  // Si ya hay sesiÃ³n, redirige (evita parpadeo si viene autenticado)
  useEffect(() => {
    let cancelled = false;

    supabase.auth.getSession().then(({ data }) => {
      if (!cancelled && data.session) router.replace(redirect);
    });

    return () => {
      cancelled = true;
    };
  }, [router, redirect, supabase]);

  const onSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setErr(null);
    setLoading(true);

    const { error } = await supabase.auth.signInWithPassword({ email, password });

    setLoading(false);

    if (error) {
      setErr(error.message);
      return;
    }
    router.replace(redirect);
  };

  return (
    <form onSubmit={onSubmit} className="space-y-4">
      <h1 className="text-xl font-semibold">Entrar</h1>

      <label className="block">
        <span className="text-sm">Email</span>
        <input
          type="email"
          required
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          className="mt-1 w-full rounded-md border px-3 py-2"
          placeholder="tu@correo.com"
        />
      </label>

      <label className="block">
        <span className="text-sm">ContraseÃ±a</span>
        <input
          type="password"
          required
          minLength={6}
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className="mt-1 w-full rounded-md border px-3 py-2"
          placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢"
        />
      </label>

      {err && <p className="text-red-600 text-sm">{err}</p>}

      <button
        type="submit"
        disabled={loading}
        className="w-full rounded-md bg-black text-white py-2 disabled:opacity-50"
      >
        {loading ? 'Entrandoâ€¦' : 'Entrar'}
      </button>

      <p className="text-sm text-center text-neutral-500">
        Â¿No tienes cuenta?{' '}
        <a href="/register" className="underline">Crear cuenta</a>
      </p>
    </form>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\app\(auth)\register\page.tsx =====
'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '@/lib/supabase/client';

export default function RegisterPage() {
  const router = useRouter();
  const sp = useSearchParams();
  const redirect = sp.get('redirect') || '/';

  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const [loading, setLoading] = useState(false);
  const [info, setInfo] = useState<string | null>(null);
  const [err, setErr] = useState<string | null>(null);

  // Si ya hay sesiÃ³n, redirige
  useEffect(() => {
    supabase.auth.getSession().then(({ data }) => {
      if (data.session) router.replace(redirect);
    });
  }, [router, redirect]);

  const onSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setErr(null);
    setInfo(null);
    setLoading(true);

    const { error } = await supabase.auth.signUp({
      email,
      password,
    });

    setLoading(false);

    if (error) {
      setErr(error.message);
      return;
    }

    // Si en Supabase tienes "Confirm email" activo, verÃ¡s este aviso:
    setInfo('Revisa tu email para confirmar la cuenta. Luego podrÃ¡s iniciar sesiÃ³n.');
    // Si lo tienes desactivado en dev, puedes redirigir directo:
    // router.replace('/login?registered=1');
  };

  return (
    <form onSubmit={onSubmit} className="space-y-4">
      <h1 className="text-xl font-semibold">Crear cuenta</h1>

      <label className="block">
        <span className="text-sm">Email</span>
        <input
          type="email"
          required
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          className="mt-1 w-full rounded-md border px-3 py-2"
          placeholder="tu@correo.com"
        />
      </label>

      <label className="block">
        <span className="text-sm">ContraseÃ±a</span>
        <input
          type="password"
          required
          minLength={6}
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className="mt-1 w-full rounded-md border px-3 py-2"
          placeholder="MÃ­nimo 6 caracteres"
        />
      </label>

      {err && <p className="text-red-600 text-sm">{err}</p>}
      {info && <p className="text-green-700 text-sm">{info}</p>}

      <button
        type="submit"
        disabled={loading}
        className="w-full rounded-md bg-black text-white py-2 disabled:opacity-50"
      >
        {loading ? 'Creandoâ€¦' : 'Crear cuenta'}
      </button>

      <p className="text-sm text-center text-neutral-500">
        Â¿Ya tienes cuenta?{' '}
        <a href="/login" className="underline">Entrar</a>
      </p>
    </form>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\app\(protected)\layout.tsx =====
import { redirect } from 'next/navigation';
import { AuthProvider } from '@/context/AuthContext';
import { getSessionAndAppUser } from '@/lib/auth/server';

export default async function ProtectedLayout({ children }: { children: React.ReactNode }) {
  const { session, appUser } = await getSessionAndAppUser();

  // Si no hay sesiÃ³n -> a login (con redirect bÃ¡sico a "/")
  if (!session) {
    redirect('/login?redirect=%2F');
  }

  // Opcional: bloquear usuarios inactivos
  if (appUser && appUser.is_active === false) {
    redirect('/login?reason=inactive');
  }

  // Envuelve el Ã¡rea privada con el AuthProvider (si no lo haces ya en app/layout.tsx)
  return (
    <AuthProvider>
      {children}
    </AuthProvider>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\app\reports\page.tsx =====
'use client';

import ReportsView from '@/components/reports/ReportsView';

export default function ReportsPage() {
  return (
    <main
      data-page="reports"
      className="mx-auto w-full max-w-none px-3 md:px-4 lg:px-6 py-6"
    >
      <ReportsView />
    </main>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ActionsCard.tsx =====

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\AppHeader.tsx =====
'use client';

import Image from 'next/image';
import { useAuth } from '@/context/AuthContext';
import SignOutButton from '@/components/auth/SignOutButton';

export default function AppHeader() {
  const { user, role, loading } = useAuth();

  return (
    <header role="banner" className="app-header">
      <div className="bar mx-auto w-full px-3 md:px-4 lg:px-6 flex items-center justify-between gap-3">
        {/* Logo principal (SVG) */}
        <div className="flex items-center">
          <Image
            src="/dvlogo2.svg"
            alt="Dataventure"
            width={180}
            height={56}
            priority
            style={{ height: 'var(--logo-h)', width: 'auto' }}
            className="brand-logo"
          />
        </div>

        {/* Acciones */}
        <nav aria-label="Header actions" className="flex items-center gap-2">
          <button className="btn-ghost h-9 px-3" aria-label="Toggle theme">ðŸŒ“</button>

          {/* Info de usuario (solo cuando ya sabemos el estado y hay sesiÃ³n) */}
          {!loading && user && (
            <div className="hidden sm:flex items-center gap-2 pr-1">
              <span className="text-sm opacity-70">{user.email}</span>
              {role && (
                <span className="inline-flex items-center rounded-md border px-2 py-0.5 text-xs opacity-80">
                  {role}
                </span>
              )}
            </div>
          )}

          {/* BotÃ³n de cerrar sesiÃ³n solo si hay sesiÃ³n */}
          {!loading && user ? <SignOutButton /> : null}
        </nav>
      </div>
    </header>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\CampaignFilters.tsx =====
'use client';

import { useEffect, useMemo, useRef, useState } from 'react';
import Chip from '@/components/ui/Chip';
import type { Filters } from '@/hooks/useCampaignFilterEngine';

type DatePreset =
  | 'today' | 'yesterday' | 'thisWeek' | 'lastWeek'
  | 'thisMonth' | 'lastMonth' | 'last7' | 'last30' | 'custom';

export default function CampaignFilters({
  filters,
  updateFilters,
  resetFilters,
  options,
  pending = false,
  onOpenColumns,
  onOpenExport,           // â† NUEVO
  exportCount,            // â† NUEVO
}: {
  filters: Filters;
  updateFilters: (patch: Partial<Filters>) => void;
  resetFilters: () => void;
  options: {
    geos: string[];
    partners: string[];
    themes: string[];
    types: string[];
    dbTypes: Array<'B2B' | 'B2C' | 'Mixed'>;
  };
  pending?: boolean;
  onOpenColumns?: () => void;
  onOpenExport?: () => void;   // â† NUEVO
  exportCount?: number;        // â† NUEVO
}) {
  const [qDraft, setQDraft] = useState(filters.q ?? '');
  useEffect(() => { setQDraft(filters.q ?? ''); }, [filters.q]);

  // ---- helpers de fecha
  const fmtLocal = (d: Date) => {
    const y = d.getFullYear();
    const m = String(d.getMonth() + 1).padStart(2, '0');
    const day = String(d.getDate()).padStart(2, '0');
    return `${y}-${m}-${day}`;
  };
  const startOfWeek = (d: Date) => {
    const n = new Date(d.getFullYear(), d.getMonth(), d.getDate());
    const w = (n.getDay() || 7) - 1;
    n.setDate(n.getDate() - w);
    return n;
  };
  const endOfWeek = (d: Date) => {
    const s = startOfWeek(d);
    return new Date(s.getFullYear(), s.getMonth(), s.getDate() + 6);
  };
  const startOfMonth = (d: Date) => new Date(d.getFullYear(), d.getMonth(), 1);
  const endOfMonth   = (d: Date) => new Date(d.getFullYear(), d.getMonth() + 1, 0);

  const rangeForPreset = (p: Exclude<DatePreset,'custom'>): [string, string] => {
    const now = new Date();
    if (p === 'today') {
      const a = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      const s = fmtLocal(a); return [s, s];
    }
    if (p === 'yesterday') {
      const a = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1);
      const s = fmtLocal(a); return [s, s];
    }
    if (p === 'thisWeek') return [fmtLocal(startOfWeek(now)), fmtLocal(endOfWeek(now))];
    if (p === 'lastWeek') {
      const k = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7);
      return [fmtLocal(startOfWeek(k)), fmtLocal(endOfWeek(k))];
    }
    if (p === 'thisMonth') return [fmtLocal(startOfMonth(now)), fmtLocal(endOfMonth(now))];
    if (p === 'lastMonth') {
      const k = new Date(now.getFullYear(), now.getMonth() - 1, 15);
      return [fmtLocal(startOfMonth(k)), fmtLocal(endOfMonth(k))];
    }
    if (p === 'last7') {
      const a = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 6);
      const b = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      return [fmtLocal(a), fmtLocal(b)];
    }
    const a = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 29);
    const b = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    return [fmtLocal(a), fmtLocal(b)];
  };

  const startDate = filters.dateRange?.[0] ?? '';
  const endDate   = filters.dateRange?.[1] ?? '';
  const hasRange  = !!(startDate || endDate);

  const activePreset: DatePreset | null = useMemo(() => {
    if (!startDate || !endDate) return null;
    const candidates: Exclude<DatePreset,'custom'>[] = [
      'today','yesterday','thisWeek','lastWeek','thisMonth','lastMonth','last7','last30',
    ];
    for (const p of candidates) {
      const [s, e] = rangeForPreset(p);
      if (s === startDate && e === endDate) return p;
    }
    return null;
  }, [startDate, endDate]);

  function choosePreset(p: Exclude<DatePreset,'custom'> | 'custom') {
    if (p === 'custom') return;
    const [s, e] = rangeForPreset(p);
    updateFilters({ dateRange: [s, e] });
  }
  function onStartChange(v: string){ updateFilters({ dateRange: [v || null, endDate || null] }); }
  function onEndChange(v: string){ updateFilters({ dateRange: [startDate || null, v || null] }); }

  const inputRef = useRef<HTMLInputElement | null>(null);
  useEffect(() => {
    const el = inputRef.current;
    if (!el) return;
    const handle = (e: KeyboardEvent) => {
      if (e.key === 'Enter') updateFilters({ q: qDraft });
      if (e.key === 'Escape') { setQDraft(''); updateFilters({ q: '' }); }
    };
    el.addEventListener('keydown', handle);
    return () => el.removeEventListener('keydown', handle);
  }, [qDraft, updateFilters]);

  const setTypes   = (v: string) => updateFilters({ types: v === 'ALL' ? [] : [v] });
  const setGeo     = (v: string) => updateFilters({ geos: v === 'ALL' ? [] : [v] });
  const setPartner = (v: string) => updateFilters({ partners: v === 'ALL' ? [] : [v] });
  const setTheme   = (v: string) => updateFilters({ themes: v === 'ALL' ? [] : [v] });
  const setDbType  = (v: string) => updateFilters({ dbTypes: v === 'ALL' ? [] : [v as any] });

  const typeValue  = (filters.types?.[0] ?? 'ALL') as string;
  const geoValue   = (filters.geos?.[0] ?? 'ALL') as string;
  const partnerVal = (filters.partners?.[0] ?? 'ALL') as string;
  const themeVal   = (filters.themes?.[0] ?? 'ALL') as string;
  const dbTypeVal  = (filters.dbTypes?.[0] ?? 'ALL') as string;

  const activeStyle = (on: boolean): React.CSSProperties | undefined =>
    on
      ? {
          borderColor: 'var(--color-primary)',
          boxShadow: '0 0 0 2px color-mix(in oklab, var(--color-primary) 45%, transparent)',
          transition: 'box-shadow 120ms ease, border-color 120ms ease',
        }
      : undefined;

  const spinner = pending ? (
    <span className="ml-2 text-xs opacity-70" role="status" aria-live="polite">recalculandoâ€¦</span>
  ) : null;

  const startRef = useRef<HTMLInputElement | null>(null);
  const endRef   = useRef<HTMLInputElement | null>(null);
  const openPicker = (ref: React.RefObject<HTMLInputElement>) => {
    const el = ref.current;
    if (!el) return;
    // @ts-ignore
    if (el.showPicker) el.showPicker(); else el.focus();
  };

  const activeChips = useMemo(() => {
    const chips: { key: string; label: string; onClear: () => void }[] = [];
    if (qDraft.trim())      chips.push({ key: 'q',      label: `â€œ${qDraft.trim()}â€`, onClear: () => { setQDraft(''); updateFilters({ q: '' }); } });
    if (typeValue !== 'ALL')   chips.push({ key: 'type',   label: `Type: ${typeValue}`,   onClear: () => setTypes('ALL') });
    if (geoValue !== 'ALL')    chips.push({ key: 'geo',    label: `GEO: ${geoValue}`,     onClear: () => setGeo('ALL') });
    if (partnerVal !== 'ALL')  chips.push({ key: 'partner',label: `Partner: ${partnerVal}`, onClear: () => setPartner('ALL') });
    if (themeVal !== 'ALL')    chips.push({ key: 'theme',  label: `Theme: ${themeVal}`,   onClear: () => setTheme('ALL') });
    if (dbTypeVal !== 'ALL')   chips.push({ key: 'db',     label: `DB: ${dbTypeVal}`,     onClear: () => setDbType('ALL') });
    if (hasRange) {
      const label = activePreset ? presetLabel(activePreset) : `${startDate} â†’ ${endDate}`;
      chips.push({ key: 'date', label, onClear: () => updateFilters({ dateRange: [null, null] }) });
    }
    return chips;
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [qDraft, typeValue, geoValue, partnerVal, themeVal, dbTypeVal, startDate, endDate, hasRange, activePreset]);

  return (
    <section className="card p-4 md:p-5">
      {/* Wrapper con gap vertical controlado por --filters-row-gap */}
      <div className="filters-stack">
        {/* BÃºsqueda libre */}
        <div>
          <input
            ref={inputRef}
            placeholder="Search campaign, partner, theme, dbâ€¦"
            value={qDraft}
            onChange={(e) => { setQDraft(e.target.value); updateFilters({ q: e.target.value }); }}
            className="input w-full"
            style={activeStyle(!!qDraft.trim())}
          />
          {spinner}
        </div>

        {/* Selectores rÃ¡pidos */}
        <div className="flex flex-wrap gap-3">
          <select value={typeValue}   onChange={(e) => setTypes(e.target.value)}   className="input" style={activeStyle(typeValue !== 'ALL')}>
            <option value="ALL">Type: All</option>
            {options.types.map(t => <option key={t} value={t}>{t}</option>)}
          </select>

          <select value={geoValue}    onChange={(e) => setGeo(e.target.value)}     className="input" style={activeStyle(geoValue !== 'ALL')}>
            <option value="ALL">GEO: All</option>
            {options.geos.map(g => <option key={g} value={g}>{g}</option>)}
          </select>

          <select value={partnerVal}  onChange={(e) => setPartner(e.target.value)} className="input" style={activeStyle(partnerVal !== 'ALL')}>
            <option value="ALL">Partner: All</option>
            {options.partners.map(x => <option key={x} value={x}>{x}</option>)}
          </select>

          <select value={themeVal}    onChange={(e) => setTheme(e.target.value)}   className="input" style={activeStyle(themeVal !== 'ALL')}>
            <option value="ALL">Theme: All</option>
            {options.themes.map(x => <option key={x} value={x}>{x}</option>)}
          </select>

          <select value={dbTypeVal}   onChange={(e) => setDbType(e.target.value)}  className="input" style={activeStyle(dbTypeVal !== 'ALL')}>
            <option value="ALL">DB Type: All</option>
            {options.dbTypes.map(x => <option key={x} value={x}>{x}</option>)}
          </select>
        </div>

        {/* Presets de fecha */}
        <div className="flex flex-wrap items-center gap-3">
          {([
            ['today','Today'],
            ['yesterday','Yesterday'],
            ['last7','Last 7'],
            ['last30','Last 30'],
            ['thisWeek','This week'],
            ['lastWeek','Last week'],
            ['thisMonth','This month'],
            ['lastMonth','Last month'],
            ['custom','Custom'],
          ] as [DatePreset,string][])
            .map(([key,label]) => {
              const isActive =
                (key !== 'custom' && activePreset === key) ||
                (key === 'custom' && hasRange && !activePreset);
              return (
                <Chip key={key} active={isActive} onClick={() => choosePreset(key === 'custom' ? 'custom' : key)}>
                  {label}
                </Chip>
              );
            })}
        </div>

        {/* Rango de fechas + acciones */}
        <div className="flex flex-wrap items-center gap-3 md:gap-4">
          {/* Start */}
          <div className="relative">
            <input
              ref={startRef}
              type="date"
              value={startDate}
              onChange={e => onStartChange(e.target.value)}
              className="input input-date w-40 pr-9"
              style={activeStyle(!!startDate)}
            />
            <button
              type="button"
              className="absolute inset-y-0 right-0 px-2 rounded-r-lg hover:bg-black/5 focus:outline-none focus:ring-2 focus:ring-primary/40"
              aria-label="Open start date picker"
              onClick={() => openPicker(startRef)}
            >
              <CalendarIcon />
            </button>
          </div>

          {/* End */}
          <div className="relative">
            <input
              ref={endRef}
              type="date"
              value={endDate}
              onChange={e => onEndChange(e.target.value)}
              className="input input-date w-40 pr-9"
              style={activeStyle(!!endDate)}
            />
            <button
              type="button"
              className="absolute inset-y-0 right-0 px-2 rounded-r-lg hover:bg-black/5 focus:outline-none focus:ring-2 focus:ring-primary/40"
              aria-label="Open end date picker"
              onClick={() => openPicker(endRef)}
            >
              <CalendarIcon />
            </button>
          </div>

          <div className="flex-1" />

          {/* === Acciones: Primario | divisor | Secundario === */}
          <div className="flex items-center gap-2 md:gap-3">
            {/* Grupo primario */}
            <div className="flex items-center gap-2 md:gap-3">
              <button onClick={() => updateFilters({ q: qDraft })} className="btn-primary">Apply</button>
              <button onClick={() => { setQDraft(''); resetFilters(); }} className="btn-ghost">Reset</button>
            </div>

            {/* Divisor visual */}
            <div className="h-6 w-px bg-[--color-border] mx-1 md:mx-2" aria-hidden />

            {/* Grupo secundario */}
            <div className="flex items-center gap-2 md:gap-2.5">
              <button
                type="button"
                className="btn-ghost text-sm px-3 py-1.5"
                aria-haspopup="dialog"
                title="Show/Hide columns"
                onClick={() => onOpenColumns?.()}
              >
                Columnsâ€¦
              </button>

              {onOpenExport && (
                <button
                  type="button"
                  className="text-sm px-3 py-1.5 rounded-md border border-[--color-border] hover:border-[--color-primary] hover:bg-[color-mix(in_oklab,var(--color-primary)_12%,transparent)] transition-colors inline-flex items-center gap-1.5"
                  aria-haspopup="dialog"
                  title="Export current view"
                  onClick={() => onOpenExport?.()}
                >
                  <DownloadIcon />
                  <span>Export</span>
                  {typeof exportCount === 'number' && exportCount > 0 && (
                    <span className="ml-0.5 text-[10px] opacity-70">({exportCount})</span>
                  )}
                </button>
              )}
            </div>
          </div>
        </div>

        {/* Chips activos */}
        {activeChips.length > 0 && (
          <div className="pt-2 md:pt-3 border-t border-[--color-border] flex flex-wrap items-center gap-2">
            {activeChips.map(c => (
              <span
                key={c.key}
                className="inline-flex items-center gap-2 rounded-full border border-[--color-border] bg-[color:var(--color-surface-2)] px-3 py-1 text-xs"
              >
                {c.label}
                <button
                  type="button"
                  aria-label={`Clear ${c.key}`}
                  className="rounded-full px-2 py-[2px] hover:bg-black/5"
                  onClick={c.onClear}
                >
                  Ã—
                </button>
              </span>
            ))}
            <button
              className="ml-2 text-xs underline decoration-dotted hover:opacity-80"
              onClick={() => { setQDraft(''); resetFilters(); }}
            >
              Clear all
            </button>
          </div>
        )}
      </div>
    </section>
  );
}

function CalendarIcon() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
      width="16" height="16" fill="none" stroke="currentColor"
      strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" aria-hidden="true"
    >
      <rect x="3" y="4" width="18" height="18" rx="2" ry="2"/>
      <line x1="16" y1="2" x2="16" y2="6"/>
      <line x1="8" y1="2" x2="8" y2="6"/>
      <line x1="3" y1="10" x2="21" y2="10"/>
    </svg>
  );
}

function DownloadIcon() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
      width="14" height="14" fill="none" stroke="currentColor"
      strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" aria-hidden="true"
    >
      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
      <path d="M7 10l5 5 5-5"/>
      <path d="M12 15V3"/>
    </svg>
  );
}

function presetLabel(p: Exclude<DatePreset,'custom'>) {
  switch (p) {
    case 'today': return 'Today';
    case 'yesterday': return 'Yesterday';
    case 'last7': return 'Last 7';
    case 'last30': return 'Last 30';
    case 'thisWeek': return 'This week';
    case 'lastWeek': return 'Last week';
    case 'thisMonth': return 'This month';
    case 'lastMonth': return 'Last month';
  }
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\CampaignKpis.tsx =====
'use client';

import { CampaignRow } from '@/types/campaign';

type Props = { data: CampaignRow[] };

const fmtEUR = new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' });
const fmtInt = new Intl.NumberFormat('es-ES');

export default function CampaignKpis({ data }: Props) {
  const total = data.length;

  let vSent = 0, turnover = 0, margin = 0;
  for (const r of data) {
    vSent   += r.vSent || 0;
    turnover += r.turnover || 0;
    margin  += r.margin || 0;
  }

  // eCPM ponderado por vSent (mÃ¡s representativo que el promedio simple)
  const weightedEcpm = vSent > 0 ? (turnover / vSent) * 1000 : 0;

  const cards: Array<{ label: string; value: string; tone?: 'pos'|'neg'|null }> = [
    { label: 'Campaigns',     value: fmtInt.format(total) },
    { label: 'Total V Sent',  value: fmtInt.format(vSent) },
    { label: 'Turnover',      value: fmtEUR.format(turnover) },
    { label: 'Margin',        value: fmtEUR.format(margin), tone: margin > 0 ? 'pos' : margin < 0 ? 'neg' : null },
    { label: 'Weighted eCPM', value: fmtEUR.format(weightedEcpm) },
  ];

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-3 mb-4">
      {cards.map((c) => (
        <div
          key={c.label}
          className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-4 shadow-sm"
        >
          <div className="text-xs uppercase opacity-70">{c.label}</div>
          <div
            className={[
              'text-xl font-semibold mt-1',
              c.tone === 'pos' ? 'text-[--color-primary]' : '',
              c.tone === 'neg' ? 'text-[--color-accent]'  : '',
            ].join(' ')}
          >
            {c.value}
          </div>
        </div>
      ))}
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\CampaignTable.tsx =====
'use client';

import { useEffect, useMemo, useRef, useState } from 'react';
import { CampaignRow } from '@/types/campaign';
import { useCampaignData } from '@/context/CampaignDataContext';
import CampaignFilters from './CampaignFilters';
import { useCampaignFilterEngine } from '@/hooks/useCampaignFilterEngine';

import ColumnPicker from '@/components/ui/ColumnPicker';
import RowActions from '@/components/table/RowActions';
import CreateCampaignModal from './create-campaign/CreateCampaignModal';
import type { DBType } from '@/data/reference';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';

import ExportModal from '@/components/export/ExportModal';          // [EXPORT]
import { type ColumnSpec } from '@/utils/exporters';                // [EXPORT]

/* ====== formatters ====== */
const fmtEUR = new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' });
const fmtInt = new Intl.NumberFormat('es-ES');
const fmtPct = new Intl.NumberFormat('es-ES', { style: 'percent', maximumFractionDigits: 2 });

type SortKey = keyof CampaignRow | 'marginPct' | '_idx' | 'none';

const COLVIS_STORAGE_KEY = 'monet_colvis_v1';
const ALWAYS_VISIBLE = new Set(['date', 'campaign']);

/* ====== helpers ====== */
const lc = (s?: string) => (s ?? '').trim().toLowerCase();

/* Canoniza DB Type a su forma correcta o null si no cuadra */
function canonDbType(s?: string): DBType | null {
  const n = lc(s);
  if (n === 'b2b') return 'B2B';
  if (n === 'b2c') return 'B2C';
  if (n === 'mixed') return 'Mixed';
  return null;
}

/* ====== tipos ====== */
type SummaryAgg = {
  vSent: number; routingCosts: number; qty: number; turnover: number; margin: number;
  weightedEcpm: number; marginPct: number | null; count: number;
};

type ColumnDef = {
  id:
    | 'date' | 'campaign' | 'advertiser' | 'invoiceOffice' | 'partner' | 'theme'
    | 'price' | 'type' | 'vSent' | 'routingCosts' | 'qty' | 'turnover'
    | 'margin' | 'marginPct' | 'ecpm' | 'database' | 'geo' | 'databaseType';
  label: string;
  numeric?: boolean;
  defaultVisible?: boolean;
  sortable?: boolean;
  sortKey?: SortKey;
  renderCell: (r: CampaignRow) => React.ReactNode;
  renderSummary?: (s: SummaryAgg) => React.ReactNode;
};

/* ====== helpers de estilo ====== */
type MarginTier = 'green' | 'amber' | 'red' | null;
function marginPctTier(pct: number | null | undefined): MarginTier {
  if (pct == null) return null;
  if (pct >= 0.70) return 'green';
  if (pct >= 0.01) return 'amber';
  return 'red';
}
function marginPctTextClass(pct: number | null | undefined) {
  const t = marginPctTier(pct);
  switch (t) {
    case 'green': return 'text-[color:var(--color-primary)]';
    case 'amber': return 'text-[color-mix(in_oklab,var(--color-accent)_58%,var(--color-primary)_42%)]';
    case 'red':   return 'text-[color:var(--color-accent)]';
    default:      return 'opacity-70';
  }
}

/* === iconos === */
function SortIcon({ active, dir }: { active: boolean; dir: 'asc' | 'desc' }) {
  if (!active) {
    return (
      <svg width="10" height="10" viewBox="0 0 24 24" aria-hidden>
        <path d="M7 10l5-5 5 5" fill="none" stroke="currentColor" strokeWidth="2"/>
        <path d="M7 14l5 5 5-5" fill="none" stroke="currentColor" strokeWidth="2" opacity=".6"/>
      </svg>
    );
  }
  return dir === 'asc' ? (
    <svg width="10" height="10" viewBox="0 0 24 24" aria-hidden>
      <path d="M7 14l5-5 5 5" fill="none" stroke="currentColor" strokeWidth="2"/>
    </svg>
  ) : (
    <svg width="10" height="10" viewBox="0 0 24 24" aria-hidden>
      <path d="M7 10l5 5 5-5" fill="none" stroke="currentColor" strokeWidth="2"/>
    </svg>
  );
}
function DownIcon() {
  return (
    <svg width="12" height="12" viewBox="0 0 24 24" aria-hidden>
      <path d="M7 10l5 5 5-5" fill="none" stroke="currentColor" strokeWidth="2"/>
    </svg>
  );
}

/* ====== columnas ====== */
const COLUMN_DEFS: ColumnDef[] = [
  { id: 'date', label: 'DATE', defaultVisible: true, sortable: true, sortKey: 'date',
    renderCell: (r) => new Date(r.date).toLocaleDateString('es-ES') },
  { id: 'campaign', label: 'CAMPAIGN', defaultVisible: true, sortable: true, sortKey: 'campaign',
    renderCell: (r) => r.campaign },
  { id: 'advertiser', label: 'ADVERTISER', defaultVisible: true, sortable: true, sortKey: 'advertiser',
    renderCell: (r) => r.advertiser },
  { id: 'invoiceOffice', label: 'INVOICE OFFICE', defaultVisible: true, sortable: true, sortKey: 'invoiceOffice',
    renderCell: (r) => r.invoiceOffice },
  { id: 'partner', label: 'PARTNER', defaultVisible: true, sortable: true, sortKey: 'partner',
    renderCell: (r) => r.partner },
  { id: 'theme', label: 'THEME', defaultVisible: true, sortable: true, sortKey: 'theme',
    renderCell: (r) => r.theme },
  { id: 'price', label: 'PRICE', numeric: true, defaultVisible: true, sortable: true, sortKey: 'price',
    renderCell: (r) => fmtEUR.format(r.price) },
  { id: 'type', label: 'TYPE', defaultVisible: true, sortable: true, sortKey: 'type',
    renderCell: (r) => r.type },
  { id: 'vSent', label: 'V SENT', numeric: true, defaultVisible: true, sortable: true, sortKey: 'vSent',
    renderCell: (r) => fmtInt.format(r.vSent), renderSummary: (s) => fmtInt.format(s.vSent) },
  { id: 'routingCosts', label: 'ROUTING COSTS', numeric: true, defaultVisible: true, sortable: true, sortKey: 'routingCosts',
    renderCell: (r) => fmtEUR.format(r.routingCosts), renderSummary: (s) => fmtEUR.format(s.routingCosts) },
  { id: 'qty', label: 'QTY', numeric: true, defaultVisible: true, sortable: true, sortKey: 'qty',
    renderCell: (r) => fmtInt.format(r.qty), renderSummary: (s) => fmtInt.format(s.qty) },
  { id: 'turnover', label: 'TURNOVER', numeric: true, defaultVisible: true, sortable: true, sortKey: 'turnover',
    renderCell: (r) => fmtEUR.format(r.turnover), renderSummary: (s) => fmtEUR.format(s.turnover) },
  { id: 'margin', label: 'MARGIN', numeric: true, defaultVisible: true, sortable: true, sortKey: 'margin',
    renderCell: (r) => {
      const pct = r.turnover > 0 ? r.margin / r.turnover : null;
      return <span className={marginPctTextClass(pct)}>{fmtEUR.format(r.margin)}</span>;
    },
    renderSummary: (s) => (
      <span className={marginPctTextClass(s.marginPct)}>{fmtEUR.format(s.margin)}</span>
    ) },
  { id: 'marginPct', label: 'MARGIN (%)', numeric: true, defaultVisible: true, sortable: true, sortKey: 'marginPct',
    renderCell: (r) => {
      const pct = r.turnover > 0 ? r.margin / r.turnover : null;
      return <span className={marginPctTextClass(pct)}>{pct == null ? 'â€”' : fmtPct.format(pct)}</span>;
    },
    renderSummary: (s) => {
      const tier = marginPctTier(s.marginPct);
      const badge =
        tier === 'green' ? 'badge-positive'
        : tier === 'amber' ? 'badge-warn'
        : tier === 'red'   ? 'badge-negative'
        : '';
      return (
        <span className={`font-bold ${marginPctTextClass(s.marginPct)} ${badge}`}>
          {s.marginPct == null ? 'â€”' : fmtPct.format(s.marginPct)}
        </span>
      );
    } },
  { id: 'ecpm', label: 'ECPM', numeric: true, defaultVisible: true, sortable: true, sortKey: 'ecpm',
    renderCell: (r) => fmtEUR.format(r.ecpm), renderSummary: (s) => fmtEUR.format(s.weightedEcpm) },
  { id: 'database', label: 'DATABASE', defaultVisible: true, sortable: true, sortKey: 'database',
    renderCell: (r) => r.database },
  { id: 'geo', label: 'GEO', defaultVisible: true, sortable: true, sortKey: 'geo',
    renderCell: (r) => r.geo },
  { id: 'databaseType', label: 'DB TYPE', defaultVisible: true, sortable: true, sortKey: 'databaseType',
    renderCell: (r) => r.databaseType },
];

/* ====== [EXPORT] columnas crudas para export ====== */
const EXPORT_COLS_ALL: ColumnSpec[] = [
  { id: 'date',         label: 'DATE',            accessor: r => r.date },
  { id: 'campaign',     label: 'CAMPAIGN',        accessor: r => r.campaign },
  { id: 'advertiser',   label: 'ADVERTISER',      accessor: r => r.advertiser },
  { id: 'invoiceOffice',label: 'INVOICE OFFICE',  accessor: r => r.invoiceOffice },
  { id: 'partner',      label: 'PARTNER',         accessor: r => r.partner },
  { id: 'theme',        label: 'THEME',           accessor: r => r.theme },
  { id: 'price',        label: 'PRICE',           accessor: r => r.price },
  { id: 'type',         label: 'TYPE',            accessor: r => r.type },
  { id: 'vSent',        label: 'V SENT',          accessor: r => r.vSent },
  { id: 'routingCosts', label: 'ROUTING COSTS',   accessor: r => r.routingCosts },
  { id: 'qty',          label: 'QTY',             accessor: r => r.qty },
  { id: 'turnover',     label: 'TURNOVER',        accessor: r => r.turnover },
  { id: 'margin',       label: 'MARGIN',          accessor: r => r.margin },
  { id: 'marginPct',    label: 'MARGIN (%)',      accessor: r => (r.turnover > 0 ? r.margin / r.turnover : null) },
  { id: 'ecpm',         label: 'ECPM',            accessor: r => r.ecpm },
  { id: 'database',     label: 'DATABASE',        accessor: r => r.database },
  { id: 'geo',          label: 'GEO',             accessor: r => r.geo },
  { id: 'databaseType', label: 'DB TYPE',         accessor: r => r.databaseType },
];

/* ====== helpers periodo (badge en KPIs) ====== */
function fmtLocal(d: Date) {
  const y = d.getFullYear();
  const m = String(d.getMonth() + 1).padStart(2, '0');
  const day = String(d.getDate()).padStart(2, '0');
  return `${y}-${m}-${day}`;
}
function startOfWeek(d: Date) {
  const n = new Date(d.getFullYear(), d.getMonth(), d.getDate());
  const w = (n.getDay() || 7) - 1;
  n.setDate(n.getDate() - w);
  return n;
}
function endOfWeek(d: Date) {
  const s = startOfWeek(d);
  return new Date(s.getFullYear(), s.getMonth(), s.getDate() + 6);
}
function startOfMonth(d: Date) { return new Date(d.getFullYear(), d.getMonth(), 1); }
function endOfMonth(d: Date) { return new Date(d.getFullYear(), d.getMonth() + 1, 0); }
function rangeForPresetKey(
  key: 'today'|'yesterday'|'thisWeek'|'lastWeek'|'thisMonth'|'lastMonth'|'last7'|'last30'
): [string,string] {
  const now = new Date();
  if (key==='today')     { const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()); const s=fmtLocal(a); return [s,s]; }
  if (key==='yesterday') { const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()-1); const s=fmtLocal(a); return [s,s]; }
  if (key==='thisWeek')  return [fmtLocal(startOfWeek(now)), fmtLocal(endOfWeek(now))];
  if (key==='lastWeek')  { const k=new Date(now.getFullYear(),now.getMonth(),now.getDate()-7); return [fmtLocal(startOfWeek(k)), fmtLocal(endOfWeek(k))]; }
  if (key==='thisMonth') return [fmtLocal(startOfMonth(now)), fmtLocal(endOfMonth(now))];
  if (key==='lastMonth') { const k=new Date(now.getFullYear(),now.getMonth()-1,15); return [fmtLocal(startOfMonth(k)), fmtLocal(endOfMonth(k))]; }
  if (key==='last7')     { const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()-6); const b=new Date(now.getFullYear(),now.getMonth(),now.getDate()); return [fmtLocal(a),fmtLocal(b)]; }
  const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()-29);
  const b=new Date(now.getFullYear(),now.getMonth(),now.getDate());
  return [fmtLocal(a),fmtLocal(b)];
}
function activePresetLabelFromRange(range?: [string|null,string|null] | null) {
  const start = range?.[0], end = range?.[1];
  if (!start || !end) return null;
  const entries = [
    ['today','Today'],['yesterday','Yesterday'],['thisWeek','This week'],['lastWeek','Last week'],
    ['thisMonth','This month'],['lastMonth','Last month'],['last7','Last 7'],['last30','Last 30'],
  ] as const;
  for (const [k,label] of entries) {
    const [s,e] = rangeForPresetKey(k as any);
    if (s===start && e===end) return label;
  }
  return `${start} â†’ ${end}`;
}

/* ====== KPI tile ====== */
function KpiTile({
  label, value, tone, asBadge = false, subValue, rightHint, title,
}: {
  label: string; value: string; tone?: 'pos' | 'warn' | 'neg' | null;
  asBadge?: boolean; subValue?: string | null; rightHint?: string | null; title?: string;
}) {
  const toneText =
    tone === 'pos'  ? 'text-[color:var(--color-primary)]' :
    tone === 'neg'  ? 'text-[color:var(--color-accent)]' :
    tone === 'warn' ? 'text-[color-mix(in_oklab,var(--color-accent)_58%,var(--color-primary)_42%)]'
                    : 'opacity-90';

  const badgeClass =
    tone === 'pos'
      ? 'text-[color:var(--color-primary)] bg-[color-mix(in_oklab,var(--color-primary)_32%,transparent)] border border-[color-mix(in_oklab,var(--color-primary)_55%,transparent)]'
      : tone === 'neg'
      ? 'text-[color:var(--color-accent)] bg-[color-mix(in_oklab,var(--color-accent)_30%,transparent)] border border-[color-mix(in_oklab,var(--color-accent)_55%,transparent)]'
      : tone === 'warn'
      ? 'text-[color-mix(in_oklab,var(--color-accent)_58%,var(--color-primary)_42%)] bg-[color-mix(in_oklab,var(--color-accent)_22%,var(--color-primary)_22%)] border border-[color-mix(in_oklab,var(--color-accent)_45%,var(--color-primary)_20%)]'
      : 'bg-[color-mix(in_oklab,var(--color-text)_14%,transparent)] text-[color-mix(in_oklab,var(--color-text)_90%,black)] border border-[color-mix(in_oklab,var(--color-text)_22%,transparent)]';

  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface-2)]/60 p-3 md:p-4 min-h-[92px]" title={title}>
      <div className="text-[11px] md:text-xs uppercase tracking-wide opacity-70">{label}</div>
      {asBadge ? (
        <div className="mt-2">
          <span className={['inline-flex items-center gap-1 px-2 py-0.5 rounded-full text-sm font-bold tabular-nums leading-tight', badgeClass].join(' ')}>
            {tone === 'neg' ? <DownIcon /> : null}
            {value}
          </span>
          {subValue ? <div className={['mt-1 text-xs tabular-nums leading-tight', toneText].join(' ')}>{subValue}</div> : null}
        </div>
      ) : (
        <div className={['mt-1 flex items-baseline gap-2', toneText].join(' ')}>
          <span className="text-lg md:text-xl font-semibold tabular-nums leading-tight">{value}</span>
          {rightHint ? <span className="text-[11px] md:text-xs opacity-70">{rightHint}</span> : null}
        </div>
      )}
    </div>
  );
}

/* =================================================================== */

export default function CampaignTable() {
  const { rows, removeCampaign } = useCampaignData();

  /* ====== CatÃ¡logos canÃ³nicos ====== */
  const catalogs = useCatalogOverrides();
  const PARTNERS = catalogs?.PARTNERS ?? [];
  const THEMES = (catalogs?.THEMES ?? []) as string[];
  const TYPES = (catalogs?.TYPES ?? ['CPL', 'CPM', 'CPC', 'CPA']).slice();

  /* ====== Filtros ====== */
  const engine = useCampaignFilterEngine(rows);
  const dataSource = engine.filteredRows as unknown as (CampaignRow & { _idx: number })[];

  // Opciones sin duplicados y con etiquetas canÃ³nicas
  const options = useMemo(() => {
    // quÃ© hay presente en el dataset (normalizado)
    const presentTypesLc = new Set(rows.map(r => lc(r.type)).filter(Boolean));
    const presentPartners = new Set(rows.map(r => lc(r.partner)).filter(Boolean));
    const presentThemes = new Set(rows.map(r => lc(r.theme)).filter(Boolean));
    const presentGeos = new Set(rows.map(r => (r.geo ?? '').trim().toUpperCase()).filter(Boolean));
    const presentDbTypes = new Set(
      rows.map(r => canonDbType(r.databaseType)).filter((x): x is DBType => !!x)
    );

    // mapas canÃ³nicos (lc -> etiqueta canÃ³nica)
    const partnerMap = new Map(PARTNERS.map(p => [lc(p.name), p.name]));
    const themeMap = new Map(THEMES.map(t => [lc(t), t]));

    // TYPE: intersecciÃ³n entre canÃ³nicos y presentes (evita cpl/CPL)
    const typeOpts = TYPES.filter(t => presentTypesLc.has(lc(t)));

    // PARTNER/THEME: colapsa por lc y etiqueta con la canÃ³nica si existe
    const partnerOpts = Array.from(presentPartners)
      .map(k => partnerMap.get(k) ?? (rows.find(r => lc(r.partner) === k)?.partner ?? k))
      .sort((a, b) => a.localeCompare(b, 'es'));

    const themeOpts = Array.from(presentThemes)
      .map(k => themeMap.get(k) ?? (rows.find(r => lc(r.theme) === k)?.theme ?? k))
      .sort((a, b) => a.localeCompare(b, 'es'));

    // GEO: mayÃºsculas
    const geoOpts = Array.from(presentGeos).sort();

    // DB TYPE: orden estable canÃ³nico
    const dbOrder: DBType[] = ['B2B', 'B2C', 'Mixed'];
    const dbTypeOpts = dbOrder.filter(t => presentDbTypes.has(t));

    return {
      geos: geoOpts,
      partners: partnerOpts,
      themes: themeOpts,
      types: typeOpts,
      dbTypes: dbTypeOpts,
    };
  }, [rows, PARTNERS, THEMES, TYPES]);

  /* ====== Orden/paginaciÃ³n ====== */
  const [sortKey, setSortKey] = useState<SortKey>('none');
  const [sortDir, setSortDir] = useState<'asc' | 'desc'>('asc');
  const [page, setPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);

  const [editing, setEditing] = useState<CampaignRow | null>(null);
  const [seedCreate, setSeedCreate] = useState<CampaignRow | null>(null);
  const [flashId, setFlashId] = useState<string | null>(null);

  // [EXPORT]
  const [openExport, setOpenExport] = useState(false);

  /* ====== Column visibility persistente ====== */
  const defaults = useMemo(
    () => COLUMN_DEFS.filter(c => c.defaultVisible !== false).map(c => c.id),
    []
  );
  const defaultVisibleSet = useMemo(() => {
    const s = new Set<string>(defaults);
    for (const id of ALWAYS_VISIBLE) s.add(id);
    return s;
  }, [defaults]);

  const [visibleIds, setVisibleIds] = useState<Set<string>>(
    () => new Set(defaultVisibleSet)
  );
  useEffect(() => {
    try {
      const raw = localStorage.getItem(COLVIS_STORAGE_KEY);
      if (!raw) return;
      const arr = JSON.parse(raw) as string[];
      const next = new Set(arr.filter(id => COLUMN_DEFS.some(c => c.id === id)));
      for (const id of ALWAYS_VISIBLE) next.add(id);
      let changed = next.size !== defaultVisibleSet.size;
      if (!changed) for (const id of next) if (!defaultVisibleSet.has(id)) { changed = true; break; }
      if (changed) setVisibleIds(next);
    } catch {}
  }, [defaultVisibleSet]);

  const applyVisible = (next: Set<string>) => {
    for (const id of ALWAYS_VISIBLE) next.add(id);
    if (sortKey !== 'none') {
      const sortedCol = COLUMN_DEFS.find(c => (c.sortKey ?? (c.id as SortKey)) === sortKey);
      if (sortedCol && !next.has(sortedCol.id)) setSortKey('none');
    }
    setVisibleIds(new Set(next));
    try { localStorage.setItem(COLVIS_STORAGE_KEY, JSON.stringify([...next])); } catch {}
  };

  useEffect(() => { setPage(1); }, [dataSource, sortKey, sortDir, pageSize, visibleIds]);

  const visibleCols = useMemo(
    () => COLUMN_DEFS.filter(c => visibleIds.has(c.id)),
    [visibleIds]
  );
  const marginPctOf = (r: CampaignRow) => (r.turnover > 0 ? r.margin / r.turnover : null);

  useEffect(() => {
    if (!flashId) return;
    const t = setTimeout(() => setFlashId(null), 1400);
    return () => clearTimeout(t);
  }, [flashId]);

  const sortedAll = useMemo(() => {
    const arr = [...dataSource];
    if (sortKey === 'none') return arr;
    return arr.sort((a, b) => {
      let va: any, vb: any;
      if (sortKey === 'marginPct') { va = marginPctOf(a); vb = marginPctOf(b); }
      else { va = (a as any)[sortKey]; vb = (b as any)[sortKey]; }

      if (va == null && vb == null) return a._idx - b._idx;
      if (va == null) return 1;
      if (vb == null) return -1;

      let cmp = typeof va === 'number' && typeof vb === 'number'
        ? va - vb
        : String(va).localeCompare(String(vb));
      if (cmp === 0) cmp = a._idx - b._idx;
      return sortDir === 'asc' ? cmp : -cmp;
    });
  }, [dataSource, sortKey, sortDir]);

  type Totals = { vSent: number; routingCosts: number; qty: number; turnover: number; margin: number; weightedEcpm: number; };
  const summary = useMemo<SummaryAgg>(() => {
    const init: Totals = { vSent: 0, routingCosts: 0, qty: 0, turnover: 0, margin: 0, weightedEcpm: 0 };
    const totals = sortedAll.reduce<Totals>((acc, r) => {
      acc.vSent += r.vSent || 0;
      acc.routingCosts += r.routingCosts || 0;
      acc.qty += r.qty || 0;
      acc.turnover += r.turnover || 0;
      acc.margin += r.margin || 0;
      acc.weightedEcpm += (r.ecpm || 0) * (r.vSent || 0);
      return acc;
    }, init);
    const weightedEcpm = totals.vSent > 0 ? totals.weightedEcpm / totals.vSent : 0;
    const marginPct = totals.turnover > 0 ? totals.margin / totals.turnover : null;
    return { ...totals, weightedEcpm, marginPct, count: sortedAll.length };
  }, [sortedAll]);

  const pageCount = Math.max(1, Math.ceil(sortedAll.length / pageSize));
  const start = (page - 1) * pageSize;
  const end = start + pageSize;
  const pageRows = sortedAll.slice(start, end);

  function setSortBy(k: SortKey) {
    if (sortKey !== k) { setSortKey(k); setSortDir('asc'); }
    else { setSortDir(sortDir === 'asc' ? 'desc' : 'asc'); }
  }

  /* ====== MediciÃ³n de alturas para la lÃ¡mina / offset ====== */
  const refFilters = useRef<HTMLDivElement>(null);
  const refKpis = useRef<HTMLDivElement>(null);
  const [sizes, setSizes] = useState({ filters: 0, kpis: 0 });

  const bandGapPx = 16; // debe casar con --band-gap-y

  useEffect(() => {
    const update = () => {
      setSizes({
        filters: refFilters.current?.offsetHeight ?? 0,
        kpis: refKpis.current?.offsetHeight ?? 0,
      });
    };
    const ro = new ResizeObserver(update);
    if (refFilters.current) ro.observe(refFilters.current);
    if (refKpis.current) ro.observe(refKpis.current);
    window.addEventListener('resize', update);
    update();
    return () => {
      ro.disconnect();
      window.removeEventListener('resize', update);
    };
  }, []);

  // Offset donde debe â€œpegarseâ€ el thead (debajo del stack sticky)
  const stackedBottom = `calc(var(--content-sticky-top) + ${sizes.filters}px + ${bandGapPx}px + ${sizes.kpis}px)`;

  /* === Header de columna sticky â€” usa la regla CSS global === */
  const Th = ({ col }: { col: ColumnDef }) => {
    const active = col.sortable && sortKey === (col.sortKey ?? (col.id as SortKey));
    const ariaSort =
      col.sortable
        ? (active ? (sortDir === 'asc' ? 'ascending' : 'descending') : 'none')
        : undefined;
    return (
      <th
        onClick={col.sortable ? () => setSortBy(col.sortKey ?? (col.id as SortKey)) : undefined}
        aria-sort={ariaSort as any}
        className={`${col.numeric ? 'text-right whitespace-nowrap' : 'text-left'} ${col.sortable ? 'cursor-pointer select-none' : ''}`}
      >
        <div className="flex items-center gap-1 justify-between">
          <span>{col.label}</span>
          {col.sortable && <SortIcon active={!!active} dir={sortDir} />}
        </div>
      </th>
    );
  };

  /* ====== Column picker ====== */
  const [pickerOpen, setPickerOpen] = useState(false);
  const pickerColumns = useMemo(
    () => COLUMN_DEFS.map(c => ({ id: c.id, label: c.label, disabled: ALWAYS_VISIBLE.has(c.id) })), []
  );

  // [EXPORT] columnas visibles para export, en el mismo orden actual
  const exportVisibleCols: ColumnSpec[] = useMemo(() => {
    const ids = visibleCols.map(c => c.id);
    return EXPORT_COLS_ALL.filter(c => ids.includes(c.id));
  }, [visibleCols]);

  // [EXPORT] nombre sugerido de archivo con periodo + timestamp corto
  const exportFileBase = useMemo(() => {
    const period = activePresetLabelFromRange(engine.filters.dateRange ?? null) || 'All';
    const stamp = new Date().toISOString().slice(0,16).replace(/[:T]/g,'');
    return `campaigns_${String(period).toLowerCase().replace(/\s+/g,'-')}_${stamp}`;
  }, [engine.filters.dateRange]);

  return (
    <div className="w-full px-2 md:px-3 lg:px-4">
      {/* ===== Sticky stack: Filtros + Backplate + KPIs ===== */}
      <div
        className="-mx-2 md:-mx-3 lg:-mx-4 px-2 md:px-3 lg:px-4"
        style={{ ['--band-gap-y' as any]: `${bandGapPx}px` }}
      >
        {/* Filtros (sticky) */}
        <div
          ref={refFilters}
          style={{
            position: 'sticky',
            top: 'var(--content-sticky-top)',
            zIndex: 60,
            marginBottom: 'var(--band-gap-y)',
          }}
        >
          <CampaignFilters
            filters={engine.filters}
            updateFilters={engine.updateFilters}
            resetFilters={engine.resetFilters}
            options={options}
            pending={engine.pending}
            onOpenColumns={() => setPickerOpen(true)}
            onOpenExport={() => setOpenExport(true)}     // â† NUEVO
            exportCount={sortedAll.length}    // â† NUEVO contador para el botÃ³n Export
          />
        </div>

        {/* LÃ¡mina de fondo â€” debajo de thead */}
        <div
          aria-hidden
          style={{
            position: 'sticky',
            top: 'var(--content-sticky-top)',
            zIndex: 20,      // por debajo de thead (45), KPIs (50) y filtros (60)
            height: 0,
            pointerEvents: 'none',
          }}
        >
          <div
            style={{
              position: 'absolute',
              left: '-0.5rem',
              right: '-0.5rem',
              height: `calc(${sizes.filters}px + ${bandGapPx}px + ${sizes.kpis}px)`,
              background: 'var(--color-bg-outer)',
              borderBottom: '1px solid var(--color-border)',
              boxShadow: '0 6px 16px rgba(0,0,0,.06)',
            }}
          />
        </div>

        {/* KPIs (sticky) */}
        <div
          ref={refKpis}
          style={{
            position: 'sticky',
            top: `calc(var(--content-sticky-top) + ${sizes.filters}px + var(--band-gap-y))`,
            zIndex: 50,
          }}
        >
          <div
            role="region"
            aria-labelledby="kpi-recap-title"
            aria-live="polite"
            className="rounded-xl border border-[--color-border] ring-1 ring-white/10 bg-[color:var(--color-surface)]/90 backdrop-blur-md shadow-xl"
          >
            <h2 id="kpi-recap-title" className="sr-only">Resumen de KPIs</h2>

            {/* badge de periodo + acciones */}
            <div className="px-3 md:px-4 pt-2 flex justify-end">
              <span className="text-[11px] md:text-xs rounded-full px-2 py-1
                                bg-[color-mix(in_oklab,var(--color-text)_10%,transparent)]
                                text-[color-mix(in_oklab,var(--color-text)_85%,black)]">
                {activePresetLabelFromRange(engine.filters.dateRange ?? null) || 'All data'}
              </span>
            </div>
            
            {/* KPIs */}
            <div className="p-3 md:p-4 grid grid-cols-2 sm:grid-cols-4 gap-2 md:gap-3">
              <KpiTile label="Turnover" value={fmtEUR.format(summary.turnover)} title="Suma de turnover del dataset filtrado" />
              <KpiTile
                label="Margin (%)"
                value={summary.marginPct == null ? 'â€”' : fmtPct.format(summary.marginPct)}
                tone={(() => {
                  const tier = marginPctTier(summary.marginPct);
                  return tier === 'green' ? 'pos' : tier === 'amber' ? 'warn' : tier === 'red' ? 'neg' : null;
                })()}
                asBadge
                subValue={fmtEUR.format(summary.margin)}
                title="Margin% = Margin / Turnover"
              />
              <KpiTile label="V Sent" value={fmtInt.format(summary.vSent)} title="Volumen de envÃ­os en el periodo" />
              <KpiTile label="eCPM" value={fmtEUR.format(summary.weightedEcpm)} rightHint="â‚¬/k" title="eCPM ponderado = Î£(ecpmÂ·vSent) / Î£(vSent)" />
            </div>

            <div className="px-3 md:px-4 pb-3 -mt-1 border-t border-white/10 text-xs opacity-80">
              <span className="tabular-nums">
                Routing: <strong>{fmtEUR.format(summary.routingCosts)}</strong> â€¢ QTY: <strong>{fmtInt.format(summary.qty)}</strong>
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* ColumnPicker */}
      {pickerOpen && (
        <ColumnPicker
          columns={pickerColumns}
          visible={visibleIds}
          onChange={applyVisible}
          onClose={() => setPickerOpen(false)}
          defaults={defaults}
        />
      )}

      {/* ====== Tabla ====== */}
      <div
        className="table-wrap mt-6"
        style={{
          // por si en CSS usas la var para el offset
          ['--table-sticky-offset' as any]: stackedBottom,
        }}
      >
        <table className="table min-w-[1280px] tabular-nums">
          <thead>
            <tr>
              {visibleCols.map(col => (
                <Th key={col.id} col={col} />
              ))}
              <th className="w-[1%] text-right pr-2">â‹¯</th>
            </tr>
          </thead>

          <tbody>
            {/* SUMMARY */}
            <tr className="row-summary">
              {visibleCols.map((col, idx) => {
                if (idx === 0) {
                  return <td key={col.id} className="px-3 py-2 text-sm">SUMMARY ({summary.count})</td>;
                }
                const content = col.renderSummary ? col.renderSummary(summary) : null;
                return (
                  <td key={col.id} className={`px-3 py-2 text-sm ${col.numeric ? 'text-right whitespace-nowrap' : ''}`}>
                    {content}
                  </td>
                );
              })}
              <td />
            </tr>

            {/* Filas */}
            {pageRows.map((r) => {
              const rowFlash = r.id === flashId ? 'row-flash' : '';
              return (
                <tr
                  key={r.id}
                  className={`hover:bg-white/5 transition-colors ${rowFlash}`}
                  onDoubleClick={() => setEditing(r)}
                >
                  {visibleCols.map((col) => (
                    <td key={col.id} className={`px-3 py-2 text-sm ${col.numeric ? 'text-right whitespace-nowrap' : ''}`}>
                      {col.renderCell(r)}
                    </td>
                  ))}
                  <td className="px-2 py-2 text-sm">
                    <RowActions
                      onEdit={() => setEditing(r)}
                      onDuplicate={() => setSeedCreate(r)}
                      onDelete={() => {
                        if (!confirm('Delete this campaign? This cannot be undone.')) return;
                        removeCampaign(r.id);
                      }}
                    />
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>

      {/* PaginaciÃ³n */}
      <div className="flex flex-wrap items-center justify-between gap-3 mt-3">
        <div className="text-sm opacity-80">
          Showing {sortedAll.length === 0 ? 0 : start + 1}â€“{Math.min(end, sortedAll.length)} of {sortedAll.length}
        </div>
        <div className="flex items-center gap-2">
          <label className="text-sm">Rows per page</label>
          <select value={pageSize} onChange={(e) => setPageSize(Number(e.target.value))} className="input w-24 py-1 text-sm">
            {[10, 20, 50, 100].map(n => <option key={n} value={n}>{n}</option>)}
          </select>

          <button onClick={() => setPage(p => Math.max(1, p - 1))} disabled={page <= 1} className="btn-ghost disabled:opacity-40 text-sm">
            Previous
          </button>
          <span className="text-sm">Page {page} / {pageCount}</span>
          <button onClick={() => setPage(p => Math.min(pageCount, p + 1))} disabled={page >= pageCount} className="btn-primary disabled:opacity-40 text-sm">
            Next
          </button>
        </div>
      </div>

      {/* Modales */}
      {editing && (
        <CreateCampaignModal
          mode="edit"
          initialRow={editing}
          onClose={() => setEditing(null)}
          onSaved={(id) => { setEditing(null); setFlashId(id); }}
        />
      )}
      {seedCreate && (
        <CreateCampaignModal
          mode="create"
          seed={seedCreate}
          onClose={() => setSeedCreate(null)}
        />
      )}

      {/* [EXPORT] Modal de exportaciÃ³n */}
      {openExport && (
        <ExportModal
          onClose={() => setOpenExport(false)}
          allRows={sortedAll}
          pageRows={pageRows}
          visibleColumns={exportVisibleCols}
          allColumns={EXPORT_COLS_ALL}
          defaultFilename={exportFileBase}
        />
      )}
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\Sidebar.tsx =====
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/context/AuthContext';            // ðŸ†•
import CreateCampaignModal from './create-campaign/CreateCampaignModal';
import ManageCatalogsModal from './catalogs/ManageCatalogsModal';
import ImportCsvModal from './import/ImportCsvModal';
import ManageUsersModal from '@/components/admin/ManageUsersModal'; // ðŸ†•

type Props = {
  collapsed: boolean;
  onToggleCollapse: () => void;
  hideCollapseToggle?: boolean;
  onActionDone?: () => void;
};

export default function Sidebar({
  collapsed,
  onToggleCollapse,
  hideCollapseToggle = false,
  onActionDone,
}: Props) {
  const router = useRouter();
  const { isAdmin, isEditor } = useAuth();                  // ðŸ†•

  const [openCreate, setOpenCreate] = useState(false);
  const [openManage, setOpenManage] = useState(false);
  const [openImport, setOpenImport] = useState(false);
  const [openUsers, setOpenUsers]   = useState(false);      // ðŸ†•

  const btnBase = (extra = '') =>
    collapsed
      ? `flex justify-center items-center rounded-xl border border-[--color-border] px-2 py-2 hover:bg-black/5 transition-colors ${extra}`
      : `w-full rounded-xl border border-[--color-border] px-3 py-2 text-left hover:bg-black/5 transition-colors ${extra}`;

  const BtnCreate = (
    <button
      onClick={() => isEditor && setOpenCreate(true)}
      disabled={!isEditor}
      aria-disabled={!isEditor}
      className={btnBase('disabled:opacity-50 disabled:pointer-events-none')}
      title={isEditor ? 'Create campaign' : 'Editors/Admins only'}
      aria-label="Create campaign"
    >
      <span className="text-lg leading-none">ï¼‹</span>
      {!collapsed && <span className="ml-2">Create campaign{!isEditor ? ' (locked)' : ''}</span>}
    </button>
  );

  const BtnImport = (
    <button
      onClick={() => isAdmin && setOpenImport(true)}
      disabled={!isAdmin}
      aria-disabled={!isAdmin}
      className={btnBase('mt-2 disabled:opacity-50 disabled:pointer-events-none')}
      title={isAdmin ? 'Import from CSV' : 'Admins only'}
      aria-label="Import from CSV"
    >
      <span className="text-lg leading-none">ðŸ“¥</span>
      {!collapsed && <span className="ml-2">Import from CSV{!isAdmin ? ' (admin)' : ''}</span>}
    </button>
  );

  const BtnManage = (
    <button
      onClick={() => isEditor && setOpenManage(true)}
      disabled={!isEditor}
      aria-disabled={!isEditor}
      className={btnBase('mt-2 disabled:opacity-50 disabled:pointer-events-none')}
      title={isEditor ? 'Manage catalogs' : 'Editors/Admins only'}
      aria-label="Manage catalogs"
    >
      <span className="text-lg leading-none">âš™</span>
      {!collapsed && <span className="ml-2">Manage catalogs{!isEditor ? ' (locked)' : ''}</span>}
    </button>
  );

  const BtnUsers = (
    <button
      onClick={() => isAdmin && setOpenUsers(true)}
      disabled={!isAdmin}
      aria-disabled={!isAdmin}
      className={btnBase('mt-2 disabled:opacity-50 disabled:pointer-events-none')}
      title={isAdmin ? 'Manage users' : 'Admins only'}
      aria-label="Manage users"
    >
      <span className="text-lg leading-none">ðŸ‘¥</span>
      {!collapsed && <span className="ml-2">Manage users{!isAdmin ? ' (admin)' : ''}</span>}
    </button>
  );

  const BtnReports = (
    <button
      onClick={() => router.push('/reports')}
      className={btnBase()}
      title="Reports"
      aria-label="Reports"
    >
      <span className="text-lg leading-none">ðŸ“Š</span>
      {!collapsed && <span className="ml-2">Reports</span>}
    </button>
  );

  return (
    <div className={collapsed ? 'shrink-0 self-start w-[56px]' : 'shrink-0 self-start w-full md:w-full'}>
      <div className="grid gap-3">
        <div className={collapsed ? 'card p-2' : 'card p-4'}>
          <div className={['flex items-center mb-2', collapsed ? 'justify-center' : 'justify-between'].join(' ')}>
            {!collapsed && (
              <div>
                <h2 className="text-base font-semibold">Actions</h2>
                <p className="muted text-xs">Quick tools</p>
              </div>
            )}
            {!hideCollapseToggle && (
              <button
                onClick={onToggleCollapse}
                className="rounded-lg border border-[--color-border] px-2 py-1 text-xs hover:bg-black/5 transition-colors"
                aria-label={collapsed ? 'Expand sidebar' : 'Collapse sidebar'}
                title={collapsed ? 'Expand' : 'Collapse'}
              >
                {collapsed ? 'â€º' : 'â€¹'}
              </button>
            )}
          </div>

          {!collapsed ? (
            <div className="space-y-3">
              {BtnCreate}
              {BtnImport}
              {BtnManage}
              {BtnUsers} {/* ðŸ†• */}
            </div>
          ) : (
            <>
              {BtnCreate}
              {BtnImport}
              {BtnManage}
              {BtnUsers} {/* ðŸ†• */}
            </>
          )}
        </div>

        <div className={collapsed ? 'card p-2' : 'card p-4'}>
          <div className={['flex items-center mb-2', collapsed ? 'justify-center' : 'justify-between'].join(' ')}>
            {!collapsed && (
              <div>
                <h2 className="text-base font-semibold">Analytics</h2>
                <p className="muted text-xs">Insights & reports</p>
              </div>
            )}
          </div>
          {!collapsed ? <div className="space-y-3">{BtnReports}</div> : <>{BtnReports}</>}
        </div>
      </div>

      {openCreate && (
        <CreateCampaignModal
          onClose={() => {
            setOpenCreate(false);
            onActionDone?.();
          }}
        />
      )}
      {openImport && (
        <ImportCsvModal
          onClose={() => {
            setOpenImport(false);
            onActionDone?.();
          }}
        />
      )}
      {openManage && (
        <ManageCatalogsModal
          onClose={() => {
            setOpenManage(false);
            onActionDone?.();
          }}
        />
      )}
      {openUsers && (
        <ManageUsersModal
          onClose={() => {
            setOpenUsers(false);
            onActionDone?.();
          }}
        />
      )}
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\UserMenu.tsx =====
'use client';

import { useEffect, useState } from 'react';
import { supabase } from '@/lib/supabase/client';
import { useRouter } from 'next/navigation';

export default function UserMenu() {
  const router = useRouter();
  const [email, setEmail] = useState<string | null>(null);

  useEffect(() => {
    supabase.auth.getUser().then(({ data }) => setEmail(data.user?.email ?? null));
    const { data: sub } = supabase.auth.onAuthStateChange(async () => {
      const { data } = await supabase.auth.getUser();
      setEmail(data.user?.email ?? null);
    });
    return () => sub.subscription.unsubscribe();
  }, []);

  const logout = async () => {
    await supabase.auth.signOut();
    router.replace('/login');
  };

  return (
    <div className="flex items-center gap-3">
      <span className="text-sm text-neutral-600">{email}</span>
      <button
        onClick={logout}
        className="text-sm rounded-md border px-3 py-1 hover:bg-neutral-50"
        title="Cerrar sesiÃ³n"
      >
        Salir
      </button>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\admin\ManageUsersModal.tsx =====
'use client';

import { createPortal } from 'react-dom';
import { useEffect, useMemo, useState } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { useAuth } from '@/context/AuthContext';

type Row = {
  user_id: string | null;
  email: string;
  role: 'admin' | 'editor';
  is_active: boolean;
  created_at: string | null;
  updated_at: string | null;
};

type TabState = 'list' | 'invite';

export default function ManageUsersModal({ onClose }: { onClose: () => void }) {
  const { isAdmin } = useAuth();
  const sb = useMemo(() => createClientComponentClient(), []);
  const [tab, setTab] = useState<TabState>('list');

  const [rows, setRows] = useState<Row[]>([]);
  const [loading, setLoading] = useState(true);
  const [banner, setBanner] = useState<null | { text: string; tone: 'ok'|'err'|'info' }>(null);

  const show = (text: string, tone: 'ok'|'err'|'info'='info') => {
    setBanner({ text, tone });
    window.clearTimeout((show as any)._t);
    (show as any)._t = window.setTimeout(() => setBanner(null), 3200);
  };

  // ---- helpers: detecciÃ³n de "Ãºltimo admin" y traducciÃ³n de errores del trigger
  const isLastActiveAdmin = (email: string) => {
    const admins = rows.filter(r => r.role === 'admin' && !!r.is_active);
    return admins.length === 1 && admins[0].email.toLowerCase() === email.toLowerCase();
  };

  const friendlyDbError = (raw?: string) => {
    const msg = String(raw || '');
    if (/Cannot remove the last active admin/i.test(msg)) {
      return 'No puedes quitar al Ãºltimo administrador activo.';
    }
    if (/Cannot delete the last active admin/i.test(msg)) {
      return 'No puedes borrar la fila del Ãºltimo administrador activo.';
    }
    return msg || 'Se produjo un error inesperado.';
  };

  // Buscar usuarios
  const fetchUsers = async () => {
    setLoading(true);
    const { data, error } = await sb
      .from('app_users')
      .select('user_id,email,role,is_active,created_at,updated_at')
      .order('email', { ascending: true });
    if (error) {
      show(error.message, 'err');
    } else {
      setRows((data || []) as Row[]);
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchUsers();
    // ESC para cerrar
    const onKey = (e: KeyboardEvent) => { if (e.key === 'Escape') onClose(); };
    document.addEventListener('keydown', onKey);
    return () => document.removeEventListener('keydown', onKey);
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Mutaciones
  const updateRole = async (email: string, role: 'admin'|'editor') => {
    // Bloqueo local: no permitir degradar al Ãºltimo admin
    if (role !== 'admin' && isLastActiveAdmin(email)) {
      return show('No puedes quitar al Ãºltimo administrador activo.', 'err');
    }
    const { error } = await sb.from('app_users').update({ role }).eq('email', email);
    if (error) return show(friendlyDbError(error.message), 'err');
    show('Role updated', 'ok');
    setRows(prev => prev.map(r => r.email === email ? { ...r, role } : r));
  };

  const updateActive = async (email: string, is_active: boolean) => {
    // Bloqueo local: no permitir desactivar al Ãºltimo admin
    if (!is_active && isLastActiveAdmin(email)) {
      return show('No puedes desactivar al Ãºltimo administrador activo.', 'err');
    }
    const { error } = await sb.from('app_users').update({ is_active }).eq('email', email);
    if (error) return show(friendlyDbError(error.message), 'err');
    show(is_active ? 'User activated' : 'User deactivated', 'ok');
    setRows(prev => prev.map(r => r.email === email ? { ...r, is_active } : r));
  };

  const removeRow = async (email: string) => {
    // Bloqueo local: no permitir borrar al Ãºltimo admin
    if (isLastActiveAdmin(email)) {
      return show('No puedes borrar la fila del Ãºltimo administrador activo.', 'err');
    }
    if (!confirm(`Delete row for "${email}"? (no borra la cuenta auth)`)) return;
    const { error } = await sb.from('app_users').delete().eq('email', email);
    if (error) return show(friendlyDbError(error.message), 'err');
    show('Row deleted', 'ok');
    setRows(prev => prev.filter(r => r.email !== email));
  };

  // Invite (OTP + upsert fila)
  const [invEmail, setInvEmail] = useState('');
  const [invRole, setInvRole] = useState<'admin'|'editor'>('editor');

  const invite = async () => {
    const email = invEmail.trim().toLowerCase();
    if (!email) return;

    const { error: upErr } = await sb
      .from('app_users')
      .upsert({ email, role: invRole, is_active: true }, { onConflict: 'email' });
    if (upErr) return show(friendlyDbError(upErr.message), 'err');

    try {
      const { error: otpErr } = await sb.auth.signInWithOtp({
        email,
        options: {
          emailRedirectTo:
            typeof window !== 'undefined'
              ? `${location.origin}/auth/callback`
              : undefined,
        },
      });
      if (otpErr) show(`Upsert ok, invite mail failed: ${otpErr.message}`, 'err');
      else show('Invitation sent', 'ok');
    } catch (e: any) {
      show(`Invite failed: ${e?.message || e}`, 'err');
    }

    setInvEmail('');
    setInvRole('editor');
    setTab('list');
    fetchUsers();
  };

  const resendInvite = async (email: string) => {
    try {
      const { error } = await sb.auth.signInWithOtp({
        email,
        options: {
          emailRedirectTo:
            typeof window !== 'undefined'
              ? `${location.origin}/auth/callback`
              : undefined,
        },
      });
      if (error) throw error;
      show('Invitation re-sent', 'ok');
    } catch (e: any) {
      show(e?.message || 'Could not resend invite', 'err');
    }
  };

  // UI
  const body = (
    <div
      className="fixed inset-0 z-[140] flex items-center justify-center p-4"
      role="dialog"
      aria-modal="true"
      onMouseDown={(e) => { if (e.target === e.currentTarget) onClose(); }}
    >
      <div className="absolute inset-0 bg-black/55 backdrop-blur-sm" />
      <div
        className="relative card w-full max-w-4xl max-h-[90vh] overflow-hidden border border-[--color-border] shadow-xl"
        style={{ background: 'var(--color-surface)' }}
        onMouseDown={(e) => e.stopPropagation()}
      >
        {/* Header */}
        <div className="sticky top-0 z-10 modal-chrome modal-header px-5 py-3">
          <div className="accent-strip" aria-hidden />
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold">Manage users</h3>
            <button className="btn-ghost" onClick={onClose} aria-label="Close">âœ•</button>
          </div>
        </div>

        {/* Body */}
        <div className="overflow-y-auto px-5 py-4 space-y-4 relative">
          {banner && (
            <div
              className={`rounded-lg border px-3 py-2 text-sm ${
                banner.tone === 'ok'
                  ? 'border-emerald-500/40 bg-emerald-500/10 text-emerald-700'
                  : banner.tone === 'info'
                    ? 'border-sky-500/40 bg-sky-500/10 text-sky-700'
                    : 'border-[--color-accent]/50 bg-[--color-accent]/10 text-[--color-accent]'
              }`}
            >
              {banner.text}
            </div>
          )}

          {!isAdmin && (
            <div className="rounded-lg border px-3 py-2 text-sm border-amber-400/40 bg-amber-400/10 text-amber-700">
              Read-only. Only admins can edit or invite.
            </div>
          )}

          {/* Tabs */}
          <div className="segmented">
            <button className="segmented-tab" aria-selected={tab==='list'} onClick={()=>setTab('list')}>
              Users
            </button>
            <button className="segmented-tab" aria-selected={tab==='invite'} onClick={()=>setTab('invite')}>
              Invite
            </button>
          </div>

          {tab === 'invite' && (
            <div className="subcard p-4 grid gap-3 max-w-xl">
              <label className="text-sm grid gap-1">
                <span className="muted">Email</span>
                <input
                  className="input"
                  value={invEmail}
                  onChange={(e)=>setInvEmail(e.target.value)}
                  placeholder="user@example.com"
                />
              </label>
              <label className="text-sm grid gap-1">
                <span className="muted">Role</span>
                <select
                  className="input"
                  value={invRole}
                  onChange={(e)=>setInvRole(e.target.value as any)}
                >
                  <option value="editor">Editor</option>
                  <option value="admin">Admin</option>
                </select>
              </label>
              <div className="flex gap-2">
                <button
                  className="btn-primary disabled:opacity-50 disabled:pointer-events-none"
                  onClick={invite}
                  disabled={!invEmail.trim() || !isAdmin}
                >
                  Send invitation
                </button>
                <button className="btn-ghost" onClick={()=>setTab('list')}>Cancel</button>
              </div>
            </div>
          )}

          {tab === 'list' && (
            <div className="manage-table">
              <table className="w-full text-sm">
                <thead>
                  <tr>
                    <th className="text-left font-medium px-3 py-2">Email</th>
                    <th className="text-left font-medium px-3 py-2">Role</th>
                    <th className="text-left font-medium px-3 py-2">Active</th>
                    <th className="text-left font-medium px-3 py-2">Updated</th>
                    <th className="text-left font-medium px-3 py-2" />
                  </tr>
                </thead>
              </table>
              <div className="manage-rows divide-y divide-[--color-border]/60">
                {loading ? (
                  <div className="px-3 py-5 text-sm opacity-70">Loadingâ€¦</div>
                ) : rows.length === 0 ? (
                  <div className="px-3 py-5 text-sm opacity-70">No users.</div>
                ) : rows.map((r) => (
                  <div
                    key={r.email}
                    className="grid grid-cols-[1.6fr_0.8fr_0.7fr_1fr_auto] gap-3 px-3 py-2 items-center"
                  >
                    <div className="truncate">{r.email}</div>

                    <div className="flex items-center gap-2">
                      <select
                        className="input"
                        value={r.role}
                        onChange={(e)=>updateRole(r.email, e.target.value as any)}
                        disabled={!isAdmin}
                      >
                        <option value="editor">Editor</option>
                        <option value="admin">Admin</option>
                      </select>
                    </div>

                    <div className="flex items-center gap-2">
                      <input
                        type="checkbox"
                        className="accent-[--color-primary]"
                        checked={r.is_active}
                        onChange={(e)=>updateActive(r.email, e.target.checked)}
                        disabled={!isAdmin}
                      />
                    </div>

                    <div className="text-xs opacity-70 truncate">
                      {r.updated_at || r.created_at || 'â€”'}
                    </div>

                    <div className="justify-self-end flex items-center gap-1">
                      {!r.user_id && (
                        <button
                          className="btn-ghost text-xs border border-[--color-border] px-2 py-1 disabled:opacity-50 disabled:pointer-events-none"
                          onClick={() => resendInvite(r.email)}
                          disabled={!isAdmin}
                          title="Resend invitation"
                        >
                          Resend
                        </button>
                      )}
                      <button
                        className="btn-ghost text-[--color-accent] disabled:opacity-50 disabled:pointer-events-none"
                        onClick={()=>removeRow(r.email)}
                        disabled={!isAdmin}
                        title="Delete row"
                      >
                        âœ•
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="sticky bottom-0 z-10 modal-chrome modal-footer px-5 py-3 flex items-center justify-end gap-2">
          <button className="btn-ghost" onClick={onClose}>Close</button>
        </div>
      </div>
    </div>
  );

  if (typeof document === 'undefined') return null;
  return createPortal(body, document.body);
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\auth\SignOutButton.tsx =====
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';

export default function SignOutButton() {
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [loading, setLoading] = useState(false);

  const onClick = () => {
    setLoading(true);

    // Lanzamos el signOut en segundo plano (sin bloquear la UI)
    const p = supabase.auth.signOut().catch(console.error);

    // Redirigimos ya â€” asÃ­ no dependemos de la red
    const fallback = setTimeout(() => {
      router.replace('/login');
    }, 200); // pequeÃ±o delay para que el click se vea â€œrespondidoâ€

    // Si el signOut termina antes/ despuÃ©s, volvemos a asegurar la redirecciÃ³n
    p.finally(() => {
      clearTimeout(fallback);
      router.replace('/login');
    });
  };

  return (
    <button
      type="button"
      onClick={onClick}
      disabled={loading}
      aria-busy={loading}
      aria-label="Sign out"
      title="Sign out"
      className="btn-ghost h-9 px-3"
    >
      {loading ? 'Signing outâ€¦' : 'Sign out'}
    </button>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\catalogs\ManageCatalogsModal.tsx =====
'use client';

import { createPortal } from 'react-dom';
import { useEffect, useMemo, useRef, useState } from 'react';
import { useCatalogs } from '@/context/CatalogOverridesContext';
import RowActions from '@/components/table/RowActions';
import { useAuth } from '@/context/AuthContext'; // ðŸ†• roles
import { normalizeGeoStrict } from '@/utils/geo'; // ðŸ†• GEO strict

type TabKey = 'campaigns' | 'partners' | 'databases' | 'themes' | 'types';

export default function ManageCatalogsModal({ onClose }: { onClose: () => void }) {
  const {
    CAMPAIGNS, PARTNERS, DATABASES, THEMES, TYPES,
    addCampaignRef, updateCampaignRef, removeCampaignRef,
    addPartnerRef, updatePartnerRef, removePartnerRef,
    addDatabaseRef, updateDatabaseRef, removeDatabaseRef,
    addTheme, removeTheme, addType, removeType,
    exportOverrides, resetOverrides,
    hasLocalChanges, importOverrides,
  } = useCatalogs();

  // ðŸ†• auth/roles
  const auth = useAuth?.();
  const role = (auth?.role as 'admin' | 'editor' | 'viewer' | undefined) ?? (auth?.isAdmin ? 'admin' : auth?.isEditor ? 'editor' : 'viewer');
  const isAdmin = role === 'admin' || !!auth?.isAdmin;
  const isEditor = role === 'editor' || !!auth?.isEditor;
  const canEdit = isAdmin || isEditor;    // puede CRUD unitario
  const canBulk = isAdmin;                // puede importar/exportar/reset

  const trapRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [tab, setTab] = useState<TabKey>('campaigns');

  // banner simple de feedback
  const [banner, setBanner] = useState<null | { text: string; variant: 'success' | 'error' | 'info' }>(null);
  const showBanner = (b: { text: string; variant: 'success' | 'error' | 'info' }) => {
    setBanner(b);
    window.clearTimeout((showBanner as any)._t);
    (showBanner as any)._t = window.setTimeout(() => setBanner(null), 3200);
  };

  // ESC -> cerrar
  useEffect(() => {
    const onKey = (e: KeyboardEvent) => { if (e.key === 'Escape') onClose(); };
    document.addEventListener('keydown', onKey);
    return () => document.removeEventListener('keydown', onKey);
  }, [onClose]);

  // Export JSON (delta de overrides)
  const download = () => {
    if (!canBulk) {
      showBanner({ text: 'Only admins can export overrides.', variant: 'error' });
      return;
    }
    if (!hasLocalChanges) return;
    const blob = new Blob([exportOverrides()], { type: 'application/json;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'catalog_overrides.json';
    a.click();
    URL.revokeObjectURL(url);
  };

  // Import JSON
  const triggerImport = () => {
    if (!canBulk) {
      showBanner({ text: 'Only admins can import overrides.', variant: 'error' });
      return;
    }
    fileInputRef.current?.click();
  };

  const onFilePicked: React.ChangeEventHandler<HTMLInputElement> = (e) => {
    const f = e.target.files?.[0];
    e.currentTarget.value = ''; // permite re-seleccionar el mismo archivo
    if (!f) return;
    if (!canBulk) {
      showBanner({ text: 'Only admins can import overrides.', variant: 'error' });
      return;
    }
    const reader = new FileReader();
    reader.onload = () => {
      const text = String(reader.result || '');
      const res = importOverrides(text);
      if (res.ok) {
        showBanner({ text: 'Overrides imported successfully.', variant: 'success' });
      } else {
        showBanner({ text: `Import failed: ${res.reason}`, variant: 'error' });
      }
    };
    reader.onerror = () => showBanner({ text: 'Could not read file.', variant: 'error' });
    reader.readAsText(f);
  };

  const body = (
    <div
      className="fixed inset-0 z-[120] flex items-center justify-center p-4"
      role="dialog" aria-modal="true"
      onMouseDown={(e) => { if (e.target === e.currentTarget) onClose(); }}
    >
      <div className="absolute inset-0 bg-black/55 backdrop-blur-sm" />
      <div
        ref={trapRef}
        className="relative card w-full max-w-5xl max-h[90vh] max-h-[90vh] overflow-hidden border border-[--color-border] shadow-xl"
        style={{ background: 'var(--color-surface)' }}
        onMouseDown={(e) => e.stopPropagation()}
      >
        {/* Header (chrome unificado) */}
        <div className="sticky top-0 z-10 modal-chrome modal-header px-5 py-3">
          <div className="accent-strip" aria-hidden />
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold flex items-center gap-2">
              Manage catalogs
              {/* ðŸ†• insignia de rol */}
              <RolePill role={isAdmin ? 'Admin' : isEditor ? 'Editor' : 'Viewer'} />
            </h3>
            <button className="btn-ghost" onClick={onClose} aria-label="Close">âœ•</button>
          </div>
        </div>

        {/* Body (con edge fades para scroll) */}
        <div className="overflow-y-auto px-5 py-4 space-y-4 relative">
          <div className="edge-fade edge-top" aria-hidden />

          {/* banner */}
          {banner && (
            <div
              className={`rounded-lg border px-3 py-2 text-sm ${
                banner.variant === 'success'
                  ? 'border-emerald-500/40 bg-emerald-500/10 text-emerald-600'
                  : banner.variant === 'info'
                    ? 'border-sky-500/40 bg-sky-500/10 text-sky-700'
                    : 'border-[--color-accent]/50 bg-[--color-accent]/10 text-[--color-accent]'
              }`}
              role="status"
            >
              {banner.text}
            </div>
          )}

          {/* Aviso de permisos */}
          {!canEdit && (
            <div className="rounded-lg border px-3 py-2 text-sm border-sky-500/40 bg-sky-500/10 text-sky-700">
              Read-only. Ask an admin for edit access.
            </div>
          )}
          {canEdit && !canBulk && (
            <div className="rounded-lg border px-3 py-2 text-sm border-amber-400/40 bg-amber-400/10 text-amber-700">
              Editors can edit items but only admins can import/export or reset overrides.
            </div>
          )}

          {/* resumen (tiles tipo KPI/subcard) */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-3">
            <Stat label="Campaigns" value={CAMPAIGNS.length} />
            <Stat label="Partners" value={PARTNERS.length} />
            <Stat label="Databases" value={DATABASES.length} />
            <Stat label="Themes" value={THEMES.length} />
            <Stat label="Types" value={TYPES.length} />
          </div>

          {/* tabs (pill/segmented) */}
          <TabBar value={tab} onChange={setTab} />

          {/* panels */}
          {tab === 'campaigns' && (
            <CampaignsPanel
              items={CAMPAIGNS}
              onAdd={(name, advertiser) => canEdit && addCampaignRef({ name, advertiser })}
              onUpdate={(oldName, patch) => canEdit && updateCampaignRef(oldName, patch)}
              onRemove={(name) => {
                if (!canEdit) return;
                if (confirm(`Remove local override for campaign "${name}"?`)) removeCampaignRef(name);
              }}
              disabled={!canEdit}
            />
          )}

          {tab === 'partners' && (
            <PartnersPanel
              items={PARTNERS}
              onAdd={(name, invoiceOffice) => canEdit && addPartnerRef({ name, invoiceOffice })}
              onUpdate={(oldName, patch) => canEdit && updatePartnerRef(oldName, patch)}
              onRemove={(name) => {
                if (!canEdit) return;
                if (confirm(`Remove local override for partner "${name}"?`)) removePartnerRef(name);
              }}
              disabled={!canEdit}
            />
          )}

          {tab === 'databases' && (
            <DatabasesPanel
              items={DATABASES}
              onAdd={(payload) => canEdit && addDatabaseRef(payload)}
              onUpdate={(oldName, patch) => canEdit && updateDatabaseRef(oldName, patch)}
              onRemove={(name) => {
                if (!canEdit) return;
                if (confirm(`Remove local override for database "${name}"?`)) removeDatabaseRef(name);
              }}
              disabled={!canEdit}
            />
          )}

          {tab === 'themes' && (
            <ThemesPanel
              items={THEMES}
              onAdd={(t) => canEdit && addTheme(t)}
              onRemove={(t) => {
                if (!canEdit) return;
                if (confirm(`Remove theme "${t}" from local overrides?`)) removeTheme(t);
              }}
              disabled={!canEdit}
            />
          )}

          {tab === 'types' && (
            <TypesPanel
              items={TYPES}
              onAdd={(t) => canEdit && addType(t)}
              onRemove={(t) => {
                if (!canEdit) return;
                if (confirm(`Remove type "${t}" from local overrides?`)) removeType(t);
              }}
              disabled={!canEdit}
            />
          )}

          <div className="edge-fade edge-bottom" aria-hidden />
        </div>

        {/* Footer (chrome unificado) */}
        <div className="sticky bottom-0 z-10 modal-chrome modal-footer px-5 py-3 flex items-center justify-end gap-2">
          {/* input oculto para importar */}
          <input
            ref={fileInputRef}
            type="file"
            accept="application/json,.json"
            className="hidden"
            onChange={onFilePicked}
          />
          {canBulk && (
            <button type="button" className="btn-ghost" onClick={triggerImport}>
              Import
            </button>
          )}
          <button
            type="button"
            className="btn-ghost disabled:opacity-50 disabled:pointer-events-none"
            onClick={() => {
              if (!canBulk) {
                showBanner({ text: 'Only admins can reset overrides.', variant: 'error' });
                return;
              }
              resetOverrides();
            }}
            disabled={!hasLocalChanges || !canBulk}
            title={
              !canBulk
                ? 'Only admins can reset overrides'
                : hasLocalChanges
                  ? 'Clear local overrides'
                  : 'No local changes'
            }
          >
            Reset local changes
          </button>
          <button
            type="button"
            className="btn-primary disabled:opacity-50 disabled:pointer-events-none"
            onClick={download}
            disabled={!hasLocalChanges || !canBulk}
            title={
              !canBulk
                ? 'Only admins can export overrides'
                : hasLocalChanges
                  ? 'Export local overrides as JSON'
                  : 'Nothing to export'
            }
          >
            Export changes
          </button>
        </div>
      </div>
    </div>
  );

  if (typeof document === 'undefined') return null;
  return createPortal(body, document.body);
}

/* -------------------------------- UI bits -------------------------------- */

function RolePill({ role }: { role: 'Admin' | 'Editor' | 'Viewer' }) {
  const cls =
    role === 'Admin'
      ? 'bg-emerald-500/12 text-emerald-700 border-emerald-300/60'
      : role === 'Editor'
        ? 'bg-amber-500/12 text-amber-700 border-amber-300/60'
        : 'bg-slate-400/15 text-slate-700 border-slate-300/60';
  return (
    <span className={`px-2 py-0.5 rounded-full text-[11px] font-semibold border ${cls}`}>
      {role}
    </span>
  );
}

function TabBar({ value, onChange }: { value: TabKey; onChange: (k: TabKey) => void }) {
  const tabs: { k: TabKey; label: string }[] = [
    { k: 'campaigns', label: 'Campaigns' },
    { k: 'partners',  label: 'Partners'  },
    { k: 'databases', label: 'Databases' },
    { k: 'themes',    label: 'Themes'    },
    { k: 'types',     label: 'Types'     },
  ];

  return (
    <nav className="sticky top-0 z-[1] pt-1" aria-label="Catalog sections">
      <div className="segmented">
        {tabs.map(({ k, label }) => (
          <button
            key={k}
            type="button"
            role="tab"
            aria-selected={value === k}
            className="segmented-tab"
            onClick={() => onChange(k)}
          >
            {label}
          </button>
        ))}
      </div>
    </nav>
  );
}

function Stat({ label, value }: { label: string; value: number | string }) {
  return (
    <div className="stat-tile p-3">
      <div className="text-[11px] uppercase text-[color:var(--color-text)]/65">{label}</div>
      <div className="text-xl font-semibold mt-1" style={{ fontVariantNumeric: 'tabular-nums' }}>
        {value}
      </div>
    </div>
  );
}

/* ------------------------------- Panels ---------------------------------- */

function CampaignsPanel(props: {
  items: { id: string; name: string; advertiser: string }[];
  onAdd: (name: string, advertiser?: string) => void;
  onUpdate: (oldName: string, patch: Partial<{ name: string; advertiser: string }>) => void;
  onRemove: (name: string) => void;
  disabled?: boolean;
}) {
  const { items, onAdd, onUpdate, onRemove, disabled } = props;
  const [q, setQ] = useState('');
  const [name, setName] = useState('');
  const [adv, setAdv] = useState('');

  const list = useMemo(() => {
    const s = q.trim().toLowerCase();
    if (!s) return items;
    return items.filter(i => i.name.toLowerCase().includes(s) || i.advertiser.toLowerCase().includes(s));
  }, [items, q]);

  return (
    <section className="grid gap-3">
      <SearchAndAdd
        searchValue={q}
        onSearch={setQ}
        addArea={
          disabled ? null : (
            <>
              <input value={name} onChange={(e)=>setName(e.target.value)} placeholder="Campaign name" className="input" />
              <input value={adv}  onChange={(e)=>setAdv(e.target.value)}  placeholder="Advertiser (optional)" className="input" />
              <button
                className="btn-primary"
                onClick={() => { if (name.trim()) { onAdd(name, adv || undefined); setName(''); setAdv(''); } }}
              >
                Add
              </button>
            </>
          )
        }
      />
      <EditableTable
        cols={['Name', 'Advertiser', '']}
        rows={list.map(i => ({
          key: i.id,
          cells: [
            <EditableText key="n" value={i.name} onSave={(v)=> v && onUpdate(i.name,{name:v})} disabled={disabled} />,
            <EditableText key="a" value={i.advertiser} onSave={(v)=> onUpdate(i.name,{advertiser:v})} disabled={disabled} />,
            <div key="act" className="shrink-0">
              {disabled ? null : (
                <RowActions
                  onEdit={() => {}}
                  onDuplicate={() => {
                    const newName = `${i.name} (copy)`;
                    onAdd(newName, i.advertiser);
                  }}
                  onDelete={() => onRemove(i.name)}
                />
              )}
            </div>
          ],
        }))}
      />
    </section>
  );
}

function PartnersPanel(props: {
  items: { id: string; name: string; defaultInvoiceOffice: 'DAT'|'CAR'|'INT'; isInternal?: boolean }[];
  onAdd: (name: string, invoiceOffice: string) => void;
  onUpdate: (oldName: string, patch: Partial<{ name: string; invoiceOffice: string }>) => void;
  onRemove: (name: string) => void;
  disabled?: boolean;
}) {
  const { items, onAdd, onUpdate, onRemove, disabled } = props;
  const [q, setQ] = useState('');
  const [name, setName] = useState('');
  const [office, setOffice] = useState<'DAT'|'CAR'|'INT'>('DAT');

  const list = useMemo(() => {
    const s = q.trim().toLowerCase();
    if (!s) return items;
    return items.filter(i => i.name.toLowerCase().includes(s));
  }, [items, q]);

  return (
    <section className="grid gap-3">
      <SearchAndAdd
        searchValue={q}
        onSearch={setQ}
        addArea={
          disabled ? null : (
            <>
              <input value={name} onChange={(e)=>setName(e.target.value)} placeholder="Partner name" className="input" />
              <select className="input" value={office} onChange={(e)=>setOffice(e.target.value as any)}>
                <option value="DAT">DAT</option><option value="CAR">CAR</option><option value="INT">INT</option>
              </select>
              <button className="btn-primary" onClick={()=>{ if (name.trim()) { onAdd(name, office); setName(''); setOffice('DAT'); }}}>Add</button>
            </>
          )
        }
      />
      <EditableTable
        cols={['Name', 'Invoice office', '']}
        rows={list.map(i => ({
          key: i.id,
          cells: [
            <EditableText key="n" value={i.name} onSave={(v)=> v && onUpdate(i.name,{name:v})} disabled={disabled} />,
            <EditableSelect
              key="o"
              value={i.defaultInvoiceOffice}
              options={['DAT','CAR','INT']}
              onSave={(v)=> onUpdate(i.name,{invoiceOffice:v})}
              disabled={disabled}
            />,
            <div key="act" className="shrink-0">
              {disabled ? null : (
                <RowActions
                  onEdit={() => {}}
                  onDuplicate={() => onAdd(`${i.name} (copy)`, i.defaultInvoiceOffice)}
                  onDelete={() => onRemove(i.name)}
                />
              )}
            </div>,
          ],
        }))}
      />
    </section>
  );
}

function DatabasesPanel(props: {
  items: { id: string; name: string; geo: string; dbType: 'B2B'|'B2C'|'Mixed'|string }[];
  onAdd: (d: { name: string; id?: string; geo: string; dbType: 'B2B'|'B2C'|'Mixed'|string }) => void;
  onUpdate: (oldName: string, patch: Partial<{ name: string; id?: string; geo: string; dbType: 'B2B'|'B2C'|'Mixed'|string }>) => void;
  onRemove: (name: string) => void;
  disabled?: boolean;
}) {
  const { items, onAdd, onUpdate, onRemove, disabled } = props;
  const [q, setQ] = useState('');
  const [name, setName] = useState('');
  const [geo, setGeo] = useState('');
  const [dbType, setDbType] = useState<'B2B'|'B2C'|'Mixed'>('B2C');

  const geoStrict = normalizeGeoStrict(geo);

  const list = useMemo(() => {
    const s = q.trim().toLowerCase();
    if (!s) return items;
    return items.filter(i => i.name.toLowerCase().includes(s) || i.geo.toLowerCase().includes(s));
  }, [items, q]);

  return (
    <section className="grid gap-3">
      <SearchAndAdd
        searchValue={q}
        onSearch={setQ}
        addArea={
          disabled ? null : (
            <>
              <input value={name} onChange={(e)=>setName(e.target.value)} placeholder="Database name" className="input" />
              <input
                value={geo}
                onChange={(e)=>setGeo(e.target.value.toUpperCase().slice(0,5))}
                placeholder="GEO (ES, FR, GB, MULTI)"
                className={`input ${geo && !geoStrict ? 'input-error' : ''}`}
                aria-invalid={geo && !geoStrict || undefined}
              />
              <select className="input" value={dbType} onChange={(e)=>setDbType(e.target.value as any)}>
                <option value="B2C">B2C</option>
                <option value="B2B">B2B</option>
                <option value="Mixed">Mixed</option>
              </select>
              <button
                className="btn-primary"
                disabled={!name.trim() || !geoStrict}
                onClick={()=>{
                  if (!name.trim() || !geoStrict) return;
                  onAdd({ name, geo: geoStrict, dbType });
                  setName(''); setGeo(''); setDbType('B2C');
                }}
              >
                Add
              </button>
            </>
          )
        }
      />
      <EditableTable
        cols={['Name', 'GEO', 'DB Type', '']}
        rows={list.map(i => ({
          key: i.id,
          cells: [
            <EditableText key="n" value={i.name} onSave={(v)=> v && onUpdate(i.name,{name:v})} disabled={disabled} />,
            <GeoCell key="g" value={i.geo} onValid={(g)=> onUpdate(i.name,{geo:g})} disabled={disabled} />,
            <EditableSelect
              key="t"
              value={i.dbType}
              options={['B2C','B2B','Mixed']}
              onSave={(v)=> onUpdate(i.name,{dbType:v})}
              disabled={disabled}
            />,
            <div key="act" className="shrink-0">
              {disabled ? null : (
                <RowActions
                  onEdit={() => {}}
                  onDuplicate={() =>
                    onAdd({ name: `${i.name} (copy)`, geo: i.geo, dbType: (i.dbType as any) || 'B2C' })
                  }
                  onDelete={() => onRemove(i.name)}
                />
              )}
            </div>,
          ],
        }))}
      />
    </section>
  );
}

function ThemesPanel(props: {
  items: string[];
  onAdd: (t: string) => void;
  onRemove: (t: string) => void;
  disabled?: boolean;
}) {
  const { items, onAdd, onRemove, disabled } = props;
  const [q, setQ] = useState('');
  const [val, setVal] = useState('');

  const list = useMemo(() => {
    const s = q.trim().toLowerCase();
    if (!s) return items;
    return items.filter(i => i.toLowerCase().includes(s));
  }, [items, q]);

  return (
    <section className="grid gap-3">
      <SearchAndAdd
        searchValue={q}
        onSearch={setQ}
        addArea={
          disabled ? null : (
            <>
              <input value={val} onChange={(e)=>setVal(e.target.value)} placeholder="Theme" className="input" />
              <button className="btn-primary" onClick={()=>{ if (val.trim()) { onAdd(val); setVal(''); }}}>Add</button>
            </>
          )
        }
      />
      <EditableTable
        cols={['Theme', '']}
        rows={list.map(v => ({
          key: v,
          cells: [
            <span key="t" className="px-1.5 py-0.5 rounded bg-white/5 border border-[--color-border]">{v}</span>,
            <div key="d" className="shrink-0">
              {disabled ? null : <DangerButton onClick={()=>onRemove(v)} />}
            </div>,
          ],
        }))}
      />
    </section>
  );
}

function TypesPanel(props: {
  items: string[];
  onAdd: (t: string) => void;
  onRemove: (t: string) => void;
  disabled?: boolean;
}) {
  const { items, onAdd, onRemove, disabled } = props;
  const [q, setQ] = useState('');
  const [val, setVal] = useState('');

  const list = useMemo(() => {
    const s = q.trim().toLowerCase();
    if (!s) return items;
    return items.filter(i => i.toLowerCase().includes(s));
  }, [items, q]);

  return (
    <section className="grid gap-3">
      <SearchAndAdd
        searchValue={q}
        onSearch={setQ}
        addArea={
          disabled ? null : (
            <>
              <input value={val} onChange={(e)=>setVal(e.target.value)} placeholder="Type (e.g., CPL)" className="input" />
              <button className="btn-primary" onClick={()=>{ if (val.trim()) { onAdd(val); setVal(''); }}}>Add</button>
            </>
          )
        }
      />
      <EditableTable
        cols={['Type', '']}
        rows={list.map(v => ({
          key: v,
          cells: [
            <span key="t" className="px-1.5 py-0.5 rounded bg-white/5 border border-[--color-border]">{v}</span>,
            <div key="d" className="shrink-0">
              {disabled ? null : <DangerButton onClick={()=>onRemove(v)} />}
            </div>,
          ],
        }))}
      />
    </section>
  );
}

/* ---------------------------- Reusable pieces ----------------------------- */

function SearchAndAdd({
  searchValue, onSearch, addArea,
}: {
  searchValue: string;
  onSearch: (v: string) => void;
  addArea: React.ReactNode | null;
}) {
  return (
    <div className="subcard p-3 md:p-4 grid gap-2">
      <div className="flex items-center gap-2">
        <input
          className="input w-full"
          placeholder="Searchâ€¦"
          value={searchValue}
          onChange={(e)=>onSearch(e.target.value)}
        />
      </div>
      {addArea && <div className="flex flex-wrap items-center gap-2">{addArea}</div>}
    </div>
  );
}

function EditableTable({ cols, rows }: {
  cols: string[];
  rows: { key: string; cells: React.ReactNode[] }[];
}) {
  return (
    <div className="manage-table">
      <table className="w-full text-sm">
        <thead className="sticky top-0 bg-[--color-surface] z-[1]">
          <tr>
            {cols.map((c) => (
              <th key={c} className="text-left font-medium px-3 py-2">{c}</th>
            ))}
          </tr>
        </thead>
      </table>

      {/* ðŸ†• Scroll vertical para todas las listas */}
      <div className="manage-rows divide-y divide-[--color-border]/60 max-h-[60vh] overflow-y-auto pr-1">
        {rows.map(r => (
          <div
            key={r.key}
            className="grid grid-cols-[1fr_1fr_auto] md:grid-cols-[1.2fr_1fr_1fr_auto] gap-3 px-3 py-2 items-center"
          >
            {r.cells.map((cell, i) => <div key={i} className="min-w-0">{cell}</div>)}
          </div>
        ))}
        {rows.length === 0 && (
          <div className="px-3 py-5 text-sm opacity-70">No items.</div>
        )}
      </div>
    </div>
  );
}

function EditableText({ value, onSave, disabled }: { value: string; onSave: (v: string) => void; disabled?: boolean }) {
  const [v, setV] = useState(value);
  useEffect(()=>setV(value),[value]);
  return (
    <div className="flex items-center gap-2">
      <input className="input w-full" value={v} onChange={(e)=>setV(e.target.value)} disabled={disabled} />
      <button className="btn-ghost disabled:opacity-50" title="Save" onClick={()=>onSave(v)} disabled={disabled}>âœ”</button>
    </div>
  );
}

function EditableSelect({
  value, options, onSave, disabled,
}: { value: string; options: string[]; onSave: (v: string) => void; disabled?: boolean }) {
  const [v, setV] = useState(value);
  useEffect(()=>setV(value),[value]);
  return (
    <div className="flex items-center gap-2">
      <select className="input" value={v} onChange={(e)=>setV(e.target.value)} disabled={disabled}>
        {options.map(o => <option key={o} value={o}>{o}</option>)}
      </select>
      <button className="btn-ghost disabled:opacity-50" title="Save" onClick={()=>onSave(v)} disabled={disabled}>âœ”</button>
    </div>
  );
}

/** ðŸ†• Celda con validaciÃ³n estricta de GEO */
function GeoCell({
  value, onValid, disabled,
}: {
  value: string;
  onValid: (geo: string) => void; // sÃ³lo se llama con GEO vÃ¡lido
  disabled?: boolean;
}) {
  const [v, setV] = useState(value);
  useEffect(() => setV(value), [value]);

  const valid = normalizeGeoStrict(v);

  return (
    <div className="flex items-center gap-2">
      <input
        className={`input w-full ${v && !valid ? 'input-error' : ''}`}
        value={v}
        onChange={(e)=>setV(e.target.value.toUpperCase().slice(0,5))}
        onBlur={()=>{
          const norm = normalizeGeoStrict(v);
          if (norm && norm !== value) onValid(norm);
          else setV(value); // vuelve si no es vÃ¡lido
        }}
        placeholder="ES / FR / GB / MULTI"
        aria-invalid={v && !valid || undefined}
        disabled={disabled}
      />
      <button
        className="btn-ghost disabled:opacity-50"
        title="Save"
        onClick={()=>{ const norm = normalizeGeoStrict(v); if (norm) onValid(norm); }}
        disabled={disabled || !valid}
      >
        âœ”
      </button>
    </div>
  );
}

function DangerButton({ onClick, disabled }: { onClick: () => void; disabled?: boolean }) {
  return (
    <button className="btn-ghost text-[--color-accent] disabled:opacity-50 disabled:pointer-events-none" title="Remove" onClick={onClick} disabled={disabled}>
      âœ•
    </button>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\charts\theme.ts =====
// components/charts/theme.ts
export const chartTheme = {
  tick: { fill: 'var(--chart-axis)', fontSize: 12 },
  axisLine: { stroke: 'var(--chart-grid)' },
  tickLine: { stroke: 'var(--chart-grid)' },
  grid: 'var(--chart-grid)',
  tooltip: {
    contentStyle: {
      background: 'var(--chart-tooltip-bg)',
      border: '1px solid var(--color-border)',
      borderRadius: 8,
    },
    itemStyle: { color: 'var(--color-text)' },
    labelStyle: { color: 'var(--color-text)' },
  },
  palette: ['var(--chart-1)','var(--chart-2)','var(--chart-3)','var(--chart-4)','var(--chart-5)'],
};

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\create-campaign\CreateCampaignModal.tsx =====
'use client';

import { createPortal } from 'react-dom';
import { useEffect, useRef, useState } from 'react';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { useCampaignData } from '@/context/CampaignDataContext';
import { CampaignRow } from '@/types/campaign';
import Combobox from '@/components/ui/Combobox';
import Tooltip from '@/components/ui/Tooltip';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';
import QuickAddCampaignModal from '@/components/create-campaign/QuickAddCampaignModal';
import QuickAddPartnerModal from '@/components/create-campaign/QuickAddPartnerModal';
import QuickAddDatabaseModal from '@/components/create-campaign/QuickAddDatabaseModal';
import FieldWithAddon from '@/components/ui/FieldWithAddon';
import type { DBType, InvoiceOffice } from '@/data/reference';
import { useAuth } from '@/context/AuthContext'; // ðŸ†• roles para quick-add

// ======================= Utils =======================

const fmtEUR = new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' });
const fmtPct = new Intl.NumberFormat('es-ES', { style: 'percent', maximumFractionDigits: 2 });
const fmtNum = new Intl.NumberFormat('es-ES', { maximumFractionDigits: 2 });

function parseNum(v: any): number {
  if (v === '' || v == null) return 0;
  if (typeof v === 'number') return Number.isFinite(v) ? v : 0;

  let s = String(v).trim().replace(/\s/g, '');
  if (s === '') return 0;

  const hasComma = s.includes(',');
  const hasDot = s.includes('.');

  if (hasComma && hasDot) {
    const lastComma = s.lastIndexOf(',');
    const lastDot = s.lastIndexOf('.');
    if (lastComma > lastDot) s = s.replace(/\./g, '').replace(',', '.');
    else s = s.replace(/,/g, '');
  } else if (hasComma) {
    s = s.replace(',', '.');
  }

  const n = Number(s);
  return Number.isFinite(n) ? n : 0;
}

// Toast sin dependencias (ajustado a tema claro)
function showToast(message: string, opts?: { variant?: 'success' | 'error'; duration?: number }) {
  if (typeof document === 'undefined') return;
  const { variant = 'success', duration = 2600 } = opts || {};
  const host = document.createElement('div');
  host.className = 'fixed bottom-4 right-4 z-[200]';
  const toast = document.createElement('div');
  toast.className = 'pointer-events-auto select-none rounded-lg border px-3 py-2 shadow-xl text-sm';
  toast.style.borderColor = 'var(--color-border)';
  toast.style.background = 'var(--color-surface)';
  toast.style.color = 'var(--color-text)';
  toast.style.transition = 'transform 180ms ease, opacity 180ms ease';
  toast.style.transform = 'translateY(8px)';
  toast.style.opacity = '0';
  toast.textContent = message;

  if (variant === 'error') {
    toast.style.outline = '1px solid #ff6b6b55';
    toast.style.boxShadow = '0 10px 30px rgba(239,68,68,0.12)';
  } else {
    toast.style.outline = '1px solid rgba(16,185,129,.25)';
    toast.style.boxShadow = '0 10px 30px rgba(16,185,129,.12)';
  }

  host.appendChild(toast);
  document.body.appendChild(host);

  requestAnimationFrame(() => {
    toast.style.transform = 'translateY(0px)';
    toast.style.opacity = '1';
  });

  setTimeout(() => {
    toast.style.transform = 'translateY(8px)';
    toast.style.opacity = '0';
    setTimeout(() => {
      try { document.body.removeChild(host); } catch {}
    }, 200);
  }, duration);
}

type Mode = 'create' | 'edit';

// ===== Enums fuertes (sin casts) =====
const DEAL_TYPES = ['CPL', 'CPM', 'CPC', 'CPA'] as const;
type DealType = typeof DEAL_TYPES[number];

const DB_TYPES = ['B2B', 'B2C', 'Mixed'] as const;
const INVOICE_OFFICES = ['DAT', 'CAR', 'INT'] as const;

const isDBType = (x: any): x is DBType => (DB_TYPES as readonly string[]).includes(x);
const isInvoiceOffice = (x: any): x is InvoiceOffice => (INVOICE_OFFICES as readonly string[]).includes(x);

// Zod helpers
const ZDealType = z.enum(DEAL_TYPES);
const ZDBType = z.enum(DB_TYPES);
const ZInvoiceOffice = z.enum(INVOICE_OFFICES);

// ======================= Component =======================
export default function CreateCampaignModal({
  mode = 'create',
  initialRow,
  seed,
  onClose,
  onSaved,
}: {
  mode?: Mode;
  initialRow?: CampaignRow;
  seed?: Partial<CampaignRow>;
  onClose: () => void;
  onSaved?: (id: string) => void;
}) {
  const { addCampaign, updateCampaign } = useCampaignData();

  // ðŸ†• flag de permisos para quick-add
  const { isAdmin, isEditor } = useAuth();
  const canQuickAdd = isAdmin || isEditor;

  // === CatÃ¡logos dinÃ¡micos ===
  const catalogs = useCatalogOverrides();
  const CAMPAIGNS = catalogs?.CAMPAIGNS ?? [];
  const PARTNERS = catalogs?.PARTNERS ?? [];
  const DATABASES = catalogs?.DATABASES ?? [];
  const THEMES = catalogs?.THEMES ?? [];
  const TYPES = (catalogs?.TYPES ?? DEAL_TYPES.slice()).slice();

  // Resolver de oficina de facturaciÃ³n tipado y seguro
  function resolveOffice(geo?: string, partner?: string): InvoiceOffice {
    const res = catalogs?.resolveInvoiceOfficeMerged
      ? catalogs.resolveInvoiceOfficeMerged(geo, partner)
      : 'DAT';
    return isInvoiceOffice(res) ? res : 'DAT';
  }

  // == Scroll lock mientras el modal estÃ¡ abierto ==
  useEffect(() => {
    const html = document.documentElement;
    const prevOverflow = html.style.overflow;
    const prevPadRight = html.style.paddingRight;

    const scrollbarW = window.innerWidth - html.clientWidth;
    html.style.overflow = 'hidden';
    if (scrollbarW > 0) html.style.paddingRight = `${scrollbarW}px`;

    return () => {
      html.style.overflow = prevOverflow;
      html.style.paddingRight = prevPadRight;
    };
  }, []);

  // funciones locales
  const findCampaignByName = (name: string) =>
    CAMPAIGNS.find(
      (c: any) => (c?.name || '').trim().toLowerCase() === (name || '').trim().toLowerCase()
    );

  const [submitMode, setSubmitMode] = useState<'save' | 'save_add'>('save');
  const [openAddCampaign, setOpenAddCampaign] = useState(false);
  const [openAddPartner, setOpenAddPartner] = useState(false);
  const [openAddDatabase, setOpenAddDatabase] = useState(false);

  // ValidaciÃ³n con campaÃ±as dinÃ¡micas
  const allowedCampaigns = new Set(CAMPAIGNS.map((c: any) => String(c?.name || '').toLowerCase()));

  const schema = z.object({
    date: z.string().min(1, 'Required'),
    campaign: z
      .string()
      .min(1, 'Required')
      .refine((v) => {
        const val = (v ?? '').trim().toLowerCase();
        if (allowedCampaigns.has(val)) return true;
        if (mode === 'edit' && initialRow) return val === initialRow.campaign.trim().toLowerCase();
        return false;
      }, 'Selecciona una campaÃ±a de la lista'),
    advertiser: z.string().min(1, 'Required'),
    invoiceOffice: ZInvoiceOffice, // <- enum fuerte
    partner: z.string().min(1, 'Required'),
    theme: z.string().min(1, 'Required'),
    price: z.coerce.number().nonnegative(),
    priceCurrency: z.string().default('EUR'),
    type: ZDealType, // <- enum fuerte
    vSent: z.coerce.number().int().nonnegative(),
    routingCosts: z.coerce.number().nonnegative(),
    qty: z.coerce.number().int().nonnegative(),
    turnover: z.coerce.number().nonnegative(),
    margin: z.coerce.number(),
    marginPct: z.number().nullable().default(null),
    ecpm: z.coerce.number().nonnegative(),
    database: z.string().min(1, 'Required'),
    geo: z.string().min(1, 'Required'),
    databaseType: ZDBType, // <- enum fuerte
  });
  type FormValues = z.infer<typeof schema>;
  type FieldName = keyof FormValues;

  // Helpers
  const safeDealType = (t: any): DealType =>
    (DEAL_TYPES as readonly string[]).includes(t) ? (t as DealType) : 'CPL';

  // RHF
  const { register, handleSubmit, formState, reset, watch, setValue, getValues } =
    useForm<FormValues>({
      resolver: zodResolver(schema),
      mode: 'onSubmit',
      defaultValues:
        mode === 'edit' && initialRow
          ? {
              date: initialRow.date,
              campaign: initialRow.campaign,
              advertiser: initialRow.advertiser,
              invoiceOffice: isInvoiceOffice(initialRow.invoiceOffice)
                ? initialRow.invoiceOffice
                : resolveOffice(initialRow.geo, initialRow.partner),
              partner: initialRow.partner || '',
              theme: initialRow.theme || '',
              price: initialRow.price,
              priceCurrency: initialRow.priceCurrency || 'EUR',
              type: safeDealType(initialRow.type),
              vSent: initialRow.vSent,
              routingCosts: initialRow.routingCosts,
              qty: initialRow.qty,
              turnover: initialRow.turnover,
              margin: initialRow.margin,
              marginPct:
                initialRow.turnover > 0 ? initialRow.margin / initialRow.turnover : null,
              ecpm: initialRow.ecpm,
              database: initialRow.database,
              geo: initialRow.geo,
              databaseType: isDBType(initialRow.databaseType) ? initialRow.databaseType : 'B2B',
            }
          : {
              date: seed?.date ?? new Date().toISOString().slice(0, 10),
              campaign: seed?.campaign ?? '',
              advertiser: seed?.advertiser ?? '',
              invoiceOffice: isInvoiceOffice(seed?.invoiceOffice)
                ? seed!.invoiceOffice!
                : resolveOffice(undefined, undefined),
              partner: seed?.partner ?? '',
              theme: seed?.theme ?? '',
              price: seed?.price ?? 0,
              priceCurrency: seed?.priceCurrency ?? 'EUR',
              type: safeDealType(seed?.type ?? TYPES[0] ?? 'CPL'),
              vSent: seed?.vSent ?? 0,
              routingCosts: seed?.routingCosts ?? 0,
              qty: seed?.qty ?? 0,
              turnover: seed?.turnover ?? 0,
              margin: seed?.margin ?? 0,
              marginPct: seed?.turnover ? (seed.margin ?? 0) / (seed.turnover ?? 1) : null,
              ecpm: seed?.ecpm ?? 0,
              database: seed?.database ?? '',
              // geo y databaseType se autocompletan tras escoger DB
            } as Partial<FormValues>,
    });

  const { errors, isSubmitting, isDirty, isSubmitted, touchedFields, dirtyFields } = formState;

  const showErr = (name: FieldName) =>
    !!(errors as any)[name] &&
    (isSubmitted || (touchedFields as any)[name] || (dirtyFields as any)[name]);

  const firstRef = useRef<HTMLInputElement>(null);
  const formRef = useRef<HTMLFormElement>(null);
  const trapRef = useRef<HTMLDivElement>(null);

  // Watches
  const campaign = watch('campaign');
  const database = watch('database');
  const geo = watch('geo');
  const partner = watch('partner');
  const price = watch('price');
  const qty = watch('qty');
  const vSent = watch('vSent');
  const watchTurnover = watch('turnover');
  const watchMargin = watch('margin');
  const watchEcpm = watch('ecpm');
  const watchMarginPct = watch('marginPct');

  // === Reglas automÃ¡ticas con catÃ¡logos dinÃ¡micos ===

  // (1) Campaign -> Advertiser (aÃ±ade CAMPAIGNS a deps)
  useEffect(() => {
    const c = findCampaignByName(campaign || '');
    setValue('advertiser', c?.advertiser ?? '', { shouldValidate: !!c });
  }, [campaign, CAMPAIGNS, setValue]);

  // Database -> GEO + DB Type (idempotente)
  useEffect(() => {
    const db = DATABASES.find((d: any) => d?.name === database);
    const nextGeo = db?.geo ?? '';
    const nextDbType: DBType | undefined = isDBType(db?.dbType) ? db!.dbType : undefined;

    const currGeo = getValues('geo');
    const currDbt = getValues('databaseType');

    if (currGeo !== nextGeo) {
      setValue('geo', nextGeo, { shouldValidate: !!db, shouldDirty: !!db });
    }
    if (nextDbType && currDbt !== nextDbType) {
      setValue('databaseType', nextDbType, { shouldValidate: !!db, shouldDirty: !!db });
    }
  }, [database, DATABASES, getValues, setValue]);

  // (2) GEO + Partner -> Invoice office (no ensuciar si no cambia)
  useEffect(() => {
    const inv = resolveOffice(geo || undefined, partner || undefined);
    const curr = getValues('invoiceOffice');
    if (curr !== inv) {
      setValue('invoiceOffice', inv, { shouldValidate: false, shouldDirty: true });
    }
  }, [geo, partner, setValue, getValues]);

  // CÃ¡lculos en vivo
  useEffect(() => {
    const _price = parseNum(price);
    const _qty = parseNum(qty);
    const _vSent = parseNum(vSent);

    const routingCosts = (_vSent / 1000) * 0.18;
    const turnover = _qty * _price;
    const margin = turnover - routingCosts;
    const marginPct = turnover > 0 ? margin / turnover : null;
    const ecpm = _vSent > 0 ? (turnover / _vSent) * 1000 : 0;

    setValue('routingCosts', Number(routingCosts.toFixed(2)));
    setValue('turnover', Number(turnover.toFixed(2)));
    setValue('margin', Number(margin.toFixed(2)));
    setValue('marginPct', marginPct == null ? null : Number(marginPct.toFixed(4)));
    setValue('ecpm', Number(ecpm.toFixed(2)));
  }, [price, qty, vSent, setValue]);

  // EnvÃ­o
  const onSubmit = async (data: FormValues) => {
    try {
      const _price = parseNum(data.price);
      const _qty = parseNum(data.qty);
      const _vSent = parseNum(data.vSent);
      const routingCosts = Number(((_vSent / 1000) * 0.18).toFixed(2));
      const turnover = Number((_qty * _price).toFixed(2));
      const margin = Number((turnover - routingCosts).toFixed(2));
      const ecpm = Number((_vSent > 0 ? (turnover / _vSent) * 1000 : 0).toFixed(2));

      const payload: Omit<CampaignRow, 'id'> = {
        date: data.date,
        campaign: data.campaign,
        advertiser: data.advertiser,
        invoiceOffice: data.invoiceOffice,
        partner: data.partner,
        theme: data.theme,
        price: _price,
        priceCurrency: data.priceCurrency || 'EUR',
        type: data.type,
        vSent: _vSent,
        routingCosts,
        qty: _qty,
        turnover,
        margin,
        ecpm,
        database: data.database,
        geo: data.geo,
        databaseType: data.databaseType,
      };

      if (mode === 'edit' && initialRow) {
        updateCampaign(initialRow.id, payload);
        showToast('Campaign updated successfully');
        onSaved?.(initialRow.id);
        onClose();
        return;
      }

      await Promise.resolve(addCampaign(payload));
      showToast(
        submitMode === 'save_add' ? 'Campaign saved. Add anotherâ€¦' : 'Campaign saved successfully'
      );

      if (submitMode === 'save_add') {
        reset();
        setTimeout(() => firstRef.current?.focus(), 0);
      } else {
        reset();
        onClose();
      }
    } catch (e) {
      console.error(e);
      showToast('Something went wrong while saving', { variant: 'error' });
    }
  };

  const onInvalid = () => {
    showToast('Please fix the highlighted fields', { variant: 'error' });
  };

  const requestClose = () => {
    if (mode === 'edit' && isDirty) {
      const ok = confirm('You have unsaved changes. Discard them?');
      if (!ok) return;
    }
    onClose();
  };

  // ESC + foco inicial + atajos
  useEffect(() => {
    const onKey = (e: KeyboardEvent) => {
      if (e.key === 'Escape') requestClose();
      if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === 's') {
        e.preventDefault();
        setSubmitMode('save');
        formRef.current?.requestSubmit();
      }
      const target = e.target as HTMLElement | null;
      const role = target?.getAttribute?.('role');
      if (!e.ctrlKey && !e.metaKey && !e.altKey && e.key === 'Enter' && role !== 'combobox') {
        setSubmitMode('save');
      }
    };
    document.addEventListener('keydown', onKey);
    setTimeout(() => firstRef.current?.focus(), 0);
    return () => document.removeEventListener('keydown', onKey);
  }, []); // eslint-disable-line

  // Focus trap
  useEffect(() => {
    const node = trapRef.current;
    if (!node) return;

    const selector = [
      'a[href]',
      'button:not([disabled])',
      'textarea:not([disabled])',
      'input:not([disabled])',
      'select:not([disabled])',
      '[tabindex]:not([tabindex="-1"])',
    ].join(',');

    const handle = (e: KeyboardEvent) => {
      if (e.key !== 'Tab') return;
      const focusables = Array.from(node.querySelectorAll<HTMLElement>(selector)).filter(
        (el) => el.offsetParent !== null
      );
      if (!focusables.length) return;
      const first = focusables[0];
      const last = focusables[focusables.length - 1];
      const active = document.activeElement as HTMLElement | null;

      if (e.shiftKey) {
        if (active === first || !node.contains(active)) {
          last.focus();
          e.preventDefault();
        }
      } else {
        if (active === last) {
          first.focus();
          e.preventDefault();
        }
      }
    };

    node.addEventListener('keydown', handle);
    return () => node.removeEventListener('keydown', handle);
  }, []);

  const marginTextClass =
    watchMargin > 0
      ? 'text-[--color-primary]'
      : watchMargin < 0
      ? 'text-[--color-accent]'
      : 'opacity-70';

  // Inputs de solo lectura â€” compacto + contraste
  const roInput = 'input h-10 border-dotted bg-[color:var(--color-surface-2)]/70';
  const roErr = (bad?: boolean) => `${roInput} ${bad ? 'input-error' : ''}`;
  const errId = (name: string) => `err-${name}`;

  const routingHint =
    vSent > 0 ? `${fmtNum.format(vSent)}/1000 Ã— 0.18` : 'vSent / 1000 Ã— 0.18';
  const turnoverHint =
    qty > 0 || price > 0
      ? `${fmtNum.format(qty || 0)} Ã— ${fmtNum.format(price || 0)}`
      : 'qty Ã— price';
  const marginHint =
    watchTurnover > 0 || (watch('routingCosts') ?? 0) > 0
      ? `${fmtEUR.format(watchTurnover || 0)} âˆ’ ${fmtEUR.format(watch('routingCosts') || 0)}`
      : 'turnover âˆ’ routing';
  const ecpmHint =
    vSent > 0
      ? `(${fmtEUR.format(watchTurnover || 0)} / ${fmtNum.format(vSent)}) Ã— 1000`
      : '(turnover / vSent) Ã— 1000';

  // === UI ===
  const modal = (
    <div
      className="fixed inset-0 z-[100] flex items-center justify-center p-4"
      role="dialog"
      aria-modal="true"
    >
      {/* Backdrop (oscuro + blur) */}
      <div
        className="absolute inset-0 bg-black/55 backdrop-blur-sm"
        data-backdrop="true"
        onMouseDown={requestClose}
        aria-hidden="true"
      />

      {/* Card */}
      <div
        ref={trapRef}
        className="relative card w-full max-w-5xl max-h-[90vh] overflow-hidden border border-[--color-border] shadow-xl"
        style={{ background: 'var(--color-surface)' }}
        onMouseDown={(e) => {
          // Evita que el click dentro del card burbujee al backdrop
          e.stopPropagation();
        }}
      >
        {/* Header sticky */}
        <div className="sticky top-0 z-10 modal-chrome modal-header px-5 py-3">
          <div className="accent-strip" aria-hidden />
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold">
              {mode === 'edit' ? 'Edit campaign' : 'Create campaign'}
            </h3>
            <button className="btn-ghost" onClick={requestClose} aria-label="Close">âœ•</button>
          </div>
        </div>

        {/* Body */}
        <div className="overflow-y-auto px-5 py-4 relative">
          <div className="edge-fade edge-top" aria-hidden />

          <form
            ref={formRef}
            id="create-edit-campaign-form"
            onSubmit={handleSubmit(onSubmit, onInvalid)}
            className="grid grid-cols-12 gap-3"
          >
            {/* A) Basics */}
            <Section title="Basics">
              <div className="grid grid-cols-12 gap-2">
                <div className="col-span-12 md:col-span-4">
                  <Field label="Date">
                    <div className="relative">
                      <input
                        ref={firstRef as any}
                        type="date"
                        {...register('date')}
                        aria-invalid={showErr('date') || undefined}
                        aria-describedby={showErr('date') ? errId('date') : undefined}
                        className={`input input-date h-10 ${showErr('date') ? 'input-error' : ''}`}
                      />
                      {showErr('date') && (
                        <Tooltip
                          content={errors.date?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err id={errId('date')} e={showErr('date') ? errors.date : undefined} />
                  </Field>
                </div>
                <div className="col-span-12 md:col-span-8">
                  <Field label="Campaign">
                    <FieldWithAddon
                      onAdd={canQuickAdd ? () => setOpenAddCampaign(true) : undefined} // ðŸ†•
                      addAriaLabel="Add campaign"
                      className="w-full"
                    >
                      <div className="w-full rounded-r-none">
                        <Combobox
                          id="campaign"
                          ariaLabel="Campaign"
                          className="w-full"
                          options={CAMPAIGNS.map((c: any) => ({ id: c.id, value: c.name }))}
                          value={watch('campaign')}
                          onChange={(v) =>
                            setValue('campaign', v, { shouldValidate: true, shouldDirty: true })
                          }
                          invalid={showErr('campaign')}
                          ariaDescribedby={showErr('campaign') ? errId('campaign') : undefined}
                        />
                      </div>
                    </FieldWithAddon>

                    <Err
                      id={errId('campaign')}
                      e={showErr('campaign') ? errors.campaign : undefined}
                    />
                  </Field>
                </div>
                <div className="col-span-12 md:col-span-6">
                  <Field label="Advertiser" badge="AUTO">
                    <div className="relative">
                      <input
                        type="text"
                        {...register('advertiser')}
                        readOnly
                        aria-invalid={showErr('advertiser') || undefined}
                        aria-describedby={showErr('advertiser') ? errId('advertiser') : undefined}
                        className={roErr(showErr('advertiser'))}
                      />
                      {showErr('advertiser') && (
                        <Tooltip
                          content={errors.advertiser?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err
                      id={errId('advertiser')}
                      e={showErr('advertiser') ? errors.advertiser : undefined}
                    />
                  </Field>
                </div>

                <div className="col-span-12 md:col-span-6">
                  <Field label="Invoice office" badge="AUTO">
                    <div className="relative">
                      <input
                        type="text"
                        {...register('invoiceOffice')}
                        readOnly
                        aria-invalid={showErr('invoiceOffice') || undefined}
                        aria-describedby={
                          showErr('invoiceOffice') ? errId('invoiceOffice') : undefined
                        }
                        className={roErr(showErr('invoiceOffice'))}
                      />
                      {showErr('invoiceOffice') && (
                        <Tooltip
                          content={errors.invoiceOffice?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err
                      id={errId('invoiceOffice')}
                      e={showErr('invoiceOffice') ? errors.invoiceOffice : undefined}
                    />
                  </Field>
                </div>

                <div className="col-span-12 md:col-span-6">
                  <Field label="Partner">
                    <FieldWithAddon
                      onAdd={canQuickAdd ? () => setOpenAddPartner(true) : undefined} // ðŸ†•
                      addAriaLabel="Add partner"
                    >
                      <select
                        {...register('partner')}
                        className="input h-10 rounded-r-none"
                        aria-invalid={showErr('partner') || undefined}
                        aria-describedby={showErr('partner') ? errId('partner') : undefined}
                      >
                        <option value="">-- Select --</option>
                        {PARTNERS.map((p: any) => (
                          <option key={p.id} value={p.name}>
                            {p.name}
                            {p.isInternal ? ' (INT)' : ''}
                          </option>
                        ))}
                      </select>
                    </FieldWithAddon>
                    <Err id={errId('partner')} e={showErr('partner') ? errors.partner : undefined} />
                  </Field>
                </div>

                <div className="col-span-12 md:col-span-6">
                  <Field label="Theme">
                    <div className="relative">
                      <select
                        {...register('theme')}
                        aria-invalid={showErr('theme') || undefined}
                        aria-describedby={showErr('theme') ? errId('theme') : undefined}
                        className={`input h-10 ${showErr('theme') ? 'input-error' : ''}`}
                      >
                        <option value="">-- Select --</option>
                        {THEMES.map((t: string) => (
                          <option key={t} value={t}>
                            {t}
                          </option>
                        ))}
                      </select>
                      {showErr('theme') && (
                        <Tooltip
                          content={errors.theme?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err id={errId('theme')} e={showErr('theme') ? errors.theme : undefined} />
                  </Field>
                </div>
              </div>
            </Section>

            {/* B) Commercial */}
            <Section title="Commercial">
              <div className="grid grid-cols-12 gap-2">
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="Type">
                    <div className="relative">
                      <select
                        {...register('type')}
                        aria-invalid={showErr('type') || undefined}
                        aria-describedby={showErr('type') ? errId('type') : undefined}
                        className={`input h-10 ${showErr('type') ? 'input-error' : ''}`}
                      >
                        {TYPES.filter((t: string) =>
                          (DEAL_TYPES as readonly string[]).includes(t)
                        ).map((t: string) => (
                          <option key={t} value={t}>
                            {t}
                          </option>
                        ))}
                      </select>
                      {showErr('type') && (
                        <Tooltip
                          content={errors.type?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err id={errId('type')} e={showErr('type') ? errors.type : undefined} />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="Price (â‚¬)">
                    <div className="relative">
                      <input
                        type="number"
                        step="0.01"
                        {...register('price')}
                        aria-invalid={showErr('price') || undefined}
                        aria-describedby={showErr('price') ? errId('price') : undefined}
                        className={`input h-10 ${showErr('price') ? 'input-error' : ''}`}
                      />
                      {showErr('price') && (
                        <Tooltip
                          content={errors.price?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err id={errId('price')} e={showErr('price') ? errors.price : undefined} />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="QTY">
                    <div className="relative">
                      <input
                        type="number"
                        step="1"
                        {...register('qty')}
                        aria-invalid={showErr('qty') || undefined}
                        aria-describedby={showErr('qty') ? errId('qty') : undefined}
                        className={`input h-10 ${showErr('qty') ? 'input-error' : ''}`}
                      />
                      {showErr('qty') && (
                        <Tooltip
                          content={errors.qty?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err id={errId('qty')} e={showErr('qty') ? errors.qty : undefined} />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="V Sent">
                    <div className="relative">
                      <input
                        type="number"
                        {...register('vSent')}
                        aria-invalid={showErr('vSent') || undefined}
                        aria-describedby={showErr('vSent') ? errId('vSent') : undefined}
                        className={`input h-10 ${showErr('vSent') ? 'input-error' : ''}`}
                      />
                      {showErr('vSent') && (
                        <Tooltip
                          content={errors.vSent?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err id={errId('vSent')} e={showErr('vSent') ? errors.vSent : undefined} />
                  </Field>
                </div>
              </div>
            </Section>

            {/* C) Data source */}
            <Section title="Data source">
              <div className="grid grid-cols-12 gap-2">
                <div className="col-span-12 md:col-span-6">
                  <Field label="Database">
                    <FieldWithAddon
                      onAdd={canQuickAdd ? () => setOpenAddDatabase(true) : undefined} // ðŸ†•
                      addAriaLabel="Add database"
                    >
                      <select
                        {...register('database')}
                        className="input h-10 rounded-r-none"
                        aria-invalid={showErr('database') || undefined}
                        aria-describedby={showErr('database') ? errId('database') : undefined}
                      >
                        <option value="">-- Select --</option>
                        {DATABASES.map((d: any) => (
                          <option key={d.id} value={d.name}>
                            {d.name}
                          </option>
                        ))}
                      </select>
                    </FieldWithAddon>
                    <Err
                      id={errId('database')}
                      e={showErr('database') ? errors.database : undefined}
                    />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="GEO" badge="AUTO">
                    <div className="relative">
                      <input
                        type="text"
                        {...register('geo')}
                        readOnly
                        aria-invalid={showErr('geo') || undefined}
                        aria-describedby={showErr('geo') ? errId('geo') : undefined}
                        className={roErr(showErr('geo'))}
                      />
                      {showErr('geo') && (
                        <Tooltip
                          content={errors.geo?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err id={errId('geo')} e={showErr('geo') ? errors.geo : undefined} />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="DB Type" badge="AUTO">
                    <div className="relative">
                      <input
                        type="text"
                        {...register('databaseType')}
                        readOnly
                        aria-invalid={showErr('databaseType') || undefined}
                        aria-describedby={
                          showErr('databaseType') ? errId('databaseType') : undefined
                        }
                        className={roErr(showErr('databaseType'))}
                      />
                      {showErr('databaseType') && (
                        <Tooltip
                          content={errors.databaseType?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err
                      id={errId('databaseType')}
                      e={showErr('databaseType') ? errors.databaseType : undefined}
                    />
                  </Field>
                </div>
              </div>
            </Section>

            {/* KPI BAR */}
            <div className="col-span-12">
              <KPIBar
                turnover={watchTurnover || 0}
                margin={watchMargin || 0}
                marginPct={watchMarginPct}
                ecpm={watchEcpm || 0}
                fmtEUR={fmtEUR}
                fmtPct={fmtPct}
                positiveClass="text-[--color-primary]"
                negativeClass="text-[--color-accent]"
              />
            </div>

            {/* D) Results */}
            <Section title="Results">
              <div className="grid grid-cols-12 gap-2">
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="Routing costs (â‚¬)" badge="CALC" hint={`Formula: ${routingHint}`}>
                    <input
                      type="number"
                      step="0.01"
                      {...register('routingCosts')}
                      className={roInput}
                      readOnly
                    />
                    <Err
                      id={errId('routingCosts')}
                      e={showErr('routingCosts') ? errors.routingCosts : undefined}
                    />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="Turnover (â‚¬)" badge="CALC" hint={`Formula: ${turnoverHint}`}>
                    <div className="relative group">
                      <input
                        type="number"
                        step="0.01"
                        {...register('turnover')}
                        className={`${roInput} pr-16`}
                        readOnly
                      />
                      <span className="absolute inset-y-0 right-2 flex items-center text-xs opacity-0 group-hover:opacity-70 group-focus-within:opacity-70 transition-opacity">
                        {fmtEUR.format(watchTurnover || 0)}
                      </span>
                    </div>
                    <Err
                      id={errId('turnover')}
                      e={showErr('turnover') ? errors.turnover : undefined}
                    />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="Margin" badge="CALC" hint={`Formula: ${marginHint}`}>
                    <div className="relative group">
                      <input
                        type="number"
                        step="0.01"
                        {...register('margin')}
                        className={`${roInput} pr-24 ${marginTextClass}`}
                        readOnly
                        aria-live="polite"
                      />
                      <span
                        className={`absolute inset-y-0 right-2 flex items-center text-xs opacity-0 group-hover:opacity-90 group-focus-within:opacity-90 transition-opacity ${marginTextClass}`}
                      >
                        {fmtEUR.format(watchMargin || 0)}
                        {watchMarginPct == null ? '' : ` (${fmtPct.format(watchMarginPct)})`}
                      </span>
                    </div>
                    <Err id={errId('margin')} e={showErr('margin') ? errors.margin : undefined} />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="eCPM (â‚¬)" badge="CALC" hint={`Formula: ${ecpmHint}`}>
                    <div className="relative group">
                      <input
                        type="number"
                        step="0.01"
                        {...register('ecpm')}
                        className={`${roInput} pr-16`}
                        readOnly
                      />
                      <span className="absolute inset-y-0 right-2 flex items-center text-xs opacity-0 group-hover:opacity-70 group-focus-within:opacity-70 transition-opacity">
                        {fmtEUR.format(watchEcpm || 0)}
                      </span>
                    </div>
                    <Err id={errId('ecpm')} e={showErr('ecpm') ? errors.ecpm : undefined} />
                  </Field>
                </div>
              </div>
            </Section>
          </form>

          <div className="edge-fade edge-bottom" aria-hidden />
        </div>

        {/* Footer */}
        <div className="sticky bottom-0 z-10 modal-chrome modal-footer px-5 py-3">
          <div className="flex items-center justify-end gap-2">
            <button type="button" onClick={requestClose} className="btn-ghost">Cancel</button>
            {mode === 'create' && (
              <button
                type="button"
                disabled={isSubmitting}
                className="btn-ghost"
                onClick={() => { setSubmitMode('save_add'); formRef.current?.requestSubmit(); }}
              >
                Save & add another
              </button>
            )}
            <button
              type="button"
              disabled={isSubmitting}
              className="btn-primary"
              onClick={() => { setSubmitMode('save'); formRef.current?.requestSubmit(); }}
            >
              {isSubmitting ? 'Savingâ€¦' : mode === 'edit' ? 'Save changes' : 'Save'}
            </button>
          </div>
        </div>
      </div>

      {/* Quick-add modals */}
      {openAddCampaign && (
        <QuickAddCampaignModal
          onClose={() => setOpenAddCampaign(false)}
          onCreated={(newName) => {
            setValue('campaign', newName, { shouldDirty: true, shouldValidate: true });
          }}
        />
      )}
      {openAddPartner && (
        <QuickAddPartnerModal
          onClose={() => setOpenAddPartner(false)}
          onCreated={(newName) => {
            setValue('partner', newName, { shouldDirty: true, shouldValidate: true });
          }}
        />
      )}
      {openAddDatabase && (
        <QuickAddDatabaseModal
          onClose={() => setOpenAddDatabase(false)}
          onCreated={(newName) => {
            setValue('database', newName, { shouldDirty: true, shouldValidate: true });
          }}
        />
      )}
    </div>
  );

  if (typeof document === 'undefined') return null;
  return createPortal(modal, document.body);
}

// ======================= UI helpers =======================
function Field({
  label,
  children,
  badge,
  hint,
}: {
  label: string;
  children: React.ReactNode;
  badge?: 'AUTO' | 'CALC';
  hint?: string;
}) {
  return (
    <label className="text-[13px] grid gap-1">
      <span className="muted font-medium flex items-center gap-2">
        {label}
        {badge ? <FieldBadge type={badge} /> : null}
      </span>
      {children}
      {hint ? <span className="text-[11px] opacity-60">{hint}</span> : null}
    </label>
  );
}

function FieldBadge({ type }: { type: 'AUTO' | 'CALC' }) {
  return (
    <span
      className="badge-field"
      data-variant={type === 'CALC' ? 'calc' : undefined}
      aria-label={type === 'AUTO' ? 'Auto-filled' : 'Calculated'}
      title={type === 'AUTO' ? 'Auto-filled' : 'Calculated'}
    >
      {type}
    </span>
  );
}

function Err({ id, e }: { id: string; e?: { message?: string } }) {
  if (!e?.message) return null;
  return (
    <span id={id} role="status" className="text-[--color-accent] text-xs">
      {e.message}
    </span>
  );
}

function Section({ title, children }: { title: string; children: React.ReactNode }) {
  return (
    <section className="col-span-12 grid gap-2">
      <div className="sticky -top-px z-[1] bg-[color:var(--color-surface)] pt-1">
        <h4 className="text-sm font-semibold text-[color:var(--color-text)]/85">{title}</h4>
      </div>
      <div className="subcard p-3 md:p-4">
        {children}
      </div>
    </section>
  );
}

function KPIBar({
  turnover,
  margin,
  marginPct,
  ecpm,
  fmtEUR,
  fmtPct,
  positiveClass,
  negativeClass,
}: {
  turnover: number;
  margin: number;
  marginPct: number | null;
  ecpm: number;
  fmtEUR: Intl.NumberFormat;
  fmtPct: Intl.NumberFormat;
  positiveClass?: string;
  negativeClass?: string;
}) {
  const marginClass =
    margin > 0
      ? (positiveClass || 'text-green-600')
      : margin < 0
      ? (negativeClass || 'text-red-600')
      : 'opacity-80';

  return (
    <div className="grid grid-cols-12 gap-3">
      <div className="col-span-12">
        <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)]/80 p-3 md:sticky md:top-2">
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
            <div className="rounded-lg bg-[color:var(--color-surface-2)]/60 p-3">
              <div className="text-xs uppercase text-[color:var(--color-text)]/65">Turnover</div>
              <div className="text-xl font-semibold" style={{ fontVariantNumeric: 'tabular-nums' }}>
                {fmtEUR.format(turnover || 0)}
              </div>
            </div>
            <div className="rounded-lg bg-[color:var(--color-surface-2)]/60 p-3">
              <div className="text-xs uppercase text-[color:var(--color-text)]/65">Margin</div>
              <div className={`text-xl font-semibold ${marginClass}`} style={{ fontVariantNumeric: 'tabular-nums' }}>
                {fmtEUR.format(margin || 0)}
                {marginPct == null ? '' : ` (${fmtPct.format(marginPct)})`}
              </div>
            </div>
            <div className="rounded-lg bg-[color:var(--color-surface-2)]/60 p-3">
              <div className="text-xs uppercase text-[color:var(--color-text)]/65">eCPM</div>
              <div className="text-xl font-semibold" style={{ fontVariantNumeric: 'tabular-nums' }}>
                {fmtEUR.format(ecpm || 0)}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\create-campaign\QuickAddCampaignModal.tsx =====
'use client';

import { useEffect, useRef, useState } from 'react';
import MiniModal from '@/components/ui/MiniModal';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';
import { trimCollapse } from '@/data/reference';

const trim = trimCollapse;
const norm = (s: string) => trimCollapse(s).toLowerCase();

export default function QuickAddCampaignModal({
  onClose,
  onCreated,
}: {
  onClose: () => void;
  onCreated: (campaignName: string) => void;
}) {
  const { CAMPAIGNS, addCampaignRef } = useCatalogOverrides();
  const [name, setName] = useState('');
  const [advertiser, setAdvertiser] = useState('');
  const [err, setErr] = useState<string>('');

  const nameRef = useRef<HTMLInputElement | null>(null);

  useEffect(() => {
    const t = setTimeout(() => nameRef.current?.focus(), 0);
    return () => clearTimeout(t);
  }, []);

  const submit = () => {
    const n = trim(name);
    const a = trim(advertiser) || 'White Label';
    if (!n) { setErr('Name is required'); return; }

    const exists = CAMPAIGNS.some(c => norm(c.name) === norm(n));
    if (exists) { setErr('Campaign already exists'); return; }

    addCampaignRef({ name: n, advertiser: a });
    onCreated(n);
    onClose();
  };

  const onKeyDown: React.KeyboardEventHandler<HTMLDivElement> = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      submit();
    }
  };

  const hasErr = Boolean(err);
  const errId = 'quick-add-campaign-error';

  return (
    <MiniModal
      title="Add campaign"
      onClose={onClose}
      footer={(
        <>
          <button className="btn-ghost" onClick={onClose}>Cancel</button>
          <button className="btn-primary disabled:opacity-50 disabled:pointer-events-none" onClick={submit} disabled={!trim(name)}>
            Add
          </button>
        </>
      )}
    >
      <div className="grid gap-3" onKeyDown={onKeyDown}>
        <label className="text-sm grid gap-1">
          <span className="muted">Name</span>
          <input
            ref={nameRef}
            className={`input ${hasErr ? 'input-error' : ''}`}
            value={name}
            onChange={e => { setName(e.target.value); setErr(''); }}
            aria-invalid={hasErr || undefined}
            aria-describedby={hasErr ? errId : undefined}
          />
        </label>
        <label className="text-sm grid gap-1">
          <span className="muted">Advertiser</span>
          <input
            className="input"
            value={advertiser}
            onChange={e => setAdvertiser(e.target.value)}
            placeholder="White Label"
          />
        </label>
        {hasErr ? (
          <div id={errId} className="text-[--color-accent] text-sm">{err}</div>
        ) : null}
      </div>
    </MiniModal>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\create-campaign\QuickAddDatabaseModal.tsx =====
'use client';

import { useEffect, useMemo, useRef, useState } from 'react';
import MiniModal from '@/components/ui/MiniModal';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';
import { trimCollapse, type DBType } from '@/data/reference';

const norm = (s: string) => trimCollapse(s).toLowerCase();

/** --- ISO-3166 validator (estricto) con compat UKâ†’GB + MULTI --- */
function isIsoCountry(code: string): boolean {
  const c = code.toUpperCase();
  if (!/^[A-Z]{2}$/.test(c)) return false;
  try {
    // Si el cÃ³digo es vÃ¡lido, devuelve un nombre localizado distinto al propio cÃ³digo
    const dn = new (Intl as any).DisplayNames(['en'], { type: 'region' });
    const name = dn?.of?.(c);
    return typeof name === 'string' && name && name !== c;
  } catch {
    return false;
  }
}
function normalizeGeoStrict(raw: string): string | null {
  const g = trimCollapse(raw).toUpperCase();
  if (!g) return null;
  if (g === 'MULTI') return 'MULTI';
  const mapped = g === 'UK' ? 'GB' : g; // compatibilidad
  return isIsoCountry(mapped) ? mapped : null;
}

export default function QuickAddDatabaseModal({
  onClose,
  onCreated,
}: {
  onClose: () => void;
  onCreated: (dbName: string) => void;
}) {
  const { DATABASES, addDatabaseRef } = useCatalogOverrides();
  const [name, setName] = useState('');
  const [geo, setGeo] = useState('ES');
  const [dbType, setDbType] = useState<DBType>('B2B');
  const [err, setErr] = useState<string>('');

  const nameRef = useRef<HTMLInputElement | null>(null);
  useEffect(() => {
    const t = setTimeout(() => nameRef.current?.focus(), 0);
    return () => clearTimeout(t);
  }, []);

  const geoNormalized = useMemo(() => normalizeGeoStrict(geo), [geo]);
  const geoValid = geoNormalized !== null;

  const hasErr = Boolean(err);
  const errId = 'quick-add-db-error';

  const submit = () => {
    const n = trimCollapse(name);
    if (!n) { setErr('Name is required'); return; }

    // GEO estricto
    if (!geoValid) {
      setErr('Invalid GEO. Use ISO-3166-1 alpha-2 (e.g., ES, FR, GB) or MULTI.');
      return;
    }

    // 1) Evitar duplicado por NOMBRE (case-insensitive)
    const existsByName = DATABASES.some(d => norm(d.name) === norm(n));
    if (existsByName) { setErr('Database already exists'); return; }

    addDatabaseRef({
      name: n,
      geo: geoNormalized!,          // ya validado (incluye UKâ†’GB y MULTI)
      dbType,
    });
    onCreated(n);
    onClose();
  };

  const onKeyDown: React.KeyboardEventHandler<HTMLDivElement> = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      submit();
    }
  };

  return (
    <MiniModal
      title="Add database"
      onClose={onClose}
      footer={(
        <>
          <button className="btn-ghost" onClick={onClose}>Cancel</button>
          <button
            className="btn-primary disabled:opacity-50 disabled:pointer-events-none"
            onClick={submit}
            disabled={!trimCollapse(name) || !geoValid}
          >
            Add
          </button>
        </>
      )}
    >
      <div className="grid gap-3" onKeyDown={onKeyDown}>
        <label className="text-sm grid gap-1">
          <span className="muted">Name</span>
          <input
            ref={nameRef}
            className={`input ${hasErr ? 'input-error' : ''}`}
            value={name}
            onChange={e => { setName(e.target.value); setErr(''); }}
            aria-invalid={hasErr || undefined}
            aria-describedby={hasErr ? errId : undefined}
          />
        </label>

        <div className="grid grid-cols-2 gap-3">
          <label className="text-sm grid gap-1">
            <span className="muted">GEO</span>
            <input
              className={`input ${!geoValid ? 'input-error' : ''}`}
              value={geo}
              onChange={e => { setGeo(e.target.value.toUpperCase()); setErr(''); }}
              placeholder="ES / FR / GB / MULTI (UK â†’ GB)"
              aria-invalid={!geoValid || undefined}
            />
            {!geoValid && (
              <span className="text-[--color-accent] text-xs">
                Use ISO-3166-1 alpha-2 (p. ej., ES, FR, GB) o MULTI. (UK se normaliza a GB)
              </span>
            )}
          </label>

          <label className="text-sm grid gap-1">
            <span className="muted">DB Type</span>
            <select
              className="input"
              value={dbType}
              onChange={e => setDbType(e.target.value as DBType)}
            >
              <option value="B2B">B2B</option>
              <option value="B2C">B2C</option>
              <option value="Mixed">Mixed</option>
            </select>
          </label>
        </div>

        {hasErr ? <div id={errId} className="text-[--color-accent] text-sm">{err}</div> : null}
      </div>
    </MiniModal>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\create-campaign\QuickAddPartnerModal.tsx =====
'use client';

import { useEffect, useRef, useState } from 'react';
import MiniModal from '@/components/ui/MiniModal';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';
import { toSlug, trimCollapse, type InvoiceOffice } from '@/data/reference';

const norm = (s: string) => trimCollapse(s).toLowerCase();

export default function QuickAddPartnerModal({
  onClose,
  onCreated,
}: {
  onClose: () => void;
  onCreated: (partnerName: string) => void;
}) {
  const { PARTNERS, addPartnerRef } = useCatalogOverrides();
  const [name, setName] = useState('');
  const [office, setOffice] = useState<InvoiceOffice>('DAT');
  const [err, setErr] = useState<string>('');

  const nameRef = useRef<HTMLInputElement | null>(null);
  useEffect(() => {
    const t = setTimeout(() => nameRef.current?.focus(), 0);
    return () => clearTimeout(t);
  }, []);

  const hasErr = Boolean(err);
  const errId = 'quick-add-partner-error';

  const submit = () => {
    const n = trimCollapse(name);
    if (!n) { setErr('Name is required'); return; }

    // 1) Evitar duplicado por NOMBRE (case-insensitive)
    const existsByName = PARTNERS.some(p => norm(p.name) === norm(n));
    if (existsByName) { setErr('Partner already exists'); return; }

    // 2) Generar id Ãºnico (slug) a partir del nombre
    const base = toSlug(n) || 'partner';
    // Algunos overrides podrÃ­an no tener id; fallback al slug del nombre
    const usedIds = new Set(
      PARTNERS.map(p => (p.id ? p.id : toSlug(p.name))).filter(Boolean).map(x => x.toLowerCase())
    );

    let finalId = base;
    let k = 2;
    while (usedIds.has(finalId.toLowerCase())) {
      finalId = `${base}-${k++}`;
    }

    const payload: any = {
      id: finalId,
      name: n,
      invoiceOffice: office,
      // marcar interno si procede (Ãºtil para mostrar "(INT)" en selects)
      ...(office === 'INT' ? { isInternal: true } : {}),
    };

    addPartnerRef(payload);
    onCreated(n);
    onClose();
  };

  const onKeyDown: React.KeyboardEventHandler<HTMLDivElement> = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      submit();
    }
  };

  return (
    <MiniModal
      title="Add partner"
      onClose={onClose}
      footer={(
        <>
          <button className="btn-ghost" onClick={onClose}>Cancel</button>
          <button
            className="btn-primary disabled:opacity-50 disabled:pointer-events-none"
            onClick={submit}
            disabled={!trimCollapse(name)}
          >
            Add
          </button>
        </>
      )}
    >
      <div className="grid gap-3" onKeyDown={onKeyDown}>
        <label className="text-sm grid gap-1">
          <span className="muted">Name</span>
          <input
            ref={nameRef}
            className={`input ${hasErr ? 'input-error' : ''}`}
            value={name}
            onChange={e => { setName(e.target.value); setErr(''); }}
            aria-invalid={hasErr || undefined}
            aria-describedby={hasErr ? errId : undefined}
          />
        </label>

        <label className="text-sm grid gap-1">
          <span className="muted">Invoice office</span>
          <select
            className="input"
            value={office}
            onChange={e => setOffice(e.target.value as InvoiceOffice)}
          >
            <option value="DAT">DAT</option>
            <option value="CAR">CAR</option>
            <option value="INT">INT (Internal)</option>
          </select>
        </label>

        {hasErr ? <div id={errId} className="text-[--color-accent] text-sm">{err}</div> : null}
      </div>
    </MiniModal>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\export\ExportModal.tsx =====
// components/export/ExportModal.tsx
'use client';

import { useMemo, useState } from 'react';
import MiniModal from '@/components/ui/MiniModal';
import { useAuth } from '@/context/AuthContext'; // ðŸ†• admin guard
import type { CampaignRow } from '@/types/campaign';
import {
  buildExportRows,
  rowsToCSV,
  rowsToJSON,
  downloadBlob,
  type ColumnSpec,
  type ExportScope,
  type ExportColumnsKind,
} from '@/utils/exporters';

type Props = {
  onClose: () => void;
  // filas ya filtradas y ordenadas (todas)
  allRows: CampaignRow[];
  // filas de la pÃ¡gina actual (para scope=page)
  pageRows: CampaignRow[];
  // columnas visibles (para "visible")
  visibleColumns: ColumnSpec[];
  // columnas completas (para "all")
  allColumns: ColumnSpec[];
  defaultFilename?: string; // sin extensiÃ³n
};

export default function ExportModal({
  onClose,
  allRows,
  pageRows,
  visibleColumns,
  allColumns,
  defaultFilename = 'campaigns_export',
}: Props) {
  const { isAdmin } = useAuth(); // ðŸ†•

  const [format, setFormat] = useState<'csv-excel' | 'csv-rfc' | 'json'>('csv-excel');
  const [scope, setScope] = useState<ExportScope>('all');
  const [colsKind, setColsKind] = useState<ExportColumnsKind>('visible');
  const [includeSummary, setIncludeSummary] = useState(false);
  const [fileBase, setFileBase] = useState(defaultFilename);

  const effectiveRows = scope === 'all' ? allRows : pageRows;
  const effectiveColumns = colsKind === 'visible' ? visibleColumns : allColumns;
  const count = effectiveRows.length;

  const ext = format === 'json' ? 'json' : 'csv';
  const filename = `${fileBase}.${ext}`;

  // base y efectivo (admin-only)
  const canExportBase = count > 0 && effectiveColumns.length > 0;
  const canExport = canExportBase && !!isAdmin;

  function doExport() {
    if (!canExport) return;
    const rows = buildExportRows({
      rows: effectiveRows,
      columns: effectiveColumns,
      includeSummary,
    });

    if (format === 'json') {
      const blob = rowsToJSON(rows);
      downloadBlob(blob, filename);
      return;
    }

    const delimiter = format === 'csv-excel' ? ';' : ',';
    const blob = rowsToCSV(rows, delimiter);
    downloadBlob(blob, filename);
  }

  return (
    <MiniModal
      title="Export data"
      onClose={onClose}
      solid={false}
      widthClass="max-w-2xl w-[min(100vw-2rem,720px)]"
      footer={
        <>
          <div className="mr-auto text-xs opacity-80">
            {count === 0 ? 'No rows to export' : `Will export ${count} row${count === 1 ? '' : 's'}`}
          </div>
          {!isAdmin && (
            <div className="mr-2 text-xs text-[--color-accent]">
              Admin-only: exporting is disabled for your account.
            </div>
          )}
          <button className="btn-ghost" onClick={onClose}>Cancel</button>
          <button
            className="btn-primary disabled:opacity-50 disabled:pointer-events-none"
            onClick={doExport}
            disabled={!canExport}
            aria-disabled={!canExport}
            title={!isAdmin ? 'Admins only' : undefined}
          >
            Export
          </button>
        </>
      }
    >
      <div className="grid gap-4">
        {/* Aviso admin-only */}
        {!isAdmin && (
          <div className="rounded-lg border border-[--color-accent]/40 bg-[--color-accent]/10 p-3 text-sm">
            <strong>Admin-only.</strong> You can adjust options, but exporting is disabled for non-admin users.
          </div>
        )}

        {/* Formato */}
        <fieldset className="grid gap-2">
          <legend className="text-sm font-semibold">Format</legend>
          <div className="flex flex-wrap gap-2">
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="radio" name="fmt" checked={format === 'csv-excel'} onChange={() => setFormat('csv-excel')} />
              CSV (Excel-friendly ; )
            </label>
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="radio" name="fmt" checked={format === 'csv-rfc'} onChange={() => setFormat('csv-rfc')} />
              CSV (RFC 4180 , )
            </label>
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="radio" name="fmt" checked={format === 'json'} onChange={() => setFormat('json')} />
              JSON
            </label>
          </div>
        </fieldset>

        {/* Ãmbito */}
        <fieldset className="grid gap-2">
          <legend className="text-sm font-semibold">Scope</legend>
          <div className="flex flex-wrap gap-2">
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="radio" name="scope" checked={scope === 'all'} onChange={() => setScope('all')} />
              All filtered rows
            </label>
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="radio" name="scope" checked={scope === 'page'} onChange={() => setScope('page')} />
              Current page only
            </label>
          </div>
        </fieldset>

        {/* Columnas */}
        <fieldset className="grid gap-2">
          <legend className="text-sm font-semibold">Columns</legend>
          <div className="flex flex-wrap gap-2">
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="radio" name="cols" checked={colsKind === 'visible'} onChange={() => setColsKind('visible')} />
              Visible only (default)
            </label>
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="radio" name="cols" checked={colsKind === 'all'} onChange={() => setColsKind('all')} />
              All columns
            </label>
          </div>
        </fieldset>

        {/* Opciones extra */}
        <div className="flex items-center gap-2">
          <input
            id="incl-summary"
            type="checkbox"
            checked={includeSummary}
            onChange={(e) => setIncludeSummary(e.target.checked)}
          />
          <label htmlFor="incl-summary" className="text-sm">Include summary row</label>
        </div>

        {/* Nombre archivo */}
        <label className="text-sm grid gap-1">
          <span className="muted">File name</span>
          <div className="flex">
            <input
              className="input flex-1 rounded-r-none"
              value={fileBase}
              onChange={(e) => setFileBase(e.target.value.replace(/\.(csv|json)$/i, ''))}
            />
            <div className="input bg-[color:var(--color-surface-2)]/70 w-28 pointer-events-none rounded-l-none">
              .{format === 'json' ? 'json' : 'csv'}
            </div>
          </div>
        </label>
      </div>
    </MiniModal>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\guards\IfAdmin.tsx =====
'use client';

import { PropsWithChildren } from 'react';
import { useAuth } from '@/context/AuthContext';

export default function IfAdmin({ children }: PropsWithChildren) {
  const { isAdmin, loading } = useAuth();
  if (loading) return null;
  return isAdmin ? <>{children}</> : null;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\guards\IfEditorOrAdmin.tsx =====
'use client';

import { PropsWithChildren } from 'react';
import { useAuth } from '@/context/AuthContext';

export default function IfEditorOrAdmin({ children }: PropsWithChildren) {
  const { isEditor, loading } = useAuth();
  if (loading) return null;
  return isEditor ? <>{children}</> : null;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\import\ImportCsvModal.tsx =====
// components/import/ImportCsvModal.tsx
'use client';

import { useEffect, useMemo, useRef, useState } from 'react';
import { useAuth } from '@/context/AuthContext';                 // ðŸ†• admin guard
import MiniModal from '@/components/ui/MiniModal';
import { useCampaignData } from '@/context/CampaignDataContext';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';
import type { CampaignRow } from '@/types/campaign';

type Draft = Omit<CampaignRow, 'id'>;

type RowState = 'OK' | 'WARN' | 'ERROR';
type RowIssue = { level: RowState; msg: string };

const REQUIRED_HEADERS = [
  'date','campaign','partner','theme','price','type','vSent','qty','database'
] as const;
type RequiredHeader = typeof REQUIRED_HEADERS[number];

const OPTIONAL_HEADERS = ['priceCurrency'] as const;

const fmtEUR = new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' });

/* =======================
   Utils
   ======================= */

function parseNum(v: any): number {
  if (v === '' || v == null) return 0;
  if (typeof v === 'number') return Number.isFinite(v) ? v : 0;

  let s = String(v).trim();
  if (!s) return 0;
  s = s.replace(/\s/g, '');
  s = s.replace(/[^\d,.\-]/g, '');

  if (s === '' || s === '-' || s === ',' || s === '.') return 0;

  const hasComma = s.includes(',');
  const hasDot = s.includes('.');

  if (hasComma && hasDot) {
    if (s.lastIndexOf(',') > s.lastIndexOf('.')) {
      s = s.replace(/\./g, '').replace(',', '.');
    } else {
      s = s.replace(/,/g, '');
    }
  } else if (hasComma) {
    s = s.replace(',', '.');
  }
  const n = Number(s);
  return Number.isFinite(n) ? n : 0;
}

function normalizeDate(d: string): string | null {
  const s = (d || '').trim();
  if (!s) return null;
  if (/^\d{4}-\d{2}-\d{2}$/.test(s)) return s;
  const m = /^(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})$/.exec(s);
  if (m) {
    const dd = String(m[1]).padStart(2, '0');
    const mm = String(m[2]).padStart(2, '0');
    const yyyy = m[3];
    return `${yyyy}-${mm}-${dd}`;
  }
  const t = new Date(s);
  if (isNaN(t.getTime())) return null;
  return t.toISOString().slice(0, 10);
}

// CSV parser con autodetecciÃ³n de delimitador
function parseCSV(text: string): { headers: string[]; rows: Record<string, string>[] } {
  const lines = text.replace(/\r/g, '\n').split('\n').filter(l => l.trim() !== '');
  if (lines.length === 0) return { headers: [], rows: [] };

  const firstLine = lines[0];
  const delim = detectDelimiter(firstLine);

  const headers = splitCSVLine(firstLine, delim).map(h => h.trim());
  const rows: Record<string, string>[] = [];

  for (let i = 1; i < lines.length; i++) {
    const cols = splitCSVLine(lines[i], delim);
    if (cols.length === 1 && cols[0].trim() === '') continue;
    const row: Record<string, string> = {};
    headers.forEach((h, idx) => { row[h] = (cols[idx] ?? '').trim(); });
    rows.push(row);
  }
  return { headers, rows };
}

function detectDelimiter(sample: string): string {
  const count = (d: string) => {
    let c = 0, inQ = false;
    for (let i = 0; i < sample.length; i++) {
      const ch = sample[i];
      if (ch === '"') {
        if (inQ && sample[i + 1] === '"') { i++; continue; }
        inQ = !inQ;
      } else if (!inQ && ch === d) c++;
    }
    return c;
  };
  const candidates: readonly string[] = [',',';','\t'];
  let best = candidates[0], bestCount = -1;
  for (const d of candidates) {
    const n = count(d);
    if (n > bestCount) { best = d; bestCount = n; }
  }
  return best;
}

function splitCSVLine(line: string, d: string): string[] {
  const out: string[] = [];
  let cur = '';
  let inQuotes = false;

  for (let i = 0; i < line.length; i++) {
    const ch = line[i];
    if (ch === '"') {
      if (inQuotes && line[i + 1] === '"') { cur += '"'; i++; continue; }
      inQuotes = !inQuotes;
      continue;
    }
    if (ch === d && !inQuotes) { out.push(cur); cur = ''; continue; }
    if ((ch === '\n' || ch === '\r') && !inQuotes) { continue; }
    cur += ch;
  }
  out.push(cur);
  return out;
}

// Lectura case-insensitive de celdas
function getCI(obj: Record<string, string>, key: string): string {
  const target = key.trim().toLowerCase();
  for (const k of Object.keys(obj)) {
    if (k.trim().toLowerCase() === target) return obj[k];
  }
  return '';
}

/* =======================
   Componente
   ======================= */
export default function ImportCsvModal({ onClose }: { onClose: () => void }) {
  const { isAdmin } = useAuth();                                  // ðŸ†•
  const { addManyCampaigns } = useCampaignData();

  const catalogs = useCatalogOverrides();
  const {
    CAMPAIGNS = [], PARTNERS = [], DATABASES = [], THEMES = [], TYPES = ['CPL','CPM','CPC','CPA'],
    resolveInvoiceOfficeMerged = () => 'DAT',
  } = catalogs || {};

  // ðŸ”’ Guard: solo admins pueden importar
  if (!isAdmin) {
    return (
      <MiniModal
        title="Import from CSV"
        onClose={onClose}
        solid={false}
        footer={<button className="btn-primary" onClick={onClose}>Close</button>}
      >
        <div className="p-2 text-sm">
          This action is restricted to <strong>admins</strong>. If you think this is a mistake, please contact an administrator.
        </div>
      </MiniModal>
    );
  }

  // archivo + datos parseados
  const [fileName, setFileName] = useState('');
  const [rawHeaders, setRawHeaders] = useState<string[]>([]);
  const [rawRows, setRawRows] = useState<Record<string, string>[]>([]);

  // preview
  const [issues, setIssues] = useState<RowIssue[][]>([]);
  const [drafts, setDrafts] = useState<Draft[]>([]);
  const [parsing, setParsing] = useState(false);
  const [importing, setImporting] = useState(false);
  const inputRef = useRef<HTMLInputElement | null>(null);

  const headerOk = useMemo(() => {
    const hset = new Set(rawHeaders.map(h => h.trim().toLowerCase()));
    return REQUIRED_HEADERS.every(h => hset.has(h.toLowerCase()));
  }, [rawHeaders]);

  // Helpers de catÃ¡logo
  const findCampaign = (name: string) =>
    CAMPAIGNS.find((c: any) => (c?.name || '').trim().toLowerCase() === (name||'').trim().toLowerCase());
  const partnerExists = (name: string) =>
    PARTNERS.some((p: any) => (p?.name || '').trim().toLowerCase() === (name||'').trim().toLowerCase());
  const findDatabase = (name: string) =>
    DATABASES.find((d: any) => (d?.name || '').trim().toLowerCase() === (name||'').trim().toLowerCase());
  const themeExists = (name: string) =>
    THEMES.some((t: string) => t.trim().toLowerCase() === (name||'').trim().toLowerCase());
  const typeExists = (name: string) =>
    TYPES.some((t: string) => t.trim().toLowerCase() === (name||'').trim().toLowerCase());

  // Parse + validar
  useEffect(() => {
    if (!rawRows.length || !headerOk) { setIssues([]); setDrafts([]); return; }

    const nextDrafts: Draft[] = [];
    const nextIssues: RowIssue[][] = [];

    for (const row of rawRows) {
      const rowIssues: RowIssue[] = [];

      const date = normalizeDate(getCI(row, 'date'));
      if (!date) rowIssues.push({ level: 'ERROR', msg: 'Fecha invÃ¡lida' });

      const campaign = (getCI(row, 'campaign') || '').trim();
      if (!campaign) rowIssues.push({ level: 'ERROR', msg: 'Campaign requerida' });
      const cRef = findCampaign(campaign);
      if (!cRef) rowIssues.push({ level: 'ERROR', msg: 'Campaign no existe en catÃ¡logo' });
      const advertiser = cRef?.advertiser || '';

      const partner = (getCI(row, 'partner') || '').trim();
      if (!partner) rowIssues.push({ level: 'ERROR', msg: 'Partner requerido' });
      if (partner && !partnerExists(partner)) rowIssues.push({ level: 'ERROR', msg: 'Partner no existe en catÃ¡logo' });

      const theme = (getCI(row, 'theme') || '').trim();
      if (!theme) rowIssues.push({ level: 'ERROR', msg: 'Theme requerido' });
      if (theme && !themeExists(theme)) rowIssues.push({ level: 'ERROR', msg: 'Theme no existe en catÃ¡logo' });

      const type = (getCI(row, 'type') || '').trim();
      if (!type) rowIssues.push({ level: 'ERROR', msg: 'Type requerido' });
      if (type && !typeExists(type)) rowIssues.push({ level: 'ERROR', msg: 'Type no existe en catÃ¡logo' });

      const price = parseNum(getCI(row, 'price'));
      if (price < 0) rowIssues.push({ level: 'ERROR', msg: 'Price < 0' });

      const vSent = parseNum(getCI(row, 'vSent'));
      if (vSent < 0) rowIssues.push({ level: 'ERROR', msg: 'vSent < 0' });
      if (vSent === 0) rowIssues.push({ level: 'WARN', msg: 'vSent = 0' });

      const qty = parseNum(getCI(row, 'qty'));
      if (qty < 0) rowIssues.push({ level: 'ERROR', msg: 'qty < 0' });

      const database = (getCI(row, 'database') || '').trim();
      if (!database) rowIssues.push({ level: 'ERROR', msg: 'Database requerida' });
      const dbRef = findDatabase(database);
      if (!dbRef) rowIssues.push({ level: 'ERROR', msg: 'Database no existe en catÃ¡logo' });

      const priceCurrency = (getCI(row, 'priceCurrency') || 'EUR').trim() || 'EUR';

      const geo = dbRef?.geo || '';
      const databaseType = (dbRef?.dbType || '') as CampaignRow['databaseType'];
      const invoiceOffice = resolveInvoiceOfficeMerged(geo || undefined, partner || undefined) as CampaignRow['invoiceOffice'];

      const routingCosts = Number(((vSent / 1000) * 0.18).toFixed(2));
      const turnover = Number((qty * price).toFixed(2));
      const margin = Number((turnover - routingCosts).toFixed(2));
      const ecpm = Number((vSent > 0 ? (turnover / vSent) * 1000 : 0).toFixed(2));

      const draft: Draft = {
        date: date || '',
        campaign,
        advertiser,
        invoiceOffice,
        partner,
        theme,
        price,
        priceCurrency,
        type: type as CampaignRow['type'],
        vSent,
        routingCosts,
        qty,
        turnover,
        margin,
        ecpm,
        database,
        geo,
        databaseType: (databaseType || '') as CampaignRow['databaseType'],
      };

      nextDrafts.push(draft);
      nextIssues.push(rowIssues);
    }

    setDrafts(nextDrafts);
    setIssues(nextIssues);
  }, [rawRows, headerOk]); // eslint-disable-line

  const totals = useMemo(() => {
    let ok = 0, warn = 0, err = 0;
    let vSent = 0, turnover = 0, margin = 0, wEcpm = 0;
    drafts.forEach((d, i) => {
      const rowErr = issues[i]?.some(x => x.level === 'ERROR');
      const rowWarn = !rowErr && issues[i]?.some(x => x.level === 'WARN');
      if (rowErr) err++; else if (rowWarn) warn++; else ok++;
      vSent += d.vSent || 0;
      turnover += d.turnover || 0;
      margin += d.margin || 0;
      wEcpm += (d.ecpm || 0) * (d.vSent || 0);
    });
    const ecpm = vSent > 0 ? wEcpm / vSent : 0;
    return { ok, warn, err, vSent, turnover, margin, ecpm };
  }, [drafts, issues]);

  const canImport = drafts.length > 0 && totals.err === 0;

  function onPickFile() { inputRef.current?.click(); }
  async function onFileChange(e: React.ChangeEvent<HTMLInputElement>) {
    const f = e.target.files?.[0];
    e.currentTarget.value = '';
    if (!f) return;
    setParsing(true);
    setFileName(f.name);
    try {
      const text = await f.text();
      const parsed = parseCSV(text);
      setRawHeaders(parsed.headers);
      setRawRows(parsed.rows);
    } finally {
      setParsing(false);
    }
  }

  // Dropzone
  function onDropFile(e: React.DragEvent<HTMLDivElement>) {
    e.preventDefault();
    const f = e.dataTransfer.files?.[0];
    if (!f) return;
    const fakeEvt = { target: { files: [f] }, currentTarget: { value: '' } } as any;
    onFileChange(fakeEvt);
  }
  function onDragOver(e: React.DragEvent<HTMLDivElement>) { e.preventDefault(); }

  async function doImport() {
    if (!canImport) return;
    try {
      setImporting(true);
      const res = await Promise.resolve(
        addManyCampaigns(drafts, { upsertBy: 'composite', onConflict: 'update' })
      );

      alert(
        `Import done:
Added: ${res.added}
Updated: ${res.updated}
Skipped: ${res.skipped}
Total: ${res.total}`
      );
      onClose();
    } catch (e) {
      console.error(e);
      alert('Import failed. See console for details.');
    } finally {
      setImporting(false);
    }
  }

  function downloadTemplate() {
    const headers = [...REQUIRED_HEADERS, ...OPTIONAL_HEADERS].join(',');
    const sample = [
      headers,
      '2025-01-15,Winter Sale,Partner A,Retail,1.2,CPL,100000,8000,DB_ES,EUR'
    ].join('\n');
    const blob = new Blob([sample], { type: 'text/csv;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = 'campaigns_template.csv'; a.click();
    URL.revokeObjectURL(url);
  }

  // === Responsive modal width: compacto vs preview ===
  const preview = headerOk && drafts.length > 0;
  const modalWidthClass = preview
    ? 'w-full max-w-[min(95vw,1400px)]'
    : 'w-full max-w-[720px]';

  // === Fades locales para overflow-x del Ã¡rea de tabla ===
  const hWrapRef = useRef<HTMLDivElement>(null);
  const [showLeftFade, setShowLeftFade] = useState(false);
  const [showRightFade, setShowRightFade] = useState(false);

  function updateHFades() {
    const el = hWrapRef.current;
    if (!el) return;
    const { scrollLeft, clientWidth, scrollWidth } = el;
    setShowLeftFade(scrollLeft > 0);
    setShowRightFade(scrollLeft + clientWidth < scrollWidth - 1);
  }
  useEffect(() => {
    const el = hWrapRef.current;
    if (!el) return;
    updateHFades();
    el.addEventListener('scroll', updateHFades);
    window.addEventListener('resize', updateHFades);
    return () => {
      el.removeEventListener('scroll', updateHFades);
      window.removeEventListener('resize', updateHFades);
    };
  }, [preview]);

  /* =======================
     UI
     ======================= */
  return (
    <MiniModal
      title="Import from CSV"
      onClose={onClose}
      widthClass={modalWidthClass}
      solid={false}
      headerClassName="modal-chrome py-2.5"
      footerClassName="modal-chrome py-2.5"
      accentStrip
      /* edgeFades quitado aquÃ­ para que no oscurezca todo el body */
      footer={(
        <>
          <button className="btn-ghost" onClick={downloadTemplate}>Download template</button>
          <button className="btn-ghost" onClick={onClose}>Cancel</button>
          <button
            className="btn-primary disabled:opacity-50 disabled:pointer-events-none"
            disabled={!canImport || importing}
            onClick={doImport}
            style={{ fontVariantNumeric: 'tabular-nums' }}
          >
            {importing ? 'Importingâ€¦' : `Import ${totals.ok + totals.warn} rows`}
          </button>
        </>
      )}
    >
      {/* Hidden file input */}
      <input
        ref={inputRef}
        type="file"
        className="hidden"
        accept=".csv,text/csv"
        onChange={onFileChange}
      />

      {/* Uploader / Dropzone */}
      <div className="grid gap-3">
        <div
          role="button"
          tabIndex={0}
          aria-label="Select or drop a CSV file"
          onDragOver={onDragOver}
          onDrop={onDropFile}
          onKeyDown={(e) => {
            if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); onPickFile(); }
          }}
          className="rounded-lg border border-[--color-border] p-3 flex items-center justify-between
                     bg-[color:var(--color-surface)] outline-none transition
                     hover:shadow-md focus:shadow-md"
        >
          <div className="text-sm">
            <div className="font-medium">CSV file</div>
            <div className="opacity-70" style={{ fontVariantNumeric: 'tabular-nums' }}>
              {fileName || (parsing ? 'Parsingâ€¦' : 'No file selected')}
            </div>
          </div>
          <button className="btn-ghost" onClick={onPickFile} disabled={parsing}>
            {parsing ? 'Parsingâ€¦' : 'Select CSV'}
          </button>
        </div>

        {/* Headers check */}
        {rawHeaders.length > 0 && (
          <div
            className={`rounded-lg border p-3 ${
              headerOk
                ? 'border-emerald-500/40 bg-emerald-500/10'
                : 'border-[--color-accent]/40 bg-[--color-accent]/10'
            }`}
          >
            <div className="text-sm font-medium mb-1">Headers detected</div>
            <div className="text-xs opacity-80 break-words">{rawHeaders.join(', ')}</div>
            {!headerOk && (
              <div className="text-xs mt-2">
                Missing required headers:{' '}
                <strong>
                  {REQUIRED_HEADERS
                    .filter(h => !rawHeaders.map(x=>x.trim().toLowerCase()).includes(h.toLowerCase()))
                    .join(', ')}
                </strong>
              </div>
            )}
          </div>
        )}

        {/* Preview & summary */}
        {preview && (
          <>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-3">
              <Stat label="Rows" value={drafts.length} />
              <Stat label="OK" value={totals.ok} />
              <Stat label="Warnings" value={totals.warn} />
              <Stat label="Errors" value={totals.err} />
              <Stat label="Turnover" value={fmtEUR.format(totals.turnover)} />
            </div>

            <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)]">
              {/* Wrapper relativo para los fades locales */}
              <div className="relative">
                <div ref={hWrapRef} className="overflow-x-auto">
                  {/* Header */}
                  <table className="w-full min-w-[1000px] lg:min-w-[1200px] xl:min-w-[1400px] text-sm">
                    <thead className="bg-[color:var(--color-surface-2)]/60">
                      <tr>
                        <Th>State</Th>
                        <Th>Date</Th>
                        <Th>Campaign</Th>
                        <Th>Partner</Th>
                        <Th>Theme</Th>
                        <Th>Type</Th>
                        <Th className="text-right">Price</Th>
                        <Th className="text-right">QTY</Th>
                        <Th className="text-right">V Sent</Th>
                        <Th>Database</Th>
                        <Th>GEO</Th>
                        <Th>DB Type</Th>
                        <Th className="text-right">Turnover</Th>
                        <Th className="text-right">Margin</Th>
                        <Th className="text-right">eCPM</Th>
                      </tr>
                    </thead>
                  </table>

                  {/* Body (scroll) */}
                  <div className="max-h-[50vh] overflow-y-auto">
                    <div className="min-w-[1000px] lg:min-w-[1200px] xl:min-w-[1400px] divide-y divide-[--color-border]/60">
                      {drafts.map((d, i) => {
                        const isErr = issues[i]?.some(x => x.level === 'ERROR');
                        const isWarn = !isErr && issues[i]?.some(x => x.level === 'WARN');
                        const badge =
                          isErr ? <Badge className="bg-[--color-accent]/15 text-[--color-accent] border border-[--color-accent]/30">ERROR</Badge> :
                          isWarn ? <Badge className="bg-amber-500/12 text-amber-700 border border-amber-300/60">WARN</Badge> :
                          <Badge className="bg-emerald-500/12 text-emerald-700 border border-emerald-300/60">OK</Badge>;

                        return (
                          <div
                            key={i}
                            className="grid grid-cols-[auto_auto_auto_auto_auto_auto_auto_auto_auto_auto_auto_auto_auto_auto_auto] gap-3 px-3 py-2 items-center hover:bg-black/[0.03] transition-colors"
                            style={{ fontVariantNumeric: 'tabular-nums' }}
                          >
                            <div>{badge}</div>
                            <Cell>{d.date}</Cell>
                            <Cell>{d.campaign}</Cell>
                            <Cell>{d.partner}</Cell>
                            <Cell>{d.theme}</Cell>
                            <Cell>{d.type}</Cell>
                            <Cell className="text-right">{d.price.toFixed(2)}</Cell>
                            <Cell className="text-right">{d.qty}</Cell>
                            <Cell className="text-right">{d.vSent}</Cell>
                            <Cell>{d.database}</Cell>
                            <Cell>{d.geo}</Cell>
                            <Cell>{d.databaseType || 'â€”'}</Cell>
                            <Cell className="text-right">{d.turnover.toFixed(2)}</Cell>
                            <Cell
                              className={`text-right ${
                                d.margin > 0 ? 'text-[--color-primary]' :
                                d.margin < 0 ? 'text-[--color-accent]' : ''
                              }`}
                            >
                              {d.margin.toFixed(2)}
                            </Cell>
                            <Cell className="text-right">{d.ecpm.toFixed(2)}</Cell>

                            {(issues[i] && issues[i].length > 0) && (
                              <div className="col-span-full text-xs opacity-80 -mt-1">
                                {issues[i].map((it, k) => (
                                  <span
                                    key={k}
                                    className="inline-block mr-2 mt-1 px-1.5 py-0.5 rounded border border-[--color-border] bg-[color:var(--color-surface)]"
                                  >
                                    {it.level}: {it.msg}
                                  </span>
                                ))}
                              </div>
                            )}
                          </div>
                        );
                      })}
                      {drafts.length === 0 && (
                        <div className="px-3 py-5 text-sm opacity-70">No rows.</div>
                      )}
                    </div>
                  </div>
                </div>

                {/* Fades locales solo si hay overflow-x */}
                {showLeftFade && (
                  <div
                    aria-hidden
                    className="pointer-events-none absolute inset-y-0 left-0 w-6
                               bg-gradient-to-r from-[color:var(--color-surface)] to-transparent"
                  />
                )}
                {showRightFade && (
                  <div
                    aria-hidden
                    className="pointer-events-none absolute inset-y-0 right-0 w-6
                               bg-gradient-to-l from-[color:var(--color-surface)] to-transparent"
                  />
                )}
              </div>
            </div>
          </>
        )}
      </div>
    </MiniModal>
  );
}

/* =======================
   Subcomponentes
   ======================= */
function Th({ children, className = '' }: { children: React.ReactNode; className?: string }) {
  return (
    <th className={`text-left font-medium px-3 py-2 border-b border-[--color-border]/60 ${className}`}>
      {children}
    </th>
  );
}
function Cell({ children, className = '' }: { children: React.ReactNode; className?: string }) {
  return <div className={`min-w-0 ${className}`}>{children}</div>;
}
function Badge({ children, className = '' }: { children: React.ReactNode; className?: string }) {
  return (
    <span className={`px-2 py-0.5 rounded-full text-[11px] font-semibold ${className}`}>
      {children}
    </span>
  );
}
function Stat({ label, value }: { label: string; value: number | string }) {
  return (
    <div className="rounded-lg border border-[--color-border] bg-[color:var(--color-surface)]/70 p-3">
      <div className="text-xs uppercase text-[color:var(--color-text)]/65">{label}</div>
      <div className="text-xl font-semibold mt-1" style={{ fontVariantNumeric: 'tabular-nums' }}>
        {String(value)}
      </div>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsChart.tsx =====
// components/reports/ReportsChart.tsx
'use client';

import {
  ResponsiveContainer,
  BarChart, Bar,
  XAxis, YAxis,
  CartesianGrid,
  Tooltip,
  LabelList,
} from 'recharts';
import type { AggregateRow, Metric } from '@/types/reports';
import { fmtEUR2, fmtINT, formatByMetric, makeYAxisTick } from '@/utils/format';

type Props = {
  data: AggregateRow[];
  metric: Metric;
  title?: string;
  height?: number;
  showTable?: boolean;
  groupLabel?: string;
};

const chartTheme = {
  tick: { fill: 'var(--chart-axis)', fontSize: 12 },
  axisLine: { stroke: 'var(--chart-grid)' },
  tickLine: { stroke: 'var(--chart-grid)' },
  grid: 'var(--chart-grid)',
  gridStrong: 'var(--chart-grid-strong)',
  tooltip: {
    contentStyle: {
      background: 'var(--chart-tooltip-bg)',
      border: '1px solid var(--color-border)',
      borderRadius: 8,
    } as React.CSSProperties,
    itemStyle: { color: 'var(--color-text)' } as React.CSSProperties,
    labelStyle: { color: 'var(--color-text)' } as React.CSSProperties,
  },
};

export default function ReportsChart({
  data,
  metric,
  title = 'Top ranking',
  height = 360,
  showTable = true,
  groupLabel = 'Group',
}: Props) {
  const yTick = makeYAxisTick(metric);
  const hStyle = { height: `${height}px` }; // â¬…ï¸ altura explÃ­cita para el contenedor

  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-3">
      <div className="flex items-center justify-between px-1 pb-2">
        <div className="text-sm opacity-80">{title}</div>
        <div className="text-xs opacity-60">Right click â†’ â€œSave imageâ€</div>
      </div>

      {/* â¬‡ï¸ altura fija en inline-style (nada de variables CSS) */}
      <div style={hStyle}>
        {data.length === 0 ? (
          <div className="h-full flex items-center justify-center text-sm opacity-70">
            No data for current filters
          </div>
        ) : (
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={data} margin={{ top: 8, right: 12, left: 12, bottom: 40 }}>
              <CartesianGrid stroke={chartTheme.grid} vertical={false} />
              <XAxis
                dataKey="label"
                interval={0}
                angle={-25}
                textAnchor="end"
                height={55}
                tick={chartTheme.tick}
                axisLine={chartTheme.axisLine}
                tickLine={chartTheme.tickLine}
              />
              <YAxis
                tickFormatter={yTick}
                tick={chartTheme.tick}
                axisLine={chartTheme.axisLine}
                tickLine={chartTheme.tickLine}
              />
              <Tooltip
                cursor={{ stroke: chartTheme.gridStrong }}
                contentStyle={chartTheme.tooltip.contentStyle}
                itemStyle={chartTheme.tooltip.itemStyle}
                labelStyle={chartTheme.tooltip.labelStyle}
                formatter={(v: any, name: any) => {
                  const val = Number(v || 0);
                  if (metric === 'ecpm') return [fmtEUR2.format(val), 'eCPM'];
                  if (metric === 'turnover' || metric === 'margin') return [fmtEUR2.format(val), name];
                  return [fmtINT.format(val), name];
                }}
                labelFormatter={(label: any) => String(label)}
              />
              <Bar dataKey={metric} name={legendName(metric)} radius={[6, 6, 0, 0]} fill="var(--chart-1)">
                <LabelList
                  dataKey={metric}
                  position="top"
                  formatter={(v: number) => formatByMetric(metric, v)}
                  style={{ fontSize: 11, opacity: 0.9 }}
                />
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        )}
      </div>

      {showTable && data.length > 0 && (
        <div className="overflow-x-auto mt-3">
          <table className="min-w-[720px] w-full text-sm">
            <thead className="bg-white/5">
              <tr>
                <th className="text-left px-3 py-2">{groupLabel}</th>
                <th className="text-right px-3 py-2">Turnover</th>
                <th className="text-right px-3 py-2">Margin</th>
                <th className="text-right px-3 py-2">eCPM</th>
                <th className="text-right px-3 py-2">V Sent</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-[--color-border]/60">
              {data.map((d) => (
                <tr key={d.key}>
                  <td className="px-3 py-2">{d.label}</td>
                  <td className="px-3 py-2 text-right">{fmtEUR2.format(d.turnover)}</td>
                  <td className={`px-3 py-2 text-right ${d.margin>0?'text-[--color-primary]':d.margin<0?'text-[--color-accent]':''}`}>
                    {fmtEUR2.format(d.margin)}
                  </td>
                  <td className="px-3 py-2 text-right">{fmtEUR2.format(d.ecpm)}</td>
                  <td className="px-3 py-2 text-right">{fmtINT.format(d.vSent)}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}

function legendName(m: Metric) {
  return m === 'turnover' ? 'Turnover' : m === 'margin' ? 'Margin' : m === 'ecpm' ? 'eCPM' : 'V Sent';
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsGeoBreakdown.tsx =====
'use client';

import Card from '@/components/ui/Card';
import { useReportData } from '@/hooks/useReportData';

const fmtEUR = new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' });
const fmtPct = new Intl.NumberFormat('es-ES', { style: 'percent', maximumFractionDigits: 2 });

function Block({
  title,
  turnover,
  margin,
  marginPct,
}: {
  title: string;
  turnover: number;
  margin: number;
  marginPct: number | null;
}) {
  const tone =
    marginPct == null ? ''
    : marginPct >= 0.70 ? 'text-[color:var(--color-primary)]'
    : marginPct >= 0.01 ? 'text-[color-mix(in_oklab,var(--color-accent)_58%,var(--color-primary)_42%)]'
    : 'text-[color:var(--color-accent)]';

  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface-2)]/60 p-4">
      <div className="text-xs uppercase opacity-70">{title}</div>
      <div className="mt-2 grid gap-1">
        <div className="text-sm">Turnover</div>
        <div className="text-lg font-semibold tabular-nums">{fmtEUR.format(turnover)}</div>
        <div className="mt-1 text-sm">Margin (%)</div>
        <div className={`text-lg font-semibold tabular-nums ${tone}`}>
          {marginPct == null ? 'â€”' : fmtPct.format(marginPct)}
        </div>
        <div className="text-xs opacity-75 tabular-nums">Margin: <strong>{fmtEUR.format(margin)}</strong></div>
      </div>
    </div>
  );
}

export default function ReportsGeoBreakdown() {
  const { computeTotals } = useReportData();

  const isFR    = (g?: string) => (g || '').toUpperCase() === 'FR';
  const isB2C   = (t?: string) => t === 'B2C';
  const isB2B   = (t?: string) => t === 'B2B';

  const frB2C = computeTotals(r => isFR(r.geo) && isB2C(r.databaseType));
  const frB2B = computeTotals(r => isFR(r.geo) && isB2B(r.databaseType));
  const intl  = computeTotals(r => !isFR(r.geo)); // todos los geos â‰  FR, incluye B2B+B2C (y geos vacÃ­os si los hay)
  const total = computeTotals(); // summary sobre el filtro activo

  return (
    <Card title="France vs INTL">
      <div className="grid grid-cols-1 md:grid-cols-4 gap-3">
        <Block title="France Â· B2C" turnover={frB2C.turnover} margin={frB2C.margin} marginPct={frB2C.marginPct} />
        <Block title="France Â· B2B" turnover={frB2B.turnover} margin={frB2B.margin} marginPct={frB2B.marginPct} />
        <Block title="INTL (â‰ FR)"   turnover={intl.turnover} margin={intl.margin}   marginPct={intl.marginPct} />
        <Block title="Summary (Total filtro)" turnover={total.turnover} margin={total.margin} marginPct={total.marginPct} />
      </div>
    </Card>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsHeader.tsx =====
'use client';

import { useMemo, useRef, useState, useEffect } from 'react';
import Link from 'next/link';
import Chip from '@/components/ui/Chip';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';
import type { GroupBy, Metric, ReportFilters } from '@/types/reports';

type Props = {
  groupBy: GroupBy;
  metric: Metric;
  topN: number;

  filters: ReportFilters;
  onChangeFilters: (next: ReportFilters) => void;

  onChangeGroupBy: (g: GroupBy) => void;
  onChangeMetric: (m: Metric) => void;
  onChangeTopN: (n: number) => void;

  onQuickLast30?: () => void;
  onExportCsv?: () => void;

  summary?: { filteredCount?: number; groupCount?: number; };
};

const groupByOptions: { value: GroupBy; label: string }[] = [
  { value: 'database',     label: 'Database' },
  { value: 'partner',      label: 'Partner' },
  { value: 'campaign',     label: 'Campaign' },
  { value: 'advertiser',   label: 'Advertiser' },
  { value: 'theme',        label: 'Theme' },
  { value: 'geo',          label: 'GEO' },
  { value: 'type',         label: 'Type' },
  { value: 'databaseType', label: 'DB Type' },
];

const metrics: Metric[] = ['turnover', 'margin', 'ecpm', 'vSent'];

/** Presets iguales a CampaÃ±as */
type DatePreset =
  | 'today' | 'yesterday' | 'thisWeek' | 'lastWeek'
  | 'thisMonth' | 'lastMonth' | 'last7' | 'last30' | 'custom';

function fmtLocal(d: Date) {
  const y = d.getFullYear();
  const m = String(d.getMonth() + 1).padStart(2, '0');
  const day = String(d.getDate()).padStart(2, '0');
  return `${y}-${m}-${day}`;
}
function startOfWeek(d: Date) {
  const n = new Date(d.getFullYear(), d.getMonth(), d.getDate());
  const w = (n.getDay() || 7) - 1; // lunes
  n.setDate(n.getDate() - w);
  return n;
}
function endOfWeek(d: Date) {
  const s = startOfWeek(d);
  return new Date(s.getFullYear(), s.getMonth(), s.getDate() + 6);
}
function startOfMonth(d: Date) { return new Date(d.getFullYear(), d.getMonth(), 1); }
function endOfMonth(d: Date)   { return new Date(d.getFullYear(), d.getMonth() + 1, 0); }

function rangeForPreset(p: Exclude<DatePreset,'custom'>): [string, string] {
  const now = new Date();
  if (p === 'today')     { const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()); const s=fmtLocal(a); return [s,s]; }
  if (p === 'yesterday') { const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()-1); const s=fmtLocal(a); return [s,s]; }
  if (p === 'thisWeek')  return [fmtLocal(startOfWeek(now)), fmtLocal(endOfWeek(now))];
  if (p === 'lastWeek')  { const k=new Date(now.getFullYear(),now.getMonth(),now.getDate()-7); return [fmtLocal(startOfWeek(k)), fmtLocal(endOfWeek(k))]; }
  if (p === 'thisMonth') return [fmtLocal(startOfMonth(now)), fmtLocal(endOfMonth(now))];
  if (p === 'lastMonth') { const k=new Date(now.getFullYear(),now.getMonth()-1,15); return [fmtLocal(startOfMonth(k)), fmtLocal(endOfMonth(k))]; }
  if (p === 'last7')     { const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()-6); const b=new Date(now.getFullYear(),now.getMonth(),now.getDate()); return [fmtLocal(a),fmtLocal(b)]; }
  // last30
  const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()-29);
  const b=new Date(now.getFullYear(),now.getMonth(),now.getDate());
  return [fmtLocal(a),fmtLocal(b)];
}

export default function ReportsHeader({
  groupBy,
  metric,
  topN,
  filters,
  onChangeFilters,
  onChangeGroupBy,
  onChangeMetric,
  onChangeTopN,
  onQuickLast30,
  onExportCsv,
  summary,
}: Props) {
  const { PARTNERS, DATABASES, THEMES, TYPES } = useCatalogOverrides();

  const geoOptions = useMemo(() => {
    const set = new Set<string>();
    DATABASES.forEach(d => d.geo && set.add((d.geo || '').toUpperCase()));
    return Array.from(set).sort();
  }, [DATABASES]);

  const partnerOptions = useMemo(
    () => PARTNERS.map(p => ({ id: p.id, name: p.name, isInternal: !!p.isInternal })),
    [PARTNERS],
  );
  const themeOptions = useMemo(() => THEMES, [THEMES]);
  const typeOptions  = useMemo(() => TYPES, [TYPES]);
  const dbTypeOptions = ['B2C', 'B2B', 'Mixed'] as const;

  const s = summary || {};
  const set = <K extends keyof ReportFilters>(key: K, value: ReportFilters[K]) =>
    onChangeFilters({ ...filters, [key]: value });

  const toggleOnlyInternal = () =>
    onChangeFilters({ ...filters, onlyInternalPartners: !filters.onlyInternalPartners });

  // --- periodo activo (solo para resaltar chips)
  const startDate = filters.from || '';
  const endDate   = filters.to   || '';
  const hasRange  = !!(startDate && endDate);
  const [activePreset, setActivePreset] = useState<DatePreset>('custom');

  useEffect(() => {
    if (!hasRange) { setActivePreset('custom'); return; }
    const candidates: Exclude<DatePreset,'custom'>[] =
      ['today','yesterday','thisWeek','lastWeek','thisMonth','lastMonth','last7','last30'];
    for (const key of candidates) {
      const [s,e] = rangeForPreset(key);
      if (s === startDate && e === endDate) { setActivePreset(key); return; }
    }
    setActivePreset('custom');
  }, [startDate, endDate, hasRange]);

  function choosePreset(p: Exclude<DatePreset,'custom'> | 'custom') {
    if (p === 'custom') { setActivePreset('custom'); return; }
    const [s, e] = rangeForPreset(p);
    setActivePreset(p);
    onChangeFilters({ ...filters, from: s, to: e });
  }

  // refs para botÃ³n del picker (UX igual que CampaÃ±as)
  const startRef = useRef<HTMLInputElement | null>(null);
  const endRef   = useRef<HTMLInputElement | null>(null);
  const openPicker = (ref: React.RefObject<HTMLInputElement>) => {
    const el = ref.current;
    if (!el) return;
    // @ts-ignore
    if (el.showPicker) el.showPicker(); else el.focus();
  };

  return (
    <div className="grid gap-4">
      {/* TÃ­tulo + acciones */}
      <div className="flex items-center justify-between gap-3">
        <div>
          <h1 className="text-2xl font-semibold">Reports</h1>
          <p className="muted">
            {groupByLabel(groupBy)} performance Â·{' '}
            <span className="opacity-80">
              {s.filteredCount != null ? `${s.filteredCount} rows` : ''}{s.filteredCount!=null && s.groupCount!=null ? ' Â· ' : ''}
              {s.groupCount != null ? `${s.groupCount} groups` : ''}
            </span>
          </p>
        </div>
        <div className="flex items-center gap-2">
          {onExportCsv && <button className="btn-ghost" onClick={onExportCsv}>â¬‡ Export CSV</button>}
          <Link href="/" className="btn-ghost">â† Back to campaigns</Link>
        </div>
      </div>

      {/* Stack de filtros */}
      <div className="filters-stack">
        {/* Row A â€” mÃ©trica, groupBy, TopN */}
        <div className="grid gap-3 md:grid-cols-12 items-end">
          <div className="md:col-span-2">
            <label className="text-sm grid gap-1">
              <span className="muted">Group by</span>
              <select className="input" value={groupBy} onChange={(e) => onChangeGroupBy(e.target.value as GroupBy)}>
                {groupByOptions.map(o => <option key={o.value} value={o.value}>{o.label}</option>)}
              </select>
            </label>
          </div>

          <div className="md:col-span-8">
            <span className="muted text-sm mb-1 inline-block">Metric</span>
            <div className="flex gap-1 flex-wrap">
              {metrics.map(m => (
                <Chip key={m} active={metric === m} onClick={() => onChangeMetric(m)} title={`Rank by ${m}`}>
                  {m === 'turnover' ? 'Turnover' : m === 'margin' ? 'Margin' : m === 'ecpm' ? 'eCPM' : 'V Sent'}
                </Chip>
              ))}
            </div>
          </div>

          <div className="md:col-span-2">
            <label className="text-sm grid gap-1">
              <span className="muted">Top N</span>
              <input
                type="number"
                className="input"
                min={1}
                max={50}
                value={topN}
                onChange={(e) => onChangeTopN(Math.max(1, Math.min(50, Number(e.target.value || 1))))}
              />
            </label>
          </div>
        </div>

        {/* Row B â€” chips de periodo */}
        <div className="flex flex-wrap items-center gap-3">
          {([
            ['today','Today'],
            ['yesterday','Yesterday'],
            ['last7','Last 7'],
            ['last30','Last 30'],
            ['thisWeek','This week'],
            ['lastWeek','Last week'],
            ['thisMonth','This month'],
            ['lastMonth','Last month'],
            ['custom','Custom'],
          ] as [DatePreset,string][])
            .map(([key,label]) => (
              <Chip
                key={key}
                active={activePreset === key}
                onClick={() => choosePreset(key === 'custom' ? 'custom' : key)}
              >
                {label}
              </Chip>
            ))}
        </div>

        {/* Row C â€” rango de fechas + toggles */}
        <div className="flex flex-wrap items-center gap-3 md:gap-4">
          {/* Start */}
          <div className="relative">
            <input
              ref={startRef}
              type="date"
              value={startDate}
              onChange={(e) => onChangeFilters({ ...filters, from: e.target.value || undefined })}
              className="input input-date w-40 pr-9"
            />
            <button
              type="button"
              className="absolute inset-y-0 right-0 px-2 rounded-r-lg hover:bg-black/5 focus:outline-none focus:ring-2 focus:ring-primary/40"
              aria-label="Open start date picker"
              onClick={() => openPicker(startRef)}
            >
              ðŸ“…
            </button>
          </div>

          {/* End */}
          <div className="relative">
            <input
              ref={endRef}
              type="date"
              value={endDate}
              onChange={(e) => onChangeFilters({ ...filters, to: e.target.value || undefined })}
              className="input input-date w-40 pr-9"
            />
            <button
              type="button"
              className="absolute inset-y-0 right-0 px-2 rounded-r-lg hover:bg-black/5 focus:outline-none focus:ring-2 focus:ring-primary/40"
              aria-label="Open end date picker"
              onClick={() => openPicker(endRef)}
            >
              ðŸ“…
            </button>
          </div>

          <div className="flex-1" />

          <label className="inline-flex items-center gap-2 text-sm">
            <input
              type="checkbox"
              className="accent-[--color-primary]"
              checked={!!filters.onlyInternalPartners}
              onChange={toggleOnlyInternal}
            />
            <span className="muted">Only internal</span>
          </label>

          <button
            className="btn-ghost"
            onClick={() => onChangeFilters({})}
            title="Clear filters"
          >
            Clear
          </button>
        </div>

        {/* Row D â€” filtros de entidad */}
        <div className="grid gap-3 md:grid-cols-12">
          <div className="md:col-span-2">
            <label className="text-sm grid gap-1">
              <span className="muted">GEO</span>
              <select
                className="input"
                value={(filters.geos && filters.geos[0]) || ''}
                onChange={(e) => set('geos', e.target.value ? [e.target.value] : undefined)}
              >
                <option value="">All</option>
                {geoOptions.map(g => <option key={g} value={g}>{g}</option>)}
              </select>
            </label>
          </div>

          <div className="md:col-span-3">
            <label className="text-sm grid gap-1">
              <span className="muted">Partner</span>
              <select
                className="input"
                value={(filters.partners && filters.partners[0]) || ''}
                onChange={(e) => set('partners', e.target.value ? [e.target.value] : undefined)}
              >
                <option value="">All</option>
                {partnerOptions.map(p => (
                  <option key={p.id} value={p.name}>
                    {p.name}{p.isInternal ? ' Â· INT' : ''}
                  </option>
                ))}
              </select>
            </label>
          </div>

          <div className="md:col-span-2">
            <label className="text-sm grid gap-1">
              <span className="muted">Theme</span>
              <select
                className="input"
                value={(filters.themes && filters.themes[0]) || ''}
                onChange={(e) => set('themes', e.target.value ? [e.target.value] : undefined)}
              >
                <option value="">All</option>
                {themeOptions.map(t => <option key={t} value={t}>{t}</option>)}
              </select>
            </label>
          </div>

          <div className="md:col-span-2">
            <label className="text-sm grid gap-1">
              <span className="muted">Type</span>
              <select
                className="input"
                value={(filters.types && filters.types[0]) || ''}
                onChange={(e) => set('types', e.target.value ? [e.target.value as any] : undefined)}
              >
                <option value="">All</option>
                {typeOptions.map(t => <option key={t} value={t}>{t}</option>)}
              </select>
            </label>
          </div>

          <div className="md:col-span-2">
            <label className="text-sm grid gap-1">
              <span className="muted">DB Type</span>
              <select
                className="input"
                value={(filters.databaseTypes && filters.databaseTypes[0]) || ''}
                onChange={(e) => set('databaseTypes', e.target.value ? [e.target.value as any] : undefined)}
              >
                <option value="">All</option>
                {dbTypeOptions.map(t => <option key={t} value={t}>{t}</option>)}
              </select>
            </label>
          </div>
        </div>
      </div>
    </div>
  );
}

function groupByLabel(g: GroupBy) {
  return groupByOptions.find(o => o.value === g)?.label ?? 'Group';
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsKpis.tsx =====
// components/reports/ReportsKpis.tsx
'use client';

import { fmtEUR2, fmtINT as fmtNum } from '@/utils/format';

type Kpis = {
  vSent: number;
  turnover: number;
  margin: number;
  ecpm: number;
  marginPct: number | null;
};

export default function ReportsKpis({ kpis }: { kpis: Kpis }) {
  const marginText =
    `${fmtEUR2.format(kpis.margin)}${
      kpis.marginPct == null ? '' : ` (${(kpis.marginPct * 100).toFixed(1)}%)`
    }`;

  const highlight: 'pos' | 'neg' | undefined =
    kpis.margin > 0 ? 'pos' : kpis.margin < 0 ? 'neg' : undefined;

  return (
    <div className="grid gap-3 mt-4 sm:grid-cols-2 lg:grid-cols-4">
      <Kpi title="Total V Sent" value={fmtNum.format(kpis.vSent)} />
      <Kpi title="Turnover" value={fmtEUR2.format(kpis.turnover)} />
      <Kpi title="Margin" value={marginText} highlight={highlight} />
      <Kpi title="Weighted eCPM" value={fmtEUR2.format(kpis.ecpm)} />
    </div>
  );
}

function Kpi({
  title,
  value,
  highlight,
}: {
  title: string;
  value: string;
  highlight?: 'pos' | 'neg';
}) {
  const color =
    highlight === 'pos'
      ? 'text-[--color-primary]'
      : highlight === 'neg'
      ? 'text-[--color-accent]'
      : 'opacity-100';
  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)]/80 p-3">
      <div className="text-xs uppercase opacity-70">{title}</div>
      <div className={`text-xl font-semibold mt-1 ${color}`}>{value}</div>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsTimeSeries.tsx =====
// components/reports/ReportsTimeSeries.tsx
'use client';

import { useMemo, useState } from 'react';
import type { UseReportDataResult } from '@/hooks/useReportData';
import { fmtEUR2, fmtINT } from '@/utils/format';
import {
  ResponsiveContainer, LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend,
} from 'recharts';

type MetricOpt = 'ecpm' | 'turnover' | 'margin' | 'marginPct' | 'vSent';
type GroupOpt = 'none' | 'database' | 'partner' | 'geo';

const fmtPCT1 = new Intl.NumberFormat('es-ES', { style: 'percent', maximumFractionDigits: 1 });

export default function ReportsTimeSeries({
  makeSeries,
  title = 'Time series',
  height = 300,
}: {
  makeSeries: UseReportDataResult['makeTimeSeries'];
  title?: string;
  height?: number;
}) {
  const [metric, setMetric] = useState<MetricOpt>('ecpm');
  const [by, setBy] = useState<GroupOpt>('none');
  const [topN, setTopN] = useState(5);
  const [includeOthers, setIncludeOthers] = useState(true);
  const [focus, setFocus] = useState<string>(''); // '' = All

  const { data, keys } = useMemo(
    () => makeSeries({ metric, by, topN, includeOthers }),
    [makeSeries, metric, by, topN, includeOthers],
  );

  const visibleKeys = focus ? keys.filter(k => k === focus) : keys;

  const tickFormatter = (v: any) =>
    metric === 'marginPct'
      ? fmtPCT1.format(Number(v || 0))
      : metric === 'vSent'
      ? fmtINT.format(Number(v || 0))
      : fmtEUR2.format(Number(v || 0));

  const tooltipFormatter = (value: any) => [
    metric === 'marginPct'
      ? fmtPCT1.format(Number(value || 0))
      : metric === 'vSent'
      ? fmtINT.format(Number(value || 0))
      : fmtEUR2.format(Number(value || 0)),
    labelOf(metric),
  ];

  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-3">
      <div className="flex items-center justify-between mb-2">
        <div className="text-sm font-medium">{title}</div>

        <div className="flex gap-2 items-center">
          <label className="text-sm">
            <span className="muted mr-2">Group lines by</span>
            <select className="input" value={by} onChange={e => { setBy(e.target.value as GroupOpt); setFocus(''); }}>
              <option value="none">Total</option>
              <option value="database">Database</option>
              <option value="partner">Partner</option>
              <option value="geo">GEO</option>
            </select>
          </label>

          <label className="text-sm">
            <span className="muted mr-2">Metric</span>
            <select className="input" value={metric} onChange={e => setMetric(e.target.value as MetricOpt)}>
              <option value="ecpm">eCPM</option>
              <option value="turnover">Turnover</option>
              <option value="margin">Margin</option>
              <option value="marginPct">Margin %</option>
              <option value="vSent">V Sent</option>
            </select>
          </label>

          {by !== 'none' && (
            <>
              <label className="text-sm">
                <span className="muted mr-2">Top N</span>
                <input
                  className="input w-[88px]"
                  type="number"
                  min={1}
                  max={10}
                  value={topN}
                  onChange={e => setTopN(Math.max(1, Math.min(10, Number(e.target.value || 1))))}
                />
              </label>
              <label className="text-sm inline-flex items-center gap-2">
                <input
                  type="checkbox"
                  className="accent-[--color-primary]"
                  checked={includeOthers}
                  onChange={e => setIncludeOthers(e.target.checked)}
                />
                <span className="muted">Include â€œOthersâ€</span>
              </label>
              <label className="text-sm">
                <span className="muted mr-2">Focus</span>
                <select className="input min-w-[160px]" value={focus} onChange={e => setFocus(e.target.value)}>
                  <option value="">All</option>
                  {keys.map(k => <option key={k} value={k}>{k}</option>)}
                </select>
              </label>
            </>
          )}
        </div>
      </div>

      <div className="h-[--h]" style={{ ['--h' as any]: `${height}px` }}>
        {data.length === 0 ? (
          <div className="h-full flex items-center justify-center text-sm opacity-70">No data for current filters</div>
        ) : (
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={data} margin={{ left: 8, right: 8, top: 8, bottom: 0 }}>
              <CartesianGrid stroke="var(--chart-grid)" vertical={false} />
              <XAxis
                dataKey="date"
                tick={{ fill: 'var(--chart-axis)', fontSize: 12 }}
                axisLine={{ stroke: 'var(--chart-grid)' }}
                tickLine={{ stroke: 'var(--chart-grid)' }}
              />
              <YAxis
                tick={{ fill: 'var(--chart-axis)', fontSize: 12 }}
                axisLine={{ stroke: 'var(--chart-grid)' }}
                tickLine={{ stroke: 'var(--chart-grid)' }}
                tickFormatter={tickFormatter}
              />
              <Tooltip
                cursor={{ stroke: 'var(--chart-grid-strong)' }}
                contentStyle={{ background: 'var(--chart-tooltip-bg)', border: '1px solid var(--color-border)', borderRadius: 8 }}
                itemStyle={{ color: 'var(--color-text)' }}
                labelStyle={{ color: 'var(--color-text)' }}
                formatter={tooltipFormatter}
              />
              <Legend />
              {visibleKeys.map((k) => (
                <Line
                  key={k}
                  type="monotone"
                  dataKey={k}
                  dot={false}
                  name={k}
                  strokeWidth={focus && k !== focus ? 1 : 2}
                  strokeOpacity={focus && k !== focus ? 0.25 : 1}
                  stroke={colorFor(k)}
                />
              ))}
            </LineChart>
          </ResponsiveContainer>
        )}
      </div>
    </div>
  );
}

/* Color estable por clave */
function colorFor(key: string) {
  const palette = [
    'var(--chart-1)', 'var(--chart-2)', 'var(--chart-3)', 'var(--chart-4)', 'var(--chart-5)',
    '#6B7280', '#10B981', '#F59E0B', '#EF4444', '#3B82F6',
  ];
  let h = 0;
  for (let i = 0; i < key.length; i++) h = (h * 31 + key.charCodeAt(i)) >>> 0;
  return palette[h % palette.length];
}
function labelOf(m: MetricOpt) {
  return m === 'ecpm' ? 'eCPM' : m === 'marginPct' ? 'Margin %' : m === 'vSent' ? 'V Sent' : m[0].toUpperCase() + m.slice(1);
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsTopTable.tsx =====
// components/reports/ReportsTopTable.tsx
'use client';

import type { AggregateRow } from '@/types/reports';
import { fmtEUR2, fmtINT as fmtNum } from '@/utils/format';

type RowLike = Pick<AggregateRow, 'label' | 'vSent' | 'turnover' | 'margin' | 'ecpm'> & {
  key?: string;
};

export default function ReportsTopTable({
  data,
  rows,
  groupLabel = 'Group',
}: {
  /** Nueva prop opcional para retro-compat: */
  rows?: RowLike[];
  /** Prop â€œcanÃ³nicaâ€: */
  data?: RowLike[];
  groupLabel?: string;
}) {
  const list: RowLike[] = (data ?? rows ?? []);

  if (!list.length) {
    return (
      <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-3">
        <div className="text-sm opacity-70">No data for current filters.</div>
      </div>
    );
  }

  return (
    <div className="overflow-x-auto mt-3">
      <table className="w-full text-sm min-w-[720px]">
        <thead>
          <tr className="border-b border-[--color-border]/60">
            <Th>{groupLabel}</Th>
            <Th className="text-right">V Sent</Th>
            <Th className="text-right">Turnover</Th>
            <Th className="text-right">Margin</Th>
            <Th className="text-right">eCPM</Th>
          </tr>
        </thead>
        <tbody className="divide-y divide-[--color-border]/60">
          {list.map((r) => (
            <tr key={r.key ?? r.label}>
              <Td>{r.label}</Td>
              <Td className="text-right">{fmtNum.format(r.vSent)}</Td>
              <Td className="text-right">{fmtEUR2.format(r.turnover)}</Td>
              <Td
                className={[
                  'text-right',
                  r.margin > 0 ? 'text-[--color-primary]' : r.margin < 0 ? 'text-[--color-accent]' : '',
                ].join(' ')}
              >
                {fmtEUR2.format(r.margin)}
              </Td>
              <Td className="text-right">{fmtEUR2.format(r.ecpm)}</Td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

function Th({ children, className = '' }: { children: React.ReactNode; className?: string }) {
  return <th className={`text-left font-medium px-3 py-2 ${className}`}>{children}</th>;
}
function Td({ children, className = '' }: { children: React.ReactNode; className?: string }) {
  return <td className={`px-3 py-2 ${className}`}>{children}</td>;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsTrend.tsx =====
// components/reports/ReportsTrend.tsx
'use client';

import type { TrendPoint } from '@/types/reports';
import { fmtEUR2 } from '@/utils/format';
import {
  ResponsiveContainer,
  LineChart, Line,
  CartesianGrid, XAxis, YAxis, Tooltip, Legend,
} from 'recharts';

export default function ReportsTrend({ data }: { data: TrendPoint[] }) {
  const hasData = Array.isArray(data) && data.length > 0;

  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-3">
      <div className="text-sm font-medium mb-2">eCPM trend</div>
      <div className="h-[280px]">
        {!hasData ? (
          <div className="h-full flex items-center justify-center text-sm opacity-70">
            No data for current filters
          </div>
        ) : (
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={data} margin={{ left: 8, right: 8, top: 8, bottom: 0 }}>
              <CartesianGrid stroke="var(--chart-grid)" vertical={false} />
              <XAxis
                dataKey="date"
                tick={{ fill: 'var(--chart-axis)', fontSize: 12 }}
                axisLine={{ stroke: 'var(--chart-grid)' }}
                tickLine={{ stroke: 'var(--chart-grid)' }}
              />
              <YAxis
                tick={{ fill: 'var(--chart-axis)', fontSize: 12 }}
                axisLine={{ stroke: 'var(--chart-grid)' }}
                tickLine={{ stroke: 'var(--chart-grid)' }}
                tickFormatter={(v: number) => fmtEUR2.format(Number(v || 0))}
              />
              <Tooltip
                cursor={{ stroke: 'var(--chart-grid-strong)' }}
                contentStyle={{
                  background: 'var(--chart-tooltip-bg)',
                  border: '1px solid var(--color-border)',
                  borderRadius: 8,
                }}
                itemStyle={{ color: 'var(--color-text)' }}
                labelStyle={{ color: 'var(--color-text)' }}
                formatter={(value: any) => [fmtEUR2.format(Number(value || 0)), 'eCPM']}
              />
              <Legend />
              <Line
                type="monotone"
                dataKey="ecpm"
                dot={false}
                activeDot={{ r: 4 }}
                stroke="var(--chart-2)"
                strokeWidth={2}
              />
            </LineChart>
          </ResponsiveContainer>
        )}
      </div>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsTurnoverTrend.tsx =====
'use client';

import { fmtEUR2 } from '@/utils/format';
import {
  ResponsiveContainer,
  LineChart, Line,
  CartesianGrid, XAxis, YAxis, Tooltip, Legend,
} from 'recharts';

type By = 'none' | 'database' | 'partner' | 'geo';

export default function ReportsTurnoverTrend(props: {
  data: Array<Record<string, any>>;
  keys: string[];
  by: By;
  onChangeBy: (v: By) => void;
  topN: number;
  onChangeTopN: (n: number) => void;
  includeOthers: boolean;
  onToggleOthers: (v: boolean) => void;

  // NUEVO: focus
  focusKey?: string | null;
  focusOptions?: string[];
  onChangeFocus?: (k: string | null) => void;
}) {
  const {
    data, keys, by, onChangeBy,
    topN, onChangeTopN,
    includeOthers, onToggleOthers,
    focusKey, focusOptions, onChangeFocus,
  } = props;

  const disabledByFocus = !!focusKey;

  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-3">
      <div className="flex flex-wrap gap-3 items-end mb-2">
        <div className="text-sm font-medium mr-auto">Turnover trend</div>

        <label className="text-sm grid gap-1">
          <span className="muted">Group lines by</span>
          <select
            className="input"
            value={by}
            onChange={e => onChangeBy(e.target.value as By)}
          >
            <option value="none">Total</option>
            <option value="database">Database</option>
            <option value="partner">Partner</option>
            <option value="geo">GEO</option>
          </select>
        </label>

        {by !== 'none' && (
          <>
            <label className="text-sm grid gap-1">
              <span className="muted">Focus</span>
              <select
                className="input"
                value={focusKey ?? ''}
                onChange={e => onChangeFocus?.(e.target.value || null)}
              >
                <option value="">All</option>
                {(focusOptions ?? []).map(k => (
                  <option key={k} value={k}>{k}</option>
                ))}
              </select>
            </label>

            <label className="text-sm grid gap-1">
              <span className="muted">Top N</span>
              <input
                type="number"
                className="input"
                min={1}
                max={20}
                value={topN}
                onChange={e => onChangeTopN(Math.max(1, Math.min(20, Number(e.target.value || 1))))}
                disabled={disabledByFocus}
              />
            </label>

            <label className="text-sm inline-flex items-center gap-2 mt-6 ml-1">
              <input
                type="checkbox"
                checked={includeOthers}
                onChange={e => onToggleOthers(e.target.checked)}
                disabled={disabledByFocus}
              />
              <span className={disabledByFocus ? 'opacity-50' : ''}>Include â€œOthersâ€</span>
            </label>
          </>
        )}
      </div>

      <div className="h-[300px]">
        {(!data || data.length === 0) ? (
          <div className="h-full flex items-center justify-center text-sm opacity-70">
            No data for current filters
          </div>
        ) : (
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={data} margin={{ left: 8, right: 8, top: 8, bottom: 0 }}>
              <CartesianGrid stroke="var(--chart-grid)" vertical={false} />
              <XAxis
                dataKey="date"
                tick={{ fill: 'var(--chart-axis)', fontSize: 12 }}
                axisLine={{ stroke: 'var(--chart-grid)' }}
                tickLine={{ stroke: 'var(--chart-grid)' }}
              />
              <YAxis
                tick={{ fill: 'var(--chart-axis)', fontSize: 12 }}
                axisLine={{ stroke: 'var(--chart-grid)' }}
                tickLine={{ stroke: 'var(--chart-grid)' }}
                tickFormatter={(v: number) => fmtEUR2.format(Number(v || 0))}
              />
              <Tooltip
                cursor={{ stroke: 'var(--chart-grid-strong)' }}
                contentStyle={{
                  background: 'var(--chart-tooltip-bg)',
                  border: '1px solid var(--color-border)',
                  borderRadius: 8,
                }}
                itemStyle={{ color: 'var(--color-text)' }}
                labelStyle={{ color: 'var(--color-text)' }}
                formatter={(value: any, name: any) => [fmtEUR2.format(Number(value || 0)), String(name)]}
              />
              <Legend />
              {keys.map((k) => (
                <Line
                  key={k}
                  type="monotone"
                  dataKey={k}
                  dot={false}
                  activeDot={{ r: 3 }}
                  strokeWidth={2}
                />
              ))}
            </LineChart>
          </ResponsiveContainer>
        )}
      </div>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsUnifiedTrend.tsx =====
// components/reports/ReportsUnifiedTrend.tsx
'use client';

import {
  ResponsiveContainer,
  LineChart, Line,
  CartesianGrid,
  XAxis, YAxis,
  Tooltip, Legend,
} from 'recharts';
import { fmtEUR2, fmtINT } from '@/utils/format';

type TrendMetric = 'ecpm' | 'turnover' | 'margin' | 'marginPct' | 'vSent';
type GroupBy = 'none' | 'database' | 'partner' | 'geo';

type Props = {
  data: Array<Record<string, number | string>>;
  keys: string[];

  // controles
  metric: TrendMetric;
  onChangeMetric: (m: TrendMetric) => void;

  by: GroupBy;
  onChangeBy: (b: GroupBy) => void;

  topN: number;
  onChangeTopN: (n: number) => void;

  includeOthers: boolean;
  onToggleOthers: (v: boolean) => void;

  // ðŸ”Ž Focus (opcional)
  focusKey?: string | null;
  focusOptions?: string[];
  onChangeFocus?: (key: string | null) => void;
};

const chartTheme = {
  tick: { fill: 'var(--chart-axis)', fontSize: 12 },
  axisLine: { stroke: 'var(--chart-grid)' },
  tickLine: { stroke: 'var(--chart-grid)' },
  grid: 'var(--chart-grid)',
  gridStrong: 'var(--chart-grid-strong)',
  palette: [
    'var(--chart-1)',
    'var(--chart-2)',
    'var(--chart-3)',
    'var(--chart-4)',
    'var(--chart-5)',
    'var(--chart-6)',
    'var(--chart-7)',
    'var(--chart-8)',
  ],
};

function colorAt(i: number) {
  const p = chartTheme.palette;
  return p[i % p.length];
}

function formatByMetric(m: TrendMetric, v: number): string {
  const n = Number(v || 0);
  if (m === 'ecpm' || m === 'turnover' || m === 'margin') return fmtEUR2.format(n);
  if (m === 'marginPct') return `${(n * 100).toFixed(1)}%`;
  return fmtINT.format(n); // vSent
}

function yTickFormatter(m: TrendMetric) {
  return (v: number) => {
    if (m === 'marginPct') return `${(Number(v || 0) * 100).toFixed(0)}%`;
    if (m === 'ecpm' || m === 'turnover' || m === 'margin') return fmtEUR2.format(Number(v || 0));
    return fmtINT.format(Number(v || 0));
  };
}

export default function ReportsUnifiedTrend({
  data,
  keys,
  metric,
  onChangeMetric,
  by,
  onChangeBy,
  topN,
  onChangeTopN,
  includeOthers,
  onToggleOthers,
  // Focus
  focusKey = null,
  focusOptions = [],
  onChangeFocus,
}: Props) {
  const hasData = Array.isArray(data) && data.length > 0 && keys.length > 0;

  const focusEnabled = by !== 'none' && !!onChangeFocus;
  const hasFocus = focusEnabled && !!focusKey;

  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-3">
      <div className="flex items-center justify-between gap-3 mb-2">
        <div className="text-sm font-medium">Time series</div>

        {/* Controles */}
        <div className="flex items-end gap-2">
          <label className="text-sm grid gap-1">
            <span className="muted">Metric</span>
            <select
              className="input"
              value={metric}
              onChange={e => onChangeMetric(e.target.value as TrendMetric)}
            >
              <option value="ecpm">eCPM</option>
              <option value="turnover">Turnover</option>
              <option value="margin">Margin</option>
              <option value="marginPct">Margin %</option>
              <option value="vSent">V Sent</option>
            </select>
          </label>

          <label className="text-sm grid gap-1">
            <span className="muted">Group lines by</span>
            <select
              className="input"
              value={by}
              onChange={e => onChangeBy(e.target.value as GroupBy)}
            >
              <option value="none">Total</option>
              <option value="database">Database</option>
              <option value="partner">Partner</option>
              <option value="geo">GEO</option>
            </select>
          </label>

          {/* ðŸ”Ž Focus selector */}
          <label className="text-sm grid gap-1">
            <span className="muted">Focus</span>
            <select
              className="input"
              value={focusKey ?? ''}
              onChange={e => onChangeFocus?.(e.target.value ? e.target.value : null)}
              disabled={!focusEnabled}
            >
              <option value="">All</option>
              {focusOptions.map(k => (
                <option key={k} value={k}>{k}</option>
              ))}
            </select>
          </label>

          <label className="text-sm grid gap-1">
            <span className="muted">Top N</span>
            <input
              type="number"
              className="input"
              min={1}
              max={20}
              value={topN}
              onChange={e => onChangeTopN(Math.max(1, Math.min(20, Number(e.target.value || 1))))}
              disabled={by === 'none' || hasFocus}
              title={hasFocus ? 'Disabled when Focus is active' : undefined}
            />
          </label>

          <label
            className={`text-sm inline-flex items-center gap-2 ${
              by === 'none' || hasFocus ? 'opacity-50' : ''
            }`}
            title={hasFocus ? 'Disabled when Focus is active' : undefined}
          >
            <input
              type="checkbox"
              className="accent-[--color-primary]"
              checked={includeOthers}
              onChange={e => onToggleOthers(e.target.checked)}
              disabled={by === 'none' || hasFocus}
            />
            <span className="muted">Include â€œOthersâ€</span>
          </label>
        </div>
      </div>

      <div className="h-[320px]">
        {!hasData ? (
          <div className="h-full flex items-center justify-center text-sm opacity-70">
            No data for current filters
          </div>
        ) : (
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={data} margin={{ left: 8, right: 8, top: 8, bottom: 0 }}>
              <CartesianGrid stroke={chartTheme.grid} vertical={false} />
              <XAxis
                dataKey="date"
                tick={chartTheme.tick}
                axisLine={chartTheme.axisLine}
                tickLine={chartTheme.tickLine}
              />
              <YAxis
                tick={chartTheme.tick}
                axisLine={chartTheme.axisLine}
                tickLine={chartTheme.tickLine}
                tickFormatter={yTickFormatter(metric)}
              />
              <Tooltip
                cursor={{ stroke: chartTheme.gridStrong }}
                contentStyle={{
                  background: 'var(--chart-tooltip-bg)',
                  border: '1px solid var(--color-border)',
                  borderRadius: 8,
                }}
                itemStyle={{ color: 'var(--color-text)' }}
                labelStyle={{ color: 'var(--color-text)' }}
                formatter={(value: any, name: any) => [formatByMetric(metric, Number(value || 0)), String(name)]}
              />
              <Legend />
              {keys.map((k, idx) => (
                <Line
                  key={k}
                  type="monotone"
                  dataKey={k}
                  name={k}
                  dot={false}
                  stroke={colorAt(idx)}
                  strokeWidth={2}
                  activeDot={{ r: 4 }}
                />
              ))}
            </LineChart>
          </ResponsiveContainer>
        )}
      </div>

      <div className="text-xs opacity-60 mt-2 text-right">Right click â†’ â€œSave imageâ€</div>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsView.tsx =====
'use client';

import { useMemo, useState } from 'react';

import Card from '@/components/ui/Card';
import ReportsHeader from '@/components/reports/ReportsHeader';
import ReportsKpis from '@/components/reports/ReportsKpis';
import ReportsUnifiedTrend from '@/components/reports/ReportsUnifiedTrend';
import ReportsChart from '@/components/reports/ReportsChart';
import ReportsTopTable from '@/components/reports/ReportsTopTable';

import { useReportData } from '@/hooks/useReportData';
import type { Metric } from '@/types/reports';

const fmtEUR = new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' });
const fmtInt = new Intl.NumberFormat('es-ES');
const fmtPct = new Intl.NumberFormat('es-ES', { style: 'percent', maximumFractionDigits: 2 });

export default function ReportsView() {
  const {
    filters, setFilters,
    groupBy, setGroupBy,
    metric, setMetric,
    topN, setTopN,
    ranking, fullRanking,
    summary,
    quickLast30,
    makeTrendSeries,          // â¬…ï¸ unificado
    listAvailableKeys,
    computeTotals,            // â¬…ï¸ nuevo helper para FR/INTL
  } = useReportData();

  // Estado del unified trend
  const [trendMetric, setTrendMetric] =
    useState<'ecpm' | 'turnover' | 'margin' | 'marginPct' | 'vSent'>('turnover');
  const [trendBy, setTrendBy] = useState<'none' | 'database' | 'partner' | 'geo'>('database');
  const [trendTopN, setTrendTopN] = useState<number>(5);
  const [trendIncludeOthers, setTrendIncludeOthers] = useState<boolean>(true);
  const [trendFocusKey, setTrendFocusKey] = useState<string | null>(null);

  const focusOptions = useMemo(
    () => (trendBy === 'none' ? [] : listAvailableKeys(trendBy)),
    [trendBy, listAvailableKeys]
  );

  const trendSeries = useMemo(
    () => makeTrendSeries({
      metric: trendMetric,
      by: trendBy,
      topN: trendFocusKey ? 1 : trendTopN,
      includeOthers: trendFocusKey ? false : trendIncludeOthers,
      only: trendFocusKey ? [trendFocusKey] : undefined,
    }),
    [makeTrendSeries, trendMetric, trendBy, trendTopN, trendIncludeOthers, trendFocusKey]
  );

  // Export ranking completo (no solo Top-N)
  const exportCsv = () => {
    const header = ['group', 'vSent', 'turnover', 'margin', 'ecpm'];
    const lines = [header.join(',')];
    fullRanking.forEach(r => {
      const g = `"${String(r.label).replaceAll('"', '""')}"`;
      lines.push([g, r.vSent, r.turnover.toFixed(2), r.margin.toFixed(2), r.ecpm.toFixed(2)].join(','));
    });
    const blob = new Blob([lines.join('\n')], { type: 'text/csv;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = `${groupBy}_ranking.csv`; a.click();
    URL.revokeObjectURL(url);
  };

  // ====== Geo mix (France B2C, France B2B, INTL) ======
  const frB2C = computeTotals(r => (r.geo || '').toUpperCase() === 'FR' && r.databaseType === 'B2C');
  const frB2B = computeTotals(r => (r.geo || '').toUpperCase() === 'FR' && r.databaseType === 'B2B');
  const intl   = computeTotals(r => (r.geo || '').toUpperCase() !== 'FR' && (r.databaseType === 'B2B' || r.databaseType === 'B2C'));

  const subtotal = {
    vSent: frB2C.vSent + frB2B.vSent + intl.vSent,
    turnover: frB2C.turnover + frB2B.turnover + intl.turnover,
    margin: frB2C.margin + frB2B.margin + intl.margin,
  };
  const subtotalMarginPct = subtotal.turnover > 0 ? subtotal.margin / subtotal.turnover : null;

  return (
    <div className="grid gap-6">
      {/* Filtros (en tarjeta) */}
      <Card>
        <ReportsHeader
          groupBy={groupBy}
          metric={metric}
          topN={topN}
          filters={filters}
          onChangeFilters={setFilters}
          onChangeGroupBy={setGroupBy}
          onChangeMetric={(m: Metric) => setMetric(m)}
          onChangeTopN={setTopN}
          onQuickLast30={quickLast30}
          onExportCsv={exportCsv}
          summary={{ filteredCount: summary.filteredRows, groupCount: summary.groups }}
        />
      </Card>

      {/* KPIs globales */}
      <Card>
        <ReportsKpis kpis={summary.totals} />
      </Card>

      {/* Unified time series â€” inmediatamente tras KPIs */}
      <Card>
        <ReportsUnifiedTrend
          data={trendSeries.data}
          keys={trendSeries.keys}
          metric={trendMetric}
          onChangeMetric={setTrendMetric}
          by={trendBy}
          onChangeBy={setTrendBy}
          topN={trendTopN}
          onChangeTopN={setTrendTopN}
          includeOthers={trendIncludeOthers}
          onToggleOthers={setTrendIncludeOthers}
          focusKey={trendFocusKey}
          focusOptions={focusOptions}
          onChangeFocus={setTrendFocusKey}
        />
      </Card>

      {/* Geo mix: France B2C / France B2B / INTL + subtotal */}
      <Card>
        <div className="mb-3 text-sm font-medium">Geo mix</div>
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
          <GeoTile title="France B2C" v={frB2C} />
          <GeoTile title="France B2B" v={frB2B} />
          <GeoTile title="INTL (B2B+B2C, no FR)" v={intl} />
        </div>
        <div className="mt-3 pt-3 border-t border-[--color-border] text-sm flex flex-wrap items-center gap-4">
          <span className="opacity-70">Subtotal (B2B+B2C):</span>
          <span><strong>Turnover:</strong> {fmtEUR.format(subtotal.turnover)}</span>
          <span>
            <strong>Margin (%):</strong>{' '}
            {subtotalMarginPct == null ? 'â€”' : fmtPct.format(subtotalMarginPct)}{' '}
            <span className="opacity-70">({fmtEUR.format(subtotal.margin)})</span>
          </span>
          <span><strong>V Sent:</strong> {fmtInt.format(subtotal.vSent)}</span>
        </div>
      </Card>

      {/* Top-N (grÃ¡fico de barras) */}
      <Card>
        <ReportsChart
          data={ranking}
          metric={metric}
          title={`Top ${topN} by ${legendName(metric)}`}
          height={360}
          showTable={false}
          groupLabel={groupLabel(groupBy)}
        />
      </Card>

      {/* Top-N (tabla) */}
      <Card>
        <ReportsTopTable
          data={ranking}
          groupLabel={groupLabel(groupBy)}
        />
      </Card>
    </div>
  );
}

function GeoTile({ title, v }: {
  title: string;
  v: { vSent: number; turnover: number; margin: number; ecpm: number; marginPct: number | null };
}) {
  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-4">
      <div className="text-xs uppercase opacity-70">{title}</div>
      <div className="mt-2 grid grid-cols-2 gap-2 text-sm">
        <div><span className="opacity-70">Turnover</span><br /><strong>{fmtEUR.format(v.turnover)}</strong></div>
        <div>
          <span className="opacity-70">Margin (%)</span><br />
          <strong>{v.marginPct == null ? 'â€”' : fmtPct.format(v.marginPct)}</strong>
          <span className="opacity-70"> Â· {fmtEUR.format(v.margin)}</span>
        </div>
        <div><span className="opacity-70">V Sent</span><br /><strong>{fmtInt.format(v.vSent)}</strong></div>
        <div><span className="opacity-70">eCPM</span><br /><strong>{fmtEUR.format(v.ecpm)}</strong></div>
      </div>
    </div>
  );
}

function legendName(m: Metric) {
  return m === 'turnover' ? 'Turnover' : m === 'margin' ? 'Margin' : m === 'ecpm' ? 'eCPM' : 'V Sent';
}
function groupLabel(g: string) {
  switch (g) {
    case 'database': return 'Database';
    case 'partner': return 'Partner';
    case 'campaign': return 'Campaign';
    case 'advertiser': return 'Advertiser';
    case 'theme': return 'Theme';
    case 'geo': return 'GEO';
    case 'type': return 'Type';
    case 'databaseType': return 'DB Type';
    default: return 'Group';
  }
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\table\RowActions.tsx =====
'use client';

import { useEffect, useRef, useState } from 'react';

export default function RowActions({
  onEdit,
  onDuplicate,
  onDelete,
}: {
  onEdit: () => void;
  onDuplicate: () => void;
  onDelete: () => void;
}) {
  const [open, setOpen] = useState(false);
  const wrapRef = useRef<HTMLDivElement | null>(null);

  // Cerrar al hacer click fuera
  useEffect(() => {
    const onDoc = (e: MouseEvent) => {
      if (!wrapRef.current?.contains(e.target as Node)) setOpen(false);
    };
    document.addEventListener('mousedown', onDoc);
    return () => document.removeEventListener('mousedown', onDoc);
  }, []);

  return (
    <div ref={wrapRef} className="relative flex justify-end">
      <button
        type="button"
        className="rounded-md border border-[--color-border] px-2 py-1 text-sm
                   hover:bg-black/5 focus:outline-none focus:ring-2 focus:ring-primary/30"
        aria-haspopup="menu"
        aria-expanded={open}
        title="Row actions"
        onClick={(e) => { e.stopPropagation(); setOpen(o => !o); }}
        onMouseDown={(e) => e.stopPropagation()}
        onKeyDown={(e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            setOpen(o => !o);
          }
          if (e.key === 'Escape') setOpen(false);
        }}
      >
        â‹¯
      </button>

      {open && (
        <div
          role="menu"
          className="absolute right-0 top-full z-50 mt-1 min-w-36 rounded-md border border-[--color-border]
                     bg-[color:var(--color-surface-2)] p-1 shadow-[0_12px_32px_rgba(0,0,0,.12)]"
          onMouseDown={(e) => e.stopPropagation()}
        >
          <button
            type="button"
            role="menuitem"
            className="w-full rounded px-3 py-2 text-left text-sm
                       hover:bg-black/5 focus:bg-primary/5 focus:outline-none focus:ring-1 focus:ring-primary/30"
            onClick={() => { setOpen(false); onEdit(); }}
          >
            Edit
          </button>

          <button
            type="button"
            role="menuitem"
            className="w-full rounded px-3 py-2 text-left text-sm
                       hover:bg-black/5 focus:bg-primary/5 focus:outline-none focus:ring-1 focus:ring-primary/30"
            onClick={() => { setOpen(false); onDuplicate(); }}
          >
            Duplicateâ€¦
          </button>

          <button
            type="button"
            role="menuitem"
            className="w-full rounded px-3 py-2 text-left text-sm text-[--color-accent]
                       hover:bg-black/5 focus:bg-primary/5 focus:outline-none focus:ring-1 focus:ring-primary/30"
            onClick={() => { setOpen(false); onDelete(); }}
          >
            Delete
          </button>
        </div>
      )}
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\Card.tsx =====
'use client';

export default function Card({
  title,
  right,
  className = '',
  children,
}: {
  title?: React.ReactNode;
  right?: React.ReactNode;
  className?: string;
  children: React.ReactNode;
}) {
  return (
    <section className={`card ${title || right ? '' : ''} ${className}`}>
      {(title || right) && (
        <header className="flex items-center justify-between px-4 pt-4 pb-2">
          <div className="text-sm font-medium">{title}</div>
          <div className="flex items-center gap-2">{right}</div>
        </header>
      )}
      <div className={title || right ? 'px-4 pb-4' : 'p-4'}>{children}</div>
    </section>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\Chip.tsx =====
type Props = {
  active?: boolean;
  children: React.ReactNode;
  onClick?: () => void;
  title?: string;
};

export default function Chip({ active = false, children, onClick, title }: Props) {
  return (
    <button
      type="button"
      title={title}
      aria-pressed={active}
      onClick={onClick}
      className={[
        'px-3 py-1.5 rounded-full border text-sm transition',
        'focus:outline-none focus:ring-2',
        'focus:ring-[color:var(--color-primary)] focus:ring-opacity-30',
        active
          ? [
              'bg-[color:var(--color-primary)]',
              'hover:bg-[color:color-mix(in oklab,var(--color-primary) 88%, black)]',
              'text-white border-transparent shadow-sm',
            ].join(' ')
          : [
              'bg-[color:var(--color-surface-2)]',
              'hover:bg-[color:var(--color-surface)]',
              'text-[color:var(--color-text)]/80',
              'border-[color:var(--color-border)]',
            ].join(' '),
      ].join(' ')}
    >
      {children}
    </button>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\ColumnPicker.tsx =====
'use client';

import { createPortal } from 'react-dom';
import { useEffect, useRef, useState, useId } from 'react';

type ColumnItem = { id: string; label: string; disabled?: boolean };

export default function ColumnPicker({
  columns,
  visible,
  onChange,
  onClose,
  defaults,
}: {
  columns: ColumnItem[];
  visible: Set<string>;
  onChange: (next: Set<string>) => void;
  onClose: () => void;
  /** ids visibles por defecto (para reset) */
  defaults?: string[];
}) {
  const [mounted, setMounted] = useState(false);
  const trapRef = useRef<HTMLDivElement | null>(null);
  const firstFocusRef = useRef<HTMLButtonElement | null>(null);
  const titleId = useId();

  useEffect(() => { setMounted(true); }, []);

  // Cerrar con Esc
  useEffect(() => {
    const onKey = (e: KeyboardEvent) => { if (e.key === 'Escape') onClose(); };
    document.addEventListener('keydown', onKey);
    return () => document.removeEventListener('keydown', onKey);
  }, [onClose]);

  // Focus trap simple (Tab/Shift+Tab)
  useEffect(() => {
    const node = trapRef.current;
    if (!node) return;

    const selector = [
      'a[href]','button:not([disabled])','textarea:not([disabled])','input:not([disabled])',
      'select:not([disabled])','[tabindex]:not([tabindex="-1"])',
    ].join(',');

    const onKeyDown = (e: KeyboardEvent) => {
      if (e.key !== 'Tab') return;
      const focusables = Array.from(node.querySelectorAll<HTMLElement>(selector))
        .filter(el => el.offsetParent !== null);
      if (!focusables.length) return;

      const first = focusables[0];
      const last  = focusables[focusables.length - 1];
      const active = document.activeElement as HTMLElement | null;

      if (e.shiftKey) {
        if (active === first || !node.contains(active)) {
          last.focus(); e.preventDefault();
        }
      } else {
        if (active === last) {
          first.focus(); e.preventDefault();
        }
      }
    };

    node.addEventListener('keydown', onKeyDown);
    const t = setTimeout(() => firstFocusRef.current?.focus(), 0);
    return () => { node.removeEventListener('keydown', onKeyDown); clearTimeout(t); };
  }, []);

  // Bloquear scroll de la pÃ¡gina mientras el modal estÃ© abierto
  useEffect(() => {
    const prev = document.body.style.overflow;
    document.body.style.overflow = 'hidden';
    return () => { document.body.style.overflow = prev; };
  }, []);

  // Acciones
  const toggle = (id: string) => {
    const next = new Set(visible);
    if (next.has(id)) next.delete(id);
    else next.add(id);
    onChange(next);
  };
  const selectAll = () => {
    const next = new Set(visible);
    for (const c of columns) next.add(c.id);
    onChange(next);
  };
  const resetDefaults = () => {
    if (!defaults?.length) return;
    onChange(new Set(defaults));
  };

  if (!mounted) return null;

  return createPortal(
    <div
      className="fixed inset-0 z-[200] flex items-center justify-center p-4"
      role="dialog"
      aria-modal="true"
      aria-labelledby={titleId}
      onMouseDown={(e) => { if (e.target === e.currentTarget) onClose(); }}
    >
      {/* Backdrop alineado con otros modales */}
      <div
        className="absolute inset-0"
        style={{ background: 'rgba(0,0,0,0.55)', backdropFilter: 'blur(6px)' }}
      />

      {/* Panel */}
      <div
        ref={trapRef}
        className="relative card w-full max-w-lg max-h-[85vh] overflow-hidden border border-[--color-border] shadow-xl"
        style={{ background: 'var(--color-surface)' }}
        onMouseDown={(e) => e.stopPropagation()}
      >
        {/* Header (chrome unificado) */}
        <div className="sticky top-0 z-10 modal-chrome modal-header px-5 py-3">
          <div className="accent-strip" aria-hidden />
          <div className="flex items-center justify-between">
            <h3 id={titleId} className="text-base font-semibold">Columns</h3>
            <button className="btn-ghost" onClick={onClose} aria-label="Close">âœ•</button>
          </div>
        </div>

        {/* Body */}
        <div className="px-5 pb-4 pt-0 overflow-y-auto relative">
          <div className="edge-fade edge-top" aria-hidden />

          {/* Toolbar sticky dentro del scroll */}
          <div className="sticky top-0 z-[1] -mx-5 px-5 py-2 bg-[color:var(--color-surface)]/95 backdrop-blur-sm border-b border-[--color-border]">
            <div className="flex items-center gap-2 text-xs">
              <button ref={firstFocusRef} className="btn-ghost" onClick={selectAll}>
                Select all
              </button>
              {defaults?.length ? (
                <button className="btn-ghost" onClick={resetDefaults}>
                  Reset defaults
                </button>
              ) : null}
            </div>
          </div>

          {/* Lista en subcard con divisores suaves */}
          <div className="subcard p-0 mt-3">
            <ul className="max-h-[52vh] overflow-y-auto">
              {columns.map(col => {
                const checked = visible.has(col.id);
                const disabled = !!col.disabled;
                return (
                  <li key={col.id} className="group">
                    <label
                      className={[
                        'flex items-center gap-3 px-3 py-2.5',
                        disabled
                          ? 'opacity-55 cursor-not-allowed'
                          : 'cursor-pointer hover:bg-[color:var(--color-surface)]',
                        'rounded-md focus-within:outline-none focus-within:ring-2 focus-within:ring-[color:var(--color-primary)]/30',
                      ].join(' ')}
                    >
                      <input
                        type="checkbox"
                        checked={checked}
                        disabled={disabled}
                        onChange={() => { if (!disabled) toggle(col.id); }}
                        className="h-4 w-4 rounded-sm"
                        style={{ accentColor: 'var(--color-primary)' }}
                      />
                      <span className="text-sm select-none">{col.label}</span>
                    </label>
                    <div className="divider-soft mx-2" />
                  </li>
                );
              })}
            </ul>
          </div>

          <div className="edge-fade edge-bottom" aria-hidden />
        </div>

        {/* Footer (chrome unificado) */}
        <div className="sticky bottom-0 z-10 modal-chrome modal-footer px-5 py-3">
          <div className="flex items-center justify-end">
            <button className="btn-primary" onClick={onClose}>Done</button>
          </div>
        </div>
      </div>
    </div>,
    document.body
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\Combobox.tsx =====
'use client';
import { useEffect, useMemo, useRef, useState, useId } from 'react';

type Option = { id?: string; value: string; label?: string };

export default function Combobox({
  options,
  value,
  onChange,
  placeholder = 'Start typing to searchâ€¦',
  ariaLabel,
  id,
  invalid = false,
  ariaDescribedby,
  className,
}: {
  options: Option[];
  value?: string;
  onChange: (v: string) => void;
  placeholder?: string;
  ariaLabel?: string;
  id?: string;
  invalid?: boolean;
  ariaDescribedby?: string;
  className?: string;
}) {
  const autoId = useId();
  const inputId = id ?? `cb_${autoId}`;
  const listboxId = `${inputId}-listbox`;

  const [open, setOpen] = useState(false);
  const [q, setQ] = useState(value || '');
  const [activeIndex, setActiveIndex] = useState<number>(-1);
  const [suppressNextOpen, setSuppressNextOpen] = useState(false);

  const wrapRef = useRef<HTMLDivElement | null>(null);
  const listRef = useRef<HTMLUListElement | null>(null);
  const inputRef = useRef<HTMLInputElement | null>(null);

  // Sincroniza valor externo
  useEffect(() => {
    setQ(value || '');
  }, [value]);

  // Cierre al hacer click fuera
  useEffect(() => {
    const onDoc = (e: MouseEvent) => {
      if (!wrapRef.current?.contains(e.target as Node)) {
        setOpen(false);
        setActiveIndex(-1);
      }
    };
    document.addEventListener('mousedown', onDoc);
    return () => document.removeEventListener('mousedown', onDoc);
  }, []);

  // Filtrado + dedupe + truncado a 50
  const filtered = useMemo(() => {
    const s = q.trim().toLowerCase();
    const base = s ? options.filter(o => (o.label || o.value).toLowerCase().includes(s)) : options;
    const seen = new Set<string>();
    const out: Option[] = [];
    for (const o of base) {
      const k = (o.label || o.value).toLowerCase();
      if (seen.has(k)) continue;
      seen.add(k);
      out.push(o);
      if (out.length >= 50) break;
    }
    return out;
  }, [q, options]);

  // Determina Ã­ndice "seleccionado" dentro del array filtrado (si coincide el valor exacto)
  const selectedIndex = useMemo(() => {
    const val = (q || '').toLowerCase();
    return filtered.findIndex(o => (o.value || '').toLowerCase() === val);
  }, [filtered, q]);

  // Al abrir, sitÃºa el foco en el elemento seleccionado o el primero si hay query
  useEffect(() => {
    if (!open) return;
    if (selectedIndex >= 0) {
      setActiveIndex(selectedIndex);
    } else if (q && filtered.length) {
      setActiveIndex(0);
    } else {
      setActiveIndex(-1);
    }
  }, [open, selectedIndex, q, filtered.length]);

  // Asegura que el elemento activo quede visible en el scroll
  useEffect(() => {
    if (!open || activeIndex < 0) return;
    const el = document.getElementById(`${listboxId}-opt-${activeIndex}`);
    el?.scrollIntoView({ block: 'nearest' });
  }, [activeIndex, open, listboxId]);

  // Roving focus dentro del listbox
  const focusItem = (index: number) => {
    const btns = listRef.current?.querySelectorAll<HTMLButtonElement>('button[role="option"]');
    if (!btns || !btns.length) return;
    const i = Math.max(0, Math.min(index, btns.length - 1));
    setActiveIndex(i);
    btns[i].focus();
  };

  // Resalta todas las coincidencias
  const renderHighlighted = (text: string, query: string) => {
    if (!query) return text;
    const ql = query.trim().toLowerCase();
    if (!ql) return text;
    const parts: Array<string | JSX.Element> = [];
    let start = 0;
    const lower = text.toLowerCase();
    while (true) {
      const i = lower.indexOf(ql, start);
      if (i === -1) {
        parts.push(text.slice(start));
        break;
      }
      if (i > start) parts.push(text.slice(start, i));
      const mid = text.slice(i, i + ql.length);
      parts.push(
        <mark
          key={`${i}-${mid}`}
          className="px-0.5 rounded bg-[color:var(--color-primary)]/18 text-[color:var(--color-text)]"
        >
          {mid}
        </mark>
      );
      start = i + ql.length;
    }
    return <>{parts}</>;
  };

  const selectValue = (val: string) => {
    onChange(val);
    setQ(val);
    setOpen(false);
    setActiveIndex(-1);
    setSuppressNextOpen(true);
  };

  return (
    <div ref={wrapRef} className={`relative w-full min-w-0 ${className ?? ''}`}>
      {/* Input + acciones inline */}
      <div className="relative">
        <input
          ref={inputRef}
          id={inputId}
          role="combobox"
          aria-expanded={open}
          aria-controls={open ? listboxId : undefined}
          aria-activedescendant={open && activeIndex >= 0 ? `${listboxId}-opt-${activeIndex}` : undefined}
          aria-label={ariaLabel}
          aria-invalid={invalid || undefined}
          aria-describedby={ariaDescribedby}
          aria-autocomplete="list"
          className={`input h-10 w-full pr-18 ${invalid ? 'input-error' : ''}`}
          placeholder={placeholder}
          value={q}
          autoComplete="off" autoCorrect="off" autoCapitalize="off" spellCheck={false}
          inputMode="search" data-gramm="false" data-lt-active="false"
          onFocus={() => {
            if (suppressNextOpen) { setSuppressNextOpen(false); return; }
            setOpen(true);
          }}
          onChange={(e) => {
            const v = e.target.value;
            setQ(v);
            setOpen(true);
            setActiveIndex(v ? 0 : -1);
            onChange(v);
          }}
          onKeyDown={(e) => {
            if (e.key === 'ArrowDown') {
              e.preventDefault();
              if (!open) setOpen(true);
              focusItem(activeIndex >= 0 ? activeIndex + 1 : 0);
            }
            if (e.key === 'ArrowUp') {
              if (!open) return;
              e.preventDefault();
              if (activeIndex <= 0) {
                setActiveIndex(-1);
                inputRef.current?.focus();
              } else {
                focusItem(activeIndex - 1);
              }
            }
            if (e.key === 'PageDown') {
              if (!open) return;
              e.preventDefault();
              focusItem(activeIndex + 10);
            }
            if (e.key === 'PageUp') {
              if (!open) return;
              e.preventDefault();
              focusItem(activeIndex - 10);
            }
            if (e.key === 'Home') { if (open) { e.preventDefault(); focusItem(0); } }
            if (e.key === 'End')  { if (open) { e.preventDefault(); focusItem(filtered.length - 1); } }
            if (e.key === 'Enter') {
              e.preventDefault();
              if (open && activeIndex >= 0 && filtered[activeIndex]) {
                selectValue(filtered[activeIndex].value);
              } else if (selectedIndex >= 0) {
                // Si el texto coincide exactamente con una opciÃ³n, selecciÃ³nala
                selectValue(filtered[selectedIndex].value);
              } else {
                setOpen(false);
              }
            }
            if (e.key === 'Escape') {
              e.preventDefault();
              if (q) {
                // Escape limpia primero; segundo Escape cierra
                setQ('');
                onChange('');
                setActiveIndex(-1);
              } else {
                setOpen(false);
                setActiveIndex(-1);
              }
            }
          }}
        />

        {/* Botones: clear + toggle */}
        {q ? (
          <button
            type="button"
            aria-label="Clear"
            title="Clear"
            className="absolute right-9 top-1/2 -translate-y-1/2 rounded-md px-1.5 py-0.5 text-sm border border-[--color-border] bg-[color:var(--color-surface-2)] hover:bg-[color:var(--color-surface)]"
            onMouseDown={(e) => e.preventDefault()}
            onClick={() => {
              setQ('');
              onChange('');
              setActiveIndex(-1);
              inputRef.current?.focus();
              setOpen(true);
            }}
          >
            Ã—
          </button>
        ) : null}

        <button
          type="button"
          aria-label={open ? 'Close options' : 'Open options'}
          title={open ? 'Close' : 'Open'}
          className="absolute right-1.5 top-1/2 -translate-y-1/2 rounded-md px-2 py-1 border border-[--color-border] bg-[color:var(--color-surface-2)] hover:bg-[color:var(--color-surface)]"
          onMouseDown={(e) => e.preventDefault()}
          onClick={() => {
            const next = !open;
            setOpen(next);
            if (next) {
              inputRef.current?.focus();
              setActiveIndex(selectedIndex >= 0 ? selectedIndex : (q ? 0 : -1));
            }
          }}
        >
          â–¾
        </button>
      </div>

      {open && (
        <ul
          ref={listRef}
          id={listboxId}
          role="listbox"
          className="absolute z-50 mt-1 max-h-60 left-0 right-0 overflow-auto rounded-lg border border-[--color-border] bg-[color:var(--color-surface-2)] p-1 shadow-xl"
        >
          {filtered.length === 0 && (
            <li className="px-3 py-2 text-sm opacity-70">No results</li>
          )}
          {filtered.map((o, idx) => {
            const isSelected = (q || '').toLowerCase() === (o.value || '').toLowerCase();
            const isActive = idx === activeIndex;
            const optId = `${listboxId}-opt-${idx}`;
            return (
              <li key={o.id ?? o.value}>
                <button
                  id={optId}
                  type="button"
                  role="option"
                  aria-selected={isSelected}
                  className={[
                    'w-full rounded px-3 py-2 text-left text-sm flex items-center justify-between',
                    isActive
                      ? 'bg-[color:var(--color-surface)]/80 outline-none'
                      : 'hover:bg-[color:var(--color-surface)]/55 focus:bg-[color:var(--color-surface)]/70',
                  ].join(' ')}
                  onMouseEnter={() => setActiveIndex(idx)}
                  onMouseDown={(e) => {
                    // Evita perder el foco del input antes de seleccionar
                    e.preventDefault();
                  }}
                  onClick={() => selectValue(o.value)}
                  onKeyDown={(e) => {
                    const btns = listRef.current?.querySelectorAll<HTMLButtonElement>('button[role="option"]');
                    const count = btns?.length ?? 0;
                    if (!count) return;
                    if (e.key === 'ArrowDown') {
                      e.preventDefault();
                      focusItem(Math.min(idx + 1, count - 1));
                    }
                    if (e.key === 'ArrowUp') {
                      e.preventDefault();
                      if (idx <= 0) {
                        inputRef.current?.focus();
                        setActiveIndex(-1);
                      } else {
                        focusItem(idx - 1);
                      }
                    }
                    if (e.key === 'Home') { e.preventDefault(); focusItem(0); }
                    if (e.key === 'End') { e.preventDefault(); focusItem(count - 1); }
                    if (e.key === 'Enter') {
                      e.preventDefault();
                      selectValue(o.value);
                    }
                    if (e.key === 'Escape') {
                      e.preventDefault();
                      setOpen(false);
                      setActiveIndex(-1);
                      inputRef.current?.focus();
                    }
                  }}
                >
                  <span className="truncate">{renderHighlighted(o.label || o.value, q)}</span>
                  {isSelected ? (
                    <span aria-hidden className="ml-3 text-[--color-primary]">âœ“</span>
                  ) : null}
                </button>
              </li>
            );
          })}
        </ul>
      )}
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\FieldWithAddon.tsx =====
'use client';

import React from 'react';

type Props = {
  children: React.ReactNode;
  onAdd: () => void;
  addAriaLabel?: string;
  className?: string;
  buttonDisabled?: boolean;
};

export default function FieldWithAddon({
  children,
  onAdd,
  addAriaLabel = 'Add item',
  className = '',
  buttonDisabled = false,
}: Props) {
  return (
    <div className={`grid grid-cols-[1fr_auto] items-stretch ${className}`}>
      {/* Nota: el control hijo deberÃ­a llevar `rounded-r-none` para unirse visualmente */}
      <div className="contents">{children}</div>

      <button
        type="button"
        onClick={onAdd}
        disabled={buttonDisabled}
        aria-disabled={buttonDisabled || undefined}
        aria-label={addAriaLabel}
        title={addAriaLabel}
        className={[
          'btn-ghost h-10 px-3 transition-colors',
          'rounded-l-none -ml-px border border-[--color-border] border-l-0',
          'bg-[color:var(--color-surface-2)] hover:bg-[color:var(--color-surface)]',
          // No anulamos el focus ring global (:focus-visible en globals.css)
          'disabled:opacity-50 disabled:pointer-events-none',
        ].join(' ')}
      >
        {/* Plus en SVG para mejor nitidez y hereda el color actual */}
        <svg
          aria-hidden="true"
          width="14"
          height="14"
          viewBox="0 0 14 14"
          fill="none"
        >
          <path
            d="M7 2v10M2 7h10"
            stroke="currentColor"
            strokeWidth="1.75"
            strokeLinecap="round"
          />
        </svg>
      </button>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\FooterBar.tsx =====
'use client';

export default function FooterBar() {
  return (
    <footer
      className="app-footer modal-chrome fixed bottom-0 left-0 right-0 z-[90]"
      role="contentinfo"
      aria-label="Site footer"
    >
      <div className="h-full w-full flex items-center justify-between px-3 sm:px-4">
        <span className="text-[11px] sm:text-xs opacity-80 select-none">
          Â© 2025 Dataventure â€” All Rights Reserved
        </span>

        <span className="text-[11px] sm:text-xs opacity-80 flex items-center whitespace-nowrap select-none">
          Crafted with
          <img
            src="/love1.png"        
            alt=""                      /* decorativo */
            aria-hidden="true"
            width={14}
            height={14}
            className="inline-block h-3 w-3 mx-1 align-[-2px]"
          />
          by David
          <span className="sr-only">with love</span>
        </span>
      </div>
    </footer>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\MiniModal.tsx =====
'use client';

import { useEffect, useRef, useId } from 'react';
import { createPortal } from 'react-dom';

export default function MiniModal({
  title,
  onClose,
  children,
  footer,
  widthClass = 'max-w-md',
  panelClassName = '',
  headerClassName = '',
  footerClassName = '',
  /** NUEVO: clases extra para el cuerpo */
  bodyClassName = '',
  /** NUEVO: muestra tira de acento en el header */
  accentStrip = false,
  /** NUEVO: aÃ±ade fades superior/inferior dentro del Ã¡rea scroll */
  edgeFades = false,
  /** fuerza panel/header/footer opacos; true por defecto */
  solid = true,
}: {
  title: string;
  onClose: () => void;
  children: React.ReactNode;
  footer?: React.ReactNode;
  widthClass?: string;
  panelClassName?: string;
  headerClassName?: string;
  footerClassName?: string;
  bodyClassName?: string;
  accentStrip?: boolean;
  edgeFades?: boolean;
  solid?: boolean;
}) {
  const trapRef = useRef<HTMLDivElement | null>(null);
  const titleId = useId();

  useEffect(() => {
    const onKey = (e: KeyboardEvent) => { if (e.key === 'Escape') onClose(); };
    document.addEventListener('keydown', onKey);
    return () => document.removeEventListener('keydown', onKey);
  }, [onClose]);

  useEffect(() => {
    const node = trapRef.current;
    if (!node) return;
    const selector = [
      'a[href]',
      'button:not([disabled])',
      'textarea:not([disabled])',
      'input:not([disabled])',
      'select:not([disabled])',
      '[tabindex]:not([tabindex="-1"])',
    ].join(',');
    const onKeyDown = (e: KeyboardEvent) => {
      if (e.key !== 'Tab') return;
      const focusables = Array.from(node.querySelectorAll<HTMLElement>(selector))
        .filter(el => el.offsetParent !== null);
      if (!focusables.length) return;
      const first = focusables[0];
      const last  = focusables[focusables.length - 1];
      const active = document.activeElement as HTMLElement | null;
      if (e.shiftKey) {
        if (active === first || !node.contains(active)) { last.focus(); e.preventDefault(); }
      } else {
        if (active === last) { first.focus(); e.preventDefault(); }
      }
    };
    node.addEventListener('keydown', onKeyDown);
    const t = setTimeout(() => {
      (node.querySelector<HTMLElement>('input,select,button,[tabindex]') || node).focus();
    }, 0);
    return () => { node.removeEventListener('keydown', onKeyDown); clearTimeout(t); };
  }, []);

  useEffect(() => {
    const prev = document.body.style.overflow;
    document.body.style.overflow = 'hidden';
    return () => { document.body.style.overflow = prev; };
  }, []);

  // Backdrop translÃºcido + blur
  const backdropStyle: React.CSSProperties = {
    background: 'rgba(0,0,0,0.55)',
    backdropFilter: 'blur(6px)',
    WebkitBackdropFilter: 'blur(6px)',
  };

  const modal = (
    <div
      className="fixed inset-0 z-[500] flex items-center justify-center p-4"
      role="dialog"
      aria-modal="true"
      aria-labelledby={titleId}
      onMouseDown={(e) => { if (e.target === e.currentTarget) onClose(); }}
    >
      <div className="absolute inset-0" style={backdropStyle} />

      <div
        ref={trapRef}
        className={[
          'relative card w-full',
          widthClass,
          'max-h-[90vh] overflow-hidden border border-[--color-border] shadow-xl',
          panelClassName,
        ].join(' ')}
        style={solid ? { background: 'var(--color-surface)' } : undefined}
        onMouseDown={(e) => e.stopPropagation()}
      >
        {/* Header */}
        <div
          className={[
            'sticky top-0 z-10 border-b border-[--color-border] px-5 py-3 flex items-center justify-between',
            solid
              ? '!bg-[color:var(--color-surface)] !backdrop-blur-0'
              : 'bg-[color:var(--color-surface)]/95 backdrop-blur-sm',
            headerClassName,
          ].join(' ')}
        >
          {accentStrip ? <div className="accent-strip" aria-hidden /> : null}
          <h3 id={titleId} className="text-base font-semibold">{title}</h3>
          <button className="btn-ghost" onClick={onClose} aria-label="Close">âœ•</button>
        </div>

        {/* Body (scroll) */}
        <div className={['px-5 py-4 overflow-y-auto', bodyClassName].join(' ')}>
          {edgeFades && (
            <div
              aria-hidden
              className="pointer-events-none sticky top-0 -mt-4 h-4 bg-gradient-to-b from-[color:var(--color-surface)] to-transparent z-[5]"
            />
          )}

          {children}

          {edgeFades && (
            <div
              aria-hidden
              className="pointer-events-none sticky bottom-0 -mb-4 h-4 bg-gradient-to-t from-[color:var(--color-surface)] to-transparent z-[5]"
            />
          )}
        </div>

        {/* Footer */}
        <div
          className={[
            'sticky bottom-0 z-10 border-t border-[--color-border] px-5 py-3 flex items-center justify-end gap-2',
            solid
              ? '!bg-[color:var(--color-surface)] !backdrop-blur-0'
              : 'bg-[color:var(--color-surface)]/95 backdrop-blur-sm',
            footerClassName,
          ].join(' ')}
        >
          {footer}
        </div>
      </div>
    </div>
  );

  if (typeof document === 'undefined') return null;
  return createPortal(modal, document.body);
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\Tooltip.tsx =====
'use client';

import { useEffect, useRef, useState, useId } from 'react';

type Side = 'top' | 'right' | 'bottom' | 'left';

export default function Tooltip({
  content,
  side = 'top',
  children,
  className = '',
  /** Delay en ms para mostrar/ocultar (evita flicker) */
  delay = 80,
}: {
  content: React.ReactNode;
  side?: Side;
  children: React.ReactNode;
  className?: string;
  delay?: number;
}) {
  const [open, setOpen] = useState(false);
  const wrapRef = useRef<HTMLSpanElement | null>(null);
  const tidRef = useRef<number | null>(null);
  const tipId = useId();

  // Cierre al hacer click fuera
  useEffect(() => {
    const onDoc = (e: MouseEvent) => {
      if (!wrapRef.current?.contains(e.target as Node)) setOpen(false);
    };
    document.addEventListener('mousedown', onDoc);
    return () => document.removeEventListener('mousedown', onDoc);
  }, []);

  // Limpia timers al desmontar
  useEffect(() => {
    return () => { if (tidRef.current) window.clearTimeout(tidRef.current); };
  }, []);

  const show = () => {
    if (tidRef.current) window.clearTimeout(tidRef.current);
    tidRef.current = window.setTimeout(() => setOpen(true), delay);
  };
  const hide = () => {
    if (tidRef.current) window.clearTimeout(tidRef.current);
    tidRef.current = window.setTimeout(() => setOpen(false), delay);
  };

  const pos =
    side === 'top'
      ? 'bottom-full left-1/2 -translate-x-1/2 -translate-y-1'
      : side === 'bottom'
      ? 'top-full left-1/2 -translate-x-1/2 translate-y-1'
      : side === 'left'
      ? 'right-full top-1/2 -translate-y-1/2 -translate-x-1'
      : 'left-full top-1/2 -translate-y-1/2 translate-x-1';

  return (
    <span
      ref={wrapRef}
      className={`relative inline-flex ${className}`}
      // Hover / focus accesibles
      onMouseEnter={show}
      onMouseLeave={hide}
      onFocus={show}
      onBlur={hide}
      tabIndex={0}
      aria-describedby={open ? tipId : undefined}
    >
      {children}
      {open && (
        <span
          id={tipId}
          role="tooltip"
          className={`tooltip-panel absolute ${pos}`}
          // TransiciÃ³n sutil (opcional)
          style={{ transition: 'opacity .12s ease, transform .12s ease' }}
        >
          {content}
        </span>
      )}
    </span>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\context\AuthContext.tsx =====
'use client';

import {
  createContext,
  useCallback,
  useContext,
  useEffect,
  useMemo,
  useState,
} from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import type { SupabaseClient } from '@supabase/supabase-js';

import type { SessionUser, Role } from '@/types/auth';
import { DEFAULT_ROLE } from '@/types/auth';
import { isAdmin, isEditor } from '@/lib/roles';

type AuthCtx = {
  user: SessionUser | null;
  loading: boolean;
  signIn: (
    email: string,
    password: string
  ) => Promise<{ ok: true } | { ok: false; message: string }>;
  signOut: () => Promise<void>;
  role: Role | null;
  isAdmin: boolean;
  isEditor: boolean;
};

const AuthContext = createContext<AuthCtx | null>(null);

/** Lee el rol desde la tabla app_users (por user_id).
 *  Si no hay fila, si estÃ¡ inactivo o hay error -> DEFAULT_ROLE.
 */
async function fetchRole(sb: SupabaseClient, userId: string): Promise<Role> {
  const { data, error } = await sb
    .from('app_users')
    .select('role, is_active')
    .eq('user_id', userId)
    .single();

  if (error || !data?.role || data.is_active === false) return DEFAULT_ROLE;

  const r = String(data.role).toLowerCase();
  return (r === 'admin' ? 'admin' : 'editor') as Role;
}

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<SessionUser | null>(null);
  const [role, setRole] = useState<Role | null>(null);
  const [loading, setLoading] = useState(true);

  // Cliente Ãºnico y estable para todo el provider
  const supabase = useMemo(() => createClientComponentClient(), []);

  // Carga inicial de sesiÃ³n + rol y suscripciÃ³n a cambios
  useEffect(() => {
    let mounted = true;

    (async () => {
      const { data: authData } = await supabase.auth.getUser();
      const authUser = authData.user;
      if (!mounted) return;

      if (authUser) {
        const r = await fetchRole(supabase, authUser.id).catch(() => DEFAULT_ROLE);
        if (!mounted) return;
        setUser({ id: authUser.id, email: authUser.email, role: r });
        setRole(r);
      } else {
        setUser(null);
        setRole(null);
      }
      setLoading(false);
    })();

    const { data: sub } = supabase.auth.onAuthStateChange(async (_event, session) => {
      if (!mounted) return;
      const authUser = session?.user ?? null;
      if (authUser) {
        const r = await fetchRole(supabase, authUser.id).catch(() => DEFAULT_ROLE);
        setUser({ id: authUser.id, email: authUser.email, role: r });
        setRole(r);
      } else {
        setUser(null);
        setRole(null);
      }
    });

    return () => {
      mounted = false;
      sub.subscription.unsubscribe();
    };
  }, [supabase]);

  const signIn = useCallback(
    async (email: string, password: string) => {
      const { error } = await supabase.auth.signInWithPassword({ email, password });
      if (error) {
        return { ok: false as const, message: error.message || 'No se pudo iniciar sesiÃ³n' };
      }
      return { ok: true as const };
    },
    [supabase]
  );

  const signOut = useCallback(async () => {
    await supabase.auth.signOut();
  }, [supabase]);

  const value = useMemo<AuthCtx>(
    () => ({
      user,
      role,
      loading,
      signIn,
      signOut,
      isAdmin: isAdmin(role),
      isEditor: isEditor(role),
    }),
    [user, role, loading, signIn, signOut]
  );

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

export function useAuth() {
  const ctx = useContext(AuthContext);
  if (!ctx) throw new Error('useAuth must be used within AuthProvider');
  return ctx;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\context\CampaignDataContext.tsx =====
'use client';

import { createContext, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';
import { CampaignRow } from '@/types/campaign';
import { autoFromCampaign, autoFromDatabase, autoInvoiceOffice, calcDerived } from '@/lib/campaign-calcs';
import { useAuth } from '@/context/AuthContext'; // ðŸ†• soft guard por rol

/* ================================
   Tipado del contexto (ampliado)
   ================================ */
type BulkResult = { added: number; updated: number; skipped: number; total: number };
type UpsertKey = 'id' | 'composite';
type OnConflict = 'update' | 'skip';

type ImportCsvOptions = {
  delimiter?: string;
  headerMap?: Partial<Record<string, keyof CampaignRow>>;
  upsertBy?: UpsertKey;
  onConflict?: OnConflict;
};

type ImportCsvReport = BulkResult & {
  errors: { line: number; reason: string }[];
  columns: string[];
};

type Ctx = {
  rows: (CampaignRow & { _idx: number })[];
  addCampaign: (r: Omit<CampaignRow, 'id'> & { id?: string }) => void;
  updateCampaign: (id: string, patch: Partial<CampaignRow>) => void;
  removeCampaign: (id: string) => void;
  resetToMock: () => void;
  addManyCampaigns: (
    list: (Omit<CampaignRow, 'id'> & { id?: string })[],
    opts?: { upsertBy?: UpsertKey; onConflict?: OnConflict }
  ) => BulkResult;
  importFromCsv: (csvText: string, opts?: ImportCsvOptions) => ImportCsvReport;
};

const CampaignDataContext = createContext<Ctx | null>(null);

const STORAGE_KEY = 'monet_campaigns_v1';

/* ====================
   Datos mock iniciales
   ==================== */
const MOCK_DATA: (CampaignRow & { _idx: number })[] = [
  { _idx: 0, id: '1', date: '2025-07-01', campaign: 'Helvetia', advertiser: 'Helvetia', invoiceOffice: 'DAT', partner: 'Startend Marketing', theme: 'Insurance', price: 11, priceCurrency: 'EUR', type: 'CPL', vSent: 493987, routingCosts: 123.5, qty: 8, turnover: 88.0, margin: -35.5, ecpm: 0.18, database: 'Tu Opinion', geo: 'ES', databaseType: 'B2C' },
  { _idx: 1, id: '2', date: '2025-07-01', campaign: 'Allianz sante', advertiser: 'Allianz', invoiceOffice: 'CAR', partner: 'Oceads', theme: 'Insurance', price: 10, priceCurrency: 'EUR', type: 'CPL', vSent: 383443, routingCosts: 95.86, qty: 7, turnover: 70.0, margin: -25.86, ecpm: 0.18, database: 'The coupon party', geo: 'FR', databaseType: 'B2C' },
  { _idx: 2, id: '3', date: '2025-07-01', campaign: 'North Fox Property Axiom', advertiser: 'North Fox Property', invoiceOffice: 'DAT', partner: 'Loud Europe', theme: 'Services', price: 16, priceCurrency: 'EUR', type: 'CPL', vSent: 246423, routingCosts: 61.61, qty: 3, turnover: 48.0, margin: -13.61, ecpm: 0.19, database: 'Brit Consumer Net', geo: 'UK', databaseType: 'B2C' },
  { _idx: 3, id: '4', date: '2025-07-02', campaign: 'Melia Hotels CPM - ES', advertiser: 'Melia Hotels', invoiceOffice: 'DAT', partner: 'Feebbo', theme: 'Travel & Tourism', price: 2, priceCurrency: 'EUR', type: 'CPM', vSent: 156563, routingCosts: 39.14, qty: 100, turnover: 200.0, margin: 160.86, ecpm: 1.28, database: 'Tu Opinion', geo: 'ES', databaseType: 'B2B' },
];

/* ==========================
   Helpers (reglas & parsing)
   ========================== */
function applyBusinessRules(row: CampaignRow): CampaignRow {
  const { advertiser } = autoFromCampaign(row.campaign);
  const dbAuto = autoFromDatabase(row.database);
  const geo = dbAuto.geo || row.geo || '';
  const databaseType = (dbAuto.dbType as CampaignRow['databaseType']) || row.databaseType;
  const invoiceOffice = autoInvoiceOffice(geo, row.partner);
  const d = calcDerived({ price: row.price, qty: row.qty, vSent: row.vSent });

  return {
    ...row,
    advertiser,
    geo,
    databaseType,
    invoiceOffice,
    routingCosts: d.routingCosts,
    turnover: d.turnover,
    margin: d.margin,
    ecpm: d.ecpm,
  };
}

function compositeKey(r: Pick<CampaignRow, 'date' | 'campaign' | 'partner' | 'database'>) {
  return [r.date, r.campaign, r.partner, r.database].map(s => (s ?? '').trim().toLowerCase()).join('|');
}

function parseNumberLoose(v: any): number {
  if (v == null || v === '') return 0;
  if (typeof v === 'number') return Number.isFinite(v) ? v : 0;
  let s = String(v).trim();
  if (!s) return 0;
  const hasComma = s.includes(',');
  const hasDot = s.includes('.');
  if (hasComma && hasDot) {
    if (s.lastIndexOf(',') > s.lastIndexOf('.')) s = s.replace(/\./g, '').replace(',', '.');
    else s = s.replace(/,/g, '');
  } else if (hasComma) {
    s = s.replace(',', '.');
  }
  const n = Number(s);
  return Number.isFinite(n) ? n : 0;
}

function parseCsv(text: string, delimiter?: string): { header: string[]; rows: string[][] } {
  const firstLine = (text.split(/\r?\n/, 1)[0] ?? '');
  const guess = delimiter || (firstLine.split(';').length > firstLine.split(',').length ? ';' : ',');
  const d = guess;

  const out: string[][] = [];
  let row: string[] = [];
  let cell = '';
  let inQuotes = false;

  const pushCell = () => { row.push(cell); cell = ''; };
  const pushRow = () => { if (row.length === 1 && row[0] === '') { row = []; return; } out.push(row); row = []; };

  const len = text.length;
  for (let i = 0; i < len; i++) {
    const ch = text[i];
    if (inQuotes) {
      if (ch === '"') {
        if (text[i + 1] === '"') { cell += '"'; i++; }
        else { inQuotes = false; }
      } else {
        cell += ch;
      }
    } else {
      if (ch === '"') { inQuotes = true; }
      else if (ch === d) { pushCell(); }
      else if (ch === '\n') { pushCell(); pushRow(); }
      else if (ch === '\r') { }
      else { cell += ch; }
    }
  }
  pushCell();
  if (row.length) pushRow();

  if (!out.length) return { header: [], rows: [] };
  const header = (out.shift() || []).map(h => h.trim());
  return { header, rows: out };
}

const REQUIRED_MIN: (keyof CampaignRow)[] = [
  'date', 'campaign', 'partner', 'database', 'type',
  'price', 'qty', 'vSent',
];

/* =========================
   Provider con nuevas APIs
   ========================= */
export function CampaignDataProvider({ children }: { children: React.ReactNode }) {
  // ðŸ†• lÃ­mites suaves para no-admin
  const { isAdmin } = useAuth();
  const NON_ADMIN_BULK_LIMIT = 500; // nÃºmero mÃ¡ximo de filas por operaciÃ³n para no-admin

  // 1) Arrancamos vacÃ­o; hidrataremos en efecto (evita escribir MOCK en LS)
  const [rows, setRows] = useState<(CampaignRow & { _idx: number })[]>([]);
  const idxRef = useRef(0);

  // Guardas para StrictMode y para bloquear la primera escritura
  const didInitRef = useRef(false);     // evita doble hidratar en StrictMode
  const hydratedRef = useRef(false);    // hasta que no sea true, no persistimos

  // 2) Hidratar una Ãºnica vez desde LS; si no hay datos, caer a MOCK
  useEffect(() => {
    if (didInitRef.current) return;
    didInitRef.current = true;

    try {
      const raw = localStorage.getItem(STORAGE_KEY);
      let seed: CampaignRow[] | null = null;

      if (raw) {
        const parsed = JSON.parse(raw);
        if (Array.isArray(parsed) && parsed.length > 0) seed = parsed as CampaignRow[];
      }

      // Si no hay datos en LS, usa mock (quitando _idx del mock)
      const base = seed ?? MOCK_DATA.map(({ _idx, ...r }) => r);

      const withIdx = base.map((r, i) => ({ ...applyBusinessRules(r), _idx: i }));
      idxRef.current = withIdx.length;
      setRows(withIdx);
    } catch {
      // fallback total si algo falla
      idxRef.current = MOCK_DATA.length;
      setRows(MOCK_DATA);
    } finally {
      hydratedRef.current = true;
    }
  }, []);

  // 3) Persistir SOLO despuÃ©s de hidratar (evita pisar datos con MOCK)
  useEffect(() => {
    if (!hydratedRef.current) return;
    const plain: CampaignRow[] = rows.map(({ _idx, ...r }) => r);
    try { localStorage.setItem(STORAGE_KEY, JSON.stringify(plain)); } catch {}
  }, [rows]);

  const addCampaign = useCallback((input: Omit<CampaignRow, 'id'> & { id?: string }) => {
    const id = input.id ?? (globalThis.crypto?.randomUUID ? crypto.randomUUID() : Math.random().toString(36).slice(2));
    const row: CampaignRow & { _idx: number } = { ...applyBusinessRules({ ...input, id } as CampaignRow), _idx: idxRef.current++ };
    setRows(prev => [row, ...prev]);
  }, []);

  const updateCampaign = useCallback((id: string, patch: Partial<CampaignRow>) => {
    setRows(prev => prev.map(r => {
      if (r.id !== id) return r;
      const merged: CampaignRow = { ...r, ...patch };
      const finalRow = applyBusinessRules(merged);
      return { ...finalRow, _idx: r._idx };
    }));
  }, []);

  const removeCampaign = useCallback((id: string) => {
    setRows(prev => prev.filter(r => r.id !== id));
  }, []);

  const resetToMock = useCallback(() => {
    idxRef.current = MOCK_DATA.length;
    setRows(MOCK_DATA);
  }, []);

  // ============ InserciÃ³n masiva / upsert ============
  const addManyCampaigns = useCallback((
    list: (Omit<CampaignRow, 'id'> & { id?: string })[],
    opts?: { upsertBy?: UpsertKey; onConflict?: OnConflict }
  ): BulkResult => {
    // ðŸ†• guard suave para no-admin:
    // - limita tamaÃ±o de lote
    // - fuerza onConflict = 'skip' para evitar overwrites
    const hardTotal = list.length;
    const effectiveList = isAdmin ? list : list.slice(0, NON_ADMIN_BULK_LIMIT);
    const trimmedOut = hardTotal - effectiveList.length;

    const upsertBy = opts?.upsertBy ?? 'composite';
    const onConflictEffective: OnConflict = isAdmin ? (opts?.onConflict ?? 'update') : 'skip';

    let added = 0, updated = 0, skipped = 0;

    setRows(prev => {
      let next = [...prev];

      for (const input of effectiveList) {
        const id =
          input.id ??
          (globalThis.crypto?.randomUUID
            ? crypto.randomUUID()
            : Math.random().toString(36).slice(2));

        const prepared = applyBusinessRules({ ...(input as any), id } as CampaignRow);

        // Recalcular mapas sobre `next` en cada iteraciÃ³n
        const byId = new Map<string, number>();
        const byComposite = new Map<string, number>();
        for (let i = 0; i < next.length; i++) {
          const r = next[i];
          byId.set(r.id, i);
          byComposite.set(compositeKey(r), i);
        }

        let targetIndex: number | undefined = undefined;
        if (upsertBy === 'id' && id) {
          const idx = byId.get(id);
          if (idx != null) targetIndex = idx;
        } else {
          const key = compositeKey(prepared);
          const idx = byComposite.get(key);
          if (idx != null) targetIndex = idx;
        }

        if (targetIndex == null) {
          // Alta nueva al principio
          const rowWithIdx = { ...prepared, _idx: idxRef.current++ };
          next = [rowWithIdx, ...next];
          added++;
        } else {
          if (onConflictEffective === 'skip') {
            skipped++;
          } else {
            // Update in-place preservando _idx
            const prevRow = next[targetIndex];
            const preservedIdx =
              (prevRow as (CampaignRow & { _idx: number }) | undefined)?._idx ?? idxRef.current++;
            next[targetIndex] = { ...prepared, _idx: preservedIdx };
            updated++;
          }
        }
      }

      return next;
    });

    // lo recortado por el guard cuenta como skipped
    skipped += trimmedOut;

    return { added, updated, skipped, total: hardTotal };
  }, [isAdmin]);

  const importFromCsv = useCallback((csvText: string, opts?: ImportCsvOptions): ImportCsvReport => {
    const parsed = parseCsv(csvText, opts?.delimiter);
    const headerRaw = parsed.header;
    const rowsRaw = parsed.rows;
    const normalize = (s: string) => s.trim().toLowerCase();
    const columns = headerRaw;
    const headerMap = new Map<string, keyof CampaignRow>();

    if (opts?.headerMap) {
      for (const [k, v] of Object.entries(opts.headerMap)) {
        headerMap.set(normalize(k), v);
      }
    }

    const possibleFields: (keyof CampaignRow)[] = [
      'id','date','campaign','advertiser','invoiceOffice','partner','theme','price','priceCurrency','type','vSent','routingCosts','qty','turnover','margin','ecpm','database','geo','databaseType',
    ];
    headerRaw.forEach(h => {
      const n = normalize(h);
      if (!headerMap.has(n)) {
        const direct = possibleFields.find(f => normalize(String(f)) === n);
        if (direct) headerMap.set(n, direct);
      }
    });

    const failures: { line: number; reason: string }[] = [];
    const batch: (Omit<CampaignRow, 'id'> & { id?: string })[] = [];

    rowsRaw.forEach((cells, rowIdx) => {
      const lineNo = rowIdx + 2;
      const obj: any = {};
      headerRaw.forEach((h, i) => {
        const mapped = headerMap.get(normalize(h));
        if (!mapped) return;
        obj[mapped] = cells[i];
      });

      obj.price = parseNumberLoose(obj.price);
      obj.qty = Math.round(parseNumberLoose(obj.qty));
      obj.vSent = Math.round(parseNumberLoose(obj.vSent));
      if (!obj.priceCurrency) obj.priceCurrency = 'EUR';
      if (!obj.type) obj.type = 'CPL';

      const missing = REQUIRED_MIN.filter(k => !String(obj[k] ?? '').trim());
      if (missing.length) {
        failures.push({ line: lineNo, reason: `Missing required: ${missing.join(', ')}` });
        return;
      }

      batch.push({
        id: obj.id || undefined,
        date: String(obj.date),
        campaign: String(obj.campaign),
        advertiser: String(obj.advertiser || ''),
        invoiceOffice: String(obj.invoiceOffice || 'DAT'),
        partner: String(obj.partner),
        theme: String(obj.theme || ''),
        price: Number(obj.price || 0),
        priceCurrency: String(obj.priceCurrency || 'EUR'),
        type: String(obj.type),
        vSent: Number(obj.vSent || 0),
        routingCosts: 0,
        qty: Number(obj.qty || 0),
        turnover: 0,
        margin: 0,
        ecpm: 0,
        database: String(obj.database),
        geo: String(obj.geo || ''),
        databaseType: String(obj.databaseType || ''),
      });
    });

    // ðŸ†• aplica guard suave tambiÃ©n en CSV: no-admin => conflictos a 'skip'
    const bulk = addManyCampaigns(batch, {
      upsertBy: opts?.upsertBy ?? 'composite',
      onConflict: isAdmin ? (opts?.onConflict ?? 'update') : 'skip',
    });

    return {
      ...bulk,
      errors: failures,
      columns,
    };
  }, [addManyCampaigns, isAdmin]);

  const value = useMemo<Ctx>(
    () => ({
      rows,
      addCampaign,
      updateCampaign,
      removeCampaign,
      resetToMock,
      addManyCampaigns,
      importFromCsv,
    }),
    [rows, addCampaign, updateCampaign, removeCampaign, resetToMock, addManyCampaigns, importFromCsv]
  );

  return <CampaignDataContext.Provider value={value}>{children}</CampaignDataContext.Provider>;
}

export function useCampaignData() {
  const ctx = useContext(CampaignDataContext);
  if (!ctx) throw new Error('useCampaignData must be used within CampaignDataProvider');
  return ctx;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\context\CatalogOverridesContext.tsx =====
'use client';

import React, {
  createContext,
  useCallback,
  useContext,
  useEffect,
  useMemo,
  useRef,
  useState,
} from 'react';

import {
  CAMPAIGNS as BASE_CAMPAIGNS,
  PARTNERS as BASE_PARTNERS,
  DATABASES as BASE_DATABASES,
  THEMES as BASE_THEMES,
  TYPES as BASE_TYPES,
  INVOICE_RULES,
} from '@/data/reference';
import type {
  CampaignRef,
  PartnerRef,
  DatabaseRef,
  DBType,
  InvoiceOffice,
  InvoiceRule,
} from '@/data/reference';

import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { useAuth } from '@/context/AuthContext';

const STORAGE_KEY = 'monet_catalog_overrides_v1';

/* ============================== NormalizaciÃ³n ============================== */
type CampaignIn = { name: string; advertiser?: string };
type PartnerIn  = { name: string; invoiceOffice: string };
type DatabaseIn = { id?: string; name: string; geo: string; dbType: DBType };

type OverridesShape = {
  campaigns?: CampaignIn[];
  partners?: PartnerIn[];
  databases?: DatabaseIn[];
  themes?: string[] | { label: string }[];
  types?: string[];
};

function trimCollapse(s: string) {
  return (s ?? '').trim().replace(/\s+/g, ' ');
}
function norm(s?: string) {
  return (s ?? '').trim().toLowerCase();
}
function toSlug(s?: string) {
  const x = (s ?? '')
    .normalize('NFKD')
    .replace(/[\u0300-\u036f]/g, '')
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '')
    .slice(0, 60);
  return x || 'item';
}
function mapInvoiceOffice(s: string): { office: InvoiceOffice; isInternal?: boolean } {
  const v = norm(s);
  if (v === 'car') return { office: 'CAR' };
  if (v === 'dat') return { office: 'DAT' };
  if (v === 'internal' || v === 'int') return { office: 'INT', isInternal: true };
  return { office: 'DAT' };
}

/** ===== GEO estricto: ISO-3166-1 alpha-2 + MULTI, con alias UKâ†’GB ===== */
function isIsoCountry(code: string): boolean {
  const c = (code || '').toUpperCase();
  if (!/^[A-Z]{2}$/.test(c)) return false;
  try {
    const dn = new (Intl as any).DisplayNames(['en'], { type: 'region' });
    const name = dn?.of?.(c);
    return typeof name === 'string' && name && name !== c;
  } catch {
    return false;
  }
}
function normalizeGeoStrict(raw?: string): string | null {
  const g = trimCollapse(raw || '').toUpperCase();
  if (!g) return null;
  if (g === 'MULTI') return 'MULTI';
  const mapped = g === 'UK' ? 'GB' : g;
  return isIsoCountry(mapped) ? mapped : null;
}

function normalizeOverrides(raw: any): OverridesShape {
  const out: OverridesShape = {};
  if (Array.isArray(raw?.campaigns)) {
    out.campaigns = raw.campaigns
      .map((c: any) => ({
        name: trimCollapse(c?.name || ''),
        advertiser: trimCollapse(c?.advertiser || 'White Label'),
      }))
      .filter((c: any) => !!c.name);
  }
  if (Array.isArray(raw?.partners)) {
    out.partners = raw.partners
      .map((p: any) => ({
        name: trimCollapse(p?.name || ''),
        invoiceOffice: (p?.invoiceOffice || 'DAT') as string,
      }))
      .filter((p: any) => !!p.name);
  }
  if (Array.isArray(raw?.databases)) {
    out.databases = raw.databases
      .map((d: any) => {
        const name = trimCollapse(d?.name || '');
        const geoNorm = normalizeGeoStrict(d?.geo);
        return {
          id: trimCollapse(d?.id || ''),
          name,
          geo: geoNorm ?? '',
          dbType: (d?.dbType || 'B2C') as DBType,
        };
      })
      .filter((d: any) => !!d.name && !!normalizeGeoStrict(d.geo));
  }
  if (Array.isArray(raw?.themes)) {
    out.themes = raw.themes
      .map((t: any) => (typeof t === 'string' ? trimCollapse(t) : trimCollapse(t?.label || '')))
      .filter((t: string) => !!t);
  }
  if (Array.isArray(raw?.types)) {
    out.types = raw.types
      .map((t: any) => trimCollapse(String(t || '')).toUpperCase())
      .filter((t: string) => !!t);
  }
  return out;
}

/* ============================== Merge helpers ============================== */
function mergeCampaigns(base: CampaignRef[], adds: CampaignIn[] = []): CampaignRef[] {
  const out = [...base.map((c) => ({ ...c }))];
  const usedIds = new Set(out.map((c) => c.id));
  const seenNames = new Set(out.map((c) => norm(c.name)));

  for (const r of adds) {
    const name = trimCollapse(r.name);
    if (!name) continue;
    const key = norm(name);
    if (seenNames.has(key)) continue;
    seenNames.add(key);

    const advertiser = trimCollapse(r.advertiser || 'White Label');
    let id = toSlug(name);
    let n = 2;
    while (usedIds.has(id)) id = `${id}-${n++}`;
    usedIds.add(id);

    out.push({ id, name, advertiser });
  }
  out.sort((a, b) => a.name.localeCompare(b.name, 'es'));
  return out;
}

function mergePartners(base: PartnerRef[], adds: PartnerIn[] = []): PartnerRef[] {
  const out = [...base.map((p) => ({ ...p }))];
  const usedIds = new Set(out.map((p) => p.id));
  const seenNames = new Set(out.map((p) => norm(p.name)));

  for (const r of adds) {
    const name = trimCollapse(r.name);
    if (!name) continue;
    const key = norm(name);
    if (seenNames.has(key)) continue;
    seenNames.add(key);

    const baseId = toSlug(name);
    let id = baseId;
    let n = 2;
    while (usedIds.has(id)) id = `${baseId}-${n++}`;
    usedIds.add(id);

    const { office, isInternal } = mapInvoiceOffice(r.invoiceOffice);
    out.push({
      id,
      name,
      defaultInvoiceOffice: office,
      ...(isInternal ? { isInternal: true } : {}),
    });
  }
  out.sort((a, b) => a.name.localeCompare(b.name, 'es'));
  return out;
}

function mergeDatabases(base: DatabaseRef[], adds: DatabaseIn[] = []): DatabaseRef[] {
  const out = [...base.map((d) => ({ ...d }))];
  const usedIds = new Set(out.map((d) => d.id));
  const seen = new Set(out.map((d) => norm(d.name)));

  for (const r of adds) {
    const name = trimCollapse(r.name);
    if (!name) continue;
    const key = norm(name);
    if (seen.has(key)) continue;

    const geoStrict = normalizeGeoStrict(r.geo);
    if (!geoStrict) continue;

    // ID autogenerado (o normalizado si viene)
    const baseId = toSlug(r.id ? r.id : name);
    let id = baseId || 'db';
    let n = 2;
    while (usedIds.has(id)) id = `${baseId}-${n++}`;

    usedIds.add(id);
    seen.add(key);

    out.push({
      id,
      name,
      geo: geoStrict,
      dbType: r.dbType,
    });
  }
  out.sort((a, b) => a.name.localeCompare(b.name, 'es'));
  return out;
}

function mergeThemes(base: string[], adds: (string | { label: string })[] = []): string[] {
  const out = new Set(base);
  for (const t of adds) {
    const label = typeof t === 'string' ? t : t?.label;
    const v = trimCollapse(label || '');
    if (!v) continue;
    out.add(v);
  }
  const arr = [...out];
  arr.sort((a, b) => {
    const ax = a.toLowerCase() === 'unknown';
    const bx = b.toLowerCase() === 'unknown';
    if (ax && !bx) return 1;
    if (!ax && bx) return -1;
    return a.localeCompare(b, 'es');
  });
  return arr;
}

function mergeTypes(base: readonly string[], adds: string[] = []): string[] {
  const out = new Set<string>(base);
  for (const t of adds) {
    const v = trimCollapse(t).toUpperCase();
    if (!v) continue;
    out.add(v);
  }
  return [...out].sort();
}

/* ====== Resolver de invoice office con reglas + partners fusionados ======= */
function makeResolveInvoiceOffice(rules: InvoiceRule[], partners: PartnerRef[]) {
  return (geo?: string, partnerNameOrId?: string): InvoiceOffice => {
    const g = norm(geo);
    const pRaw = norm(partnerNameOrId);

    const partnerObj =
      partners.find((pp) => norm(pp.id) === pRaw || norm(pp.name) === pRaw) || null;
    const p = partnerObj ? norm(partnerObj.name) : pRaw;

    const rulesEff = rules.filter((r) => !!(r.geo || r.partner));

    const exact = rulesEff.find(
      (r) => r.geo && r.partner && norm(r.geo) === g && norm(r.partner) === p,
    );
    if (exact) return exact.invoiceOffice;

    const byPartner = rulesEff.find((r) => r.partner && !r.geo && norm(r.partner) === p);
    if (byPartner) return byPartner.invoiceOffice;

    if (partnerObj?.defaultInvoiceOffice) return partnerObj.defaultInvoiceOffice;

    const byGeo = rulesEff.find((r) => r.geo && !r.partner && norm(r.geo) === g);
    if (byGeo) return byGeo.invoiceOffice;

    return 'DAT';
  };
}

/* ================================ Contexto ================================= */
export type CatalogsCtx = {
  // Colecciones fusionadas (BASE + overrides compartidos)
  CAMPAIGNS: CampaignRef[];
  PARTNERS: PartnerRef[];
  DATABASES: DatabaseRef[];
  THEMES: string[];
  TYPES: string[];
  resolveInvoiceOfficeMerged: (geo?: string, partner?: string) => InvoiceOffice;

  // CRUD (APIs existentes - compat)
  addCampaignRef: (c: CampaignIn) => void;
  addPartnerRef:  (p: PartnerIn) => void;
  addDatabaseRef: (d: DatabaseIn) => void;
  addTheme: (t: string) => void;
  addType:  (t: string) => void;

  updateCampaignRef: (name: string, patch: Partial<CampaignIn>) => void;
  removeCampaignRef: (name: string) => void;

  updatePartnerRef: (name: string, patch: Partial<PartnerIn>) => void;
  removePartnerRef: (name: string) => void;

  updateDatabaseRef: (name: string, patch: Partial<DatabaseIn>) => void;
  removeDatabaseRef: (name: string) => void;

  removeTheme: (t: string) => void;
  removeType:  (t: string) => void;

  // Mantenimiento
  resetOverrides: () => void;
  exportOverrides: () => string;

  // Estado
  hasLocalChanges: boolean;

  // ImportaciÃ³n segura
  importOverrides: (data: string | OverridesShape) => { ok: true } | { ok: false; reason: string };

  // Info remota
  syncing: boolean;
  lastSyncedAt: string | null;
  canWriteShared: boolean;
};

const CatalogOverridesContext = createContext<CatalogsCtx | null>(null);

/* ======================= Supabase adapter (tabla Ãºnica) ====================

  Tabla sugerida en Supabase (SQL):

  create table if not exists catalog_overrides (
    key text primary key,
    data jsonb not null default '{}',
    updated_at timestamptz not null default now(),
    updated_by uuid references auth.users(id)
  );

  -- Para realtime
  alter publication supabase_realtime add table catalog_overrides;

  Usamos la fila con key='global'. Puedes cambiarlo a nivel organizaciÃ³n si lo necesitÃ¡is.
============================================================================= */

const S_TABLE = 'catalog_overrides';
const S_KEY   = 'global';

export function CatalogOverridesProvider({ children }: { children: React.ReactNode }) {
  const { user, isAdmin, isEditor } = useAuth();
  const canWriteShared = Boolean(isAdmin || isEditor);

  const supabase = useMemo(() => createClientComponentClient(), []);

  const [overrides, setOverrides] = useState<OverridesShape>(() => {
    try {
      const raw = localStorage.getItem(STORAGE_KEY);
      return raw ? (JSON.parse(raw) as OverridesShape) : {};
    } catch {
      return {};
    }
  });

  const [syncing, setSyncing] = useState(false);
  const [lastSyncedAt, setLastSyncedAt] = useState<string | null>(null);

  // Para evitar bucles de eco: cuando aplicamos remoto, no disparemos guardado
  const skipNextSaveRef = useRef(false);
  const hydratedRemoteRef = useRef(false);
  const saveTimerRef = useRef<number | null>(null);

  // Persistir en cache local siempre (mejor UX offline)
  useEffect(() => {
    try { localStorage.setItem(STORAGE_KEY, JSON.stringify(overrides)); } catch {}
  }, [overrides]);

  /* -------------------------- Carga inicial remota ------------------------- */
  useEffect(() => {
    let active = true;

    (async () => {
      try {
        setSyncing(true);
        const { data, error } = await supabase
          .from(S_TABLE)
          .select('data, updated_at')
          .eq('key', S_KEY)
          .single();

        if (!active) return;

        if (!error && data?.data) {
          skipNextSaveRef.current = true; // no salvar de vuelta este set
          setOverrides(normalizeOverrides(data.data));
          setLastSyncedAt(data.updated_at ?? new Date().toISOString());
        } else {
          // Si no existe fila remota, mantenemos lo local; se crearÃ¡ al primer write
        }
      } finally {
        hydratedRemoteRef.current = true;
        setSyncing(false);
      }
    })();

    return () => { active = false; };
  }, [supabase]);

  /* --------------------------- SuscripciÃ³n realtime ------------------------ */
  useEffect(() => {
    const channel = supabase
      .channel('catalog_overrides_global')
      .on(
        'postgres_changes',
        { event: '*', schema: 'public', table: S_TABLE, filter: `key=eq.${S_KEY}` },
        (payload) => {
          const row: any = payload.new || payload.record || null;
          if (!row || !row.data) return;
          // Aplicar remoto y evitar eco
          skipNextSaveRef.current = true;
          setOverrides(normalizeOverrides(row.data));
          setLastSyncedAt(row.updated_at ?? new Date().toISOString());
        }
      )
      .subscribe();

    return () => { supabase.removeChannel(channel); };
  }, [supabase]);

  /* ----------------------------- Guardado remoto --------------------------- */
  const upsertRemote = useCallback(async (data: OverridesShape) => {
    if (!canWriteShared) return; // viewers no escriben
    setSyncing(true);
    try {
      await supabase
        .from(S_TABLE)
        .upsert({
          key: S_KEY,
          data,
          updated_by: user?.id ?? null,
        }, { onConflict: 'key' })
        .select()
        .single();
      setLastSyncedAt(new Date().toISOString());
    } finally {
      setSyncing(false);
    }
  }, [supabase, user?.id, canWriteShared]);

  // Debounce: cada cambio local (user action) -> upsert remoto (si procede)
  useEffect(() => {
    if (!hydratedRemoteRef.current) return; // hasta cargar remoto
    if (skipNextSaveRef.current) {
      skipNextSaveRef.current = false;
      return;
    }
    if (!canWriteShared) return; // viewers no suben

    if (saveTimerRef.current) window.clearTimeout(saveTimerRef.current);
    saveTimerRef.current = window.setTimeout(() => {
      upsertRemote(overrides);
    }, 500);

    return () => {
      if (saveTimerRef.current) {
        window.clearTimeout(saveTimerRef.current);
        saveTimerRef.current = null;
      }
    };
  }, [overrides, canWriteShared, upsertRemote]);

  /* -------------------------- Fusionados (memo) ---------------------------- */
  const CAMPAIGNS = useMemo(
    () => mergeCampaigns(BASE_CAMPAIGNS, overrides.campaigns),
    [overrides.campaigns],
  );
  const PARTNERS = useMemo(
    () => mergePartners(BASE_PARTNERS, overrides.partners),
    [overrides.partners],
  );
  const DATABASES = useMemo(
    () => mergeDatabases(BASE_DATABASES, overrides.databases),
    [overrides.databases],
  );
  const THEMES = useMemo(
    () => mergeThemes(BASE_THEMES, overrides.themes as any),
    [overrides.themes],
  );
  const TYPES = useMemo(
    () => mergeTypes(BASE_TYPES, overrides.types),
    [overrides.types],
  );

  const resolveInvoiceOfficeMerged = useMemo(
    () => makeResolveInvoiceOffice(INVOICE_RULES, PARTNERS),
    [PARTNERS],
  );

  /* ---------------------------- Mutadores (compat) ------------------------- */
  const setLocal = <T,>(updater: (prev: OverridesShape) => OverridesShape) => {
    setOverrides(prev => updater(prev));
  };

  const addCampaignRef = useCallback((c: CampaignIn) => {
    setLocal(prev => {
      const list = [...(prev.campaigns || [])];
      const key = norm(c.name);
      const exists =
        list.some((x) => norm(x.name) === key) ||
        CAMPAIGNS.some((x) => norm(x.name) === key);
      if (!exists) {
        list.push({
          name: trimCollapse(c.name),
          advertiser: trimCollapse(c.advertiser || 'White Label'),
        });
      }
      return { ...prev, campaigns: list };
    });
  }, [CAMPAIGNS]);

  const addPartnerRef = useCallback((p: PartnerIn) => {
    setLocal(prev => {
      const list = [...(prev.partners || [])];
      const key = norm(p.name);
      const exists =
        list.some((x) => norm(x.name) === key) ||
        PARTNERS.some((x) => norm(x.name) === key);
      if (!exists) {
        list.push({ name: trimCollapse(p.name), invoiceOffice: p.invoiceOffice });
      }
      return { ...prev, partners: list };
    });
  }, [PARTNERS]);

  const addDatabaseRef = useCallback((d: DatabaseIn) => {
    setLocal(prev => {
      const list = [...(prev.databases || [])];

      // Dedupe por nombre (case-insensitive)
      const key = norm(d.name);
      const exists =
        list.some((x) => norm(x.name) === key) ||
        DATABASES.some((x) => norm(x.name) === key);
      if (exists) return prev;

      // GEO validado (estricto)
      const geoStrict = normalizeGeoStrict(d.geo);
      if (!geoStrict) {
        console.warn('Invalid GEO ignored in addDatabaseRef:', d.geo);
        return prev;
      }

      // ID autogenerado Ãºnico (ignora cualquier id externo)
      const usedIds = new Set<string>([
        ...DATABASES.map(db => db.id.toLowerCase()),
        ...list.map(db => (db.id || '').toLowerCase()),
      ]);
      const baseId = toSlug(d.name) || 'db';
      let id = baseId;
      let n = 2;
      while (usedIds.has(id.toLowerCase())) id = `${baseId}-${n++}`;

      list.push({
        id,
        name: trimCollapse(d.name),
        geo: geoStrict,      // UKâ†’GB, permite MULTI
        dbType: d.dbType,
      });
      return { ...prev, databases: list };
    });
  }, [DATABASES]);

  const addTheme = useCallback((t: string) => {
    setLocal(prev => {
      const list = Array.isArray(prev.themes) ? [...prev.themes] : [];
      const label = trimCollapse(t);
      if (!label) return prev;
      const exists =
        (list as any[]).some(
          (x) => trimCollapse(typeof x === 'string' ? x : x?.label) === label,
        ) || THEMES.some((v) => v === label);
      if (!exists) (list as any[]).push(label);
      return { ...prev, themes: list as any };
    });
  }, [THEMES]);

  const addType = useCallback((t: string) => {
    setLocal(prev => {
      const list = [...(prev.types || [])];
      const v = trimCollapse(t).toUpperCase();
      if (!v) return prev;
      const exists = list.includes(v) || TYPES.includes(v);
      if (!exists) list.push(v);
      return { ...prev, types: list };
    });
  }, [TYPES]);

  const updateCampaignRef = useCallback((name: string, patch: Partial<CampaignIn>) => {
    const key = norm(name);
    setLocal(prev => {
      const list = [...(prev.campaigns || [])];
      const idx = list.findIndex((x) => norm(x.name) === key);
      if (idx >= 0) {
        list[idx] = {
          ...list[idx],
          ...(patch.name ? { name: trimCollapse(patch.name) } : {}),
          ...(patch.advertiser ? { advertiser: trimCollapse(patch.advertiser) } : {}),
        };
      } else {
        list.push({
          name: trimCollapse(patch.name || name),
          advertiser: trimCollapse(patch.advertiser || 'White Label'),
        });
      }
      return { ...prev, campaigns: list };
    });
  }, []);

  const removeCampaignRef = useCallback((name: string) => {
    const key = norm(name);
    setLocal(prev => ({
      ...prev,
      campaigns: (prev.campaigns || []).filter((x) => norm(x.name) !== key),
    }));
  }, []);

  const updatePartnerRef = useCallback((name: string, patch: Partial<PartnerIn>) => {
    const key = norm(name);
    setLocal(prev => {
      const list = [...(prev.partners || [])];
      const idx = list.findIndex((x) => norm(x.name) === key);
      const invoiceOffice = patch.invoiceOffice ?? list[idx]?.invoiceOffice ?? 'DAT';
      if (idx >= 0) {
        list[idx] = {
          ...list[idx],
          ...(patch.name ? { name: trimCollapse(patch.name) } : {}),
          invoiceOffice,
        };
      } else {
        list.push({ name: trimCollapse(patch.name || name), invoiceOffice });
      }
      return { ...prev, partners: list };
    });
  }, []);

  const removePartnerRef = useCallback((name: string) => {
    const key = norm(name);
    setLocal(prev => ({
      ...prev,
      partners: (prev.partners || []).filter((x) => norm(x.name) !== key),
    }));
  }, []);

  const updateDatabaseRef = useCallback((name: string, patch: Partial<DatabaseIn>) => {
    const key = norm(name);
    setLocal(prev => {
      const list = [...(prev.databases || [])];
      const idx = list.findIndex((x) => norm(x.name) === key);

      const applyGeo = (g?: string) => {
        if (g == null) return undefined;
        const strict = normalizeGeoStrict(g);
        return strict ?? undefined;
      };

      // Helper para generar ID Ãºnico si se edita el id
      const makeUniqueId = (desiredBase: string) => {
        const used = new Set<string>([
          ...DATABASES.map(db => db.id.toLowerCase()),
          ...list.map(db => (db.id || '').toLowerCase()),
        ]);
        const baseId = toSlug(desiredBase) || 'db';
        let id = baseId, n = 2;
        while (used.has(id.toLowerCase())) id = `${baseId}-${n++}`;
        return id;
      };

      if (idx >= 0) {
        const next = { ...list[idx] };
        if (patch.name) next.name = trimCollapse(patch.name);
        const g = applyGeo(patch.geo);
        if (g) next.geo = g; // si no es vÃ¡lido, se ignora cambio de GEO
        if (patch.dbType) next.dbType = patch.dbType;
        if (patch.id) next.id = makeUniqueId(patch.id || next.name);
        list[idx] = next;
      } else {
        // Si no existÃ­a, creamos nuevo (con validaciÃ³n)
        const nm = trimCollapse(patch.name || name);
        const g = applyGeo(patch.geo || '');
        if (!nm || !g) return prev;
        list.push({
          id: makeUniqueId(patch.id || nm),
          name: nm,
          geo: g,
          dbType: (patch.dbType || 'B2C') as DBType,
        });
      }
      return { ...prev, databases: list };
    });
  }, [DATABASES]);

  const removeDatabaseRef = useCallback((name: string) => {
    const key = norm(name);
    setLocal(prev => ({
      ...prev,
      databases: (prev.databases || []).filter((x) => norm(x.name) !== key),
    }));
  }, []);

  const removeTheme = useCallback((t: string) => {
    const lbl = trimCollapse(t);
    setLocal(prev => ({
      ...prev,
      themes: (prev.themes || []).filter((x: any) =>
        trimCollapse(typeof x === 'string' ? x : x?.label) !== lbl,
      ),
    }));
  }, []);

  const removeType = useCallback((t: string) => {
    const v = trimCollapse(t).toUpperCase();
    setLocal(prev => ({
      ...prev,
      types: (prev.types || []).filter((x) => x !== v),
    }));
  }, []);

  /* ----------------------------- Mantenimiento ----------------------------- */
  const resetOverrides = useCallback(() => {
    setOverrides({});
  }, []);

  const exportOverrides = useCallback(() => {
    const data: OverridesShape = {};
    if (overrides.campaigns?.length)  data.campaigns = overrides.campaigns;
    if (overrides.partners?.length)   data.partners  = overrides.partners;
    if (overrides.databases?.length)  data.databases = overrides.databases;
    if (overrides.themes && (overrides.themes as any[]).length) data.themes = overrides.themes;
    if (overrides.types?.length)      data.types     = overrides.types;
    return JSON.stringify(data, null, 2);
  }, [overrides]);

  const hasLocalChanges = useMemo(() => {
    const o = overrides;
    return Boolean(
      (o.campaigns && o.campaigns.length) ||
      (o.partners && o.partners.length) ||
      (o.databases && o.databases.length) ||
      (o.themes && (o.themes as any[]).length) ||
      (o.types && o.types.length)
    );
  }, [overrides]);

  const importOverrides = useCallback((data: string | OverridesShape) => {
    try {
      const src = typeof data === 'string' ? JSON.parse(data) : data;
      const normd = normalizeOverrides(src);
      setOverrides(normd);
      return { ok: true as const };
    } catch (e) {
      console.error(e);
      return { ok: false as const, reason: 'Invalid JSON' };
    }
  }, []);

  const value: CatalogsCtx = {
    CAMPAIGNS,
    PARTNERS,
    DATABASES,
    THEMES,
    TYPES,
    resolveInvoiceOfficeMerged,

    addCampaignRef,
    addPartnerRef,
    addDatabaseRef,
    addTheme,
    addType,

    updateCampaignRef,
    removeCampaignRef,
    updatePartnerRef,
    removePartnerRef,
    updateDatabaseRef,
    removeDatabaseRef,
    removeTheme,
    removeType,

    resetOverrides,
    exportOverrides,

    hasLocalChanges,
    importOverrides,

    syncing,
    lastSyncedAt,
    canWriteShared,
  };

  return (
    <CatalogOverridesContext.Provider value={value}>
      {children}
    </CatalogOverridesContext.Provider>
  );
}

/** Hook principal */
export function useCatalogs() {
  const ctx = useContext(CatalogOverridesContext);
  if (!ctx) throw new Error('useCatalogs must be used within CatalogOverridesProvider');
  return ctx;
}

/** Alias de compatibilidad */
export function useCatalogOverrides() {
  return useCatalogs();
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\data\reference.ts =====
// data/reference.ts
import { z } from 'zod';
import rawCampaigns from './catalogs/campaigns.json';
import rawPartners from './catalogs/partners.json';
import rawDatabases from './catalogs/databases.json';
import rawRules from './catalogs/invoice_rules.json';
import rawThemes from './catalogs/themes.json';

// ---------------- Constantes (tuplas as const) ----------------
export const DB_TYPES = ['B2B', 'B2C', 'Mixed'] as const;
export const INVOICE_OFFICES = ['CAR', 'DAT', 'INT'] as const;
export const TYPES = ['CPL', 'CPM', 'CPC', 'CPA'] as const;

// ---------------- Tipos base ----------------
export type DBType = 'B2C' | 'B2B' | 'Mixed';
export type InvoiceOffice = 'CAR' | 'DAT' | 'INT';

export type CampaignRef = { id: string; name: string; advertiser: string };

export type PartnerRef = {
  id: string;                          // slug estable
  name: string;                        // visible en UI
  defaultInvoiceOffice: InvoiceOffice; // fallback si no hay regla por GEO/partner
  isInternal?: boolean;                // flag si viene "Internal"/"INT" en la fuente
};

export type DatabaseRef = { id: string; name: string; geo: string; dbType: DBType };
export type ThemeRef = { id: string; label: string };

// ---------------- Utils (funciones hoisted) ----------------
export function trimCollapse(s: string) {
  return (s ?? '').trim().replace(/\s+/g, ' ');
}
export function toSlug(s: string) {
  return (s ?? '')
    .normalize('NFKD').replace(/[\u0300-\u036f]/g, '')
    .toLowerCase().replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '').slice(0, 60);
}
function norm(s?: string) {
  return (s ?? '').trim().toLowerCase();
}

// ---------------- THEMES (JSON) ----------------
const ThemeInZ = z.object({ label: z.string() });
type ThemeIn = z.infer<typeof ThemeInZ>;

function normalizeThemes(input: unknown): ThemeRef[] {
  const parsed = z.array(ThemeInZ).parse(input);

  const seen = new Set<string>();
  const out: ThemeRef[] = [];

  for (const r of parsed) {
    const label = trimCollapse(r.label);
    if (!label) continue;
    const key = label.toLowerCase();
    if (seen.has(key)) continue; // dedupe case-insensitive
    seen.add(key);

    const base = toSlug(label) || 'theme';
    let id = base, n = 2;
    while (out.some(t => t.id === id)) id = `${base}-${n++}`;

    out.push({ id, label });
  }

  // Orden alfabÃ©tico, dejando "Unknown" al final si existe
  out.sort((a, b) => {
    const ax = a.label.toLowerCase() === 'unknown';
    const bx = b.label.toLowerCase() === 'unknown';
    if (ax && !bx) return 1;
    if (!ax && bx) return -1;
    return a.label.localeCompare(b.label, 'es');
  });

  return out;
}

export const THEMES_META: ThemeRef[] = normalizeThemes(rawThemes);
export const THEMES: string[] = THEMES_META.map(t => t.label);

// ---------------- CAMPAIGNS (JSON) ----------------
const CampaignInZ = z.object({ name: z.string(), advertiser: z.string() });
type CampaignIn = z.infer<typeof CampaignInZ>;

function normalizeCampaigns(input: unknown): CampaignRef[] {
  const parsed = z.array(CampaignInZ).parse(input);

  const used = new Set<string>();
  const rows = parsed.map((r) => {
    const name = trimCollapse(r.name);
    const advertiser = trimCollapse(r.advertiser);
    const base = toSlug(name) || toSlug(`${name}-${advertiser || 'wl'}`) || 'campaign';
    let id = base;
    let n = 2;
    while (used.has(id)) id = `${base}-${n++}`;
    used.add(id);
    return { id, name, advertiser };
  });

  rows.sort((a, b) => a.name.localeCompare(b.name, 'es'));
  return rows;
}

export const CAMPAIGNS: CampaignRef[] = normalizeCampaigns(rawCampaigns);

// ---------------- PARTNERS (JSON) ----------------
const PartnerInZ = z.object({
  name: z.string(),
  invoiceOffice: z.string(), // puede venir "Internal", "CAR", "DAT"
});
type PartnerIn = z.infer<typeof PartnerInZ>;

function mapInvoiceOffice(s: string): { office: InvoiceOffice; isInternal?: boolean } {
  const v = norm(s);
  if (v === 'car') return { office: 'CAR' };
  if (v === 'dat') return { office: 'DAT' };
  if (v === 'internal' || v === 'int') return { office: 'INT', isInternal: true };
  // fallback prudente
  return { office: 'DAT' };
}

function normalizePartners(input: unknown): PartnerRef[] {
  const parsed = z.array(PartnerInZ).parse(input);
  const used = new Set<string>();
  const out: PartnerRef[] = [];

  for (const r of parsed) {
    const name = trimCollapse(r.name);
    const base = toSlug(name) || 'partner';
    let id = base;
    let n = 2;
    while (used.has(id)) id = `${base}-${n++}`;
    used.add(id);

    const { office, isInternal } = mapInvoiceOffice(r.invoiceOffice);
    out.push({
      id,
      name,
      defaultInvoiceOffice: office,
      ...(isInternal ? { isInternal: true } : {}),
    });
  }

  out.sort((a, b) => a.name.localeCompare(b.name, 'es'));
  return out;
}

export const PARTNERS: PartnerRef[] = normalizePartners(rawPartners);

// ---------------- DATABASES (JSON) ----------------
const DatabaseInZ = z.object({
  id: z.string(),
  name: z.string(),
  geo: z.string(),                         // tal cual (ES, FR, UK, MULTI, etc.)
  dbType: z.enum(DB_TYPES),
});
type DatabaseIn = z.infer<typeof DatabaseInZ>;

function normalizeDatabases(input: unknown): DatabaseRef[] {
  const parsed = z.array(DatabaseInZ).parse(input);
  return parsed
    .map(d => ({ ...d, name: trimCollapse(d.name), geo: trimCollapse(d.geo).toUpperCase() }))
    .sort((a, b) => a.name.localeCompare(b.name, 'es'));
}

export const DATABASES: DatabaseRef[] = normalizeDatabases(rawDatabases);

// ---------------- REGLAS de invoice (JSON) ----------------
const RuleInZ = z.object({
  geo: z.string().optional(),
  partner: z.string().optional(), // por nombre o id; resolvemos abajo
  office: z.enum(INVOICE_OFFICES),
});
type RuleIn = z.infer<typeof RuleInZ>;

export type InvoiceRule = { geo?: string; partner?: string; invoiceOffice: InvoiceOffice };

function normalizeRules(input: unknown): InvoiceRule[] {
  const parsed = z.array(RuleInZ).parse(input);
  // Guardamos tal cual; la resoluciÃ³n harÃ¡ el matching por id o nombre.
  return parsed.map(r => ({ geo: r.geo, partner: r.partner, invoiceOffice: r.office }));
}

export const INVOICE_RULES: InvoiceRule[] = normalizeRules(rawRules);

// ---------------- ResoluciÃ³n de Invoice Office ----------------
// Precedencia:
// 1) Regla exacta geo+partner
// 2) Regla por partner (sin geo)
// 3) Default del partner
// 4) Regla por geo (sin partner)
// 5) Fallback DAT
export function resolveInvoiceOffice(geo?: string, partnerNameOrId?: string): InvoiceOffice {
  const g = norm(geo);
  const pRaw = norm(partnerNameOrId);

  // Localiza partner por id o por nombre (soportamos ambos)
  const partnerObj = PARTNERS.find(pp => norm(pp.id) === pRaw || norm(pp.name) === pRaw);
  const pByName = partnerObj ? norm(partnerObj.name) : pRaw;
  const pById = partnerObj ? norm(partnerObj.id) : pRaw;

  const matchGeo = (rg?: string) => !!rg && norm(rg) === g;
  const matchPartner = (rp?: string) => {
    if (!rp) return false;
    const rpNorm = norm(rp);
    // match por nombre o por id
    return rpNorm === pByName || rpNorm === pById;
  };

  // Solo reglas con al menos una condiciÃ³n
  const rules = INVOICE_RULES.filter(r => !!(r.geo || r.partner));

  // 1) geo+partner
  const exact = rules.find(r => matchGeo(r.geo) && matchPartner(r.partner));
  if (exact) return exact.invoiceOffice;

  // 2) solo partner
  const byPartner = rules.find(r => !r.geo && matchPartner(r.partner));
  if (byPartner) return byPartner.invoiceOffice;

  // 3) default del partner
  if (partnerObj?.defaultInvoiceOffice) return partnerObj.defaultInvoiceOffice;

  // 4) solo geo
  const byGeo = rules.find(r => matchGeo(r.geo) && !r.partner);
  if (byGeo) return byGeo.invoiceOffice;

  // 5) fallback
  return 'DAT';
}

// Alias opcional por legibilidad â€” mismo comportamiento
export const resolveInvoiceOfficeMerged = resolveInvoiceOffice;

// ---------------- Helpers ----------------
export function findCampaignByName(name?: string) {
  const n = (name ?? '').trim().toLowerCase();
  if (!n) return undefined;
  return CAMPAIGNS.find(c => c.name.toLowerCase() === n)
      ?? CAMPAIGNS.find(c => toSlug(c.name) === toSlug(n));
}
export function findPartnerByName(name?: string) {
  const n = norm(name);
  return PARTNERS.find(p => norm(p.name) === n);
}
export function findPartnerById(id?: string) {
  const i = norm(id);
  return PARTNERS.find(p => norm(p.id) === i);
}
export function findDatabaseByName(name?: string) {
  const n = norm(name);
  return DATABASES.find(d => norm(d.name) === n);
}
export function findDatabaseById(id?: string) {
  const i = norm(id);
  return DATABASES.find(d => norm(d.id) === i);
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\data\catalogs\campaigns.json =====
[
  {
    "name": "Assurland Auto",
    "advertiser": "Assurland"
  },
  {
    "name": "Cofidis",
    "advertiser": "Cofidis"
  },
  {
    "name": "Credit Dispo",
    "advertiser": "White Label"
  },
  {
    "name": "We sur Auto",
    "advertiser": "We sur Auto"
  },
  {
    "name": "X trade",
    "advertiser": "X trade"
  },
  {
    "name": "adoucisseur d'eau",
    "advertiser": "adoucisseur d'eau"
  },
  {
    "name": "Ascenseur Maison",
    "advertiser": "White Label"
  },
  {
    "name": "Assurland Assurance RC Pro B2B",
    "advertiser": "Assurland"
  },
  {
    "name": "Commercial Cleaning FR",
    "advertiser": "White Label"
  },
  {
    "name": "Distributeur automatique",
    "advertiser": "White Label"
  },
  {
    "name": "Garantie Decenale",
    "advertiser": "White Label"
  },
  {
    "name": "Mergers & Acquisitions // Fusac",
    "advertiser": "White Label"
  },
  {
    "name": "Prevoyance B2B",
    "advertiser": "White Label"
  },
  {
    "name": "Telecoms providers",
    "advertiser": "White Label"
  },
  {
    "name": "Ticket Restaurant FR",
    "advertiser": "Edenred"
  },
  {
    "name": "Tracking FR",
    "advertiser": "White Label"
  },
  {
    "name": "voiture",
    "advertiser": "White Label"
  },
  {
    "name": "Water Coolers",
    "advertiser": "White Label"
  },
  {
    "name": "website designer",
    "advertiser": "White Label"
  },
  {
    "name": "Ulys",
    "advertiser": "Ulys"
  },
  {
    "name": "volkswagen",
    "advertiser": "volkswagen"
  },
  {
    "name": "Allianz Auto FR",
    "advertiser": "Allianz"
  },
  {
    "name": "Allianz MRH",
    "advertiser": "Allianz"
  },
  {
    "name": "Allianz sante",
    "advertiser": "Allianz"
  },
  {
    "name": "Arts et fenetres",
    "advertiser": "White Label"
  },
  {
    "name": "Comparateur mutuelle",
    "advertiser": "White Label"
  },
  {
    "name": "ikki sante",
    "advertiser": "Ikki"
  },
  {
    "name": "Investiment immobilier",
    "advertiser": "White Label"
  },
  {
    "name": "Isolation",
    "advertiser": "White Label"
  },
  {
    "name": "ITE",
    "advertiser": "ITE"
  },
  {
    "name": "Monte Escalier",
    "advertiser": "White Label"
  },
  {
    "name": "PER",
    "advertiser": "White Label"
  },
  {
    "name": "Radiateur Electrique",
    "advertiser": "White Label"
  },
  {
    "name": "Sodedif santÃ©",
    "advertiser": "Sodedif santÃ©"
  },
  {
    "name": "Chez les seniors obseques",
    "advertiser": "White Label"
  },
  {
    "name": "Prevoyance",
    "advertiser": "Prevoyance"
  },
  {
    "name": "Comme J'aime",
    "advertiser": "Comme J'aime"
  },
  {
    "name": "Credit mini taux",
    "advertiser": "White Label"
  },
  {
    "name": "Mateva",
    "advertiser": "Mateva"
  },
  {
    "name": "Melia Mutuelle",
    "advertiser": "Melia Mutuelle"
  },
  {
    "name": "Agos",
    "advertiser": "Agos"
  },
  {
    "name": "Arquati",
    "advertiser": "Arquati"
  },
  {
    "name": "Attiva Risparmia Enel",
    "advertiser": "Enel"
  },
  {
    "name": "Bagnitaliani",
    "advertiser": "White Label"
  },
  {
    "name": "BNT",
    "advertiser": "BNT"
  },
  {
    "name": "Citroen",
    "advertiser": "Citroen"
  },
  {
    "name": "Climatizzatore",
    "advertiser": "White Label"
  },
  {
    "name": "Dam Service Tim",
    "advertiser": "Tim"
  },
  {
    "name": "Depuragreen",
    "advertiser": "Depuragreen"
  },
  {
    "name": "Fastweb",
    "advertiser": "Fastweb"
  },
  {
    "name": "Febal Casa",
    "advertiser": "Febal Casa"
  },
  {
    "name": "Intelligenza artificiale",
    "advertiser": "White Label"
  },
  {
    "name": "Lenergy",
    "advertiser": "Lenergy"
  },
  {
    "name": "Movenzia Panda",
    "advertiser": "Movenzia"
  },
  {
    "name": "Murprotec ES",
    "advertiser": "Murprotect"
  },
  {
    "name": "Murprotec IT",
    "advertiser": "Murprotect"
  },
  {
    "name": "Nielsen",
    "advertiser": "Nielsen"
  },
  {
    "name": "Remail Docce",
    "advertiser": "White Label"
  },
  {
    "name": "Satispay",
    "advertiser": "Satispay"
  },
  {
    "name": "Studium",
    "advertiser": "White Label"
  },
  {
    "name": "Verisure IT",
    "advertiser": "Verisure"
  },
  {
    "name": "Wallstreet english",
    "advertiser": "Wallstreet english"
  },
  {
    "name": "Svenson",
    "advertiser": "Svenson"
  },
  {
    "name": "Accounting ES",
    "advertiser": "White Label"
  },
  {
    "name": "Commercial Cleaning",
    "advertiser": "White Label"
  },
  {
    "name": "Fuel Card - ES",
    "advertiser": "White Label"
  },
  {
    "name": "Merchant Service",
    "advertiser": "White Label"
  },
  {
    "name": "Tracking ES",
    "advertiser": "White Label"
  },
  {
    "name": "Miatel",
    "advertiser": "Miatel"
  },
  {
    "name": "Sanitas",
    "advertiser": "Sanitas"
  },
  {
    "name": "Endesa",
    "advertiser": "Endesa"
  },
  {
    "name": "Ricoh Print ES",
    "advertiser": "Ricoh"
  },
  {
    "name": "Caixa research CPM",
    "advertiser": "Caixa"
  },
  {
    "name": "Justalia",
    "advertiser": "Justalia"
  },
  {
    "name": "aldeas infantiles",
    "advertiser": "aldeas infantiles"
  },
  {
    "name": "Clinica Baviera",
    "advertiser": "Clinica Baviera"
  },
  {
    "name": "dacia",
    "advertiser": "Dacia"
  },
  {
    "name": "Dacia",
    "advertiser": "Dacia"
  },
  {
    "name": "FlexiCar",
    "advertiser": "FlexiCar"
  },
  {
    "name": "Lowi",
    "advertiser": "Lowi"
  },
  {
    "name": "Melia Hotels CPM - ES",
    "advertiser": "Melia Hotels"
  },
  {
    "name": "Movistar Prosegur Alarmas",
    "advertiser": "Movistar Prosegur"
  },
  {
    "name": "Movistar+ CPC",
    "advertiser": "Movistar+"
  },
  {
    "name": "naturgy",
    "advertiser": "naturgy"
  },
  {
    "name": "Northgate Particulares",
    "advertiser": "Northgate"
  },
  {
    "name": "para y compara",
    "advertiser": "White Label"
  },
  {
    "name": "Repsol EnergÃ­a y Gas",
    "advertiser": "Repsol"
  },
  {
    "name": "Sanitas Dental",
    "advertiser": "Sanitas"
  },
  {
    "name": "Securitas CPM",
    "advertiser": "Securitas Direct"
  },
  {
    "name": "Securitas Direct ES",
    "advertiser": "Securitas Direct"
  },
  {
    "name": "Tarifalo Solar",
    "advertiser": "Tarifalo Solar"
  },
  {
    "name": "Veci",
    "advertiser": "Veci"
  },
  {
    "name": "Ariel Caldaie",
    "advertiser": "Ariel Caldaie"
  },
  {
    "name": "Banklider Home",
    "advertiser": "Banklider"
  },
  {
    "name": "Banklider Paneles Solares",
    "advertiser": "Banklider"
  },
  {
    "name": "Badkamerrenoveren",
    "advertiser": "Badkamerrenoveren"
  },
  {
    "name": "Capitall",
    "advertiser": "Capitall"
  },
  {
    "name": "Dakreiniging",
    "advertiser": "Dakreiniging"
  },
  {
    "name": "dakrenovatie",
    "advertiser": "dakrenovatie"
  },
  {
    "name": "Helan Hospitalia",
    "advertiser": "Helan Hospitalia"
  },
  {
    "name": "IBIS BENL",
    "advertiser": "Ibis"
  },
  {
    "name": "Laadpalen",
    "advertiser": "Laadpalen"
  },
  {
    "name": "Nomad",
    "advertiser": "Nomad"
  },
  {
    "name": "Panneaux Solaires",
    "advertiser": "White Label"
  },
  {
    "name": "Warmtepomp",
    "advertiser": "White Label"
  },
  {
    "name": "Zonnepanelen BENL",
    "advertiser": "Zonnepanelen"
  },
  {
    "name": "Adeslas",
    "advertiser": "Adeslas"
  },
  {
    "name": "Adeslas",
    "advertiser": "Adeslas"
  },
  {
    "name": "Aquaservice",
    "advertiser": "Aquaservice"
  },
  {
    "name": "Asisa Decesos",
    "advertiser": "Asisa"
  },
  {
    "name": "DKV Decesos",
    "advertiser": "DKV"
  },
  {
    "name": "Iberdrola",
    "advertiser": "Iberdrola"
  },
  {
    "name": "Preventiva",
    "advertiser": "Preventiva"
  },
  {
    "name": "Santa Lucia",
    "advertiser": "Santa Lucia"
  },
  {
    "name": "Revolut",
    "advertiser": "Revolut"
  },
  {
    "name": "Borne Recharge",
    "advertiser": "White Label"
  },
  {
    "name": "Business Alarm",
    "advertiser": "White Label"
  },
  {
    "name": "cartes cadeaux",
    "advertiser": "White Label"
  },
  {
    "name": "Company Car",
    "advertiser": "White Label"
  },
  {
    "name": "Copiers And Printers",
    "advertiser": "White Label"
  },
  {
    "name": "Mutuelle FR",
    "advertiser": "White Label"
  },
  {
    "name": "Vending Machines",
    "advertiser": "White Label"
  },
  {
    "name": "Allianz Coche",
    "advertiser": "Allianz"
  },
  {
    "name": "Investiment immobilier",
    "advertiser": "White Label"
  },
  {
    "name": "Orange maison protegee",
    "advertiser": "White Label"
  },
  {
    "name": "Primaliance",
    "advertiser": "White Label"
  },
  {
    "name": "Sector Alarm",
    "advertiser": "White Label"
  },
  {
    "name": "April Assurance",
    "advertiser": "April"
  },
  {
    "name": "Assurance ObsÃ¨ques",
    "advertiser": "White Label"
  },
  {
    "name": "Canal plus B2B",
    "advertiser": "White Label"
  },
  {
    "name": "Culligan Adoucisseur",
    "advertiser": "Culligan"
  },
  {
    "name": "Mobility Fleet",
    "advertiser": "White Label"
  },
  {
    "name": "Verisure FR",
    "advertiser": "Verisure"
  },
  {
    "name": "Alfa Romeo Stelvio",
    "advertiser": "Alfa Romeo"
  },
  {
    "name": "amazon",
    "advertiser": "White Label"
  },
  {
    "name": "Audifonos",
    "advertiser": "White Label"
  },
  {
    "name": "Energia 3c",
    "advertiser": "Energia 3c"
  },
  {
    "name": "Equity Release",
    "advertiser": "White Label"
  },
  {
    "name": "Groene Energie",
    "advertiser": "Groene Energie"
  },
  {
    "name": "TelePass",
    "advertiser": "TelePass"
  },
  {
    "name": "Unipegasso",
    "advertiser": "Unipegasso"
  },
  {
    "name": "Acqualife IT",
    "advertiser": "Acqualife"
  },
  {
    "name": "Cartel de coches",
    "advertiser": "Cartel de coches"
  },
  {
    "name": "Pharmacy2U",
    "advertiser": "Pharmacy2U"
  },
  {
    "name": "Help by windows",
    "advertiser": "White Label"
  },
  {
    "name": "Accounting software ES",
    "advertiser": "White Label"
  },
  {
    "name": "Fuel Cards ES",
    "advertiser": "White Label"
  },
  {
    "name": "Tracking GÃ©olocalisation ES",
    "advertiser": "White Label"
  },
  {
    "name": "EF Cpm",
    "advertiser": "EF"
  },
  {
    "name": "Linea Directa",
    "advertiser": "Linea Directa"
  },
  {
    "name": "Medicos sin fronteras",
    "advertiser": "Medicos sin fronteras"
  },
  {
    "name": "OCU",
    "advertiser": "OCU"
  },
  {
    "name": "Ok Mobility",
    "advertiser": "Ok Mobility"
  },
  {
    "name": "Sicor Alarmas",
    "advertiser": "Sicor"
  },
  {
    "name": "Eni Plenitud Fotovoltaico",
    "advertiser": "Eni Plenitud"
  },
  {
    "name": "Air ConditionnÃ© BENL",
    "advertiser": "White Label"
  },
  {
    "name": "Decesos Marca Blanca",
    "advertiser": "White Label"
  },
  {
    "name": "Helvetia",
    "advertiser": "Helvetia"
  },
  {
    "name": "Olio frantoio",
    "advertiser": "Olio frantoio"
  },
  {
    "name": "Ricoh Docuware",
    "advertiser": "Ricoh"
  },
  {
    "name": "Yooz CPM",
    "advertiser": "Yooz"
  },
  {
    "name": "pompe a chaleur",
    "advertiser": "White Label"
  },
  {
    "name": "Costa Croisieres",
    "advertiser": "Costa Croisieres"
  },
  {
    "name": "Gift Vouchers",
    "advertiser": "White Label"
  },
  {
    "name": "daikin",
    "advertiser": "daikin"
  },
  {
    "name": "mutuelle senior immediate devis",
    "advertiser": "White Label"
  },
  {
    "name": "afi sante",
    "advertiser": "afi sante"
  },
  {
    "name": "Banque et credit",
    "advertiser": "White Label"
  },
  {
    "name": "Piscine",
    "advertiser": "White Label"
  },
  {
    "name": "Telepass end to end CPL",
    "advertiser": "Energia 3c"
  },
  {
    "name": "Eni Plenitude",
    "advertiser": "Eni Plenitude"
  },
  {
    "name": "piu finestre",
    "advertiser": "White Label"
  },
  {
    "name": "Accounting Software",
    "advertiser": "White Label"
  },
  {
    "name": "Tracking // GÃ©olocalisation",
    "advertiser": "White Label"
  },
  {
    "name": "cear",
    "advertiser": "Cear"
  },
  {
    "name": "Divina Pastora Salud",
    "advertiser": "Divina Pastora"
  },
  {
    "name": "Linea directa CPM",
    "advertiser": "Linea directa"
  },
  {
    "name": "Optica 2000",
    "advertiser": "Optica 2000"
  },
  {
    "name": "renault trafic",
    "advertiser": "renault trafic"
  },
  {
    "name": "DKV Integral",
    "advertiser": "DKV"
  },
  {
    "name": "FuneCap",
    "advertiser": "FuneCap"
  },
  {
    "name": "Occhiali24",
    "advertiser": "Occhiali24"
  },
  {
    "name": "leapmotor",
    "advertiser": "leapmotor"
  },
  {
    "name": "Europcar",
    "advertiser": "Europcar"
  },
  {
    "name": "Goldcar",
    "advertiser": "Goldcar"
  },
  {
    "name": "Gafas Steiner",
    "advertiser": "Gafas Steiner"
  },
  {
    "name": "clubmed",
    "advertiser": "clubmed"
  },
  {
    "name": "Genci",
    "advertiser": "Genci"
  },
  {
    "name": "landrover",
    "advertiser": "landrover"
  },
  {
    "name": "decathlon",
    "advertiser": "decathlon"
  },
  {
    "name": "FundaciÃ³n Caixa",
    "advertiser": "FundaciÃ³n Caixa"
  },
  {
    "name": "Climatisation",
    "advertiser": "White Label"
  },
  {
    "name": "Depiltech",
    "advertiser": "Depiltech"
  },
  {
    "name": "metlife",
    "advertiser": "metlife"
  },
  {
    "name": "rachatcredit",
    "advertiser": "White Label"
  },
  {
    "name": "BNL",
    "advertiser": "White Label"
  },
  {
    "name": "Energia Guida Gratuita",
    "advertiser": "White Label"
  },
  {
    "name": "Sicor",
    "advertiser": "White Label"
  },
  {
    "name": "Weekend desk",
    "advertiser": "Weekend desk"
  },
  {
    "name": "OCASO",
    "advertiser": "OCASO"
  },
  {
    "name": "DS AUTO",
    "advertiser": "DS AUTO"
  },
  {
    "name": "IDA",
    "advertiser": "IDA"
  },
  {
    "name": "Epargne",
    "advertiser": "Ã‰pargne&Retraite"
  },
  {
    "name": "mutuelle integrale",
    "advertiser": "White Label"
  },
  {
    "name": "assurance animaux",
    "advertiser": "White Label"
  },
  {
    "name": "Buoni Pasto Restaurant",
    "advertiser": "Edenred"
  },
  {
    "name": "Business alarm",
    "advertiser": "White Label"
  },
  {
    "name": "carte restaurant",
    "advertiser": "White Label"
  },
  {
    "name": "Diesel Emissions Claims",
    "advertiser": "Diesel Claim"
  },
  {
    "name": "EdenRed",
    "advertiser": "Edenred"
  },
  {
    "name": "Energy Supplier",
    "advertiser": "White Label"
  },
  {
    "name": "EPOS - FR",
    "advertiser": "White Label"
  },
  {
    "name": "Fraking Machine",
    "advertiser": "White Label"
  },
  {
    "name": "Magnet Kitchen",
    "advertiser": "Magnet"
  },
  {
    "name": "Sell my car",
    "advertiser": "Car wow"
  },
  {
    "name": "TimVision",
    "advertiser": "Tim"
  },
  {
    "name": "Alarma Segura",
    "advertiser": "White Label"
  },
  {
    "name": "Aseguramos decesos",
    "advertiser": "Aseguramos online"
  },
  {
    "name": "B100 CPM",
    "advertiser": "B100"
  },
  {
    "name": "Masterclass CPM",
    "advertiser": "Digital Group"
  },
  {
    "name": "AutoSecure",
    "advertiser": "White Label"
  },
  {
    "name": "British Gas",
    "advertiser": "British Gas"
  },
  {
    "name": "Car Finance Claim",
    "advertiser": "White Label"
  },
  {
    "name": "Knight knox",
    "advertiser": "Knight knox"
  },
  {
    "name": "North Fox Property Axiom",
    "advertiser": "North Fox Property"
  },
  {
    "name": "PiperDrive",
    "advertiser": "PiperDrive"
  },
  {
    "name": "Shutterly",
    "advertiser": "Shutterly"
  },
  {
    "name": "Hello Fresh",
    "advertiser": "Hello Fresh"
  },
  {
    "name": "Caser General",
    "advertiser": "Caser Seguros"
  },
  {
    "name": "Kpark",
    "advertiser": "Kpark"
  },
  {
    "name": "InterFlora",
    "advertiser": "InterFlora"
  },
  {
    "name": "Toyota",
    "advertiser": "Toyota"
  },
  {
    "name": "Opera San Francisco",
    "advertiser": "Opera San Francesco"
  },
  {
    "name": "Claudie Pierlot",
    "advertiser": "Claudie Pierlot"
  },
  {
    "name": "Aliexpress",
    "advertiser": "Aliexpress"
  },
  {
    "name": "Douche senior",
    "advertiser": "White Label"
  },
  {
    "name": "Expert assur Mutuelle",
    "advertiser": "White Label"
  },
  {
    "name": "Car wow",
    "advertiser": "Car wow"
  },
  {
    "name": "Grohe",
    "advertiser": "Grohe"
  },
  {
    "name": "iCompario B2B",
    "advertiser": "White Label"
  },
  {
    "name": "MG Auto",
    "advertiser": "MG Auto"
  },
  {
    "name": "windows recycling",
    "advertiser": "White Label"
  },
  {
    "name": "Save energy",
    "advertiser": "White Label"
  },
  {
    "name": "MÃ¡sMovil",
    "advertiser": "MÃ¡sMovil"
  },
  {
    "name": "Movistar+ CPC",
    "advertiser": "Movistar"
  },
  {
    "name": "Ariel Clima",
    "advertiser": "White Label"
  },
  {
    "name": "HomePanda",
    "advertiser": "HomePanda"
  },
  {
    "name": "Birchmore Axiom",
    "advertiser": "White Label"
  },
  {
    "name": "Hillarys",
    "advertiser": "Hillarys"
  },
  {
    "name": "Medical Negligence Experts",
    "advertiser": "White Label"
  },
  {
    "name": "Wickes Kitchen",
    "advertiser": "White Label"
  },
  {
    "name": "leclerc energies",
    "advertiser": "leclerc energies"
  },
  {
    "name": "Sabadell",
    "advertiser": "Sabadell"
  },
  {
    "name": "Diblafe",
    "advertiser": "Diblafe"
  },
  {
    "name": "Vodafone",
    "advertiser": "Vodafone"
  },
  {
    "name": "LaFuma",
    "advertiser": "LaFuma"
  },
  {
    "name": "Bmw IX",
    "advertiser": "Bmw"
  },
  {
    "name": "NovaLuz",
    "advertiser": "NovaLuz"
  },
  {
    "name": "Apicil",
    "advertiser": "Apicil"
  },
  {
    "name": "ENGIE my power",
    "advertiser": "ENGIE my power"
  },
  {
    "name": "people & baby",
    "advertiser": "people & baby"
  },
  {
    "name": "Volvo",
    "advertiser": "Volvo"
  },
  {
    "name": "Photovoltaique",
    "advertiser": "White Label"
  },
  {
    "name": "Car Insurance Quote",
    "advertiser": "White Label"
  },
  {
    "name": "Deakin's Yard",
    "advertiser": "Deakin's Yard"
  },
  {
    "name": "deal direct remortage",
    "advertiser": "White Label"
  },
  {
    "name": "Free Boiler",
    "advertiser": "White Label"
  },
  {
    "name": "Police Claims",
    "advertiser": "White Label"
  },
  {
    "name": "Radius Vehicle Tracking",
    "advertiser": "White Label"
  },
  {
    "name": "Serious injury consultants",
    "advertiser": "White Label"
  },
  {
    "name": "Unimercatorum",
    "advertiser": "Unimercatorum"
  },
  {
    "name": "Verisure - UK",
    "advertiser": "Verisure"
  },
  {
    "name": "Doddle Health",
    "advertiser": "Doddle Health"
  },
  {
    "name": "Fuel Card - UK",
    "advertiser": "White Label"
  },
  {
    "name": "National Disrepair Claims",
    "advertiser": "White Label"
  },
  {
    "name": "Nify fifty",
    "advertiser": "Nify fifty"
  },
  {
    "name": "Amazon Code",
    "advertiser": "White Label"
  },
  {
    "name": "Cruz Roja",
    "advertiser": "Cruz Roja"
  },
  {
    "name": "Birchmor",
    "advertiser": "White Label"
  },
  {
    "name": "ONG",
    "advertiser": "White Label"
  },
  {
    "name": "Tim Fibra",
    "advertiser": "Tim"
  },
  {
    "name": "Defensores Legales",
    "advertiser": "White Label"
  },
  {
    "name": "AirZone",
    "advertiser": "White Label"
  },
  {
    "name": "Lissac",
    "advertiser": "Lissac"
  },
  {
    "name": "Sarenza",
    "advertiser": "Sarenza"
  },
  {
    "name": "Vente a la propriete CPC",
    "advertiser": "White Label"
  },
  {
    "name": "Volotea",
    "advertiser": "Volotea"
  }
]

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\data\catalogs\databases.json =====
[
  {
    "id": "gestioncorp",
    "name": "GestionCorp",
    "geo": "ES",
    "dbType": "B2B"
  },
  {
    "id": "gestao-negocios",
    "name": "GestÃ£o NegÃ³cios",
    "geo": "PT",
    "dbType": "B2B"
  },
  {
    "id": "idee-del-giorno",
    "name": "Idee Del Giorno",
    "geo": "IT",
    "dbType": "B2C"
  },
  {
    "id": "coin-affaires",
    "name": "Coin Affaires",
    "geo": "FR",
    "dbType": "B2B"
  },
  {
    "id": "smart-deals",
    "name": "Smart Deals",
    "geo": "ES",
    "dbType": "Mixed"
  },
  {
    "id": "conso-autokoo",
    "name": "Conso-Autokoo",
    "geo": "FR",
    "dbType": "B2C"
  },
  {
    "id": "tuopinion-sms",
    "name": "TuOpinion SMS",
    "geo": "ES",
    "dbType": "B2C"
  },
  {
    "id": "gestione-impresa",
    "name": "Gestione Impresa",
    "geo": "IT",
    "dbType": "B2B"
  },
  {
    "id": "tuopinion",
    "name": "TuOpinion",
    "geo": "ES",
    "dbType": "B2C"
  },
  {
    "id": "canada",
    "name": "Canada",
    "geo": "CA",
    "dbType": "B2B"
  },
  {
    "id": "promomex",
    "name": "PromoMex",
    "geo": "MX",
    "dbType": "B2C"
  },
  {
    "id": "biz-data-hub",
    "name": "Biz Data Hub",
    "geo": "UK",
    "dbType": "B2B"
  },
  {
    "id": "argentina",
    "name": "Argentina",
    "geo": "AR",
    "dbType": "B2B"
  },
  {
    "id": "chile",
    "name": "Chile",
    "geo": "CL",
    "dbType": "B2B"
  },
  {
    "id": "world-scope-deals",
    "name": "World Scope Deals",
    "geo": "MULTI",
    "dbType": "Mixed"
  },
  {
    "id": "conso-enquete",
    "name": "Conso EnquÃªte",
    "geo": "FR",
    "dbType": "B2C"
  },
  {
    "id": "autokoo",
    "name": "Autokoo",
    "geo": "FR",
    "dbType": "B2C"
  },
  {
    "id": "markt-fusion",
    "name": "Markt Fusion",
    "geo": "BE",
    "dbType": "B2B"
  },
  {
    "id": "nexo-profesional",
    "name": "Nexo Profesional",
    "geo": "ES",
    "dbType": "B2B"
  },
  {
    "id": "brit-consumer-net",
    "name": "Brit Consumer Net",
    "geo": "UK",
    "dbType": "B2C"
  },
  {
    "id": "vida-conexao",
    "name": "Vida ConexÃ£o",
    "geo": "PT",
    "dbType": "B2C"
  },
  {
    "id": "datavision",
    "name": "Datavision",
    "geo": "FR",
    "dbType": "B2C"
  },
  {
    "id": "connessione-clienti",
    "name": "Connessione Clienti",
    "geo": "IT",
    "dbType": "B2C"
  },
  {
    "id": "rete-aziendale",
    "name": "Rete Aziendale",
    "geo": "IT",
    "dbType": "B2B"
  },
  {
    "id": "sconti-subito",
    "name": "Sconti Subito",
    "geo": "IT",
    "dbType": "B2C"
  },
  {
    "id": "solucoes-pro",
    "name": "SoluÃ§Ãµes pro",
    "geo": "PT",
    "dbType": "B2B"
  },
  {
    "id": "netherlands",
    "name": "Netherlands",
    "geo": "NL",
    "dbType": "B2B"
  },
  {
    "id": "ireland",
    "name": "Ireland",
    "geo": "IE",
    "dbType": "B2B"
  },
  {
    "id": "poland",
    "name": "Poland",
    "geo": "PL",
    "dbType": "B2B"
  },
  {
    "id": "autcon",
    "name": "Autcon",
    "geo": "FR",
    "dbType": "B2C"
  },
  {
    "id": "belgian-bazaar",
    "name": "Belgian Bazaar",
    "geo": "BE",
    "dbType": "B2C"
  },
  {
    "id": "piazza-digitale",
    "name": "Piazza Digitale",
    "geo": "IT",
    "dbType": "B2C"
  },
  {
    "id": "impresa-connect",
    "name": "Impresa Connect",
    "geo": "IT",
    "dbType": "B2B"
  },
  {
    "id": "greengo",
    "name": "Greengo",
    "geo": "IT",
    "dbType": "B2C"
  },
  {
    "id": "gestao-negocios-b2b-pt",
    "name": "GestÃ£o NegÃ³cios B2B PT",
    "geo": "PT",
    "dbType": "B2B"
  },
  {
    "id": "solucoes-pro-2",
    "name": "SoluÃ§Ãµes Pro",
    "geo": "PT",
    "dbType": "B2B"
  },
  {
    "id": "redcom",
    "name": "RedCom",
    "geo": "ES",
    "dbType": "B2B"
  },
  {
    "id": "the-coupon-party",
    "name": "The coupon party",
    "geo": "FR",
    "dbType": "B2C"
  },
  {
    "id": "synercom",
    "name": "SynerCom",
    "geo": "FR",
    "dbType": "B2B"
  }
]

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\data\catalogs\invoice_rules.json =====
[
  { "geo": "FR", "partner": "Oceads", "office": "CAR" },
  { "partner": "Feebbo", "office": "DAT" },
  { "geo": "UK", "office": "CAR" }
]

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\data\catalogs\partners.json =====
[
  {
    "name": "Adkomo",
    "invoiceOffice": "CAR"
  },
  {
    "name": "ADS Enterprise",
    "invoiceOffice": "CAR"
  },
  {
    "name": "Companeo",
    "invoiceOffice": "CAR"
  },
  {
    "name": "Dataventure (Cardata)",
    "invoiceOffice": "Internal"
  },
  {
    "name": "nova digital",
    "invoiceOffice": "CAR"
  },
  {
    "name": "Oceads",
    "invoiceOffice": "CAR"
  },
  {
    "name": "Swarmiz",
    "invoiceOffice": "CAR"
  },
  {
    "name": "TimeOne Performance",
    "invoiceOffice": "CAR"
  },
  {
    "name": "Weedoit",
    "invoiceOffice": "CAR"
  },
  {
    "name": "Across",
    "invoiceOffice": "DAT"
  },
  {
    "name": "Adpepper",
    "invoiceOffice": "DAT"
  },
  {
    "name": "Dataventure (Adventure Conseil)",
    "invoiceOffice": "Internal"
  },
  {
    "name": "Dataventure (Datawork Marketing)",
    "invoiceOffice": "Internal"
  },
  {
    "name": "Feebbo",
    "invoiceOffice": "DAT"
  },
  {
    "name": "Media Adgo",
    "invoiceOffice": "DAT"
  },
  {
    "name": "RePublish",
    "invoiceOffice": "DAT"
  },
  {
    "name": "Startend Marketing",
    "invoiceOffice": "DAT"
  },
  {
    "name": "Mailxpertise (Routing Costs)",
    "invoiceOffice": "CAR"
  },
  {
    "name": "Webdataconsulting",
    "invoiceOffice": "CAR"
  },
  {
    "name": "CleverAd",
    "invoiceOffice": "DAT"
  },
  {
    "name": "Cognetrix Global",
    "invoiceOffice": "DAT"
  },
  {
    "name": "Loud Europe",
    "invoiceOffice": "DAT"
  },
  {
    "name": "Lovvis Advertising SL",
    "invoiceOffice": "DAT"
  },
  {
    "name": "leadiya",
    "invoiceOffice": "CAR"
  },
  {
    "name": "digitalmedia",
    "invoiceOffice": "DAT"
  },
  {
    "name": "LetsRockData",
    "invoiceOffice": "DAT"
  },
  {
    "name": "Kwanko",
    "invoiceOffice": "CAR"
  }
]

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\data\catalogs\themes.json =====
[
  {
    "label": "Insurance"
  },
  {
    "label": "Home Improvement & Maintenance"
  },
  {
    "label": "Energy & Utilities"
  },
  {
    "label": "Services"
  },
  {
    "label": "Travel & Tourism"
  },
  {
    "label": "Food & Beverages"
  },
  {
    "label": "Automotive"
  },
  {
    "label": "Beauty & Personal Care"
  },
  {
    "label": "Banking & Finance"
  },
  {
    "label": "Jobs & Education"
  },
  {
    "label": "Investments & Savings"
  },
  {
    "label": "Fashion & Accessories"
  },
  {
    "label": "Health & Wellness"
  },
  {
    "label": "Home & Decoration"
  },
  {
    "label": "Hi-Tech & Gadgets"
  },
  {
    "label": "Community & Social Causes"
  },
  {
    "label": "E-commerce & Shopping"
  },
  {
    "label": "Mutuelle"
  },
  {
    "label": "Emploi & formation"
  },
  {
    "label": "Cars & vehicules"
  },
  {
    "label": "Health"
  },
  {
    "label": "Hi-Tech"
  },
  {
    "label": "Assurance"
  },
  {
    "label": "Unknown"
  },
  {
    "label": "Banking"
  },
  {
    "label": "Beauty"
  },
  {
    "label": "Culture & loisirs"
  },
  {
    "label": "Credits"
  },
  {
    "label": "Travel"
  },
  {
    "label": "Forex"
  },
  {
    "label": "Casino & Games"
  },
  {
    "label": "Travaux & entretien"
  },
  {
    "label": "Community"
  },
  {
    "label": "Defisc & investissement"
  },
  {
    "label": "Welcome Pack"
  },
  {
    "label": "Voyance"
  }
]

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\hooks\useCampaignFilterEngine.ts =====
// hooks/useCampaignFilterEngine.ts
'use client';

import { useMemo, useState, useTransition, useCallback } from 'react';
import type { CampaignRow } from '@/types/campaign';
import { useDebouncedValue } from '@/hooks/useDebouncedValue';
import { useNormalizedCampaignRows, type NormalizedCampaignRow } from '@/hooks/useNormalizedCampaignRows';
import { buildIndexes, type CampaignIndexes } from '@/lib/indexes';
import {
  useFilterPredicates,
  type Filters as RawFilters,
  type UseFilterPredicatesResult,
} from '@/hooks/useFilterPredicates';

export type Filters = RawFilters;

export const defaultFilters: Filters = {
  q: '',
  partners: [],
  themes: [],
  databases: [],
  types: [],
  geos: [],
  dbTypes: [],
  invoiceOffices: [],
  monthRange: undefined,
  dateRange: undefined,
  priceMin: null,
  priceMax: null,
  marginSign: undefined,
};

export type UseCampaignFilterEngineResult = {
  // estado de filtros
  filters: Filters;
  setFilters: React.Dispatch<React.SetStateAction<Filters>>;
  updateFilters: (patch: Partial<Filters>) => void;
  resetFilters: () => void;

  // derivadas
  qDebounced: string;
  normalizedRows: NormalizedCampaignRow[];
  indexes: CampaignIndexes;

  // resultado
  filteredRows: NormalizedCampaignRow[];
  totals: UseFilterPredicatesResult['totals'];
  predicate: UseFilterPredicatesResult['predicate'];

  // UX
  pending: boolean; // true mientras recalculamos bajo startTransition
};

export function useCampaignFilterEngine(
  rows: CampaignRow[],
  opts?: {
    initial?: Partial<Filters>;
    debounceMs?: number;
  }
): UseCampaignFilterEngineResult {
  const debounceMs = opts?.debounceMs ?? 300;

  // 1) estado de filtros
  const [filters, setFilters] = useState<Filters>(() => ({
    ...defaultFilters,
    ...(opts?.initial || {}),
  }));

  // 2) transiciÃ³n para evitar jank en recomputos pesados
  const [pending, startTransition] = useTransition();

  // 3) debounced search
  const qDebounced = useDebouncedValue(filters.q ?? '', debounceMs);

  // 4) normalizaciÃ³n Ãºnica por fila (strings lower/trim/sin acentos + monthKey, nTextâ€¦)
  const normalizedRows = useNormalizedCampaignRows(rows);

  // 5) Ã­ndices por columna (partner/theme/database/type/geo/dbType/invoice/month)
  const indexes = useMemo<CampaignIndexes>(() => buildIndexes(normalizedRows), [normalizedRows]);

  // 6) filtros efectivos (sustituimos q por su versiÃ³n debounced)
  const effectiveFilters: Filters = useMemo(
    () => ({ ...filters, q: qDebounced }),
    [filters, qDebounced]
  );

  // 7) pasada Ãºnica con predicados + acumulaciÃ³n de totales
  const { filteredRows, totals, predicate } = useFilterPredicates({
    rows: normalizedRows,
    indexes,
    filters: effectiveFilters,
  });

  // 8) helpers de mutaciÃ³n (agrupan cambios y usan transiciÃ³n)
  const updateFilters = useCallback((patch: Partial<Filters>) => {
    startTransition(() => {
      setFilters(prev => ({ ...prev, ...patch }));
    });
  }, [startTransition]);

  const resetFilters = useCallback(() => {
    startTransition(() => setFilters(defaultFilters));
  }, [startTransition]);

  return {
    filters,
    setFilters,      // por si necesitas un control mÃ¡s fino
    updateFilters,   // recomendado para cambios desde la UI
    resetFilters,

    qDebounced,
    normalizedRows,
    indexes,

    filteredRows,
    totals,
    predicate,

    pending,
  };
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\hooks\useCatalogs.ts =====
export { useCatalogs } from '@/context/CatalogOverridesContext';

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\hooks\useDebouncedValue.ts =====
// hooks/useDebouncedValue.ts
'use client';

import { useEffect, useRef, useState } from 'react';

/**
 * Devuelve una versiÃ³n "debounced" del valor.
 * Ãštil para bÃºsquedas: evita recomputar en cada tecla.
 *
 * @param value Valor de entrada (cualquier tipo)
 * @param delay Retardo en ms (por defecto 300ms)
 */
export function useDebouncedValue<T>(value: T, delay = 300): T {
  const [debounced, setDebounced] = useState<T>(value);
  const firstRun = useRef(true);

  useEffect(() => {
    // Evita el retardo en el primer render para que la UI pinte rÃ¡pido
    if (firstRun.current) {
      firstRun.current = false;
      setDebounced(value);
      return;
    }

    const id = window.setTimeout(() => setDebounced(value), Math.max(0, delay));
    return () => window.clearTimeout(id);
  }, [value, delay]);

  return debounced;
}

export default useDebouncedValue;

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\hooks\useFilterPredicates.ts =====
// hooks/useFilterPredicates.ts
'use client';

import { useMemo } from 'react';
import type { NormalizedCampaignRow } from '@/hooks/useNormalizedCampaignRows';
import { normalizeString } from '@/lib/strings';
import {
  buildIndexes as _noopBuild, // tip aid
  filterByIndexSet,
  intersectSets,
  setForSelection,
  type CampaignIndexes,
} from '@/lib/indexes';

export type Filters = {
  // texto libre (ya puedes pasar aquÃ­ el valor "debounced")
  q?: string;

  // multi-selects
  partners?: string[];
  themes?: string[];
  databases?: string[];
  types?: string[];
  geos?: string[];
  dbTypes?: Array<'B2B' | 'B2C' | 'Mixed'>;
  invoiceOffices?: Array<'DAT' | 'CAR' | 'INT'>;

  // rangos temporales
  /** YYYY-MM inclusive */
  monthRange?: [string | null | undefined, string | null | undefined];
  /** YYYY-MM-DD inclusive (tiene prioridad sobre monthRange si ambos existen) */
  dateRange?: [string | null | undefined, string | null | undefined];

  // numÃ©ricos
  priceMin?: number | null;
  priceMax?: number | null;
  /** -1 -> negativos, 0 -> ~0, 1 -> positivos */
  marginSign?: -1 | 0 | 1;
};

export type Totals = {
  count: number;
  vSent: number;
  qty: number;
  turnover: number;
  margin: number;
  ecpm: number; // ponderado por vSent
};

export type UseFilterPredicatesResult = {
  filteredRows: NormalizedCampaignRow[];
  totals: Totals;
  /** Predicado de depuraciÃ³n (el usado en la pasada final) */
  predicate: (r: NormalizedCampaignRow) => boolean;
};

/** Util: comprueba ISO date (YYYY-MM-DD) y compara lexicogrÃ¡ficamente */
function inIsoDateRange(dateISO: string, from?: string | null, to?: string | null): boolean {
  const d = (dateISO || '').slice(0, 10);
  if (!d) return false;
  if (from && d < from) return false;
  if (to && d > to) return false;
  return true;
}

/** Genera meses YYYY-MM entre lÃ­mites (inclusive) */
function enumerateMonths(a?: string | null, b?: string | null): string[] {
  const start = (a || '').slice(0, 7);
  const end = (b || '').slice(0, 7);
  if (!start && !end) return [];
  const s = start || end;
  const e = end || start;
  if (!s || !e) return [s || e].filter(Boolean) as string[];

  const [sy, sm] = s.split('-').map(Number);
  const [ey, em] = e.split('-').map(Number);
  let y = sy, m = sm;
  const out: string[] = [];
  while (y < ey || (y === ey && m <= em)) {
    out.push(`${y.toString().padStart(4, '0')}-${m.toString().padStart(2, '0')}`);
    m++;
    if (m > 12) { m = 1; y++; }
  }
  return out;
}

/** Crea un matcher de texto: todas las palabras deben aparecer en nText */
function makeTextMatcher(q?: string): ((row: NormalizedCampaignRow) => boolean) | null {
  const norm = normalizeString(q || '');
  if (!norm) return null;
  const tokens = norm.split(/\s+/).filter(Boolean);
  if (!tokens.length) return null;
  return (row: any) => {
    const haystack: string =
      row.nText ||
      normalizeString(
        [
          row.campaign, row.advertiser, row.partner, row.theme,
          row.database, row.type, row.geo, row.invoiceOffice,
        ]
          .filter(Boolean)
          .join(' '),
      );
    for (const tk of tokens) {
      if (!haystack.includes(tk)) return false;
    }
    return true;
  };
}

function signOf(n: number): -1 | 0 | 1 {
  if (Object.is(n, -0)) return 0;
  if (Math.abs(n) < 1e-9) return 0;
  return n > 0 ? 1 : -1;
}

export function useFilterPredicates({
  rows,
  indexes,
  filters,
}: {
  rows: NormalizedCampaignRow[];
  indexes: CampaignIndexes;
  filters: Filters;
}): UseFilterPredicatesResult {
  // Memo de normalizados/estructuras derivadas de filtros
  const {
    q,
    partners, themes, databases, types, geos, dbTypes, invoiceOffices,
    dateRange, monthRange,
    priceMin, priceMax, marginSign,
  } = filters;

  const textMatcher = useMemo(() => makeTextMatcher(q), [q]);

  // 1) IntersecciÃ³n por Ã­ndices (OR dentro de cada dimensiÃ³n; AND entre dimensiones)
  const candidateIdxSet = useMemo(() => {
    // Dimensiones categÃ³ricas indexadas
    const byPartner = setForSelection(indexes.byPartner, partners);
    const byTheme = setForSelection(indexes.byTheme, themes);
    const byDatabase = setForSelection(indexes.byDatabase, databases);
    const byType = setForSelection(indexes.byType, types);
    const byGeo = setForSelection(indexes.byGeo, geos);
    const byDbType = setForSelection(indexes.byDbType, dbTypes as string[] | undefined);
    const byInv = setForSelection(indexes.byInvoiceOffice, invoiceOffices as string[] | undefined);

    // Rango por meses: union de meses -> otro set OR que intersectaremos
    let byMonth: Set<number> | null = null;
    if (!dateRange && monthRange) {
      const [mFrom, mTo] = monthRange;
      const months = enumerateMonths(mFrom, mTo);
      const monthSets = months.map((m) => indexes.byMonth.get(normalizeString(m))).filter(Boolean) as Set<number>[];
      byMonth = monthSets.length ? (monthSets.length === 1 ? monthSets[0] : (monthSets.reduce((acc, s) => {
        const out = new Set<number>(acc);
        for (const v of s) out.add(v);
        return out;
      }))) : new Set<number>();
    }

    // Si ninguna dimensiÃ³n estÃ¡ activa, devolvemos null para indicar "sin restricciÃ³n previa"
    const dims = [byPartner, byTheme, byDatabase, byType, byGeo, byDbType, byInv, byMonth];
    const hasAnyDim = dims.some((s) => s && s.size >= 0); // size>=0 permite el caso 'vacÃ­o' (que debe vaciar el resultado)
    if (!hasAnyDim) return null;

    // Si alguna dimensiÃ³n produjo set vacÃ­o -> no hay matches
    for (const s of dims) {
      if (s && s.size === 0) return new Set<number>();
    }

    // IntersecciÃ³n de todas las dimensiones activas
    const inter = intersectSets(dims.filter(Boolean) as Set<number>[]);
    return inter;
  }, [
    indexes,
    partners, themes, databases, types, geos, dbTypes, invoiceOffices,
    monthRange, dateRange,
  ]);

  // 2) Pasada final: aplica texto, rango fecha (ISO), numÃ©ricos y acumula totales
  const { filteredRows, totals, predicate } = useMemo(() => {
    const pred = (r: NormalizedCampaignRow): boolean => {
      // 2.a) pre-candidate por Ã­ndices (si existen)
      // map rows->idx: usamos posiciÃ³n actual del array
      // (candidateIdxSet === null) => no restricciÃ³n previa
      if (candidateIdxSet && candidateIdxSet.size && !candidateIdxSet.has((r as any).__rowIndex ?? -1)) {
        return false;
      }

      // 2.b) filtros de fecha (si hay dateRange tiene prioridad sobre monthRange)
      if (dateRange && (dateRange[0] || dateRange[1])) {
        if (!inIsoDateRange(r.date, dateRange[0] || undefined, dateRange[1] || undefined)) return false;
      } else if (monthRange && (monthRange[0] || monthRange[1])) {
        const month = (r as any).monthKey || (r.date || '').slice(0, 7);
        const [mFrom, mTo] = monthRange;
        const ms = enumerateMonths(mFrom, mTo);
        const want = new Set(ms.map(normalizeString));
        if (!want.has(normalizeString(month))) return false;
      }

      // 2.c) texto
      if (textMatcher && !textMatcher(r as any)) return false;

      // 2.d) numÃ©ricos
      if (priceMin != null && r.price < priceMin) return false;
      if (priceMax != null && r.price > priceMax) return false;
      if (marginSign != null) {
        const s = signOf(r.margin);
        if (s !== marginSign) return false;
      }

      return true;
    };

    const out: NormalizedCampaignRow[] = [];
    let vSent = 0, qty = 0, turnover = 0, margin = 0;

    // recorremos una sola vez
    for (let i = 0; i < rows.length; i++) {
      const r = rows[i] as any;
      // anotamos index para la comprobaciÃ³n candidateIdxSet (sin mutar el objeto â€œrealâ€)
      r.__rowIndex = i;
      if (!pred(r)) continue;
      out.push(r);
      vSent += r.vSent || 0;
      qty += r.qty || 0;
      turnover += r.turnover || 0;
      margin += r.margin || 0;
    }

    const ecpm = vSent > 0 ? (turnover / vSent) * 1000 : 0;
    const t: Totals = {
      count: out.length,
      vSent,
      qty,
      turnover: Number(turnover.toFixed(2)),
      margin: Number(margin.toFixed(2)),
      ecpm: Number(ecpm.toFixed(2)),
    };

    return { filteredRows: out as NormalizedCampaignRow[], totals: t, predicate: pred };
  }, [rows, candidateIdxSet, textMatcher, dateRange, monthRange, priceMin, priceMax, marginSign]);

  return { filteredRows, totals, predicate };
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\hooks\useNormalizedCampaignRows.ts =====
// hooks/useNormalizedCampaignRows.ts
'use client';

import { useMemo } from 'react';
import { useCampaignData } from '@/context/CampaignDataContext';
import type { RowWithIdx } from '@/types/campaign';
import { normalizeStr, normalizeForSearch, toMonthKey } from '@/lib/strings';

export type NormalizedCampaignRow = RowWithIdx & {
  norm: {
    date: string;         // "2025-07-01"
    month: string;        // "2025-07"
    campaign: string;
    advertiser: string;
    partner: string;
    theme: string;
    type: string;
    database: string;
    geo: string;
    databaseType: string;
    invoiceOffice: string;
    priceCurrency: string;
    blob: string;         // concatenaciÃ³n para bÃºsqueda rÃ¡pida
  };
};

/**
 * Devuelve las filas con campos ya normalizados para filtros/bÃºsqueda.
 * Se recalcula SOLO cuando cambian las `rows` del store.
 */
export function useNormalizedCampaignRows(): NormalizedCampaignRow[] {
  const { rows } = useCampaignData();

  const normalized = useMemo<NormalizedCampaignRow[]>(() => {
    return rows.map((r) => {
      const nCampaign      = normalizeStr(r.campaign);
      const nAdvertiser    = normalizeStr(r.advertiser);
      const nPartner       = normalizeStr(r.partner);
      const nTheme         = normalizeStr(r.theme);
      const nType          = normalizeStr(r.type);
      const nDatabase      = normalizeStr(r.database);
      const nGeo           = normalizeStr(r.geo);
      const nDbType        = normalizeStr(r.databaseType);
      const nInvoiceOffice = normalizeStr(r.invoiceOffice);
      const nCurrency      = normalizeStr(r.priceCurrency);

      // Blob para bÃºsqueda libre
      const blob = normalizeForSearch(
        [
          r.campaign,
          r.advertiser,
          r.partner,
          r.theme,
          r.type,
          r.database,
          r.geo,
          r.databaseType,
          r.invoiceOffice,
        ].join(' | ')
      );

      return {
        ...r,
        norm: {
          date: r.date,
          month: toMonthKey(r.date),
          campaign: nCampaign,
          advertiser: nAdvertiser,
          partner: nPartner,
          theme: nTheme,
          type: nType,
          database: nDatabase,
          geo: nGeo,
          databaseType: nDbType,
          invoiceOffice: nInvoiceOffice,
          priceCurrency: nCurrency,
          blob,
        },
      };
    });
  }, [rows]);

  return normalized;
}

export default useNormalizedCampaignRows;

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\hooks\useReportData.ts =====
// hooks/useReportData.ts
'use client';

import { useMemo, useState, useCallback } from 'react';
import { addDays, parseISO, format, differenceInDays } from 'date-fns';
import { useCampaignData } from '@/context/CampaignDataContext';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';
import type {
  ReportFilters,
  GroupBy,
  Metric,
  AggregateRow,
  TrendPoint,
} from '@/types/reports';

/** Entrada opcional del hook (todas las props son iniciales) */
type UseReportParams = {
  groupBy?: GroupBy;
  metric?: Metric;
  topN?: number;
  filters?: ReportFilters;
};

type TrendMetric = 'ecpm' | 'turnover' | 'margin' | 'marginPct' | 'vSent';

/** Serie para charts de lÃ­neas */
type TrendSeries = {
  data: Array<Record<string, number | string>>;
  keys: string[];
};

/** Args del generador de series unificado */
type MakeTrendArgs = {
  metric?: TrendMetric;                            // mÃ©trica a graficar
  by?: 'none' | 'database' | 'partner' | 'geo';    // agrupaciÃ³n por lÃ­nea
  topN?: number;                                   // nÂº de lÃ­neas Top
  includeOthers?: boolean;                         // incluir "Others"
  only?: string[];                                 // foco: restringe a estas claves
  bucket?: 'auto' | 'day' | 'month';               // agrupaciÃ³n temporal
};

/** Resultado del hook */
export type UseReportDataResult = {
  // estado + setters
  filters: ReportFilters;
  setFilters: (next: ReportFilters | ((prev: ReportFilters) => ReportFilters)) => void;

  groupBy: GroupBy;
  setGroupBy: (g: GroupBy) => void;

  metric: Metric;
  setMetric: (m: Metric) => void;

  topN: number;
  setTopN: (n: number) => void;

  // datos derivados
  ranking: AggregateRow[];      // Top-N ya cortado
  fullRanking: AggregateRow[];  // ranking completo (para export/paginaciÃ³n)
  ecpmTrend: TrendPoint[];      // serie temporal eCPM ponderado

  summary: {
    totals: { vSent: number; turnover: number; margin: number; ecpm: number; marginPct: number | null };
    filteredRows: number; // nÂº filas tras filtro
    groups: number;       // nÂº grupos tras agregaciÃ³n (antes de cortar TopN)
  };

  // helpers
  quickLast30: () => void;

  // generadores de series
  makeTrendSeries: (opts?: MakeTrendArgs) => TrendSeries;
  makeTurnoverSeries: (opts?: Omit<MakeTrendArgs, 'metric'>) => TrendSeries;

  // utilidades
  listAvailableKeys: (by: 'database' | 'partner' | 'geo') => string[];

  // NUEVO: agregador genÃ©rico de totales sobre el dataset filtrado (con predicado opcional)
  computeTotals: (predicate?: (row: any) => boolean) => {
    vSent: number; turnover: number; margin: number; ecpm: number; marginPct: number | null; count: number;
  };
};

const normalizeStr = (s?: string) => (s ?? '').trim();
const lc = (s?: string) => normalizeStr(s).toLowerCase();

/** Predicado de fecha inclusivo (strings ISO yyyy-mm-dd) */
function within(dateISO: string, from?: string, to?: string) {
  if (!from && !to) return true;
  if (from && dateISO < from) return false;
  if (to && dateISO > to) return false;
  return true;
}

export function useReportData(params: UseReportParams = {}): UseReportDataResult {
  const { rows } = useCampaignData();
  const { PARTNERS } = useCatalogOverrides();

  // -------- iniciales seguros
  const initialGroupBy: GroupBy = params.groupBy ?? 'database';
  const initialMetric:  Metric  = params.metric  ?? 'margin';
  const initialTopN             = Math.max(1, Math.min(50, params.topN ?? 10));
  const initialFilters: ReportFilters = params.filters ?? {};

  // -------- estado controlado
  const [groupBy, setGroupBy] = useState<GroupBy>(initialGroupBy);
  const [metric, setMetric]   = useState<Metric>(initialMetric);
  const [topN, setTopN]       = useState<number>(initialTopN);
  const [filters, setFilters] = useState<ReportFilters>(initialFilters);

  // -------- sets normalizados para filtros
  const sets = useMemo(() => {
    const toSetLC = (arr?: string[]) => new Set((arr ?? []).map((s) => lc(s)));
    const toSetUP = (arr?: string[]) => new Set((arr ?? []).map((s) => normalizeStr(s).toUpperCase()));

    const internalPartnerNamesLC = new Set(
      PARTNERS.filter((p) => p.isInternal).map((p) => lc(p.name)),
    );

    return {
      geos: toSetUP(filters.geos),
      partners: toSetLC(filters.partners),
      campaigns: toSetLC(filters.campaigns),
      advertisers: toSetLC(filters.advertisers),
      themes: toSetLC(filters.themes),
      databases: toSetLC(filters.databases),
      types: new Set(filters.types ?? []),               // union ya vÃ¡lida
      dbTypes: new Set(filters.databaseTypes ?? []),     // union ya vÃ¡lida
      onlyInternalPartners: !!filters.onlyInternalPartners,
      internalPartnerNamesLC,
    };
  }, [filters, PARTNERS]);

  // -------- 1) Filtrado fila a fila
  const filtered = useMemo(() => {
    const f = filters;
    const s = sets;

    return rows.filter((r) => {
      // fechas
      if (!within(r.date, f.from, f.to)) return false;

      // GEO
      if (s.geos.size && !s.geos.has((r.geo || '').toUpperCase())) return false;

      // Partner (incluye flag "solo internos")
      const partnerLC = lc(r.partner);
      if (s.onlyInternalPartners && !s.internalPartnerNamesLC.has(partnerLC)) return false;
      if (s.partners.size && !s.partners.has(partnerLC)) return false;

      // Campaign / Advertiser / Theme / Database
      if (s.campaigns.size && !s.campaigns.has(lc(r.campaign))) return false;
      if (s.advertisers.size && !s.advertisers.has(lc(r.advertiser))) return false;
      if (s.themes.size && !s.themes.has(lc(r.theme))) return false;
      if (s.databases.size && !s.databases.has(lc(r.database))) return false;

      // Type / DBType
      if (s.types.size && !s.types.has(r.type)) return false;
      if (s.dbTypes.size && !s.dbTypes.has(r.databaseType)) return false;

      return true;
    });
  }, [rows, filters, sets]);

  // -------- 2) KPIs globales
  const totals = useMemo(() => {
    let vSent = 0, turnover = 0, margin = 0, wEcpm = 0;

    for (const r of filtered) {
      vSent     += r.vSent || 0;
      turnover  += r.turnover || 0;
      margin    += r.margin || 0;
      wEcpm     += (r.ecpm || 0) * (r.vSent || 0);
    }
    const ecpm = vSent > 0 ? wEcpm / vSent : 0;
    const marginPct = turnover > 0 ? margin / turnover : null;

    return { vSent, turnover, margin, ecpm, marginPct };
  }, [filtered]);

  // -------- 3) AgregaciÃ³n por dimensiÃ³n (groupBy)
  const { fullRanking, groupCount } = useMemo(() => {
    type Acc = {
      key: string;
      label: string;
      vSent: number;
      turnover: number;
      margin: number;
      qty: number;
      _w: number; // peso vSent
      count: number;
    };

    const keyOf = (r: typeof filtered[number]): string => {
      switch (groupBy) {
        case 'database':    return r.database || '(unknown)';
        case 'partner':     return r.partner || '(unknown)';
        case 'campaign':    return r.campaign || '(unknown)';
        case 'advertiser':  return r.advertiser || '(unknown)';
        case 'theme':       return r.theme || '(unknown)';
        case 'geo':         return (r.geo || '(unknown)').toUpperCase();
        case 'type':        return r.type || '(unknown)';
        case 'databaseType':return r.databaseType || '(unknown)';
      }
    };

    const map = new Map<string, Acc>();
    for (const r of filtered) {
      const key = keyOf(r);
      const curr = map.get(key) ?? {
        key, label: key, vSent: 0, turnover: 0, margin: 0, qty: 0, _w: 0, count: 0,
      };
      curr.vSent     += r.vSent || 0;
      curr.turnover  += r.turnover || 0;
      curr.margin    += r.margin || 0;
      curr.qty       += r.qty || 0;
      curr._w        += r.vSent || 0;
      curr.count     += 1;
      map.set(key, curr);
    }

    const arr: AggregateRow[] = Array.from(map.values()).map(a => ({
      key: a.key,
      label: a.label,
      vSent: a.vSent,
      turnover: +a.turnover.toFixed(2),
      margin: +a.margin.toFixed(2),
      ecpm: a._w > 0 ? +((a.turnover / a._w) * 1000).toFixed(2) : 0,
      qty: a.qty,
      count: a.count,
    }));

    // ordenar por mÃ©trica y por label como desempate estable
    arr.sort((x, y) => {
      const d = (y as any)[metric] - (x as any)[metric];
      return d !== 0 ? d : x.label.localeCompare(y.label, 'es');
    });

    return { fullRanking: arr, groupCount: arr.length };
  }, [filtered, groupBy, metric]);

  // -------- 4) Top-N
  const ranking = useMemo<AggregateRow[]>(() => fullRanking.slice(0, topN), [fullRanking, topN]);

  // -------- 5) Serie temporal (eCPM ponderado por dÃ­a) [legacy: eCPM]
  const ecpmTrend = useMemo<TrendPoint[]>(() => {
    const map = new Map<string, { vSent: number; turnover: number }>();
    for (const r of filtered) {
      const key = r.date;
      const curr = map.get(key) ?? { vSent: 0, turnover: 0 };
      curr.vSent    += r.vSent || 0;
      curr.turnover += r.turnover || 0;
      map.set(key, curr);
    }
    return Array.from(map.entries())
      .map(([date, v]) => ({
        date,
        vSent: v.vSent,
        turnover: +v.turnover.toFixed(2),
        ecpm: v.vSent > 0 ? +((v.turnover / v.vSent) * 1000).toFixed(2) : 0,
      }))
      .sort((a, b) => a.date.localeCompare(b.date));
  }, [filtered]);

  // -------- Lista de claves disponibles para un agrupador (para Focus)
  const listAvailableKeys = useCallback((by: 'database' | 'partner' | 'geo'): string[] => {
    const s = new Set<string>();
    for (const r of filtered) {
      if (by === 'database') s.add((r.database || '(unknown)').trim());
      else if (by === 'partner') s.add((r.partner || '(unknown)').trim());
      else if (by === 'geo') s.add((r.geo || '(unknown)').toUpperCase());
    }
    return Array.from(s).sort((a, b) => a.localeCompare(b, 'es'));
  }, [filtered]);

  // -------- Generador de series UNIFICADO
  const makeTrendSeries = useCallback((opts?: MakeTrendArgs): TrendSeries => {
    const metric: TrendMetric = opts?.metric ?? 'turnover';
    const by = opts?.by ?? 'none';
    const includeOthers = opts?.includeOthers ?? true;
    const only = (opts?.only ?? []).map(s => s.trim()).filter(Boolean);
    const top = Math.max(1, Math.min(20, opts?.topN ?? 5));

    // bucket temporal: auto => month si rango > 45 dÃ­as
    let bucket: 'day' | 'month' = 'day';
    if (opts?.bucket === 'month') bucket = 'month';
    else if (opts?.bucket === 'day') bucket = 'day';
    else {
      // auto
      if (filtered.length > 1) {
        const min = filtered.reduce((m, r) => (r.date < m ? r.date : m), filtered[0].date);
        const max = filtered.reduce((m, r) => (r.date > m ? r.date : m), filtered[0].date);
        const days = differenceInDays(parseISO(max), parseISO(min));
        if (days > 45) bucket = 'month';
      }
    }

    const bucketKey = (d: string) => bucket === 'month'
      ? format(parseISO(d), 'yyyy-MM')
      : d;

    type Sum = { v: number; t: number; m: number };
    const keyOf = (r: typeof filtered[number]) => {
      if (by === 'database') return (r.database || '(unknown)').trim();
      if (by === 'partner')  return (r.partner || '(unknown)').trim();
      if (by === 'geo')      return (r.geo || '(unknown)').toUpperCase();
      return 'total';
    };

    if (by === 'none') {
      // una sola serie "total"
      const map = new Map<string, Sum>();
      for (const r of filtered) {
        const b = bucketKey(r.date);
        const s = map.get(b) ?? { v: 0, t: 0, m: 0 };
        s.v += r.vSent || 0;
        s.t += r.turnover || 0;
        s.m += r.margin || 0;
        map.set(b, s);
      }
      const data = Array.from(map.entries())
        .sort(([a], [b]) => a.localeCompare(b))
        .map(([date, s]) => {
          const row: Record<string, number | string> = { date };
          let val = 0;
          if (metric === 'vSent') val = s.v;
          else if (metric === 'turnover') val = +s.t.toFixed(2);
          else if (metric === 'margin') val = +s.m.toFixed(2);
          else if (metric === 'ecpm') val = s.v > 0 ? +((s.t / s.v) * 1000).toFixed(2) : 0;
          else if (metric === 'marginPct') val = s.t > 0 ? +(s.m / s.t).toFixed(6) : 0; // 0..1
          row['total'] = val;
          return row;
        });
      return { data, keys: ['total'] };
    }

    // Totales por clave (para Top-N si no hay "only")
    const totals = new Map<string, Sum>();
    for (const r of filtered) {
      const k = keyOf(r);
      const s = totals.get(k) ?? { v: 0, t: 0, m: 0 };
      s.v += r.vSent || 0;
      s.t += r.turnover || 0;
      s.m += r.margin || 0;
      totals.set(k, s);
    }

    const useOnly = only.length > 0;
    let keys: string[];
    if (useOnly) {
      const onlySet = new Set(only);
      keys = Array.from(totals.keys()).filter(k => onlySet.has(k));
      if (keys.length === 0) return { data: [], keys: [] };
    } else {
      // rankeamos por turnover acumulado
      const topKeys = Array.from(totals.entries())
        .sort((a, b) => b[1].t - a[1].t)
        .slice(0, top)
        .map(([k]) => k);
      keys = includeOthers ? [...topKeys, 'Others'] : topKeys;
    }
    const topSet = new Set(keys);

    // AgregaciÃ³n por fecha y clave (con Others si aplica)
    const dateMap = new Map<string, Map<string, Sum>>();
    const push = (d: string, k: string, add: Sum) => {
      const inner = dateMap.get(d) ?? new Map<string, Sum>();
      const s = inner.get(k) ?? { v: 0, t: 0, m: 0 };
      s.v += add.v; s.t += add.t; s.m += add.m;
      inner.set(k, s);
      dateMap.set(d, inner);
    };

    for (const r of filtered) {
      const d = bucketKey(r.date);
      const k = keyOf(r);
      const add: Sum = { v: r.vSent || 0, t: r.turnover || 0, m: r.margin || 0 };

      if (useOnly) {
        if (topSet.has(k)) push(d, k, add);
      } else {
        const seriesKey = topSet.has(k) ? k : (includeOthers ? 'Others' : null);
        if (seriesKey) push(d, seriesKey, add);
      }
    }

    const data = Array.from(dateMap.entries())
      .sort(([a], [b]) => a.localeCompare(b))
      .map(([date, inner]) => {
        const row: Record<string, number | string> = { date };
        for (const k of keys) {
          const s = inner.get(k) ?? { v: 0, t: 0, m: 0 };
          let val = 0;
          if (metric === 'vSent') val = s.v;
          else if (metric === 'turnover') val = +s.t.toFixed(2);
          else if (metric === 'margin') val = +s.m.toFixed(2);
          else if (metric === 'ecpm') val = s.v > 0 ? +((s.t / s.v) * 1000).toFixed(2) : 0;
          else if (metric === 'marginPct') val = s.t > 0 ? +(s.m / s.t).toFixed(6) : 0; // 0..1
          row[k] = val;
        }
        return row;
      });

    return { data, keys };
  }, [filtered]);

  // Compat: turnover especÃ­fico
  const makeTurnoverSeries = useCallback(
    (opts?: Omit<MakeTrendArgs, 'metric'>) =>
      makeTrendSeries({ metric: 'turnover', ...opts }),
    [makeTrendSeries]
  );

  // -------- NUEVO: agregador genÃ©rico de totales sobre el "filtered" actual
  const computeTotals = useCallback((
    predicate?: (row: typeof filtered[number]) => boolean
  ) => {
    let vSent = 0, turnover = 0, margin = 0, wEcpm = 0, count = 0;
    for (const r of filtered) {
      if (predicate && !predicate(r)) continue;
      vSent    += r.vSent || 0;
      turnover += r.turnover || 0;
      margin   += r.margin || 0;
      wEcpm    += (r.ecpm || 0) * (r.vSent || 0);
      count++;
    }
    const ecpm = vSent > 0 ? wEcpm / vSent : 0;
    const marginPct = turnover > 0 ? margin / turnover : null;
    return { vSent, turnover, margin, ecpm, marginPct, count };
  }, [filtered]);

  // -------- helper: Ãºltimos 30 dÃ­as respecto al mÃ¡ximo disponible
  const quickLast30 = useCallback(() => {
    const max = rows.reduce(
      (m, r) => (r.date > m ? r.date : m),
      rows[0]?.date ?? new Date().toISOString().slice(0, 10),
    );
    const fromDate = format(addDays(parseISO(max), -29), 'yyyy-MM-dd');
    setFilters(prev => ({ ...prev, from: fromDate, to: max }));
  }, [rows, setFilters]);

  // -------- resumen para cabeceras
  const summary = useMemo(() => ({
    totals,
    filteredRows: filtered.length,
    groups: groupCount,
  }), [totals, filtered.length, groupCount]);

  return {
    // estado
    filters, setFilters,
    groupBy, setGroupBy,
    metric, setMetric,
    topN, setTopN,

    // datos
    ranking,
    fullRanking,
    ecpmTrend,
    summary,

    // helpers y series
    quickLast30,
    makeTrendSeries,
    makeTurnoverSeries,
    listAvailableKeys,

    // utilidades nuevas
    computeTotals,
  };
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\lib\campaign-calcs.ts =====
// lib/campaign-calcs.ts
import {
  findCampaignByName,
  findDatabaseByName,
  resolveInvoiceOffice,
} from '@/data/reference';

type NumLike = number | null | undefined;

function n2(v: NumLike): number {
  const n = typeof v === 'number' ? v : Number(v ?? 0);
  return Number.isFinite(n) ? n : 0;
}

export function calcDerived(input: { price: NumLike; qty: NumLike; vSent: NumLike }) {
  const price = n2(input.price);
  const qty   = Math.trunc(n2(input.qty));
  const vSent = Math.trunc(n2(input.vSent));

  const routingCosts = Number(((vSent / 1000) * 0.18).toFixed(2));
  const turnover     = Number((qty * price).toFixed(2));
  const margin       = Number((turnover - routingCosts).toFixed(2));
  const ecpm         = Number(((vSent > 0 ? (turnover / vSent) * 1000 : 0)).toFixed(2));
  const marginPct    = turnover > 0 ? Number((margin / turnover).toFixed(4)) : null;

  return { routingCosts, turnover, margin, ecpm, marginPct };
}

export function autoFromCampaign(name?: string) {
  const c = findCampaignByName(name);
  return { advertiser: c?.advertiser ?? '' };
}

export function autoFromDatabase(name?: string) {
  const db = findDatabaseByName(name);
  return { geo: db?.geo ?? '', dbType: (db?.dbType as any) ?? '' };
}

export function autoInvoiceOffice(geo?: string, partner?: string) {
  return resolveInvoiceOffice(geo || undefined, partner || undefined);
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\lib\client.ts =====
'use client';

import { createClient, SupabaseClient } from '@supabase/supabase-js';

let _client: SupabaseClient | null = null;

export function supabaseBrowser(): SupabaseClient {
  if (_client) return _client;
  const url = process.env.NEXT_PUBLIC_SUPABASE_URL!;
  const anon = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
  _client = createClient(url, anon, {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
    },
  });
  return _client;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\lib\indexes.ts =====
// lib/indexes.ts
import type { NormalizedCampaignRow } from '@/hooks/useNormalizedCampaignRows';
import { normalizeString } from '@/lib/strings';

export type ColumnIndex = Map<string, Set<number>>;

export type CampaignIndexes = {
  byPartner: ColumnIndex;
  byTheme: ColumnIndex;
  byDatabase: ColumnIndex;
  byType: ColumnIndex;
  byGeo: ColumnIndex;
  byDbType: ColumnIndex;
  byInvoiceOffice: ColumnIndex;
  byMonth: ColumnIndex; // YYYY-MM
};

/** Util: aÃ±ade un Ã­ndice a un mapa Set<number> */
function addToIndex(map: ColumnIndex, key: string | undefined, idx: number) {
  if (!key) return;
  const k = normalizeString(key);
  if (!k) return;
  let set = map.get(k);
  if (!set) {
    set = new Set<number>();
    map.set(k, set);
  }
  set.add(idx);
}

/** Deriva YYYY-MM con fallback robusto */
function toMonthKey(date: string | undefined): string | undefined {
  if (!date) return undefined;
  const s = String(date).trim();
  if (/^\d{4}-\d{2}-\d{2}$/.test(s)) return s.slice(0, 7);
  if (/^\d{4}-\d{2}$/.test(s)) return s;
  const t = new Date(s);
  if (Number.isFinite(t.getTime())) return t.toISOString().slice(0, 7);
  return undefined;
}

/** Construye todos los Ã­ndices por columna */
export function buildIndexes(rows: NormalizedCampaignRow[]): CampaignIndexes {
  const byPartner: ColumnIndex = new Map();
  const byTheme: ColumnIndex = new Map();
  const byDatabase: ColumnIndex = new Map();
  const byType: ColumnIndex = new Map();
  const byGeo: ColumnIndex = new Map();
  const byDbType: ColumnIndex = new Map();
  const byInvoiceOffice: ColumnIndex = new Map();
  const byMonth: ColumnIndex = new Map();

  rows.forEach((row, i) => {
    // leemos normalizados si existen, si no normalizamos on the fly
    const partner = (row as any).nPartner ?? row.partner;
    const theme = (row as any).nTheme ?? row.theme;
    const database = (row as any).nDatabase ?? row.database;
    const type = (row as any).nType ?? row.type;
    const geo = (row as any).nGeo ?? row.geo;
    const dbType = (row as any).nDbType ?? row.databaseType;
    const invoiceOffice = (row as any).nInvoiceOffice ?? row.invoiceOffice;
    const month = (row as any).monthKey ?? toMonthKey(row.date);

    addToIndex(byPartner, partner, i);
    addToIndex(byTheme, theme, i);
    addToIndex(byDatabase, database, i);
    addToIndex(byType, type, i);
    addToIndex(byGeo, geo, i);
    addToIndex(byDbType, dbType, i);
    addToIndex(byInvoiceOffice, invoiceOffice, i);
    addToIndex(byMonth, month, i);
  });

  return {
    byPartner,
    byTheme,
    byDatabase,
    byType,
    byGeo,
    byDbType,
    byInvoiceOffice,
    byMonth,
  };
}

/* =========================
   Set operations helpers
   ========================= */

/** IntersecciÃ³n de varios sets (optimizada por tamaÃ±o) */
export function intersectSets(sets: Array<Set<number> | undefined | null>): Set<number> {
  const filtered = sets.filter((s): s is Set<number> => !!s && s.size > 0);
  if (filtered.length === 0) return new Set<number>(); // sin restricciÃ³n -> vacÃ­o (Ãºtil para early-bail callers)
  // ordena por tamaÃ±o asc para menos iteraciones
  filtered.sort((a, b) => a.size - b.size);
  const [first, ...rest] = filtered;
  const out = new Set<number>();
  main: for (const v of first) {
    for (const s of rest) {
      if (!s.has(v)) continue main;
    }
    out.add(v);
  }
  return out;
}

/** UniÃ³n de varios sets */
export function unionSets(sets: Array<Set<number> | undefined | null>): Set<number> {
  const out = new Set<number>();
  for (const s of sets) {
    if (!s) continue;
    for (const v of s) out.add(v);
  }
  return out;
}

/** Convierte selecciÃ³n mÃºltiple en un set de Ã­ndices (OR dentro de la dimensiÃ³n) */
export function setForSelection(index: ColumnIndex, selected: string[] | undefined | null): Set<number> | null {
  const arr = (selected || []).map(normalizeString).filter(Boolean);
  if (arr.length === 0) return null; // sin restricciÃ³n
  const sets: Array<Set<number>> = [];
  for (const v of arr) {
    const s = index.get(v);
    if (s && s.size) sets.push(s);
  }
  return sets.length ? unionSets(sets) : new Set<number>(); // selecciÃ³n sin matches -> vacÃ­o
}

/** Filtra filas por un set de Ã­ndices conservando el orden de entrada */
export function filterByIndexSet<T>(rows: T[], idxSet: Set<number>): T[] {
  if (!idxSet.size) return [];
  const out: T[] = [];
  for (let i = 0; i < rows.length; i++) {
    if (idxSet.has(i)) out.push(rows[i]);
  }
  return out;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\lib\roles.ts =====
import { Role } from '@/types/auth';

export const isAdmin = (r?: Role | null) => r === 'admin';
export const isEditor = (r?: Role | null) => r === 'editor' || r === 'admin';

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\lib\strings.ts =====
// lib/strings.ts
'use client';

/**
 * Quita acentos/diacrÃ­ticos usando NFKD.
 */
export function stripDiacritics(input: string): string {
  return (input ?? '')
    .normalize('NFKD')
    .replace(/[\u0300-\u036f]/g, '');
}

/**
 * NormalizaciÃ³n base: trim + lowercase + sin diacrÃ­ticos + colapsa espacios.
 * Ãštil para: claves de Ã­ndice, comparaciones de igualdad, etc.
 */
export function normalizeStr(input?: string | null): string {
  const s = String(input ?? '')
    .trim();
  if (!s) return '';
  return stripDiacritics(s)
    .toLowerCase()
    .replace(/\s+/g, ' ');
}

/**
 * Alias para compatibilidad: varios mÃ³dulos importan `normalizeString`.
 * MantÃ©n el mismo comportamiento que `normalizeStr`.
 */
export const normalizeString = normalizeStr;

/**
 * NormalizaciÃ³n agresiva para bÃºsqueda libre:
 * - minÃºsculas, sin diacrÃ­ticos
 * - reemplaza puntuaciÃ³n por espacios
 * - colapsa espacios
 */
export function normalizeForSearch(input?: string | null): string {
  const s = String(input ?? '').trim();
  if (!s) return '';
  return stripDiacritics(s)
    .toLowerCase()
    // sustituye todo lo no alfanumÃ©rico por espacio
    .replace(/[^a-z0-9]+/gi, ' ')
    .replace(/\s+/g, ' ')
    .trim();
}

/**
 * YYYY-MM a partir de un ISO date (YYYY-MM-DD). Si no viene bien, devuelve ''.
 */
export function toMonthKey(dateISO?: string | null): string {
  const d = String(dateISO ?? '');
  if (d.length >= 7) return d.slice(0, 7);
  return '';
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\lib\auth\server.ts =====
import { cookies } from 'next/headers';
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs';

type AppUserRow = { role: 'admin' | 'editor'; is_active: boolean } | null;

export async function getSessionAndAppUser() {
  const supabase = createServerComponentClient({ cookies });
  const { data: { session } } = await supabase.auth.getSession();

  if (!session) return { session: null, appUser: null as AppUserRow };

  const { data, error } = await supabase
    .from('app_users')
    .select('role,is_active')
    .eq('user_id', session.user.id)
    .single();

  // Si no hay fila en app_users, consideramos null (caerÃ¡ en DEFAULT_ROLE en el cliente)
  const appUser: AppUserRow = error ? null : (data ?? null);

  return { session, appUser };
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\lib\supabase\admin.ts =====
import { createClient, SupabaseClient } from '@supabase/supabase-js';

/**
 * Cliente con Service Role para uso EXCLUSIVO en servidor
 * (route handlers / server actions). NO importar desde componentes cliente.
 */
let _admin: SupabaseClient | null = null;

export function supabaseAdmin(): SupabaseClient {
  if (_admin) return _admin;

  const url = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

  if (!url || !serviceKey) {
    throw new Error('Faltan variables de entorno de Supabase (URL o SERVICE_ROLE_KEY).');
  }

  _admin = createClient(url, serviceKey, {
    auth: { persistSession: false, autoRefreshToken: false },
  });
  return _admin;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\lib\supabase\client.ts =====
// lib/supabase/client.ts
import { createClient, type SupabaseClient } from '@supabase/supabase-js';

/**
 * Singleton del cliente de Supabase para el NAVEGADOR.
 * Lo creamos una vez y lo reutilizamos en todo el cliente.
 */
let _client: SupabaseClient | null = null;

export function supabaseBrowser(): SupabaseClient {
  if (_client) return _client;
  const url = process.env.NEXT_PUBLIC_SUPABASE_URL!;
  const anon = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
  _client = createClient(url, anon, {
    auth: {
      persistSession: true,
      detectSessionInUrl: true,
    },
  });
  return _client;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\lib\supabase\server.ts =====
import { cookies } from 'next/headers';
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs';

export function createServerSupabase() {
  return createServerComponentClient({ cookies });
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\public\dvlogo2.svg =====
<?xml version="1.0" encoding="UTF-8"?><svg id="Calque_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 600 400"><defs><style>.cls-1{fill:#fff;}.cls-2{fill:url(#DÃ©gradÃ©_sans_nom_402);}.cls-3{fill:url(#DÃ©gradÃ©_sans_nom_401);}</style><linearGradient id="DÃ©gradÃ©_sans_nom_401" x1="296.49" y1="225.66" x2="460.12" y2="62.03" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#1901ff"/><stop offset=".29" stop-color="#6418fc"/><stop offset=".59" stop-color="#ad30fa"/><stop offset=".81" stop-color="#db3ef8"/><stop offset=".91" stop-color="#ed44f8"/></linearGradient><linearGradient id="DÃ©gradÃ©_sans_nom_402" x1="178.22" y1="104.11" x2="307.43" y2="233.32" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#00e3ff"/><stop offset=".11" stop-color="#02d0ff"/><stop offset=".35" stop-color="#09a0ff"/><stop offset=".67" stop-color="#1453ff"/><stop offset="1" stop-color="#2100ff"/></linearGradient></defs><path class="cls-3" d="m335.72,184.46c.06.13.12.27.17.4l8.36-18.98h0s27.85-63.2,27.85-63.2c7.93-17.99,15.85-35.98,23.75-53.98,1.9-4.33,5.64-6.81,10.25-6.81.2,0,.41,0,.63.01,1.38.06,2.77.05,4.15.03.68,0,1.35-.01,2.03-.01h27.09s-5.41,13.08-5.41,13.08c-.17.42-.31.75-.45,1.07l-15.37,34.96c-24.29,55.27-48.59,107.54-72.88,162.81-2.68,6.1-7.88,6.76-10,6.76h-.17c-2.07-.03-7.18-.75-9.8-6.71-3.83-8.71-11.12-23.45-14.95-32.16l17.25-20.97,7.49-16.29Z"/><path class="cls-2" d="m327.5,206.38c-16.34,30.57-42.11,48.41-76.58,53-4.2.55-8.74.8-13.54.85-10.74.05-21.48.05-32.22.05h-27.28c-9.89,0-17.88-8.04-17.88-17.88v-25.88c12.56-28.7,25.13-57.29,37.84-85.93l.28,40.97v37.72c0,7.74,6.29,14.04,14.09,13.99,11.34,0,25.98-.1,30.12-.3,20.13-.95,36.32-10.14,48.06-27.33,16.98-24.93,18.13-58.1,3-84.22-12.29-21.23-30.27-31.82-55-32.32-5.3-.1-11.04-.15-17.93-.15h-.5l12.44-27.62c.2-.45.45-.9.75-1.35v-.05c2.85-4.94,8.34-7.94,14.09-7.39,19.68,1.75,37.27,8.54,52.35,20.23,18.78,14.54,31.37,33.97,37.42,57.75,7.79,30.62,4.6,59.5-9.49,85.87Z"/><path class="cls-1" d="m78.32,313.04v-23.52h8.88v60.64h-8.72v-6c-3.73,4.69-8.56,7.04-14.48,7.04-6.24,0-11.39-2.16-15.44-6.48-4.11-4.43-6.16-9.81-6.16-16.16s2.05-11.63,6.16-16c4.05-4.38,9.17-6.56,15.36-6.56,5.71,0,10.51,2.35,14.4,7.04Zm.64,15.52c0-4.05-1.28-7.47-3.84-10.24-2.56-2.83-5.89-4.24-10-4.24s-7.44,1.41-10,4.24c-2.56,2.77-3.84,6.19-3.84,10.24s1.28,7.63,3.84,10.4,5.89,4.16,10,4.16,7.44-1.39,10-4.16,3.84-6.24,3.84-10.4Z"/><path class="cls-1" d="m133.84,313.04v-6h8.48v43.12h-8.48v-5.92c-3.89,4.64-8.8,6.96-14.72,6.96-6.24,0-11.39-2.19-15.44-6.56-4.05-4.38-6.08-9.81-6.08-16.32s2.03-11.79,6.08-16c4.05-4.21,9.2-6.32,15.44-6.32,5.92,0,10.83,2.35,14.72,7.04Zm-13.52,30.08c4,0,7.33-1.41,10-4.24,2.61-2.77,3.92-6.21,3.92-10.32s-1.31-7.47-3.92-10.24c-2.67-2.83-6-4.24-10-4.24s-7.44,1.41-10,4.24c-2.56,2.77-3.84,6.22-3.84,10.32s1.28,7.54,3.84,10.32,5.89,4.16,10,4.16Z"/><path class="cls-1" d="m181.36,340.72l3.04,6.88c-3.2,2.4-7.17,3.6-11.92,3.6s-8.16-1.41-10.56-4.24-3.6-6.91-3.6-12.24v-20.16h-7.44v-7.52h7.52v-15.28h8.72v15.28h14.88v7.52h-14.88v20.32c0,5.49,2.21,8.24,6.64,8.24,2.35,0,4.88-.8,7.6-2.4Z"/><path class="cls-1" d="m225.6,313.04v-6h8.48v43.12h-8.48v-5.92c-3.89,4.64-8.8,6.96-14.72,6.96-6.24,0-11.39-2.19-15.44-6.56-4.05-4.38-6.08-9.81-6.08-16.32s2.03-11.79,6.08-16c4.05-4.21,9.2-6.32,15.44-6.32,5.92,0,10.83,2.35,14.72,7.04Zm-13.52,30.08c4,0,7.33-1.41,10-4.24,2.61-2.77,3.92-6.21,3.92-10.32s-1.31-7.47-3.92-10.24c-2.67-2.83-6-4.24-10-4.24s-7.44,1.41-10,4.24c-2.56,2.77-3.84,6.22-3.84,10.32s1.28,7.54,3.84,10.32c2.56,2.77,5.89,4.16,10,4.16Z"/><path class="cls-1" d="m264.4,337.84l12.32-30.8h9.68l-18.88,43.04h-6.4l-18.88-43.04h9.76l12.4,30.8Z"/><path class="cls-1" d="m335.2,327.76c0,1.39-.11,2.8-.32,4.24h-33.68c.64,3.47,2.17,6.21,4.6,8.24,2.43,2.03,5.67,3.04,9.72,3.04,2.45,0,5.02-.42,7.72-1.28s5-1.97,6.92-3.36l3.68,6.48c-5.39,4-11.6,6-18.64,6-7.58,0-13.32-2.22-17.24-6.64-3.92-4.43-5.88-9.76-5.88-16s2.03-11.87,6.08-16.08c4.11-4.27,9.41-6.4,15.92-6.4s11.31,1.95,15.2,5.84c3.95,3.95,5.92,9.25,5.92,15.92Zm-21.12-14.16c-3.31,0-6.12,1.03-8.44,3.08-2.32,2.06-3.8,4.76-4.44,8.12h25.12c-.38-3.36-1.69-6.06-3.96-8.12-2.27-2.05-5.03-3.08-8.28-3.08Z"/><path class="cls-1" d="m354.24,350.16h-8.8v-43.12h8.64v6.08c1.28-2.24,3.12-4,5.52-5.28,2.4-1.28,5.12-1.92,8.16-1.92,4.75,0,8.75,1.55,12,4.64,3.31,3.15,4.96,7.6,4.96,13.36v26.24h-8.88v-23.76c0-3.89-.93-6.92-2.8-9.08-1.87-2.16-4.38-3.24-7.52-3.24-3.31,0-6.02,1.16-8.12,3.48-2.11,2.32-3.16,5.32-3.16,9v23.6Z"/><path class="cls-1" d="m423.2,340.72l3.04,6.88c-3.2,2.4-7.17,3.6-11.92,3.6s-8.16-1.41-10.56-4.24c-2.4-2.83-3.6-6.91-3.6-12.24v-20.16h-7.44v-7.52h7.52v-15.28h8.72v15.28h14.88v7.52h-14.88v20.32c0,5.49,2.21,8.24,6.64,8.24,2.35,0,4.88-.8,7.6-2.4Z"/><path class="cls-1" d="m452.08,351.2c-5.76,0-10.35-1.68-13.76-5.04s-5.12-7.92-5.12-13.68v-25.44h8.8v25.36c0,3.25.89,5.84,2.68,7.76s4.25,2.88,7.4,2.88,5.68-.93,7.44-2.8c1.76-1.87,2.64-4.48,2.64-7.84v-25.36h8.88v25.44c0,5.87-1.68,10.45-5.04,13.76-3.36,3.31-8,4.96-13.92,4.96Z"/><path class="cls-1" d="m492.24,350.16h-8.8v-43.12h8.4v6.16c2.56-4.85,6.64-7.28,12.24-7.28,1.81,0,3.52.24,5.12.72l-.8,8.56c-1.44-.53-3.01-.8-4.72-.8-3.47,0-6.24,1.18-8.32,3.52-2.08,2.35-3.12,5.74-3.12,10.16v22.08Z"/><path class="cls-1" d="m557.6,327.76c0,1.39-.11,2.8-.32,4.24h-33.68c.64,3.47,2.17,6.21,4.6,8.24,2.43,2.03,5.67,3.04,9.72,3.04,2.45,0,5.02-.42,7.72-1.28s5-1.97,6.92-3.36l3.68,6.48c-5.39,4-11.6,6-18.64,6-7.58,0-13.32-2.22-17.24-6.64-3.92-4.43-5.88-9.76-5.88-16s2.03-11.87,6.08-16.08c4.11-4.27,9.41-6.4,15.92-6.4s11.31,1.95,15.2,5.84c3.95,3.95,5.92,9.25,5.92,15.92Zm-21.12-14.16c-3.31,0-6.12,1.03-8.44,3.08-2.32,2.06-3.8,4.76-4.44,8.12h25.12c-.38-3.36-1.69-6.06-3.96-8.12-2.27-2.05-5.03-3.08-8.28-3.08Z"/></svg>

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\scripts\build-catalogs.mjs =====
// scripts/build-catalogs.mjs
import fs from 'node:fs';
import path from 'node:path';

const ROOT = process.cwd();
const SRC_DIR = path.join(ROOT, 'data', 'catalogs');

const ensureDir = (p) => { if (!fs.existsSync(p)) fs.mkdirSync(p, { recursive: true }); };
ensureDir(SRC_DIR);

function detectDelimiter(headerLine) {
  if (headerLine.includes('\t')) return '\t';
  if (headerLine.includes(';')) return ';';
  return ',';
}
function parseCSV(str) {
  const lines = str.replace(/\r/g, '').split('\n').filter(l => l.trim() !== '');
  if (lines.length === 0) return [];
  const delim = detectDelimiter(lines[0]);
  const headers = lines[0].split(delim).map(h => h.trim());
  const rows = [];
  for (let i = 1; i < lines.length; i++) {
    const raw = lines[i];
    const parts = raw.split(delim).map(x => x.trim());
    const row = {};
    headers.forEach((h, idx) => { row[h] = (parts[idx] ?? '').trim(); });
    rows.push(row);
  }
  return rows;
}
const trimCollapse = (s) => (s || '').trim().replace(/\s+/g, ' ');

// ---- CAMPAIGNS ----
function buildCampaigns() {
  const csvPath = path.join(SRC_DIR, 'campaigns.csv');
  if (!fs.existsSync(csvPath)) { console.warn(`(info) No campaigns.csv`); return; }
  const rows = parseCSV(fs.readFileSync(csvPath, 'utf8'));

  const NAME_FIX = new Map([
    ['movistar + cpc', 'Movistar+ CPC'],
    ['inteligenza artificiale', 'Intelligenza artificiale'],
    ['national disreoair claims', 'National Disrepair Claims'],
    ['bussines alarm', 'Business alarm'],
    ['murprotect es', 'Murprotec ES'],
    ['murprotect it', 'Murprotec IT'],
    ['invesstiment immobilier', 'Investiment immobilier'],
  ]);

  const cleaned = rows
    .map(r => {
      const name = trimCollapse(r.name ?? '');
      const key = name.toLowerCase();
      return { name: NAME_FIX.get(key) ?? name, advertiser: trimCollapse(r.advertiser ?? '') };
    })
    .filter(r => r.name && r.advertiser);

  fs.writeFileSync(path.join(SRC_DIR, 'campaigns.json'), JSON.stringify(cleaned, null, 2));
  console.log(`âœ… campaigns.json (${cleaned.length})`);
}

// ---- PARTNERS ----
function buildPartners() {
  const csvPath = path.join(SRC_DIR, 'partners.csv');
  if (!fs.existsSync(csvPath)) { console.warn(`(info) No partners.csv`); return; }
  const rows = parseCSV(fs.readFileSync(csvPath, 'utf8'));

  const cleaned = rows
    .map(r => ({ name: trimCollapse(r.name ?? ''), invoiceOffice: trimCollapse(r.invoiceoffice ?? '') }))
    .filter(r => r.name && r.invoiceOffice);

  fs.writeFileSync(path.join(SRC_DIR, 'partners.json'), JSON.stringify(cleaned, null, 2));
  console.log(`âœ… partners.json (${cleaned.length})`);
}

// ---- DATABASES ----
function buildDatabases() {
  const csvPath = path.join(SRC_DIR, 'databases.csv');
  if (!fs.existsSync(csvPath)) { console.warn(`(info) No databases.csv`); return; }
  const rows = parseCSV(fs.readFileSync(csvPath, 'utf8'));

  const mapDbType = (t) => {
    const v = trimCollapse((t || '').toString()).toLowerCase();
    if (v === 'b2b') return 'B2B';
    if (v === 'b2c') return 'B2C';
    return 'Mixed'; // default seguro
  };
  const fixGeo = (g) => {
    const v = trimCollapse(g || '').toUpperCase();
    // Normalizaciones suaves (confÃ­rmame si prefieres otras):
    if (v === 'IR') return 'IE'; // Ireland
    // UK lo dejamos como 'UK' salvo que prefieras 'GB'
    return v || 'MULTI';
  };

  const uniq = new Set();
  const cleaned = [];
  for (const r of rows) {
    const name = trimCollapse(r.name ?? '');
    const geo = fixGeo(r.geo);
    const dbType = mapDbType(r.dbType);
    if (!name) continue;

    // id slug basado en name
    const base = name
      .normalize('NFKD').replace(/[\u0300-\u036f]/g, '')
      .toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '').slice(0, 60);
    let id = base || 'db';
    let n = 2; while (uniq.has(id)) id = `${base}-${n++}`;
    uniq.add(id);

    cleaned.push({ id, name, geo, dbType });
  }

  fs.writeFileSync(path.join(SRC_DIR, 'databases.json'), JSON.stringify(cleaned, null, 2));
  console.log(`âœ… databases.json (${cleaned.length})`);
}

// ---- THEMES ----
function buildThemes() {
  const csvPath = path.join(SRC_DIR, 'themes.csv');
  if (!fs.existsSync(csvPath)) { console.warn(`(info) No themes.csv`); return; }
  const rows = parseCSV(fs.readFileSync(csvPath, 'utf8'));

  // soporta cabecera "theme" o una Ãºnica columna
  const cleaned = rows
    .map(r => {
      const label = trimCollapse(r.theme ?? r[Object.keys(r)[0]] ?? '');
      return { label };
    })
    .filter(r => r.label);

  fs.writeFileSync(path.join(SRC_DIR, 'themes.json'), JSON.stringify(cleaned, null, 2));
  console.log(`âœ… themes.json (${cleaned.length})`);
}

function main() {
  buildCampaigns();
  buildPartners();
  buildDatabases();
  buildThemes();
}
main();

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\scripts\test-catalogs.mjs =====
// scripts/test-catalogs.mjs
import fs from 'node:fs';
import path from 'node:path';
import { execSync } from 'node:child_process';

const DIR = path.join(process.cwd(), 'data', 'catalogs');
const ok = (m) => console.log('âœ…', m);
const fail = (m) => { console.error('âŒ', m); process.exitCode = 1; };

const readJson = (f) => JSON.parse(fs.readFileSync(path.join(DIR, f), 'utf8'));

try {
  // 1) Genera los JSON
  execSync('node scripts/build-catalogs.mjs', { stdio: 'inherit' });

  // 2) Carga
  const campaigns = readJson('campaigns.json');
  const partners  = readJson('partners.json');
  const databases = readJson('databases.json');
  const themes    = readJson('themes.json');

  // 3) Validaciones bÃ¡sicas
  // campaigns
  if (!Array.isArray(campaigns) || campaigns.length === 0) fail('campaigns.json vacÃ­o');
  for (const r of campaigns) {
    if (!r.name?.trim() || !r.advertiser?.trim()) fail('campaign sin name/advertiser');
  }
  ok(`campaigns.json (${campaigns.length})`);

  // partners
  const OFFICES = new Set(['CAR','DAT','INT']);
  for (const p of partners) {
    if (!p.name?.trim() || !OFFICES.has(String(p.invoiceOffice).toUpperCase())) {
      fail(`partner invÃ¡lido: ${JSON.stringify(p)}`);
    }
  }
  ok(`partners.json (${partners.length})`);

  // databases
  const ids = new Set();
  for (const d of databases) {
    if (!d.id?.trim() || ids.has(d.id)) fail(`database id duplicado o vacÃ­o: ${d.id}`);
    ids.add(d.id);
    if (!d.name?.trim()) fail('database sin name');
    if (!d.dbType || !['B2B','B2C','Mixed'].includes(d.dbType)) fail(`dbType invÃ¡lido: ${d.dbType}`);
    if (!d.geo?.trim() || d.geo !== d.geo.toUpperCase()) fail(`geo debe ir en MAYÃšSCULAS: ${d.geo}`);
  }
  ok(`databases.json (${databases.length})`);

  // themes (Ãºnicos case-insensitive)
  const seen = new Set();
  for (const t of themes) {
    const label = (t.label ?? '').trim();
    if (!label) fail('theme sin label');
    const key = label.toLowerCase();
    if (seen.has(key)) fail(`theme duplicado (case-insensitive): ${label}`);
    seen.add(key);
  }
  ok(`themes.json (${themes.length})`);

  console.log('\nâœ¨ CatÃ¡logos OK');
} catch (e) {
  console.error(e);
  fail('Fallo en test-catalogs');
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\styles\tw.input.css =====
/* @config "../tailwind.config.ts" */
@import "tailwindcss";

/* Solo tipografía base; nada de colores globales aquí */
@layer base {
  body {
    font-family: "Inter", ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, sans-serif;
  }
}

/* ---- Date inputs: wrapper con botón + ocultar icono nativo ---- */
@layer components {
  .date-wrap {
    position: relative;
    display: inline-flex;
    align-items: center;
  }

  .date-wrap > input[type="date"] {
    /* espacio para el botón del calendario */
    padding-right: 2.25rem;
    /* tema claro: evita el contraste duro del picker nativo oscuro */
    color-scheme: light;
  }

  /* Oculta el icono nativo SOLO cuando usamos .date-wrap */
  .date-wrap > input[type="date"]::-webkit-calendar-picker-indicator {
    opacity: 0 !important;
  }

  .date-btn {
    position: absolute;
    right: 0.5rem;
    top: 50%;
    transform: translateY(-50%);
    width: 1.25rem;
    height: 1.25rem;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border: 0;
    background: transparent;
    /* usa el token del tema en lugar de un hex duro */
    color: var(--color-text);
    opacity: 0.6;
    cursor: pointer;
    border-radius: 0.375rem; /* ~rounded-md */
  }
  .date-btn:hover { opacity: 0.85; }
  .date-btn:focus-visible {
    outline: 2px solid color-mix(in oklab, var(--color-primary) 55%, transparent);
    outline-offset: 2px;
  }
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\types\auth.ts =====
export type Role = 'admin' | 'editor';

export type SessionUser = {
  id: string;
  email: string | null;
  role: Role;
};

export const DEFAULT_ROLE: Role = 'editor';

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\types\campaign.ts =====
import type { DBType, InvoiceOffice } from '@/data/reference';

export type CampaignRow = {
  id: string;
  date: string;             // ISO: "2025-07-01"
  campaign: string;
  advertiser: string;
  invoiceOffice: InvoiceOffice; // 'DAT' | 'CAR' | 'INT'
  partner: string;
  theme: string;
  price: number;
  priceCurrency: 'EUR';
  type: 'CPL' | 'CPM' | 'CPC' | 'CPA';
  vSent: number;
  routingCosts: number;
  qty: number;
  turnover: number;
  margin: number;
  ecpm: number;
  database: string;
  geo: string;              // "ES", "FR", "UK", ...
  databaseType: DBType;     // 'B2B' | 'B2C' | 'Mixed'
};

// Entrada del formulario (sin id; el provider lo genera)
export type NewCampaignInput = Omit<CampaignRow, 'id'>;

// Tipo interno del store para orden estable
export type RowWithIdx = CampaignRow & { _idx: number };

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\types\reports.ts =====
// types/reports.ts
import type { DBType } from '@/data/reference';

// MÃ©tricas soportadas en Reports
export type Metric = 'turnover' | 'margin' | 'ecpm' | 'vSent';

export const METRIC_LABELS: Record<Metric, string> = {
  turnover: 'Turnover',
  margin: 'Margin',
  ecpm: 'eCPM',
  vSent: 'V Sent',
};

// Dimensiones por las que podemos agrupar el ranking / tabla
export type GroupBy =
  | 'database'
  | 'partner'
  | 'campaign'
  | 'advertiser'
  | 'theme'
  | 'geo'
  | 'type'
  | 'databaseType';

export const GROUP_LABELS: Record<GroupBy, string> = {
  database: 'Database',
  partner: 'Partner',
  campaign: 'Campaign',
  advertiser: 'Advertiser',
  theme: 'Theme',
  geo: 'GEO',
  type: 'Type',
  databaseType: 'DB Type',
};

// Filtros de alto nivel del reporte
export type ReportFilters = {
  from?: string;                 // yyyy-mm-dd (inclusive)
  to?: string;                   // yyyy-mm-dd (inclusive)
  geos?: string[];               // cÃ³digos en mayÃºsculas (ES, FR, ...)
  partners?: string[];           // nombres visibles
  campaigns?: string[];          // nombres visibles
  advertisers?: string[];        // nombres visibles
  themes?: string[];             // etiquetas
  databases?: string[];          // nombres visibles
  types?: Array<'CPL' | 'CPM' | 'CPC' | 'CPA'>;
  databaseTypes?: DBType[];      // <- tipado fuerte desde catÃ¡logos
  onlyInternalPartners?: boolean;
};

// Fila agregada (resultado de agrupar por GroupBy)
export type AggregateRow = {
  /** clave cruda (ej. nombre de database o partner) */
  key: string;
  /** etiqueta presentable (por si en el futuro mapeamos idsâ†’labels) */
  label: string;

  /** mÃ©tricas agregadas */
  vSent: number;
  turnover: number;
  margin: number;
  /** eCPM ponderado por vSent del agregado */
  ecpm: number;

  /** opcional: suma de qty cuando aplica (CPL, etc.) */
  qty?: number;

  /** nÂº de filas subyacentes en el agregado */
  count: number;
};

// Punto de serie temporal para tendencias
export type TrendPoint = {
  date: string;     // yyyy-mm-dd
  ecpm: number;     // ponderado en ese dÃ­a
  vSent: number;    // total del dÃ­a (Ãºtil para tooltips)
  turnover: number; // total del dÃ­a (Ãºtil para tooltips)
};

// Resultado calculado por el hook de datos
export type ReportData = {
  filteredCount: number;
  kpis: {
    vSent: number;
    turnover: number;
    margin: number;
    ecpm: number;         // ponderado global
    marginPct: number | null;
  };
  ranking: AggregateRow[]; // ordenado y ya cortado por TopN
  trend: TrendPoint[];     // eCPM por dÃ­a (ordenado asc)
};

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\utils\exporters.ts =====
// utils/exporters.ts
import type { CampaignRow } from '@/types/campaign';

export type ExportFormat = 'csv-excel' | 'csv-rfc' | 'json';
export type ExportScope = 'all' | 'page';
export type ExportColumnsKind = 'visible' | 'all';

export type ColumnSpec = {
  id: string;
  label: string;
  // devuelve el valor â€œcrudoâ€ (no formateado). Puede ser string | number | null | undefined
  accessor: (r: CampaignRow) => any;
};

export type BuildRowsOpts = {
  rows: CampaignRow[];
  columns: ColumnSpec[];
  includeSummary?: boolean;
};

export function buildExportRows(opts: BuildRowsOpts): Array<Record<string, any>> {
  const { rows, columns, includeSummary } = opts;
  const out: Array<Record<string, any>> = [];

  for (const r of rows) {
    const o: Record<string, any> = {};
    for (const c of columns) {
      let v = c.accessor(r);
      // normaliza nÃºmeros (punto decimal)
      if (typeof v === 'number') v = normalizeNumber(v);
      o[c.label] = v ?? '';
    }
    out.push(o);
  }

  if (includeSummary) {
    // calculamos como en la tabla
    let vSent = 0, routing = 0, qty = 0, turnover = 0, margin = 0, wEcpm = 0;
    for (const r of rows) {
      vSent     += r.vSent || 0;
      routing   += r.routingCosts || 0;
      qty       += r.qty || 0;
      turnover  += r.turnover || 0;
      margin    += r.margin || 0;
      wEcpm     += (r.ecpm || 0) * (r.vSent || 0);
    }
    const weightedEcpm = vSent > 0 ? wEcpm / vSent : 0;
    const marginPct = turnover > 0 ? margin / turnover : null;

    const summary: Record<string, any> = {};
    if (columns.length > 0) {
      // mete "SUMMARY" en la primera columna visible y deja el resto vacÃ­o salvo agregados conocidos
      summary[columns[0].label] = 'SUMMARY';
      for (let i = 1; i < columns.length; i++) summary[columns[i].label] = '';
    }
    setIfPresent(summary, columns, 'V SENT', vSent);
    setIfPresent(summary, columns, 'ROUTING COSTS', routing);
    setIfPresent(summary, columns, 'QTY', qty);
    setIfPresent(summary, columns, 'TURNOVER', turnover);
    setIfPresent(summary, columns, 'MARGIN', margin);
    setIfPresent(summary, columns, 'MARGIN (%)', marginPct);
    setIfPresent(summary, columns, 'ECPM', weightedEcpm);

    out.unshift(summary);
  }

  return out;
}

function setIfPresent(
  row: Record<string, any>,
  cols: ColumnSpec[],
  label: string,
  val: number | null
) {
  const c = cols.find(c => c.label.toUpperCase() === label);
  if (!c) return;
  row[c.label] = val == null ? '' : normalizeNumber(val);
}

function normalizeNumber(n: number, decimals?: number) {
  // valores por defecto razonables
  const d =
    decimals ?? (Number.isInteger(n) ? 0 : 2);
  return Number(n.toFixed(d));
}

export function rowsToCSV(
  rows: Array<Record<string, any>>,
  delimiter: ';' | ','
): Blob {
  if (!rows.length) return new Blob([''], { type: 'text/csv;charset=utf-8' });

  const headers = Object.keys(rows[0]);
  const esc = (v: any) => {
    if (v == null) return '';
    const s = String(v);
    // si contiene comillas, separador o saltos de lÃ­nea -> comillado y escape ""
    if (/[",\n\r;]/.test(s) || s.includes(delimiter)) {
      return `"${s.replace(/"/g, '""')}"`;
    }
    return s;
  };

  const lines: string[] = [];
  lines.push(headers.map(h => esc(h)).join(delimiter));
  for (const r of rows) {
    lines.push(headers.map(h => esc(r[h])).join(delimiter));
  }
  const text = lines.join('\r\n');
  return new Blob([text], { type: 'text/csv;charset=utf-8' });
}

export function rowsToJSON(
  rows: Array<Record<string, any>>
): Blob {
  return new Blob([JSON.stringify(rows, null, 2)], { type: 'application/json;charset=utf-8' });
}

export function downloadBlob(blob: Blob, filename: string) {
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  a.click();
  URL.revokeObjectURL(url);
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\utils\format.ts =====
// utils/format.ts
import type { Metric } from '@/types/reports';

/** Formateadores base */
export const fmtEUR0 = new Intl.NumberFormat('es-ES', {
  style: 'currency',
  currency: 'EUR',
  maximumFractionDigits: 0,
});

export const fmtEUR2 = new Intl.NumberFormat('es-ES', {
  style: 'currency',
  currency: 'EUR',
  maximumFractionDigits: 2,
});

export const fmtINT = new Intl.NumberFormat('es-ES', {
  maximumFractionDigits: 0,
});

/** Formatea un valor en funciÃ³n de la mÃ©trica seleccionada */
export function formatByMetric(metric: Metric, value: number): string {
  if (metric === 'turnover' || metric === 'margin') return fmtEUR2.format(value || 0);
  if (metric === 'ecpm') return fmtEUR2.format(value || 0);
  return fmtINT.format(value || 0);
}

/** Y-axis tick formatter para Recharts segÃºn mÃ©trica */
export function makeYAxisTick(metric: Metric) {
  return (v: number) => {
    if (metric === 'turnover' || metric === 'margin') return compactEuro(v);
    if (metric === 'ecpm') return fmtEUR2.format(v || 0);
    return fmtINT.format(v || 0);
  };
}

/** Muestra cantidades en â‚¬ con sufijo K/M manteniendo contexto de divisa */
export function compactEuro(v: number): string {
  const n = Number(v || 0);
  const abs = Math.abs(n);
  if (abs >= 1_000_000) return `${fmtEUR0.format(n / 1_000_000)}M`;
  if (abs >= 1_000) return `${fmtEUR0.format(n / 1_000)}K`;
  return fmtEUR0.format(n);
}

/** Utilidad simple para fechas ISO (yyyy-mm-dd) */
export const toISODate = (s?: string | null) => (s || '').slice(0, 10);

// --- Back-compat: `fmtNum` usable como funciÃ³n y como `.format(...)`
type FmtNum = ((n: number) => string) & { format: (n: number) => string };

export const fmtNum: FmtNum = Object.assign(
  (n: number) => fmtINT.format(n),
  { format: (n: number) => fmtINT.format(n) }
);


===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\utils\geo.ts =====
// utils/geo.ts
export function trimCollapse(s: string) {
  return (s ?? '').trim().replace(/\s+/g, ' ');
}

export function isIsoCountry(code: string): boolean {
  const c = (code || '').toUpperCase();
  if (!/^[A-Z]{2}$/.test(c)) return false;
  try {
    const dn = new (Intl as any).DisplayNames(['en'], { type: 'region' });
    const name = dn?.of?.(c);
    return typeof name === 'string' && name && name !== c;
  } catch {
    return false;
  }
}

/** Acepta ISO-2 (ES, FR, â€¦) o MULTI. Mapea UKâ†’GB. Devuelve null si no es vÃ¡lido. */
export function normalizeGeoStrict(raw?: string): string | null {
  const g = trimCollapse(raw || '').toUpperCase();
  if (!g) return null;
  if (g === 'MULTI') return 'MULTI';
  const mapped = g === 'UK' ? 'GB' : g;
  return isIsoCountry(mapped) ? mapped : null;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\z_reposummary\root_app.txt =====
===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\app\globals.css =====
/* Importa Tailwind (v4) */
@import "tailwindcss";

/* Fuente Inter de Google Fonts */
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700&display=swap");

/* -------------------------------------------------
   THEME TOKENS (Tailwind v4) â€” Default: LIGHT
   ------------------------------------------------- */
@theme {
  /* TipografÃ­a base */
  --font-sans: "Inter", ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
    "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";

  /* Colores semÃ¡nticos principales */
  --color-primary: #00bfa5;   /* verde corporativo */
  --color-accent:  #ff5252;   /* para errores/alertas */

  /* Texto/superficie para utilidades Tailwind existentes (bg-bg, text-text) */
  --color-bg:   #f5f7fb;      /* compat con bg-bg (usado en layout) */
  --color-text: #0f172a;      /* compat con text-text */

  /* Surfaces (light) */
  --color-bg-outer: #f5f7fb;  /* fondo de pÃ¡gina */
  --color-surface:  #ffffff;  /* tarjetas/paneles */
  --color-surface-2:#f2f4f7;  /* inputs/superficie secundaria */
  --color-border:   #e5e7eb;  /* borde sutil */
}

/* Helpers no expuestos en @theme (pueden cambiar con el tema) */
:root {
  --color-muted: rgba(15, 23, 42, 0.65);
  --color-hover: color-mix(in oklab, var(--color-surface) 85%, #0f172a);

  /* Paleta para charts (LIGHT) */
  --chart-1: #06b6d4; /* cyan-500 */
  --chart-2: #6366f1; /* indigo-500 */
  --chart-3: #22c55e; /* green-500 */
  --chart-4: #f59e0b; /* amber-500 */
  --chart-5: #ef4444; /* red-500 */

  --chart-axis: rgba(15, 23, 42, 0.72);
  --chart-grid: rgba(15, 23, 42, 0.08);
  --chart-grid-strong: rgba(15, 23, 42, 0.14);
  --chart-tooltip-bg: color-mix(in oklab, var(--color-surface) 92%, black);
}

/* -------------------------------------------------
   DARK THEME (forzado con data-attr) 
   ------------------------------------------------- */
html[data-theme="dark"] {
  --color-bg:        #1b1d20;
  --color-text:      #ffffff;

  --color-bg-outer:  #1b1d20;
  --color-surface:   #23262b;
  --color-surface-2: #2b2f35;
  --color-border:    #3a3f46;

  --color-muted: rgba(255,255,255,.72);
  --color-hover: rgba(255,255,255,.04);

  /* Charts (DARK) */
  --chart-1: #60a5fa; /* blue-400 */
  --chart-2: #a78bfa; /* violet-400 */
  --chart-3: #34d399; /* emerald-400 */
  --chart-4: #fbbf24; /* amber-400 */
  --chart-5: #f87171; /* red-400 */

  --chart-axis: rgba(255,255,255,.72);
  --chart-grid: rgba(255,255,255,.10);
  --chart-grid-strong: rgba(255,255,255,.16);
  --chart-tooltip-bg: color-mix(in oklab, var(--color-surface) 92%, black);
}

/* Si NO fuerzas tema con data-attr, respeta el sistema */
@media (prefers-color-scheme: dark) {
  html:not([data-theme]) {
    --color-bg:        #1b1d20;
    --color-text:      #ffffff;

    --color-bg-outer:  #1b1d20;
    --color-surface:   #23262b;
    --color-surface-2: #2b2f35;
    --color-border:    #3a3f46;

    --color-muted: rgba(255,255,255,.72);
    --color-hover: rgba(255,255,255,.04);

    --chart-1: #60a5fa;
    --chart-2: #a78bfa;
    --chart-3: #34d399;
    --chart-4: #fbbf24;
    --chart-5: #f87171;

    --chart-axis: rgba(255,255,255,.72);
    --chart-grid: rgba(255,255,255,.10);
    --chart-grid-strong: rgba(255,255,255,.16);
    --chart-tooltip-bg: color-mix(in oklab, var(--color-surface) 92%, black);
  }
}

/* -------------------------------------------------
   Global base
   ------------------------------------------------- */
html,
body {
  font-family: var(--font-sans);
  background: var(--color-bg-outer);
  color: var(--color-text);
  min-height: 100vh;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Texto secundario */
.muted { color: var(--color-muted); }

/* -------------------------------------------------
   UI building blocks (cards, inputs, buttons, tables)
   ------------------------------------------------- */

/* Card */
.card {
  @apply rounded-2xl border shadow-sm;
  background: var(--color-surface);
  border-color: var(--color-border);
  box-shadow: 0 1px 2px rgba(0,0,0,.05);
}

/* Inputs */
.input {
  @apply rounded-lg px-3 py-2 border outline-none;
  background: var(--color-surface-2);
  border-color: var(--color-border);
  color: var(--color-text);
  caret-color: var(--color-text);
}
.input::placeholder { color: color-mix(in oklab, var(--color-text) 55%, transparent); }
.input:focus {
  box-shadow: 0 0 0 3px color-mix(in oklab, var(--color-primary) 22%, transparent);
  border-color: color-mix(in oklab, var(--color-primary) 60%, var(--color-border));
}

/* BotÃ³n primario */
.btn-primary {
  @apply inline-flex items-center justify-center rounded-lg px-4 py-2 font-semibold transition-all;
  color: white;
  background: linear-gradient(180deg, #34d399 0%, #10b981 100%); /* Emerald */
  box-shadow: 0 6px 18px rgba(16,185,129,.22);
}
.btn-primary:hover { filter: brightness(1.05); }
.btn-primary:active { transform: translateY(0.5px); }

/* BotÃ³n ghost */
.btn-ghost {
  @apply inline-flex items-center justify-center rounded-lg px-4 py-2 font-medium transition-colors border;
  border-color: var(--color-border);
  color: color-mix(in oklab, var(--color-text) 85%, transparent);
  background: transparent;
}
.btn-ghost:hover { background: var(--color-hover); }

/* Tabla */
/* Solo scroll horizontal; vertical visible para que sticky use el viewport */
.table-wrap {
  overflow-x: auto;
  overflow-y: visible;

  border-radius: 1rem;
  border: 1px solid var(--color-border);
  background: var(--color-surface);
  box-shadow: 0 1px 6px rgba(0,0,0,.06);

  /* la tabla por encima de la lÃ¡mina */
  position: relative;
  z-index: 30;
}

/* ðŸ‘‡ cambia a separate para evitar glitches con sticky */
.table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
}

/* Cabeceras sticky: un Ãºnico sitio de verdad (sin otro bloque mÃ¡s abajo) */
.table thead th {
  position: sticky;
  /* usa el offset calculado; fallback al header fijo si no se define */
  top: var(--table-sticky-offset, var(--content-sticky-top, 0px));
  z-index: 45;

  background: var(--color-surface-2);
  color: color-mix(in oklab, var(--color-text) 80%, transparent);
  box-shadow: 0 1px 0 0 var(--color-border), 0 6px 16px rgba(0,0,0,.04);
  border-bottom: 1px solid var(--color-border);
}

.table tbody tr { border-bottom: 1px solid var(--color-border); }
.table tbody tr:nth-child(odd)  { background: var(--color-surface); }
.table tbody tr:nth-child(even) { background: var(--color-surface-2); }
.table tbody tr:hover { background: var(--color-hover); transition: background-color .15s ease; }
.table td { @apply text-sm py-3 px-3 align-middle; }

/* Fila SUMMARY */
.row-summary {
  background: linear-gradient(90deg, color-mix(in oklab, var(--color-primary) 18%, transparent), transparent);
  font-weight: 600;
}
.row-summary:hover {
  background: linear-gradient(90deg, color-mix(in oklab, var(--color-primary) 28%, transparent), transparent);
}

/* Ãšltima columna (acciones): compacta, pero sin forzar nowrap al popover */
.table td:last-child,
.table th:last-child { width: 1%; }
.table td:last-child [role="menu"],
.table td:last-child [data-menu],
.table td:last-child .menu,
.table td:last-child .dropdown,
.table td:last-child .popover,
.table td:last-child .actions-menu {
  white-space: normal !important;
  display: flex;
  flex-direction: column;
}

/* Altura de la fila de cabeceras */
:root {
  --th-py: 0.625rem; /* 10px â€” sÃºbelo/bÃ¡jalo a gusto (0.5rem, 0.75rem...) */
  --th-px: 0.75rem;  /* 12px horizontal */
}

.table thead th {
  padding: var(--th-py) var(--th-px);
  font-size: 13px;            /* opcional: un pelÃ­n mÃ¡s legible */
  line-height: 1.2;           /* opcional */
}

/* Inputs de fecha: respeta tema */
input[type="date"] { color-scheme: light; }
html[data-theme="dark"] input[type="date"],
html:not([data-theme]) input[type="date"]:where(:not(:root)) {
  color-scheme: dark;
}

/* Aclarar el icono del calendario (WebKit) */
input[type="date"]:hover::-webkit-calendar-picker-indicator { opacity: 1; }

/* Flash suave cuando se actualiza una fila */
.row-flash {
  animation: rowFlash 1200ms ease-out;
  background-color: color-mix(in oklab, var(--color-primary) 18%, transparent) !important;
}
@keyframes rowFlash {
  0%   { background-color: color-mix(in oklab, var(--color-primary) 28%, transparent); }
  100% { background-color: transparent; }
}

/* --- Inline errors --- */
.input-error {
  border-color: var(--color-accent) !important;
  box-shadow: 0 0 0 2px color-mix(in oklab, var(--color-accent) 18%, transparent);
}
.input-error:focus {
  outline: none;
  box-shadow: 0 0 0 3px color-mix(in oklab, var(--color-accent) 26%, transparent);
}

/* Tooltip base */
.tooltip-panel {
  background: var(--chart-tooltip-bg);
  border: 1px solid var(--color-border);
  border-radius: 0.5rem;
  padding: 0.375rem 0.5rem;
  font-size: 12px;
  max-width: 280px;
  box-shadow: 0 8px 28px rgba(0,0,0,.18);
  z-index: 60;
}

/* -------------------------------------------------
   BONUS: focus ring accesible + scrollbars suaves
   ------------------------------------------------- */
:focus-visible {
  outline: 2px solid color-mix(in oklab, var(--color-primary) 55%, transparent);
  outline-offset: 2px;
  border-radius: 6px;
}

/* Scrollbars (Chromium + Firefox) */
* {
  scrollbar-color: color-mix(in oklab, var(--color-text) 20%, transparent)
                   color-mix(in oklab, var(--color-surface-2) 100%, transparent);
  scrollbar-width: thin;
}
*::-webkit-scrollbar { height: 10px; width: 10px; }
*::-webkit-scrollbar-track { background: var(--color-surface-2); }
*::-webkit-scrollbar-thumb {
  background: color-mix(in oklab, var(--color-text) 22%, transparent);
  border-radius: 9999px;
  border: 2px solid var(--color-surface-2);
}
*::-webkit-scrollbar-thumb:hover {
  background: color-mix(in oklab, var(--color-text) 35%, transparent);
}
/* --- (2) Sombra en header sticky de la tabla --- */
.table thead th {
  position: sticky; top: 0; z-index: 10;
  background: var(--color-surface-2);
  color: color-mix(in oklab, var(--color-text) 80%, transparent);
  /* ya tenÃ­as border-bottom; aÃ±adimos sombra suave */
  box-shadow: 0 1px 0 0 var(--color-border), 0 6px 16px rgba(0,0,0,.04);
}

/* Ãšltima columna (acciones): compacta, pero sin forzar nowrap al popover */
.table td:last-child,
.table th:last-child {
  width: 1%;
  /* quitamos white-space: nowrap; */
}

/* Salvaguardas: el menÃº interno debe poder apilar sus items */
.table td:last-child [role="menu"],
.table td:last-child [data-menu],
.table td:last-child .menu,
.table td:last-child .dropdown,
.table td:last-child .popover,
.table td:last-child .actions-menu {
  white-space: normal !important;
  display: flex;
  flex-direction: column;
}

/* --- (4) Refuerzo visual para badges del SUMMARY --- */
.row-summary .badge-positive,
.row-summary .badge-negative,
.row-summary .badge-warn {
  display: inline-flex;
  align-items: center;
  gap: 4px;
  padding: 2px 6px;
  border-radius: 9999px;
  font-weight: 700;            /* bold para legibilidad */
  line-height: 1.1;
  border: 1px solid transparent;
}

.row-summary .badge-positive {
  color: var(--color-primary);
  background: color-mix(in oklab, var(--color-primary) 28%, transparent) !important;
  border-color: color-mix(in oklab, var(--color-primary) 55%, transparent);
}

.row-summary .badge-negative {
  color: var(--color-accent);
  background: color-mix(in oklab, var(--color-accent) 26%, transparent) !important;
  border-color: color-mix(in oklab, var(--color-accent) 55%, transparent);
}

.row-summary .badge-warn {
  color: color-mix(in oklab, var(--color-accent) 58%, var(--color-primary) 42%);
  background: color-mix(in oklab, var(--color-accent) 22%, var(--color-primary) 22%) !important;
  border-color: color-mix(in oklab, var(--color-accent) 45%, var(--color-primary) 20%);
}

/* =======================
   Brand Bar (Header) â€” fixed size
   ======================= */
.app-header {
  position: sticky;
  top: 0;
  z-index: 100; /* Header siempre por encima de todo */

  /* Fondo oscuro para destacar el logo */
  background: linear-gradient(180deg, #0e1116 0%, #151a22 100%);
  color: #e5e7eb;
  border-bottom: 1px solid color-mix(in oklab, white 12%, transparent);

  /* TamaÃ±o fijo (unificado) */
  --header-h: 5.5rem; /* 88px */
  --logo-h: 56px;     /* altura visual del logo */
}

/* (Opcional) Si prefieres mantener mobile mÃ¡s alto, comenta el bloque superior
   y usa este media-query. Si lo dejas, recuerda ajustar --content-sticky-top en mÃ³vil.
@media (min-width: 768px) {
  .app-header { --header-h: 5.5rem; --logo-h: 56px; }
}
*/

.app-header::after {
  content: "";
  position: absolute; left: 0; right: 0; bottom: -1px;
  height: 2px;
  background: linear-gradient(
    90deg,
    var(--color-primary) 0%,
    color-mix(in oklab, var(--color-primary), transparent 40%) 50%,
    var(--color-accent) 100%
  );
  opacity: .9;
}

.app-header .bar {
  height: var(--header-h);
  /* Sin animaciones del shrink */
  transition: none;
}

/* BotÃ³n ghost en header oscuro */
.app-header .btn-ghost {
  color: #e5e7eb;
  border-color: transparent;
  background: transparent;
}
.app-header .btn-ghost:hover { background: rgba(255,255,255,.06); }

/* Glow sutil del logo */
.app-header .brand-logo {
  filter: drop-shadow(0 0 10px rgba(255,255,255,.08));
  transition: none; /* sin transiciÃ³n ligada a scroll */
}

/* Respeta reduced motion */
@media (prefers-reduced-motion: reduce) {
  .app-header .brand-logo { transition: none; }
}

/* Espaciado vertical consistente para el mÃ³dulo de filtros */
:root {
  --filters-row-gap: .75rem;        /* mobile */
}
@media (min-width: 768px) {
  :root { --filters-row-gap: 1rem; } /* desktop */
}
.filters-stack {
  display: grid;
  grid-auto-rows: min-content;
  row-gap: var(--filters-row-gap);
}

/* === SUBCARDS (sub-superficie para fieldsets) === */
.subcard {
  border: 1px solid color-mix(in oklab, var(--color-text) 8%, var(--color-border));
  background: color-mix(in oklab, var(--color-surface-2) 92%, var(--color-surface));
  border-radius: 0.75rem; /* ~rounded-xl */
  box-shadow: 0 1px 6px rgba(0,0,0,.04);
}

/* Uniformar altura mÃ­nima de los inputs (compacto) */
.input { min-height: 2.5rem; /* 40px */ }

/* Divider mÃ¡s suave y reutilizable */
.divider-soft { height: 1px; background: color-mix(in oklab, var(--color-border), transparent 20%); }

/* Badges de campo (AUTO / CALC) mÃ¡s visibles pero sutiles */
.badge-field {
  display: inline-flex; align-items: center; gap: .25rem;
  padding: 2px 6px; border-radius: .5rem; font-size: 10px; line-height: 1; letter-spacing: .02em;
  border: 1px solid color-mix(in oklab, var(--color-primary) 30%, var(--color-border));
  color: color-mix(in oklab, var(--color-primary) 70%, var(--color-text));
  background: color-mix(in oklab, var(--color-primary) 10%, var(--color-surface-2));
}

/* Variante para CALC si quieres un matiz neutro-gris (opcional) */
.badge-field[data-variant="calc"]{
  border-color: color-mix(in oklab, var(--color-text) 18%, var(--color-border));
  color: color-mix(in oklab, var(--color-text) 80%, transparent);
  background: color-mix(in oklab, var(--color-surface-2) 96%, var(--color-surface));
}

/* Lista del Combobox mÃ¡s clara y con sombra algo mayor */
.cb-panel {
  background: var(--color-surface);
  border: 1px solid var(--color-border);
  box-shadow: 0 12px 28px rgba(0,0,0,.12);
  border-radius: .5rem;
}

/* Hover dentro del panel del combobox */
.cb-item:hover, .cb-item:focus {
  background: color-mix(in oklab, var(--color-surface-2) 80%, transparent);
}

/* Hover de inputs: 2â€“3% mÃ¡s claro */
.input:hover {
  background: color-mix(in oklab, var(--color-surface-2) 92%, white);
}
/* --- Modal chrome (header/footer) --- */
:root{
  /* Toma tokens del header si existen; fallback = mismo gradiente del header */
  --modal-chrome-bg: var(--app-header-bg, linear-gradient(180deg, #0e1116 0%, #151a22 100%));
  --modal-chrome-fg: var(--app-header-fg, #e5e7eb);
  --modal-chrome-border: #ffffff1a;   /* borde sutil */
  --modal-chrome-hover: #ffffff14;    /* hover suave */
}

.modal-chrome{
  background: var(--modal-chrome-bg);
  color: var(--modal-chrome-fg);
  border-color: var(--modal-chrome-border);
  backdrop-filter: blur(4px);
}

/* separadores sutiles + respeta el radio de la card */
.modal-header{
  box-shadow: inset 0 -1px 0 rgba(255,255,255,.05);
  border-top-left-radius: 1rem;
  border-top-right-radius: 1rem;
}
.modal-footer{
  box-shadow: inset 0  1px 0 rgba(255,255,255,.05);
  border-bottom-left-radius: 1rem;
  border-bottom-right-radius: 1rem;
}

/* botones dentro del chrome */
.modal-chrome .btn-ghost{
  color: var(--modal-chrome-fg);
  border-color: transparent;
}
.modal-chrome .btn-ghost:hover{ background: var(--modal-chrome-hover); }
.modal-chrome .btn-primary{ box-shadow: 0 10px 24px rgba(16,185,129,.25); }

/* opcional: fina â€œcintaâ€ de acento arriba del header */
.modal-chrome .accent-strip{
  position: absolute; inset: 0 auto auto 0; height: 3px; width: 100%;
  background-image: linear-gradient(90deg,
    color-mix(in srgb, var(--color-primary), transparent 40%),
    color-mix(in srgb, var(--color-accent),  transparent 40%)
  );
  opacity: .9;
}
@supports not (color-mix(in srgb, red, blue)){
  .modal-chrome .accent-strip{
    background-image: linear-gradient(90deg, var(--color-primary), var(--color-accent));
    opacity: .6;
  }
}

/* --- Edge fades en el Ã¡rea scroll del modal --- */
/* (coloca <div class="edge-fade edge-top" /> y <div class="edge-fade edge-bottom" /> dentro del contenedor scroll) */
.edge-fade{
  position: sticky;
  pointer-events: none;
  z-index: 5;
  height: 14px;
  /* el body del modal tiene padding horizontal px-5 (1.25rem) */
  margin-left: -1.25rem;
  margin-right: -1.25rem;
}
.edge-top{
  top: 0;
  margin-top: -14px;
  background: linear-gradient(to bottom,
    color-mix(in oklab, var(--color-text) 20%, transparent),
    transparent
  );
}
.edge-bottom{
  bottom: 0;
  margin-bottom: -14px;
  background: linear-gradient(to top,
    color-mix(in oklab, var(--color-text) 20%, transparent),
    transparent
  );
}

/* --- Segmented / Pill Tabs (accesibles con role="tab") --- */
.segmented {
  display: inline-flex;
  gap: .25rem;
  padding: .25rem;
  border: 1px solid var(--color-border);
  border-radius: 9999px;
  background: color-mix(in oklab, var(--color-surface-2) 92%, var(--color-surface));
  box-shadow: 0 1px 6px rgba(0,0,0,.05);
}
.segmented [role="tab"] {
  padding: .5rem .875rem;
  border-radius: 9999px;
  font-size: .875rem;
  color: color-mix(in oklab, var(--color-text) 80%, transparent);
  transition: background-color .15s ease, color .15s ease, box-shadow .15s ease;
}
.segmented [role="tab"]:hover {
  background: color-mix(in oklab, var(--color-surface) 88%, transparent);
}
.segmented [role="tab"][aria-selected="true"] {
  background: var(--color-surface);
  color: var(--color-text);
  box-shadow: 0 2px 10px rgba(0,0,0,.08);
}

/* --- Tiles de estadÃ­stica (coherentes con KPIBar) --- */
.stat-tile {
  border: 1px solid color-mix(in oklab, var(--color-text) 8%, var(--color-border));
  background: color-mix(in oklab, var(--color-surface-2) 92%, var(--color-surface));
  border-radius: .75rem; /* ~rounded-xl */
  box-shadow: 0 1px 6px rgba(0,0,0,.04);
}

/* --- Tabla editable del Manage (sub-superficie + header sticky) --- */
.manage-table {
  border: 1px solid var(--color-border);
  border-radius: .75rem;
  background: var(--color-surface);
  box-shadow: 0 1px 6px rgba(0,0,0,.06);
  overflow: hidden;
}
.manage-table thead th {
  position: sticky; top: 0; z-index: 1;
  background: var(--color-surface-2);
  color: color-mix(in oklab, var(--color-text) 80%, transparent);
  box-shadow: 0 1px 0 0 var(--color-border), 0 6px 16px rgba(0,0,0,.04);
  border-bottom: 1px solid var(--color-border);
}
/* filas (grid) bajo la cabecera */
.manage-rows > div:hover {
  background: color-mix(in oklab, var(--color-surface-2) 85%, var(--color-surface));
  transition: background-color .12s ease;
}

:root { --footer-h: 40px; } /* altura compacta */

.app-footer{
  position: fixed;
  left: 0; right: 0; bottom: 0;
  height: var(--footer-h);
  z-index: 80;                 /* por debajo de modales (100+) */
  display: flex; align-items: center;
  border-top: 1px solid var(--modal-chrome-border);
  /* la clase .modal-chrome ya aporta fondo/colores coherentes */
  padding-bottom: max(0px, env(safe-area-inset-bottom));
}

/* contenedor interno centrado */
.app-footer .inner{
  width: 100%;
  max-width: 1200px;           /* ajÃºstalo a tu ancho preferido */
  margin: 0 auto;
  padding: 0 .75rem;
  display: flex; align-items: center; justify-content: space-between;
  gap: .75rem;
  font-size: 12px;
}

/* detalles de icono */
.app-footer .heart{
  display: inline-block;
  vertical-align: -2px;
  transition: transform .2s ease;
}
.app-footer .heart:hover{ transform: scale(1.05); }

/* utilidad: aÃ±ade espacio inferior al contenido para no taparlo */
.with-app-footer{
  padding-bottom: calc(var(--footer-h) + max(0px, env(safe-area-inset-bottom)));
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\app\layout.tsx =====
// app/layout.tsx
import type { Metadata } from 'next';
import './globals.css';
import '@/styles/tw.input.css';
import AppProviders from './providers';
import AppHeader from '@/components/AppHeader';
import FooterBar from '@/components/ui/FooterBar';

export const metadata: Metadata = {
  title: 'Monet Email Dashboard',
  description: 'Campaign reporting',
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body
        className="min-h-dvh font-sans antialiased bg-[color:var(--color-bg)] text-[color:var(--color-text)]"
        // Hace que los elementos sticky (tablas/filtros) respeten la altura fija del header
        style={{ ['--content-sticky-top' as any]: '5.5rem' }}
        suppressHydrationWarning
      >
        <AppProviders>
          <div className="with-app-footer">
            <AppHeader />
            {children}
          </div>

          {/* Barra fija inferior */}
          <FooterBar />
        </AppProviders>
      </body>
    </html>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\app\page.tsx =====
'use client';

import { useState } from 'react';
import CampaignTable from '@/components/CampaignTable';
import Sidebar from '@/components/Sidebar';

export default function Page() {
  const [collapsed, setCollapsed] = useState(false);
  const [mobileOpen, setMobileOpen] = useState(false);

  return (
    <main
      data-page="email-campaigns"
      className="mx-auto w-full max-w-none px-3 md:px-4 lg:px-6 py-6"
    >
      {/* BotÃ³n flotante para abrir acciones en mÃ³vil */}
      <button
        onClick={() => setMobileOpen(true)}
        className="fixed bottom-5 left-5 z-40 md:hidden rounded-full border border-[--color-border] bg-[color:var(--color-surface)] px-4 py-2 shadow-lg"
        aria-label="Open actions"
        aria-controls="mobile-actions-drawer"
        aria-expanded={mobileOpen}
      >
        â˜° Actions
      </button>

      {/* Grid principal */}
      <div
        className={[
          'grid grid-cols-1 gap-4 md:gap-5 items-start content-start',
          collapsed
            ? 'md:grid-cols-[64px_1fr]'
            : 'md:grid-cols-[200px_1fr] lg:grid-cols-[220px_1fr]',
        ].join(' ')}
      >
        {/* Sidebar (sticky en desktop) */}
        <aside
          className="self-start md:sticky h-fit w-full"
          // MantÃ©n el sidebar pegado pero respetando el header fijo + 1rem de respiro
          style={{ top: 'calc(var(--content-sticky-top) + 1rem)' }}
        >
          {/* Desktop / tablet */}
          <div className="hidden md:block">
            <Sidebar
              collapsed={collapsed}
              onToggleCollapse={() => setCollapsed(v => !v)}
            />
          </div>

          {/* Mobile drawer */}
          {mobileOpen && (
            <div
              id="mobile-actions-drawer"
              className="fixed inset-0 z-50 md:hidden"
              role="dialog"
              aria-modal="true"
              onMouseDown={(e) => {
                if (e.target === e.currentTarget) setMobileOpen(false);
              }}
            >
              <div className="absolute inset-0 bg-black/60 backdrop-blur-sm" />
              <div className="absolute left-0 top-0 h-full w-[85%] max-w-[320px] p-3">
                <div className="card h-full p-4 overflow-y-auto">
                  <div className="flex items-center justify-between mb-2">
                    <h2 className="text-lg font-semibold">Actions</h2>
                    <button
                      className="btn-ghost"
                      onClick={() => setMobileOpen(false)}
                      aria-label="Close"
                    >
                      âœ•
                    </button>
                  </div>
                  <Sidebar
                    collapsed={false}
                    onToggleCollapse={() => {}}
                    hideCollapseToggle
                    onActionDone={() => setMobileOpen(false)}
                  />
                </div>
              </div>
            </div>
          )}
        </aside>

        {/* Contenido principal */}
        <section className="min-w-0">
          <CampaignTable />
        </section>
      </div>
    </main>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\app\providers.tsx =====
'use client';

import React from 'react';
import { AuthProvider } from '@/context/AuthContext';
import { CatalogOverridesProvider } from '@/context/CatalogOverridesContext';
import { CampaignDataProvider } from '@/context/CampaignDataContext';

// Si tienes mÃ¡s providers (ThemeProvider, Toaster, etc.), mantenlos,
// pero asegÃºrate de que AuthProvider sea el mÃ¡s exterior.

export default function AppProviders({ children }: { children: React.ReactNode }) {
  return (
    <AuthProvider>
      <CatalogOverridesProvider>
        <CampaignDataProvider>
          {children}
        </CampaignDataProvider>
      </CatalogOverridesProvider>
    </AuthProvider>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\app\(auth)\layout.tsx =====
export default function AuthLayout({ children }: { children: React.ReactNode }) {
  // Layout simple y limpio para los formularios
  return (
    <div className="min-h-screen grid place-items-center bg-neutral-50">
      <div className="w-full max-w-md bg-white rounded-xl shadow p-6">
        {children}
      </div>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\app\(auth)\login\page.tsx =====
'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';

export default function LoginPage() {
  const router = useRouter();
  const sp = useSearchParams();
  const redirect = sp.get('redirect') ?? '/';

  // âœ… Cliente de Supabase en cliente (seguro en componentes)
  const supabase = createClientComponentClient();

  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState<string | null>(null);

  // Si ya hay sesiÃ³n, redirige (evita parpadeo si viene autenticado)
  useEffect(() => {
    let cancelled = false;

    supabase.auth.getSession().then(({ data }) => {
      if (!cancelled && data.session) router.replace(redirect);
    });

    return () => {
      cancelled = true;
    };
  }, [router, redirect, supabase]);

  const onSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setErr(null);
    setLoading(true);

    const { error } = await supabase.auth.signInWithPassword({ email, password });

    setLoading(false);

    if (error) {
      setErr(error.message);
      return;
    }
    router.replace(redirect);
  };

  return (
    <form onSubmit={onSubmit} className="space-y-4">
      <h1 className="text-xl font-semibold">Entrar</h1>

      <label className="block">
        <span className="text-sm">Email</span>
        <input
          type="email"
          required
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          className="mt-1 w-full rounded-md border px-3 py-2"
          placeholder="tu@correo.com"
        />
      </label>

      <label className="block">
        <span className="text-sm">ContraseÃ±a</span>
        <input
          type="password"
          required
          minLength={6}
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className="mt-1 w-full rounded-md border px-3 py-2"
          placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢"
        />
      </label>

      {err && <p className="text-red-600 text-sm">{err}</p>}

      <button
        type="submit"
        disabled={loading}
        className="w-full rounded-md bg-black text-white py-2 disabled:opacity-50"
      >
        {loading ? 'Entrandoâ€¦' : 'Entrar'}
      </button>

      <p className="text-sm text-center text-neutral-500">
        Â¿No tienes cuenta?{' '}
        <a href="/register" className="underline">Crear cuenta</a>
      </p>
    </form>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\app\(auth)\register\page.tsx =====
'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '@/lib/supabase/client';

export default function RegisterPage() {
  const router = useRouter();
  const sp = useSearchParams();
  const redirect = sp.get('redirect') || '/';

  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const [loading, setLoading] = useState(false);
  const [info, setInfo] = useState<string | null>(null);
  const [err, setErr] = useState<string | null>(null);

  // Si ya hay sesiÃ³n, redirige
  useEffect(() => {
    supabase.auth.getSession().then(({ data }) => {
      if (data.session) router.replace(redirect);
    });
  }, [router, redirect]);

  const onSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setErr(null);
    setInfo(null);
    setLoading(true);

    const { error } = await supabase.auth.signUp({
      email,
      password,
    });

    setLoading(false);

    if (error) {
      setErr(error.message);
      return;
    }

    // Si en Supabase tienes "Confirm email" activo, verÃ¡s este aviso:
    setInfo('Revisa tu email para confirmar la cuenta. Luego podrÃ¡s iniciar sesiÃ³n.');
    // Si lo tienes desactivado en dev, puedes redirigir directo:
    // router.replace('/login?registered=1');
  };

  return (
    <form onSubmit={onSubmit} className="space-y-4">
      <h1 className="text-xl font-semibold">Crear cuenta</h1>

      <label className="block">
        <span className="text-sm">Email</span>
        <input
          type="email"
          required
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          className="mt-1 w-full rounded-md border px-3 py-2"
          placeholder="tu@correo.com"
        />
      </label>

      <label className="block">
        <span className="text-sm">ContraseÃ±a</span>
        <input
          type="password"
          required
          minLength={6}
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className="mt-1 w-full rounded-md border px-3 py-2"
          placeholder="MÃ­nimo 6 caracteres"
        />
      </label>

      {err && <p className="text-red-600 text-sm">{err}</p>}
      {info && <p className="text-green-700 text-sm">{info}</p>}

      <button
        type="submit"
        disabled={loading}
        className="w-full rounded-md bg-black text-white py-2 disabled:opacity-50"
      >
        {loading ? 'Creandoâ€¦' : 'Crear cuenta'}
      </button>

      <p className="text-sm text-center text-neutral-500">
        Â¿Ya tienes cuenta?{' '}
        <a href="/login" className="underline">Entrar</a>
      </p>
    </form>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\app\(protected)\layout.tsx =====
import { redirect } from 'next/navigation';
import { AuthProvider } from '@/context/AuthContext';
import { getSessionAndAppUser } from '@/lib/auth/server';

export default async function ProtectedLayout({ children }: { children: React.ReactNode }) {
  const { session, appUser } = await getSessionAndAppUser();

  // Si no hay sesiÃ³n -> a login (con redirect bÃ¡sico a "/")
  if (!session) {
    redirect('/login?redirect=%2F');
  }

  // Opcional: bloquear usuarios inactivos
  if (appUser && appUser.is_active === false) {
    redirect('/login?reason=inactive');
  }

  // Envuelve el Ã¡rea privada con el AuthProvider (si no lo haces ya en app/layout.tsx)
  return (
    <AuthProvider>
      {children}
    </AuthProvider>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\app\reports\page.tsx =====
'use client';

import ReportsView from '@/components/reports/ReportsView';

export default function ReportsPage() {
  return (
    <main
      data-page="reports"
      className="mx-auto w-full max-w-none px-3 md:px-4 lg:px-6 py-6"
    >
      <ReportsView />
    </main>
  );
}


===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\z_reposummary\root_components.txt =====
===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ActionsCard.tsx =====

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\AppHeader.tsx =====
'use client';

import Image from 'next/image';
import { useAuth } from '@/context/AuthContext';
import SignOutButton from '@/components/auth/SignOutButton';

export default function AppHeader() {
  const { user, role, loading } = useAuth();

  return (
    <header role="banner" className="app-header">
      <div className="bar mx-auto w-full px-3 md:px-4 lg:px-6 flex items-center justify-between gap-3">
        {/* Logo principal (SVG) */}
        <div className="flex items-center">
          <Image
            src="/dvlogo2.svg"
            alt="Dataventure"
            width={180}
            height={56}
            priority
            style={{ height: 'var(--logo-h)', width: 'auto' }}
            className="brand-logo"
          />
        </div>

        {/* Acciones */}
        <nav aria-label="Header actions" className="flex items-center gap-2">
          <button className="btn-ghost h-9 px-3" aria-label="Toggle theme">ðŸŒ“</button>

          {/* Info de usuario (solo cuando ya sabemos el estado y hay sesiÃ³n) */}
          {!loading && user && (
            <div className="hidden sm:flex items-center gap-2 pr-1">
              <span className="text-sm opacity-70">{user.email}</span>
              {role && (
                <span className="inline-flex items-center rounded-md border px-2 py-0.5 text-xs opacity-80">
                  {role}
                </span>
              )}
            </div>
          )}

          {/* BotÃ³n de cerrar sesiÃ³n solo si hay sesiÃ³n */}
          {!loading && user ? <SignOutButton /> : null}
        </nav>
      </div>
    </header>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\CampaignFilters.tsx =====
'use client';

import { useEffect, useMemo, useRef, useState } from 'react';
import Chip from '@/components/ui/Chip';
import type { Filters } from '@/hooks/useCampaignFilterEngine';

type DatePreset =
  | 'today' | 'yesterday' | 'thisWeek' | 'lastWeek'
  | 'thisMonth' | 'lastMonth' | 'last7' | 'last30' | 'custom';

export default function CampaignFilters({
  filters,
  updateFilters,
  resetFilters,
  options,
  pending = false,
  onOpenColumns,
  onOpenExport,           // â† NUEVO
  exportCount,            // â† NUEVO
}: {
  filters: Filters;
  updateFilters: (patch: Partial<Filters>) => void;
  resetFilters: () => void;
  options: {
    geos: string[];
    partners: string[];
    themes: string[];
    types: string[];
    dbTypes: Array<'B2B' | 'B2C' | 'Mixed'>;
  };
  pending?: boolean;
  onOpenColumns?: () => void;
  onOpenExport?: () => void;   // â† NUEVO
  exportCount?: number;        // â† NUEVO
}) {
  const [qDraft, setQDraft] = useState(filters.q ?? '');
  useEffect(() => { setQDraft(filters.q ?? ''); }, [filters.q]);

  // ---- helpers de fecha
  const fmtLocal = (d: Date) => {
    const y = d.getFullYear();
    const m = String(d.getMonth() + 1).padStart(2, '0');
    const day = String(d.getDate()).padStart(2, '0');
    return `${y}-${m}-${day}`;
  };
  const startOfWeek = (d: Date) => {
    const n = new Date(d.getFullYear(), d.getMonth(), d.getDate());
    const w = (n.getDay() || 7) - 1;
    n.setDate(n.getDate() - w);
    return n;
  };
  const endOfWeek = (d: Date) => {
    const s = startOfWeek(d);
    return new Date(s.getFullYear(), s.getMonth(), s.getDate() + 6);
  };
  const startOfMonth = (d: Date) => new Date(d.getFullYear(), d.getMonth(), 1);
  const endOfMonth   = (d: Date) => new Date(d.getFullYear(), d.getMonth() + 1, 0);

  const rangeForPreset = (p: Exclude<DatePreset,'custom'>): [string, string] => {
    const now = new Date();
    if (p === 'today') {
      const a = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      const s = fmtLocal(a); return [s, s];
    }
    if (p === 'yesterday') {
      const a = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1);
      const s = fmtLocal(a); return [s, s];
    }
    if (p === 'thisWeek') return [fmtLocal(startOfWeek(now)), fmtLocal(endOfWeek(now))];
    if (p === 'lastWeek') {
      const k = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7);
      return [fmtLocal(startOfWeek(k)), fmtLocal(endOfWeek(k))];
    }
    if (p === 'thisMonth') return [fmtLocal(startOfMonth(now)), fmtLocal(endOfMonth(now))];
    if (p === 'lastMonth') {
      const k = new Date(now.getFullYear(), now.getMonth() - 1, 15);
      return [fmtLocal(startOfMonth(k)), fmtLocal(endOfMonth(k))];
    }
    if (p === 'last7') {
      const a = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 6);
      const b = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      return [fmtLocal(a), fmtLocal(b)];
    }
    const a = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 29);
    const b = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    return [fmtLocal(a), fmtLocal(b)];
  };

  const startDate = filters.dateRange?.[0] ?? '';
  const endDate   = filters.dateRange?.[1] ?? '';
  const hasRange  = !!(startDate || endDate);

  const activePreset: DatePreset | null = useMemo(() => {
    if (!startDate || !endDate) return null;
    const candidates: Exclude<DatePreset,'custom'>[] = [
      'today','yesterday','thisWeek','lastWeek','thisMonth','lastMonth','last7','last30',
    ];
    for (const p of candidates) {
      const [s, e] = rangeForPreset(p);
      if (s === startDate && e === endDate) return p;
    }
    return null;
  }, [startDate, endDate]);

  function choosePreset(p: Exclude<DatePreset,'custom'> | 'custom') {
    if (p === 'custom') return;
    const [s, e] = rangeForPreset(p);
    updateFilters({ dateRange: [s, e] });
  }
  function onStartChange(v: string){ updateFilters({ dateRange: [v || null, endDate || null] }); }
  function onEndChange(v: string){ updateFilters({ dateRange: [startDate || null, v || null] }); }

  const inputRef = useRef<HTMLInputElement | null>(null);
  useEffect(() => {
    const el = inputRef.current;
    if (!el) return;
    const handle = (e: KeyboardEvent) => {
      if (e.key === 'Enter') updateFilters({ q: qDraft });
      if (e.key === 'Escape') { setQDraft(''); updateFilters({ q: '' }); }
    };
    el.addEventListener('keydown', handle);
    return () => el.removeEventListener('keydown', handle);
  }, [qDraft, updateFilters]);

  const setTypes   = (v: string) => updateFilters({ types: v === 'ALL' ? [] : [v] });
  const setGeo     = (v: string) => updateFilters({ geos: v === 'ALL' ? [] : [v] });
  const setPartner = (v: string) => updateFilters({ partners: v === 'ALL' ? [] : [v] });
  const setTheme   = (v: string) => updateFilters({ themes: v === 'ALL' ? [] : [v] });
  const setDbType  = (v: string) => updateFilters({ dbTypes: v === 'ALL' ? [] : [v as any] });

  const typeValue  = (filters.types?.[0] ?? 'ALL') as string;
  const geoValue   = (filters.geos?.[0] ?? 'ALL') as string;
  const partnerVal = (filters.partners?.[0] ?? 'ALL') as string;
  const themeVal   = (filters.themes?.[0] ?? 'ALL') as string;
  const dbTypeVal  = (filters.dbTypes?.[0] ?? 'ALL') as string;

  const activeStyle = (on: boolean): React.CSSProperties | undefined =>
    on
      ? {
          borderColor: 'var(--color-primary)',
          boxShadow: '0 0 0 2px color-mix(in oklab, var(--color-primary) 45%, transparent)',
          transition: 'box-shadow 120ms ease, border-color 120ms ease',
        }
      : undefined;

  const spinner = pending ? (
    <span className="ml-2 text-xs opacity-70" role="status" aria-live="polite">recalculandoâ€¦</span>
  ) : null;

  const startRef = useRef<HTMLInputElement | null>(null);
  const endRef   = useRef<HTMLInputElement | null>(null);
  const openPicker = (ref: React.RefObject<HTMLInputElement>) => {
    const el = ref.current;
    if (!el) return;
    // @ts-ignore
    if (el.showPicker) el.showPicker(); else el.focus();
  };

  const activeChips = useMemo(() => {
    const chips: { key: string; label: string; onClear: () => void }[] = [];
    if (qDraft.trim())      chips.push({ key: 'q',      label: `â€œ${qDraft.trim()}â€`, onClear: () => { setQDraft(''); updateFilters({ q: '' }); } });
    if (typeValue !== 'ALL')   chips.push({ key: 'type',   label: `Type: ${typeValue}`,   onClear: () => setTypes('ALL') });
    if (geoValue !== 'ALL')    chips.push({ key: 'geo',    label: `GEO: ${geoValue}`,     onClear: () => setGeo('ALL') });
    if (partnerVal !== 'ALL')  chips.push({ key: 'partner',label: `Partner: ${partnerVal}`, onClear: () => setPartner('ALL') });
    if (themeVal !== 'ALL')    chips.push({ key: 'theme',  label: `Theme: ${themeVal}`,   onClear: () => setTheme('ALL') });
    if (dbTypeVal !== 'ALL')   chips.push({ key: 'db',     label: `DB: ${dbTypeVal}`,     onClear: () => setDbType('ALL') });
    if (hasRange) {
      const label = activePreset ? presetLabel(activePreset) : `${startDate} â†’ ${endDate}`;
      chips.push({ key: 'date', label, onClear: () => updateFilters({ dateRange: [null, null] }) });
    }
    return chips;
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [qDraft, typeValue, geoValue, partnerVal, themeVal, dbTypeVal, startDate, endDate, hasRange, activePreset]);

  return (
    <section className="card p-4 md:p-5">
      {/* Wrapper con gap vertical controlado por --filters-row-gap */}
      <div className="filters-stack">
        {/* BÃºsqueda libre */}
        <div>
          <input
            ref={inputRef}
            placeholder="Search campaign, partner, theme, dbâ€¦"
            value={qDraft}
            onChange={(e) => { setQDraft(e.target.value); updateFilters({ q: e.target.value }); }}
            className="input w-full"
            style={activeStyle(!!qDraft.trim())}
          />
          {spinner}
        </div>

        {/* Selectores rÃ¡pidos */}
        <div className="flex flex-wrap gap-3">
          <select value={typeValue}   onChange={(e) => setTypes(e.target.value)}   className="input" style={activeStyle(typeValue !== 'ALL')}>
            <option value="ALL">Type: All</option>
            {options.types.map(t => <option key={t} value={t}>{t}</option>)}
          </select>

          <select value={geoValue}    onChange={(e) => setGeo(e.target.value)}     className="input" style={activeStyle(geoValue !== 'ALL')}>
            <option value="ALL">GEO: All</option>
            {options.geos.map(g => <option key={g} value={g}>{g}</option>)}
          </select>

          <select value={partnerVal}  onChange={(e) => setPartner(e.target.value)} className="input" style={activeStyle(partnerVal !== 'ALL')}>
            <option value="ALL">Partner: All</option>
            {options.partners.map(x => <option key={x} value={x}>{x}</option>)}
          </select>

          <select value={themeVal}    onChange={(e) => setTheme(e.target.value)}   className="input" style={activeStyle(themeVal !== 'ALL')}>
            <option value="ALL">Theme: All</option>
            {options.themes.map(x => <option key={x} value={x}>{x}</option>)}
          </select>

          <select value={dbTypeVal}   onChange={(e) => setDbType(e.target.value)}  className="input" style={activeStyle(dbTypeVal !== 'ALL')}>
            <option value="ALL">DB Type: All</option>
            {options.dbTypes.map(x => <option key={x} value={x}>{x}</option>)}
          </select>
        </div>

        {/* Presets de fecha */}
        <div className="flex flex-wrap items-center gap-3">
          {([
            ['today','Today'],
            ['yesterday','Yesterday'],
            ['last7','Last 7'],
            ['last30','Last 30'],
            ['thisWeek','This week'],
            ['lastWeek','Last week'],
            ['thisMonth','This month'],
            ['lastMonth','Last month'],
            ['custom','Custom'],
          ] as [DatePreset,string][])
            .map(([key,label]) => {
              const isActive =
                (key !== 'custom' && activePreset === key) ||
                (key === 'custom' && hasRange && !activePreset);
              return (
                <Chip key={key} active={isActive} onClick={() => choosePreset(key === 'custom' ? 'custom' : key)}>
                  {label}
                </Chip>
              );
            })}
        </div>

        {/* Rango de fechas + acciones */}
        <div className="flex flex-wrap items-center gap-3 md:gap-4">
          {/* Start */}
          <div className="relative">
            <input
              ref={startRef}
              type="date"
              value={startDate}
              onChange={e => onStartChange(e.target.value)}
              className="input input-date w-40 pr-9"
              style={activeStyle(!!startDate)}
            />
            <button
              type="button"
              className="absolute inset-y-0 right-0 px-2 rounded-r-lg hover:bg-black/5 focus:outline-none focus:ring-2 focus:ring-primary/40"
              aria-label="Open start date picker"
              onClick={() => openPicker(startRef)}
            >
              <CalendarIcon />
            </button>
          </div>

          {/* End */}
          <div className="relative">
            <input
              ref={endRef}
              type="date"
              value={endDate}
              onChange={e => onEndChange(e.target.value)}
              className="input input-date w-40 pr-9"
              style={activeStyle(!!endDate)}
            />
            <button
              type="button"
              className="absolute inset-y-0 right-0 px-2 rounded-r-lg hover:bg-black/5 focus:outline-none focus:ring-2 focus:ring-primary/40"
              aria-label="Open end date picker"
              onClick={() => openPicker(endRef)}
            >
              <CalendarIcon />
            </button>
          </div>

          <div className="flex-1" />

          {/* === Acciones: Primario | divisor | Secundario === */}
          <div className="flex items-center gap-2 md:gap-3">
            {/* Grupo primario */}
            <div className="flex items-center gap-2 md:gap-3">
              <button onClick={() => updateFilters({ q: qDraft })} className="btn-primary">Apply</button>
              <button onClick={() => { setQDraft(''); resetFilters(); }} className="btn-ghost">Reset</button>
            </div>

            {/* Divisor visual */}
            <div className="h-6 w-px bg-[--color-border] mx-1 md:mx-2" aria-hidden />

            {/* Grupo secundario */}
            <div className="flex items-center gap-2 md:gap-2.5">
              <button
                type="button"
                className="btn-ghost text-sm px-3 py-1.5"
                aria-haspopup="dialog"
                title="Show/Hide columns"
                onClick={() => onOpenColumns?.()}
              >
                Columnsâ€¦
              </button>

              {onOpenExport && (
                <button
                  type="button"
                  className="text-sm px-3 py-1.5 rounded-md border border-[--color-border] hover:border-[--color-primary] hover:bg-[color-mix(in_oklab,var(--color-primary)_12%,transparent)] transition-colors inline-flex items-center gap-1.5"
                  aria-haspopup="dialog"
                  title="Export current view"
                  onClick={() => onOpenExport?.()}
                >
                  <DownloadIcon />
                  <span>Export</span>
                  {typeof exportCount === 'number' && exportCount > 0 && (
                    <span className="ml-0.5 text-[10px] opacity-70">({exportCount})</span>
                  )}
                </button>
              )}
            </div>
          </div>
        </div>

        {/* Chips activos */}
        {activeChips.length > 0 && (
          <div className="pt-2 md:pt-3 border-t border-[--color-border] flex flex-wrap items-center gap-2">
            {activeChips.map(c => (
              <span
                key={c.key}
                className="inline-flex items-center gap-2 rounded-full border border-[--color-border] bg-[color:var(--color-surface-2)] px-3 py-1 text-xs"
              >
                {c.label}
                <button
                  type="button"
                  aria-label={`Clear ${c.key}`}
                  className="rounded-full px-2 py-[2px] hover:bg-black/5"
                  onClick={c.onClear}
                >
                  Ã—
                </button>
              </span>
            ))}
            <button
              className="ml-2 text-xs underline decoration-dotted hover:opacity-80"
              onClick={() => { setQDraft(''); resetFilters(); }}
            >
              Clear all
            </button>
          </div>
        )}
      </div>
    </section>
  );
}

function CalendarIcon() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
      width="16" height="16" fill="none" stroke="currentColor"
      strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" aria-hidden="true"
    >
      <rect x="3" y="4" width="18" height="18" rx="2" ry="2"/>
      <line x1="16" y1="2" x2="16" y2="6"/>
      <line x1="8" y1="2" x2="8" y2="6"/>
      <line x1="3" y1="10" x2="21" y2="10"/>
    </svg>
  );
}

function DownloadIcon() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
      width="14" height="14" fill="none" stroke="currentColor"
      strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" aria-hidden="true"
    >
      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
      <path d="M7 10l5 5 5-5"/>
      <path d="M12 15V3"/>
    </svg>
  );
}

function presetLabel(p: Exclude<DatePreset,'custom'>) {
  switch (p) {
    case 'today': return 'Today';
    case 'yesterday': return 'Yesterday';
    case 'last7': return 'Last 7';
    case 'last30': return 'Last 30';
    case 'thisWeek': return 'This week';
    case 'lastWeek': return 'Last week';
    case 'thisMonth': return 'This month';
    case 'lastMonth': return 'Last month';
  }
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\CampaignKpis.tsx =====
'use client';

import { CampaignRow } from '@/types/campaign';

type Props = { data: CampaignRow[] };

const fmtEUR = new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' });
const fmtInt = new Intl.NumberFormat('es-ES');

export default function CampaignKpis({ data }: Props) {
  const total = data.length;

  let vSent = 0, turnover = 0, margin = 0;
  for (const r of data) {
    vSent   += r.vSent || 0;
    turnover += r.turnover || 0;
    margin  += r.margin || 0;
  }

  // eCPM ponderado por vSent (mÃ¡s representativo que el promedio simple)
  const weightedEcpm = vSent > 0 ? (turnover / vSent) * 1000 : 0;

  const cards: Array<{ label: string; value: string; tone?: 'pos'|'neg'|null }> = [
    { label: 'Campaigns',     value: fmtInt.format(total) },
    { label: 'Total V Sent',  value: fmtInt.format(vSent) },
    { label: 'Turnover',      value: fmtEUR.format(turnover) },
    { label: 'Margin',        value: fmtEUR.format(margin), tone: margin > 0 ? 'pos' : margin < 0 ? 'neg' : null },
    { label: 'Weighted eCPM', value: fmtEUR.format(weightedEcpm) },
  ];

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-3 mb-4">
      {cards.map((c) => (
        <div
          key={c.label}
          className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-4 shadow-sm"
        >
          <div className="text-xs uppercase opacity-70">{c.label}</div>
          <div
            className={[
              'text-xl font-semibold mt-1',
              c.tone === 'pos' ? 'text-[--color-primary]' : '',
              c.tone === 'neg' ? 'text-[--color-accent]'  : '',
            ].join(' ')}
          >
            {c.value}
          </div>
        </div>
      ))}
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\CampaignTable.tsx =====
'use client';

import { useEffect, useMemo, useRef, useState } from 'react';
import { CampaignRow } from '@/types/campaign';
import { useCampaignData } from '@/context/CampaignDataContext';
import CampaignFilters from './CampaignFilters';
import { useCampaignFilterEngine } from '@/hooks/useCampaignFilterEngine';

import ColumnPicker from '@/components/ui/ColumnPicker';
import RowActions from '@/components/table/RowActions';
import CreateCampaignModal from './create-campaign/CreateCampaignModal';
import type { DBType } from '@/data/reference';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';

import ExportModal from '@/components/export/ExportModal';          // [EXPORT]
import { type ColumnSpec } from '@/utils/exporters';                // [EXPORT]

/* ====== formatters ====== */
const fmtEUR = new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' });
const fmtInt = new Intl.NumberFormat('es-ES');
const fmtPct = new Intl.NumberFormat('es-ES', { style: 'percent', maximumFractionDigits: 2 });

type SortKey = keyof CampaignRow | 'marginPct' | '_idx' | 'none';

const COLVIS_STORAGE_KEY = 'monet_colvis_v1';
const ALWAYS_VISIBLE = new Set(['date', 'campaign']);

/* ====== helpers ====== */
const lc = (s?: string) => (s ?? '').trim().toLowerCase();

/* Canoniza DB Type a su forma correcta o null si no cuadra */
function canonDbType(s?: string): DBType | null {
  const n = lc(s);
  if (n === 'b2b') return 'B2B';
  if (n === 'b2c') return 'B2C';
  if (n === 'mixed') return 'Mixed';
  return null;
}

/* ====== tipos ====== */
type SummaryAgg = {
  vSent: number; routingCosts: number; qty: number; turnover: number; margin: number;
  weightedEcpm: number; marginPct: number | null; count: number;
};

type ColumnDef = {
  id:
    | 'date' | 'campaign' | 'advertiser' | 'invoiceOffice' | 'partner' | 'theme'
    | 'price' | 'type' | 'vSent' | 'routingCosts' | 'qty' | 'turnover'
    | 'margin' | 'marginPct' | 'ecpm' | 'database' | 'geo' | 'databaseType';
  label: string;
  numeric?: boolean;
  defaultVisible?: boolean;
  sortable?: boolean;
  sortKey?: SortKey;
  renderCell: (r: CampaignRow) => React.ReactNode;
  renderSummary?: (s: SummaryAgg) => React.ReactNode;
};

/* ====== helpers de estilo ====== */
type MarginTier = 'green' | 'amber' | 'red' | null;
function marginPctTier(pct: number | null | undefined): MarginTier {
  if (pct == null) return null;
  if (pct >= 0.70) return 'green';
  if (pct >= 0.01) return 'amber';
  return 'red';
}
function marginPctTextClass(pct: number | null | undefined) {
  const t = marginPctTier(pct);
  switch (t) {
    case 'green': return 'text-[color:var(--color-primary)]';
    case 'amber': return 'text-[color-mix(in_oklab,var(--color-accent)_58%,var(--color-primary)_42%)]';
    case 'red':   return 'text-[color:var(--color-accent)]';
    default:      return 'opacity-70';
  }
}

/* === iconos === */
function SortIcon({ active, dir }: { active: boolean; dir: 'asc' | 'desc' }) {
  if (!active) {
    return (
      <svg width="10" height="10" viewBox="0 0 24 24" aria-hidden>
        <path d="M7 10l5-5 5 5" fill="none" stroke="currentColor" strokeWidth="2"/>
        <path d="M7 14l5 5 5-5" fill="none" stroke="currentColor" strokeWidth="2" opacity=".6"/>
      </svg>
    );
  }
  return dir === 'asc' ? (
    <svg width="10" height="10" viewBox="0 0 24 24" aria-hidden>
      <path d="M7 14l5-5 5 5" fill="none" stroke="currentColor" strokeWidth="2"/>
    </svg>
  ) : (
    <svg width="10" height="10" viewBox="0 0 24 24" aria-hidden>
      <path d="M7 10l5 5 5-5" fill="none" stroke="currentColor" strokeWidth="2"/>
    </svg>
  );
}
function DownIcon() {
  return (
    <svg width="12" height="12" viewBox="0 0 24 24" aria-hidden>
      <path d="M7 10l5 5 5-5" fill="none" stroke="currentColor" strokeWidth="2"/>
    </svg>
  );
}

/* ====== columnas ====== */
const COLUMN_DEFS: ColumnDef[] = [
  { id: 'date', label: 'DATE', defaultVisible: true, sortable: true, sortKey: 'date',
    renderCell: (r) => new Date(r.date).toLocaleDateString('es-ES') },
  { id: 'campaign', label: 'CAMPAIGN', defaultVisible: true, sortable: true, sortKey: 'campaign',
    renderCell: (r) => r.campaign },
  { id: 'advertiser', label: 'ADVERTISER', defaultVisible: true, sortable: true, sortKey: 'advertiser',
    renderCell: (r) => r.advertiser },
  { id: 'invoiceOffice', label: 'INVOICE OFFICE', defaultVisible: true, sortable: true, sortKey: 'invoiceOffice',
    renderCell: (r) => r.invoiceOffice },
  { id: 'partner', label: 'PARTNER', defaultVisible: true, sortable: true, sortKey: 'partner',
    renderCell: (r) => r.partner },
  { id: 'theme', label: 'THEME', defaultVisible: true, sortable: true, sortKey: 'theme',
    renderCell: (r) => r.theme },
  { id: 'price', label: 'PRICE', numeric: true, defaultVisible: true, sortable: true, sortKey: 'price',
    renderCell: (r) => fmtEUR.format(r.price) },
  { id: 'type', label: 'TYPE', defaultVisible: true, sortable: true, sortKey: 'type',
    renderCell: (r) => r.type },
  { id: 'vSent', label: 'V SENT', numeric: true, defaultVisible: true, sortable: true, sortKey: 'vSent',
    renderCell: (r) => fmtInt.format(r.vSent), renderSummary: (s) => fmtInt.format(s.vSent) },
  { id: 'routingCosts', label: 'ROUTING COSTS', numeric: true, defaultVisible: true, sortable: true, sortKey: 'routingCosts',
    renderCell: (r) => fmtEUR.format(r.routingCosts), renderSummary: (s) => fmtEUR.format(s.routingCosts) },
  { id: 'qty', label: 'QTY', numeric: true, defaultVisible: true, sortable: true, sortKey: 'qty',
    renderCell: (r) => fmtInt.format(r.qty), renderSummary: (s) => fmtInt.format(s.qty) },
  { id: 'turnover', label: 'TURNOVER', numeric: true, defaultVisible: true, sortable: true, sortKey: 'turnover',
    renderCell: (r) => fmtEUR.format(r.turnover), renderSummary: (s) => fmtEUR.format(s.turnover) },
  { id: 'margin', label: 'MARGIN', numeric: true, defaultVisible: true, sortable: true, sortKey: 'margin',
    renderCell: (r) => {
      const pct = r.turnover > 0 ? r.margin / r.turnover : null;
      return <span className={marginPctTextClass(pct)}>{fmtEUR.format(r.margin)}</span>;
    },
    renderSummary: (s) => (
      <span className={marginPctTextClass(s.marginPct)}>{fmtEUR.format(s.margin)}</span>
    ) },
  { id: 'marginPct', label: 'MARGIN (%)', numeric: true, defaultVisible: true, sortable: true, sortKey: 'marginPct',
    renderCell: (r) => {
      const pct = r.turnover > 0 ? r.margin / r.turnover : null;
      return <span className={marginPctTextClass(pct)}>{pct == null ? 'â€”' : fmtPct.format(pct)}</span>;
    },
    renderSummary: (s) => {
      const tier = marginPctTier(s.marginPct);
      const badge =
        tier === 'green' ? 'badge-positive'
        : tier === 'amber' ? 'badge-warn'
        : tier === 'red'   ? 'badge-negative'
        : '';
      return (
        <span className={`font-bold ${marginPctTextClass(s.marginPct)} ${badge}`}>
          {s.marginPct == null ? 'â€”' : fmtPct.format(s.marginPct)}
        </span>
      );
    } },
  { id: 'ecpm', label: 'ECPM', numeric: true, defaultVisible: true, sortable: true, sortKey: 'ecpm',
    renderCell: (r) => fmtEUR.format(r.ecpm), renderSummary: (s) => fmtEUR.format(s.weightedEcpm) },
  { id: 'database', label: 'DATABASE', defaultVisible: true, sortable: true, sortKey: 'database',
    renderCell: (r) => r.database },
  { id: 'geo', label: 'GEO', defaultVisible: true, sortable: true, sortKey: 'geo',
    renderCell: (r) => r.geo },
  { id: 'databaseType', label: 'DB TYPE', defaultVisible: true, sortable: true, sortKey: 'databaseType',
    renderCell: (r) => r.databaseType },
];

/* ====== [EXPORT] columnas crudas para export ====== */
const EXPORT_COLS_ALL: ColumnSpec[] = [
  { id: 'date',         label: 'DATE',            accessor: r => r.date },
  { id: 'campaign',     label: 'CAMPAIGN',        accessor: r => r.campaign },
  { id: 'advertiser',   label: 'ADVERTISER',      accessor: r => r.advertiser },
  { id: 'invoiceOffice',label: 'INVOICE OFFICE',  accessor: r => r.invoiceOffice },
  { id: 'partner',      label: 'PARTNER',         accessor: r => r.partner },
  { id: 'theme',        label: 'THEME',           accessor: r => r.theme },
  { id: 'price',        label: 'PRICE',           accessor: r => r.price },
  { id: 'type',         label: 'TYPE',            accessor: r => r.type },
  { id: 'vSent',        label: 'V SENT',          accessor: r => r.vSent },
  { id: 'routingCosts', label: 'ROUTING COSTS',   accessor: r => r.routingCosts },
  { id: 'qty',          label: 'QTY',             accessor: r => r.qty },
  { id: 'turnover',     label: 'TURNOVER',        accessor: r => r.turnover },
  { id: 'margin',       label: 'MARGIN',          accessor: r => r.margin },
  { id: 'marginPct',    label: 'MARGIN (%)',      accessor: r => (r.turnover > 0 ? r.margin / r.turnover : null) },
  { id: 'ecpm',         label: 'ECPM',            accessor: r => r.ecpm },
  { id: 'database',     label: 'DATABASE',        accessor: r => r.database },
  { id: 'geo',          label: 'GEO',             accessor: r => r.geo },
  { id: 'databaseType', label: 'DB TYPE',         accessor: r => r.databaseType },
];

/* ====== helpers periodo (badge en KPIs) ====== */
function fmtLocal(d: Date) {
  const y = d.getFullYear();
  const m = String(d.getMonth() + 1).padStart(2, '0');
  const day = String(d.getDate()).padStart(2, '0');
  return `${y}-${m}-${day}`;
}
function startOfWeek(d: Date) {
  const n = new Date(d.getFullYear(), d.getMonth(), d.getDate());
  const w = (n.getDay() || 7) - 1;
  n.setDate(n.getDate() - w);
  return n;
}
function endOfWeek(d: Date) {
  const s = startOfWeek(d);
  return new Date(s.getFullYear(), s.getMonth(), s.getDate() + 6);
}
function startOfMonth(d: Date) { return new Date(d.getFullYear(), d.getMonth(), 1); }
function endOfMonth(d: Date) { return new Date(d.getFullYear(), d.getMonth() + 1, 0); }
function rangeForPresetKey(
  key: 'today'|'yesterday'|'thisWeek'|'lastWeek'|'thisMonth'|'lastMonth'|'last7'|'last30'
): [string,string] {
  const now = new Date();
  if (key==='today')     { const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()); const s=fmtLocal(a); return [s,s]; }
  if (key==='yesterday') { const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()-1); const s=fmtLocal(a); return [s,s]; }
  if (key==='thisWeek')  return [fmtLocal(startOfWeek(now)), fmtLocal(endOfWeek(now))];
  if (key==='lastWeek')  { const k=new Date(now.getFullYear(),now.getMonth(),now.getDate()-7); return [fmtLocal(startOfWeek(k)), fmtLocal(endOfWeek(k))]; }
  if (key==='thisMonth') return [fmtLocal(startOfMonth(now)), fmtLocal(endOfMonth(now))];
  if (key==='lastMonth') { const k=new Date(now.getFullYear(),now.getMonth()-1,15); return [fmtLocal(startOfMonth(k)), fmtLocal(endOfMonth(k))]; }
  if (key==='last7')     { const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()-6); const b=new Date(now.getFullYear(),now.getMonth(),now.getDate()); return [fmtLocal(a),fmtLocal(b)]; }
  const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()-29);
  const b=new Date(now.getFullYear(),now.getMonth(),now.getDate());
  return [fmtLocal(a),fmtLocal(b)];
}
function activePresetLabelFromRange(range?: [string|null,string|null] | null) {
  const start = range?.[0], end = range?.[1];
  if (!start || !end) return null;
  const entries = [
    ['today','Today'],['yesterday','Yesterday'],['thisWeek','This week'],['lastWeek','Last week'],
    ['thisMonth','This month'],['lastMonth','Last month'],['last7','Last 7'],['last30','Last 30'],
  ] as const;
  for (const [k,label] of entries) {
    const [s,e] = rangeForPresetKey(k as any);
    if (s===start && e===end) return label;
  }
  return `${start} â†’ ${end}`;
}

/* ====== KPI tile ====== */
function KpiTile({
  label, value, tone, asBadge = false, subValue, rightHint, title,
}: {
  label: string; value: string; tone?: 'pos' | 'warn' | 'neg' | null;
  asBadge?: boolean; subValue?: string | null; rightHint?: string | null; title?: string;
}) {
  const toneText =
    tone === 'pos'  ? 'text-[color:var(--color-primary)]' :
    tone === 'neg'  ? 'text-[color:var(--color-accent)]' :
    tone === 'warn' ? 'text-[color-mix(in_oklab,var(--color-accent)_58%,var(--color-primary)_42%)]'
                    : 'opacity-90';

  const badgeClass =
    tone === 'pos'
      ? 'text-[color:var(--color-primary)] bg-[color-mix(in_oklab,var(--color-primary)_32%,transparent)] border border-[color-mix(in_oklab,var(--color-primary)_55%,transparent)]'
      : tone === 'neg'
      ? 'text-[color:var(--color-accent)] bg-[color-mix(in_oklab,var(--color-accent)_30%,transparent)] border border-[color-mix(in_oklab,var(--color-accent)_55%,transparent)]'
      : tone === 'warn'
      ? 'text-[color-mix(in_oklab,var(--color-accent)_58%,var(--color-primary)_42%)] bg-[color-mix(in_oklab,var(--color-accent)_22%,var(--color-primary)_22%)] border border-[color-mix(in_oklab,var(--color-accent)_45%,var(--color-primary)_20%)]'
      : 'bg-[color-mix(in_oklab,var(--color-text)_14%,transparent)] text-[color-mix(in_oklab,var(--color-text)_90%,black)] border border-[color-mix(in_oklab,var(--color-text)_22%,transparent)]';

  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface-2)]/60 p-3 md:p-4 min-h-[92px]" title={title}>
      <div className="text-[11px] md:text-xs uppercase tracking-wide opacity-70">{label}</div>
      {asBadge ? (
        <div className="mt-2">
          <span className={['inline-flex items-center gap-1 px-2 py-0.5 rounded-full text-sm font-bold tabular-nums leading-tight', badgeClass].join(' ')}>
            {tone === 'neg' ? <DownIcon /> : null}
            {value}
          </span>
          {subValue ? <div className={['mt-1 text-xs tabular-nums leading-tight', toneText].join(' ')}>{subValue}</div> : null}
        </div>
      ) : (
        <div className={['mt-1 flex items-baseline gap-2', toneText].join(' ')}>
          <span className="text-lg md:text-xl font-semibold tabular-nums leading-tight">{value}</span>
          {rightHint ? <span className="text-[11px] md:text-xs opacity-70">{rightHint}</span> : null}
        </div>
      )}
    </div>
  );
}

/* =================================================================== */

export default function CampaignTable() {
  const { rows, removeCampaign } = useCampaignData();

  /* ====== CatÃ¡logos canÃ³nicos ====== */
  const catalogs = useCatalogOverrides();
  const PARTNERS = catalogs?.PARTNERS ?? [];
  const THEMES = (catalogs?.THEMES ?? []) as string[];
  const TYPES = (catalogs?.TYPES ?? ['CPL', 'CPM', 'CPC', 'CPA']).slice();

  /* ====== Filtros ====== */
  const engine = useCampaignFilterEngine(rows);
  const dataSource = engine.filteredRows as unknown as (CampaignRow & { _idx: number })[];

  // Opciones sin duplicados y con etiquetas canÃ³nicas
  const options = useMemo(() => {
    // quÃ© hay presente en el dataset (normalizado)
    const presentTypesLc = new Set(rows.map(r => lc(r.type)).filter(Boolean));
    const presentPartners = new Set(rows.map(r => lc(r.partner)).filter(Boolean));
    const presentThemes = new Set(rows.map(r => lc(r.theme)).filter(Boolean));
    const presentGeos = new Set(rows.map(r => (r.geo ?? '').trim().toUpperCase()).filter(Boolean));
    const presentDbTypes = new Set(
      rows.map(r => canonDbType(r.databaseType)).filter((x): x is DBType => !!x)
    );

    // mapas canÃ³nicos (lc -> etiqueta canÃ³nica)
    const partnerMap = new Map(PARTNERS.map(p => [lc(p.name), p.name]));
    const themeMap = new Map(THEMES.map(t => [lc(t), t]));

    // TYPE: intersecciÃ³n entre canÃ³nicos y presentes (evita cpl/CPL)
    const typeOpts = TYPES.filter(t => presentTypesLc.has(lc(t)));

    // PARTNER/THEME: colapsa por lc y etiqueta con la canÃ³nica si existe
    const partnerOpts = Array.from(presentPartners)
      .map(k => partnerMap.get(k) ?? (rows.find(r => lc(r.partner) === k)?.partner ?? k))
      .sort((a, b) => a.localeCompare(b, 'es'));

    const themeOpts = Array.from(presentThemes)
      .map(k => themeMap.get(k) ?? (rows.find(r => lc(r.theme) === k)?.theme ?? k))
      .sort((a, b) => a.localeCompare(b, 'es'));

    // GEO: mayÃºsculas
    const geoOpts = Array.from(presentGeos).sort();

    // DB TYPE: orden estable canÃ³nico
    const dbOrder: DBType[] = ['B2B', 'B2C', 'Mixed'];
    const dbTypeOpts = dbOrder.filter(t => presentDbTypes.has(t));

    return {
      geos: geoOpts,
      partners: partnerOpts,
      themes: themeOpts,
      types: typeOpts,
      dbTypes: dbTypeOpts,
    };
  }, [rows, PARTNERS, THEMES, TYPES]);

  /* ====== Orden/paginaciÃ³n ====== */
  const [sortKey, setSortKey] = useState<SortKey>('none');
  const [sortDir, setSortDir] = useState<'asc' | 'desc'>('asc');
  const [page, setPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);

  const [editing, setEditing] = useState<CampaignRow | null>(null);
  const [seedCreate, setSeedCreate] = useState<CampaignRow | null>(null);
  const [flashId, setFlashId] = useState<string | null>(null);

  // [EXPORT]
  const [openExport, setOpenExport] = useState(false);

  /* ====== Column visibility persistente ====== */
  const defaults = useMemo(
    () => COLUMN_DEFS.filter(c => c.defaultVisible !== false).map(c => c.id),
    []
  );
  const defaultVisibleSet = useMemo(() => {
    const s = new Set<string>(defaults);
    for (const id of ALWAYS_VISIBLE) s.add(id);
    return s;
  }, [defaults]);

  const [visibleIds, setVisibleIds] = useState<Set<string>>(
    () => new Set(defaultVisibleSet)
  );
  useEffect(() => {
    try {
      const raw = localStorage.getItem(COLVIS_STORAGE_KEY);
      if (!raw) return;
      const arr = JSON.parse(raw) as string[];
      const next = new Set(arr.filter(id => COLUMN_DEFS.some(c => c.id === id)));
      for (const id of ALWAYS_VISIBLE) next.add(id);
      let changed = next.size !== defaultVisibleSet.size;
      if (!changed) for (const id of next) if (!defaultVisibleSet.has(id)) { changed = true; break; }
      if (changed) setVisibleIds(next);
    } catch {}
  }, [defaultVisibleSet]);

  const applyVisible = (next: Set<string>) => {
    for (const id of ALWAYS_VISIBLE) next.add(id);
    if (sortKey !== 'none') {
      const sortedCol = COLUMN_DEFS.find(c => (c.sortKey ?? (c.id as SortKey)) === sortKey);
      if (sortedCol && !next.has(sortedCol.id)) setSortKey('none');
    }
    setVisibleIds(new Set(next));
    try { localStorage.setItem(COLVIS_STORAGE_KEY, JSON.stringify([...next])); } catch {}
  };

  useEffect(() => { setPage(1); }, [dataSource, sortKey, sortDir, pageSize, visibleIds]);

  const visibleCols = useMemo(
    () => COLUMN_DEFS.filter(c => visibleIds.has(c.id)),
    [visibleIds]
  );
  const marginPctOf = (r: CampaignRow) => (r.turnover > 0 ? r.margin / r.turnover : null);

  useEffect(() => {
    if (!flashId) return;
    const t = setTimeout(() => setFlashId(null), 1400);
    return () => clearTimeout(t);
  }, [flashId]);

  const sortedAll = useMemo(() => {
    const arr = [...dataSource];
    if (sortKey === 'none') return arr;
    return arr.sort((a, b) => {
      let va: any, vb: any;
      if (sortKey === 'marginPct') { va = marginPctOf(a); vb = marginPctOf(b); }
      else { va = (a as any)[sortKey]; vb = (b as any)[sortKey]; }

      if (va == null && vb == null) return a._idx - b._idx;
      if (va == null) return 1;
      if (vb == null) return -1;

      let cmp = typeof va === 'number' && typeof vb === 'number'
        ? va - vb
        : String(va).localeCompare(String(vb));
      if (cmp === 0) cmp = a._idx - b._idx;
      return sortDir === 'asc' ? cmp : -cmp;
    });
  }, [dataSource, sortKey, sortDir]);

  type Totals = { vSent: number; routingCosts: number; qty: number; turnover: number; margin: number; weightedEcpm: number; };
  const summary = useMemo<SummaryAgg>(() => {
    const init: Totals = { vSent: 0, routingCosts: 0, qty: 0, turnover: 0, margin: 0, weightedEcpm: 0 };
    const totals = sortedAll.reduce<Totals>((acc, r) => {
      acc.vSent += r.vSent || 0;
      acc.routingCosts += r.routingCosts || 0;
      acc.qty += r.qty || 0;
      acc.turnover += r.turnover || 0;
      acc.margin += r.margin || 0;
      acc.weightedEcpm += (r.ecpm || 0) * (r.vSent || 0);
      return acc;
    }, init);
    const weightedEcpm = totals.vSent > 0 ? totals.weightedEcpm / totals.vSent : 0;
    const marginPct = totals.turnover > 0 ? totals.margin / totals.turnover : null;
    return { ...totals, weightedEcpm, marginPct, count: sortedAll.length };
  }, [sortedAll]);

  const pageCount = Math.max(1, Math.ceil(sortedAll.length / pageSize));
  const start = (page - 1) * pageSize;
  const end = start + pageSize;
  const pageRows = sortedAll.slice(start, end);

  function setSortBy(k: SortKey) {
    if (sortKey !== k) { setSortKey(k); setSortDir('asc'); }
    else { setSortDir(sortDir === 'asc' ? 'desc' : 'asc'); }
  }

  /* ====== MediciÃ³n de alturas para la lÃ¡mina / offset ====== */
  const refFilters = useRef<HTMLDivElement>(null);
  const refKpis = useRef<HTMLDivElement>(null);
  const [sizes, setSizes] = useState({ filters: 0, kpis: 0 });

  const bandGapPx = 16; // debe casar con --band-gap-y

  useEffect(() => {
    const update = () => {
      setSizes({
        filters: refFilters.current?.offsetHeight ?? 0,
        kpis: refKpis.current?.offsetHeight ?? 0,
      });
    };
    const ro = new ResizeObserver(update);
    if (refFilters.current) ro.observe(refFilters.current);
    if (refKpis.current) ro.observe(refKpis.current);
    window.addEventListener('resize', update);
    update();
    return () => {
      ro.disconnect();
      window.removeEventListener('resize', update);
    };
  }, []);

  // Offset donde debe â€œpegarseâ€ el thead (debajo del stack sticky)
  const stackedBottom = `calc(var(--content-sticky-top) + ${sizes.filters}px + ${bandGapPx}px + ${sizes.kpis}px)`;

  /* === Header de columna sticky â€” usa la regla CSS global === */
  const Th = ({ col }: { col: ColumnDef }) => {
    const active = col.sortable && sortKey === (col.sortKey ?? (col.id as SortKey));
    const ariaSort =
      col.sortable
        ? (active ? (sortDir === 'asc' ? 'ascending' : 'descending') : 'none')
        : undefined;
    return (
      <th
        onClick={col.sortable ? () => setSortBy(col.sortKey ?? (col.id as SortKey)) : undefined}
        aria-sort={ariaSort as any}
        className={`${col.numeric ? 'text-right whitespace-nowrap' : 'text-left'} ${col.sortable ? 'cursor-pointer select-none' : ''}`}
      >
        <div className="flex items-center gap-1 justify-between">
          <span>{col.label}</span>
          {col.sortable && <SortIcon active={!!active} dir={sortDir} />}
        </div>
      </th>
    );
  };

  /* ====== Column picker ====== */
  const [pickerOpen, setPickerOpen] = useState(false);
  const pickerColumns = useMemo(
    () => COLUMN_DEFS.map(c => ({ id: c.id, label: c.label, disabled: ALWAYS_VISIBLE.has(c.id) })), []
  );

  // [EXPORT] columnas visibles para export, en el mismo orden actual
  const exportVisibleCols: ColumnSpec[] = useMemo(() => {
    const ids = visibleCols.map(c => c.id);
    return EXPORT_COLS_ALL.filter(c => ids.includes(c.id));
  }, [visibleCols]);

  // [EXPORT] nombre sugerido de archivo con periodo + timestamp corto
  const exportFileBase = useMemo(() => {
    const period = activePresetLabelFromRange(engine.filters.dateRange ?? null) || 'All';
    const stamp = new Date().toISOString().slice(0,16).replace(/[:T]/g,'');
    return `campaigns_${String(period).toLowerCase().replace(/\s+/g,'-')}_${stamp}`;
  }, [engine.filters.dateRange]);

  return (
    <div className="w-full px-2 md:px-3 lg:px-4">
      {/* ===== Sticky stack: Filtros + Backplate + KPIs ===== */}
      <div
        className="-mx-2 md:-mx-3 lg:-mx-4 px-2 md:px-3 lg:px-4"
        style={{ ['--band-gap-y' as any]: `${bandGapPx}px` }}
      >
        {/* Filtros (sticky) */}
        <div
          ref={refFilters}
          style={{
            position: 'sticky',
            top: 'var(--content-sticky-top)',
            zIndex: 60,
            marginBottom: 'var(--band-gap-y)',
          }}
        >
          <CampaignFilters
            filters={engine.filters}
            updateFilters={engine.updateFilters}
            resetFilters={engine.resetFilters}
            options={options}
            pending={engine.pending}
            onOpenColumns={() => setPickerOpen(true)}
            onOpenExport={() => setOpenExport(true)}     // â† NUEVO
            exportCount={sortedAll.length}    // â† NUEVO contador para el botÃ³n Export
          />
        </div>

        {/* LÃ¡mina de fondo â€” debajo de thead */}
        <div
          aria-hidden
          style={{
            position: 'sticky',
            top: 'var(--content-sticky-top)',
            zIndex: 20,      // por debajo de thead (45), KPIs (50) y filtros (60)
            height: 0,
            pointerEvents: 'none',
          }}
        >
          <div
            style={{
              position: 'absolute',
              left: '-0.5rem',
              right: '-0.5rem',
              height: `calc(${sizes.filters}px + ${bandGapPx}px + ${sizes.kpis}px)`,
              background: 'var(--color-bg-outer)',
              borderBottom: '1px solid var(--color-border)',
              boxShadow: '0 6px 16px rgba(0,0,0,.06)',
            }}
          />
        </div>

        {/* KPIs (sticky) */}
        <div
          ref={refKpis}
          style={{
            position: 'sticky',
            top: `calc(var(--content-sticky-top) + ${sizes.filters}px + var(--band-gap-y))`,
            zIndex: 50,
          }}
        >
          <div
            role="region"
            aria-labelledby="kpi-recap-title"
            aria-live="polite"
            className="rounded-xl border border-[--color-border] ring-1 ring-white/10 bg-[color:var(--color-surface)]/90 backdrop-blur-md shadow-xl"
          >
            <h2 id="kpi-recap-title" className="sr-only">Resumen de KPIs</h2>

            {/* badge de periodo + acciones */}
            <div className="px-3 md:px-4 pt-2 flex justify-end">
              <span className="text-[11px] md:text-xs rounded-full px-2 py-1
                                bg-[color-mix(in_oklab,var(--color-text)_10%,transparent)]
                                text-[color-mix(in_oklab,var(--color-text)_85%,black)]">
                {activePresetLabelFromRange(engine.filters.dateRange ?? null) || 'All data'}
              </span>
            </div>
            
            {/* KPIs */}
            <div className="p-3 md:p-4 grid grid-cols-2 sm:grid-cols-4 gap-2 md:gap-3">
              <KpiTile label="Turnover" value={fmtEUR.format(summary.turnover)} title="Suma de turnover del dataset filtrado" />
              <KpiTile
                label="Margin (%)"
                value={summary.marginPct == null ? 'â€”' : fmtPct.format(summary.marginPct)}
                tone={(() => {
                  const tier = marginPctTier(summary.marginPct);
                  return tier === 'green' ? 'pos' : tier === 'amber' ? 'warn' : tier === 'red' ? 'neg' : null;
                })()}
                asBadge
                subValue={fmtEUR.format(summary.margin)}
                title="Margin% = Margin / Turnover"
              />
              <KpiTile label="V Sent" value={fmtInt.format(summary.vSent)} title="Volumen de envÃ­os en el periodo" />
              <KpiTile label="eCPM" value={fmtEUR.format(summary.weightedEcpm)} rightHint="â‚¬/k" title="eCPM ponderado = Î£(ecpmÂ·vSent) / Î£(vSent)" />
            </div>

            <div className="px-3 md:px-4 pb-3 -mt-1 border-t border-white/10 text-xs opacity-80">
              <span className="tabular-nums">
                Routing: <strong>{fmtEUR.format(summary.routingCosts)}</strong> â€¢ QTY: <strong>{fmtInt.format(summary.qty)}</strong>
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* ColumnPicker */}
      {pickerOpen && (
        <ColumnPicker
          columns={pickerColumns}
          visible={visibleIds}
          onChange={applyVisible}
          onClose={() => setPickerOpen(false)}
          defaults={defaults}
        />
      )}

      {/* ====== Tabla ====== */}
      <div
        className="table-wrap mt-6"
        style={{
          // por si en CSS usas la var para el offset
          ['--table-sticky-offset' as any]: stackedBottom,
        }}
      >
        <table className="table min-w-[1280px] tabular-nums">
          <thead>
            <tr>
              {visibleCols.map(col => (
                <Th key={col.id} col={col} />
              ))}
              <th className="w-[1%] text-right pr-2">â‹¯</th>
            </tr>
          </thead>

          <tbody>
            {/* SUMMARY */}
            <tr className="row-summary">
              {visibleCols.map((col, idx) => {
                if (idx === 0) {
                  return <td key={col.id} className="px-3 py-2 text-sm">SUMMARY ({summary.count})</td>;
                }
                const content = col.renderSummary ? col.renderSummary(summary) : null;
                return (
                  <td key={col.id} className={`px-3 py-2 text-sm ${col.numeric ? 'text-right whitespace-nowrap' : ''}`}>
                    {content}
                  </td>
                );
              })}
              <td />
            </tr>

            {/* Filas */}
            {pageRows.map((r) => {
              const rowFlash = r.id === flashId ? 'row-flash' : '';
              return (
                <tr
                  key={r.id}
                  className={`hover:bg-white/5 transition-colors ${rowFlash}`}
                  onDoubleClick={() => setEditing(r)}
                >
                  {visibleCols.map((col) => (
                    <td key={col.id} className={`px-3 py-2 text-sm ${col.numeric ? 'text-right whitespace-nowrap' : ''}`}>
                      {col.renderCell(r)}
                    </td>
                  ))}
                  <td className="px-2 py-2 text-sm">
                    <RowActions
                      onEdit={() => setEditing(r)}
                      onDuplicate={() => setSeedCreate(r)}
                      onDelete={() => {
                        if (!confirm('Delete this campaign? This cannot be undone.')) return;
                        removeCampaign(r.id);
                      }}
                    />
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>

      {/* PaginaciÃ³n */}
      <div className="flex flex-wrap items-center justify-between gap-3 mt-3">
        <div className="text-sm opacity-80">
          Showing {sortedAll.length === 0 ? 0 : start + 1}â€“{Math.min(end, sortedAll.length)} of {sortedAll.length}
        </div>
        <div className="flex items-center gap-2">
          <label className="text-sm">Rows per page</label>
          <select value={pageSize} onChange={(e) => setPageSize(Number(e.target.value))} className="input w-24 py-1 text-sm">
            {[10, 20, 50, 100].map(n => <option key={n} value={n}>{n}</option>)}
          </select>

          <button onClick={() => setPage(p => Math.max(1, p - 1))} disabled={page <= 1} className="btn-ghost disabled:opacity-40 text-sm">
            Previous
          </button>
          <span className="text-sm">Page {page} / {pageCount}</span>
          <button onClick={() => setPage(p => Math.min(pageCount, p + 1))} disabled={page >= pageCount} className="btn-primary disabled:opacity-40 text-sm">
            Next
          </button>
        </div>
      </div>

      {/* Modales */}
      {editing && (
        <CreateCampaignModal
          mode="edit"
          initialRow={editing}
          onClose={() => setEditing(null)}
          onSaved={(id) => { setEditing(null); setFlashId(id); }}
        />
      )}
      {seedCreate && (
        <CreateCampaignModal
          mode="create"
          seed={seedCreate}
          onClose={() => setSeedCreate(null)}
        />
      )}

      {/* [EXPORT] Modal de exportaciÃ³n */}
      {openExport && (
        <ExportModal
          onClose={() => setOpenExport(false)}
          allRows={sortedAll}
          pageRows={pageRows}
          visibleColumns={exportVisibleCols}
          allColumns={EXPORT_COLS_ALL}
          defaultFilename={exportFileBase}
        />
      )}
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\Sidebar.tsx =====
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/context/AuthContext';            // ðŸ†•
import CreateCampaignModal from './create-campaign/CreateCampaignModal';
import ManageCatalogsModal from './catalogs/ManageCatalogsModal';
import ImportCsvModal from './import/ImportCsvModal';
import ManageUsersModal from '@/components/admin/ManageUsersModal'; // ðŸ†•

type Props = {
  collapsed: boolean;
  onToggleCollapse: () => void;
  hideCollapseToggle?: boolean;
  onActionDone?: () => void;
};

export default function Sidebar({
  collapsed,
  onToggleCollapse,
  hideCollapseToggle = false,
  onActionDone,
}: Props) {
  const router = useRouter();
  const { isAdmin, isEditor } = useAuth();                  // ðŸ†•

  const [openCreate, setOpenCreate] = useState(false);
  const [openManage, setOpenManage] = useState(false);
  const [openImport, setOpenImport] = useState(false);
  const [openUsers, setOpenUsers]   = useState(false);      // ðŸ†•

  const btnBase = (extra = '') =>
    collapsed
      ? `flex justify-center items-center rounded-xl border border-[--color-border] px-2 py-2 hover:bg-black/5 transition-colors ${extra}`
      : `w-full rounded-xl border border-[--color-border] px-3 py-2 text-left hover:bg-black/5 transition-colors ${extra}`;

  const BtnCreate = (
    <button
      onClick={() => isEditor && setOpenCreate(true)}
      disabled={!isEditor}
      aria-disabled={!isEditor}
      className={btnBase('disabled:opacity-50 disabled:pointer-events-none')}
      title={isEditor ? 'Create campaign' : 'Editors/Admins only'}
      aria-label="Create campaign"
    >
      <span className="text-lg leading-none">ï¼‹</span>
      {!collapsed && <span className="ml-2">Create campaign{!isEditor ? ' (locked)' : ''}</span>}
    </button>
  );

  const BtnImport = (
    <button
      onClick={() => isAdmin && setOpenImport(true)}
      disabled={!isAdmin}
      aria-disabled={!isAdmin}
      className={btnBase('mt-2 disabled:opacity-50 disabled:pointer-events-none')}
      title={isAdmin ? 'Import from CSV' : 'Admins only'}
      aria-label="Import from CSV"
    >
      <span className="text-lg leading-none">ðŸ“¥</span>
      {!collapsed && <span className="ml-2">Import from CSV{!isAdmin ? ' (admin)' : ''}</span>}
    </button>
  );

  const BtnManage = (
    <button
      onClick={() => isEditor && setOpenManage(true)}
      disabled={!isEditor}
      aria-disabled={!isEditor}
      className={btnBase('mt-2 disabled:opacity-50 disabled:pointer-events-none')}
      title={isEditor ? 'Manage catalogs' : 'Editors/Admins only'}
      aria-label="Manage catalogs"
    >
      <span className="text-lg leading-none">âš™</span>
      {!collapsed && <span className="ml-2">Manage catalogs{!isEditor ? ' (locked)' : ''}</span>}
    </button>
  );

  const BtnUsers = (
    <button
      onClick={() => isAdmin && setOpenUsers(true)}
      disabled={!isAdmin}
      aria-disabled={!isAdmin}
      className={btnBase('mt-2 disabled:opacity-50 disabled:pointer-events-none')}
      title={isAdmin ? 'Manage users' : 'Admins only'}
      aria-label="Manage users"
    >
      <span className="text-lg leading-none">ðŸ‘¥</span>
      {!collapsed && <span className="ml-2">Manage users{!isAdmin ? ' (admin)' : ''}</span>}
    </button>
  );

  const BtnReports = (
    <button
      onClick={() => router.push('/reports')}
      className={btnBase()}
      title="Reports"
      aria-label="Reports"
    >
      <span className="text-lg leading-none">ðŸ“Š</span>
      {!collapsed && <span className="ml-2">Reports</span>}
    </button>
  );

  return (
    <div className={collapsed ? 'shrink-0 self-start w-[56px]' : 'shrink-0 self-start w-full md:w-full'}>
      <div className="grid gap-3">
        <div className={collapsed ? 'card p-2' : 'card p-4'}>
          <div className={['flex items-center mb-2', collapsed ? 'justify-center' : 'justify-between'].join(' ')}>
            {!collapsed && (
              <div>
                <h2 className="text-base font-semibold">Actions</h2>
                <p className="muted text-xs">Quick tools</p>
              </div>
            )}
            {!hideCollapseToggle && (
              <button
                onClick={onToggleCollapse}
                className="rounded-lg border border-[--color-border] px-2 py-1 text-xs hover:bg-black/5 transition-colors"
                aria-label={collapsed ? 'Expand sidebar' : 'Collapse sidebar'}
                title={collapsed ? 'Expand' : 'Collapse'}
              >
                {collapsed ? 'â€º' : 'â€¹'}
              </button>
            )}
          </div>

          {!collapsed ? (
            <div className="space-y-3">
              {BtnCreate}
              {BtnImport}
              {BtnManage}
              {BtnUsers} {/* ðŸ†• */}
            </div>
          ) : (
            <>
              {BtnCreate}
              {BtnImport}
              {BtnManage}
              {BtnUsers} {/* ðŸ†• */}
            </>
          )}
        </div>

        <div className={collapsed ? 'card p-2' : 'card p-4'}>
          <div className={['flex items-center mb-2', collapsed ? 'justify-center' : 'justify-between'].join(' ')}>
            {!collapsed && (
              <div>
                <h2 className="text-base font-semibold">Analytics</h2>
                <p className="muted text-xs">Insights & reports</p>
              </div>
            )}
          </div>
          {!collapsed ? <div className="space-y-3">{BtnReports}</div> : <>{BtnReports}</>}
        </div>
      </div>

      {openCreate && (
        <CreateCampaignModal
          onClose={() => {
            setOpenCreate(false);
            onActionDone?.();
          }}
        />
      )}
      {openImport && (
        <ImportCsvModal
          onClose={() => {
            setOpenImport(false);
            onActionDone?.();
          }}
        />
      )}
      {openManage && (
        <ManageCatalogsModal
          onClose={() => {
            setOpenManage(false);
            onActionDone?.();
          }}
        />
      )}
      {openUsers && (
        <ManageUsersModal
          onClose={() => {
            setOpenUsers(false);
            onActionDone?.();
          }}
        />
      )}
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\UserMenu.tsx =====
'use client';

import { useEffect, useState } from 'react';
import { supabase } from '@/lib/supabase/client';
import { useRouter } from 'next/navigation';

export default function UserMenu() {
  const router = useRouter();
  const [email, setEmail] = useState<string | null>(null);

  useEffect(() => {
    supabase.auth.getUser().then(({ data }) => setEmail(data.user?.email ?? null));
    const { data: sub } = supabase.auth.onAuthStateChange(async () => {
      const { data } = await supabase.auth.getUser();
      setEmail(data.user?.email ?? null);
    });
    return () => sub.subscription.unsubscribe();
  }, []);

  const logout = async () => {
    await supabase.auth.signOut();
    router.replace('/login');
  };

  return (
    <div className="flex items-center gap-3">
      <span className="text-sm text-neutral-600">{email}</span>
      <button
        onClick={logout}
        className="text-sm rounded-md border px-3 py-1 hover:bg-neutral-50"
        title="Cerrar sesiÃ³n"
      >
        Salir
      </button>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\admin\ManageUsersModal.tsx =====
'use client';

import { createPortal } from 'react-dom';
import { useEffect, useMemo, useState } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { useAuth } from '@/context/AuthContext';

type Row = {
  user_id: string | null;
  email: string;
  role: 'admin' | 'editor';
  is_active: boolean;
  created_at: string | null;
  updated_at: string | null;
};

type TabState = 'list' | 'invite';

export default function ManageUsersModal({ onClose }: { onClose: () => void }) {
  const { isAdmin } = useAuth();
  const sb = useMemo(() => createClientComponentClient(), []);
  const [tab, setTab] = useState<TabState>('list');

  const [rows, setRows] = useState<Row[]>([]);
  const [loading, setLoading] = useState(true);
  const [banner, setBanner] = useState<null | { text: string; tone: 'ok'|'err'|'info' }>(null);

  const show = (text: string, tone: 'ok'|'err'|'info'='info') => {
    setBanner({ text, tone });
    window.clearTimeout((show as any)._t);
    (show as any)._t = window.setTimeout(() => setBanner(null), 3200);
  };

  // ---- helpers: detecciÃ³n de "Ãºltimo admin" y traducciÃ³n de errores del trigger
  const isLastActiveAdmin = (email: string) => {
    const admins = rows.filter(r => r.role === 'admin' && !!r.is_active);
    return admins.length === 1 && admins[0].email.toLowerCase() === email.toLowerCase();
  };

  const friendlyDbError = (raw?: string) => {
    const msg = String(raw || '');
    if (/Cannot remove the last active admin/i.test(msg)) {
      return 'No puedes quitar al Ãºltimo administrador activo.';
    }
    if (/Cannot delete the last active admin/i.test(msg)) {
      return 'No puedes borrar la fila del Ãºltimo administrador activo.';
    }
    return msg || 'Se produjo un error inesperado.';
  };

  // Buscar usuarios
  const fetchUsers = async () => {
    setLoading(true);
    const { data, error } = await sb
      .from('app_users')
      .select('user_id,email,role,is_active,created_at,updated_at')
      .order('email', { ascending: true });
    if (error) {
      show(error.message, 'err');
    } else {
      setRows((data || []) as Row[]);
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchUsers();
    // ESC para cerrar
    const onKey = (e: KeyboardEvent) => { if (e.key === 'Escape') onClose(); };
    document.addEventListener('keydown', onKey);
    return () => document.removeEventListener('keydown', onKey);
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Mutaciones
  const updateRole = async (email: string, role: 'admin'|'editor') => {
    // Bloqueo local: no permitir degradar al Ãºltimo admin
    if (role !== 'admin' && isLastActiveAdmin(email)) {
      return show('No puedes quitar al Ãºltimo administrador activo.', 'err');
    }
    const { error } = await sb.from('app_users').update({ role }).eq('email', email);
    if (error) return show(friendlyDbError(error.message), 'err');
    show('Role updated', 'ok');
    setRows(prev => prev.map(r => r.email === email ? { ...r, role } : r));
  };

  const updateActive = async (email: string, is_active: boolean) => {
    // Bloqueo local: no permitir desactivar al Ãºltimo admin
    if (!is_active && isLastActiveAdmin(email)) {
      return show('No puedes desactivar al Ãºltimo administrador activo.', 'err');
    }
    const { error } = await sb.from('app_users').update({ is_active }).eq('email', email);
    if (error) return show(friendlyDbError(error.message), 'err');
    show(is_active ? 'User activated' : 'User deactivated', 'ok');
    setRows(prev => prev.map(r => r.email === email ? { ...r, is_active } : r));
  };

  const removeRow = async (email: string) => {
    // Bloqueo local: no permitir borrar al Ãºltimo admin
    if (isLastActiveAdmin(email)) {
      return show('No puedes borrar la fila del Ãºltimo administrador activo.', 'err');
    }
    if (!confirm(`Delete row for "${email}"? (no borra la cuenta auth)`)) return;
    const { error } = await sb.from('app_users').delete().eq('email', email);
    if (error) return show(friendlyDbError(error.message), 'err');
    show('Row deleted', 'ok');
    setRows(prev => prev.filter(r => r.email !== email));
  };

  // Invite (OTP + upsert fila)
  const [invEmail, setInvEmail] = useState('');
  const [invRole, setInvRole] = useState<'admin'|'editor'>('editor');

  const invite = async () => {
    const email = invEmail.trim().toLowerCase();
    if (!email) return;

    const { error: upErr } = await sb
      .from('app_users')
      .upsert({ email, role: invRole, is_active: true }, { onConflict: 'email' });
    if (upErr) return show(friendlyDbError(upErr.message), 'err');

    try {
      const { error: otpErr } = await sb.auth.signInWithOtp({
        email,
        options: {
          emailRedirectTo:
            typeof window !== 'undefined'
              ? `${location.origin}/auth/callback`
              : undefined,
        },
      });
      if (otpErr) show(`Upsert ok, invite mail failed: ${otpErr.message}`, 'err');
      else show('Invitation sent', 'ok');
    } catch (e: any) {
      show(`Invite failed: ${e?.message || e}`, 'err');
    }

    setInvEmail('');
    setInvRole('editor');
    setTab('list');
    fetchUsers();
  };

  const resendInvite = async (email: string) => {
    try {
      const { error } = await sb.auth.signInWithOtp({
        email,
        options: {
          emailRedirectTo:
            typeof window !== 'undefined'
              ? `${location.origin}/auth/callback`
              : undefined,
        },
      });
      if (error) throw error;
      show('Invitation re-sent', 'ok');
    } catch (e: any) {
      show(e?.message || 'Could not resend invite', 'err');
    }
  };

  // UI
  const body = (
    <div
      className="fixed inset-0 z-[140] flex items-center justify-center p-4"
      role="dialog"
      aria-modal="true"
      onMouseDown={(e) => { if (e.target === e.currentTarget) onClose(); }}
    >
      <div className="absolute inset-0 bg-black/55 backdrop-blur-sm" />
      <div
        className="relative card w-full max-w-4xl max-h-[90vh] overflow-hidden border border-[--color-border] shadow-xl"
        style={{ background: 'var(--color-surface)' }}
        onMouseDown={(e) => e.stopPropagation()}
      >
        {/* Header */}
        <div className="sticky top-0 z-10 modal-chrome modal-header px-5 py-3">
          <div className="accent-strip" aria-hidden />
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold">Manage users</h3>
            <button className="btn-ghost" onClick={onClose} aria-label="Close">âœ•</button>
          </div>
        </div>

        {/* Body */}
        <div className="overflow-y-auto px-5 py-4 space-y-4 relative">
          {banner && (
            <div
              className={`rounded-lg border px-3 py-2 text-sm ${
                banner.tone === 'ok'
                  ? 'border-emerald-500/40 bg-emerald-500/10 text-emerald-700'
                  : banner.tone === 'info'
                    ? 'border-sky-500/40 bg-sky-500/10 text-sky-700'
                    : 'border-[--color-accent]/50 bg-[--color-accent]/10 text-[--color-accent]'
              }`}
            >
              {banner.text}
            </div>
          )}

          {!isAdmin && (
            <div className="rounded-lg border px-3 py-2 text-sm border-amber-400/40 bg-amber-400/10 text-amber-700">
              Read-only. Only admins can edit or invite.
            </div>
          )}

          {/* Tabs */}
          <div className="segmented">
            <button className="segmented-tab" aria-selected={tab==='list'} onClick={()=>setTab('list')}>
              Users
            </button>
            <button className="segmented-tab" aria-selected={tab==='invite'} onClick={()=>setTab('invite')}>
              Invite
            </button>
          </div>

          {tab === 'invite' && (
            <div className="subcard p-4 grid gap-3 max-w-xl">
              <label className="text-sm grid gap-1">
                <span className="muted">Email</span>
                <input
                  className="input"
                  value={invEmail}
                  onChange={(e)=>setInvEmail(e.target.value)}
                  placeholder="user@example.com"
                />
              </label>
              <label className="text-sm grid gap-1">
                <span className="muted">Role</span>
                <select
                  className="input"
                  value={invRole}
                  onChange={(e)=>setInvRole(e.target.value as any)}
                >
                  <option value="editor">Editor</option>
                  <option value="admin">Admin</option>
                </select>
              </label>
              <div className="flex gap-2">
                <button
                  className="btn-primary disabled:opacity-50 disabled:pointer-events-none"
                  onClick={invite}
                  disabled={!invEmail.trim() || !isAdmin}
                >
                  Send invitation
                </button>
                <button className="btn-ghost" onClick={()=>setTab('list')}>Cancel</button>
              </div>
            </div>
          )}

          {tab === 'list' && (
            <div className="manage-table">
              <table className="w-full text-sm">
                <thead>
                  <tr>
                    <th className="text-left font-medium px-3 py-2">Email</th>
                    <th className="text-left font-medium px-3 py-2">Role</th>
                    <th className="text-left font-medium px-3 py-2">Active</th>
                    <th className="text-left font-medium px-3 py-2">Updated</th>
                    <th className="text-left font-medium px-3 py-2" />
                  </tr>
                </thead>
              </table>
              <div className="manage-rows divide-y divide-[--color-border]/60">
                {loading ? (
                  <div className="px-3 py-5 text-sm opacity-70">Loadingâ€¦</div>
                ) : rows.length === 0 ? (
                  <div className="px-3 py-5 text-sm opacity-70">No users.</div>
                ) : rows.map((r) => (
                  <div
                    key={r.email}
                    className="grid grid-cols-[1.6fr_0.8fr_0.7fr_1fr_auto] gap-3 px-3 py-2 items-center"
                  >
                    <div className="truncate">{r.email}</div>

                    <div className="flex items-center gap-2">
                      <select
                        className="input"
                        value={r.role}
                        onChange={(e)=>updateRole(r.email, e.target.value as any)}
                        disabled={!isAdmin}
                      >
                        <option value="editor">Editor</option>
                        <option value="admin">Admin</option>
                      </select>
                    </div>

                    <div className="flex items-center gap-2">
                      <input
                        type="checkbox"
                        className="accent-[--color-primary]"
                        checked={r.is_active}
                        onChange={(e)=>updateActive(r.email, e.target.checked)}
                        disabled={!isAdmin}
                      />
                    </div>

                    <div className="text-xs opacity-70 truncate">
                      {r.updated_at || r.created_at || 'â€”'}
                    </div>

                    <div className="justify-self-end flex items-center gap-1">
                      {!r.user_id && (
                        <button
                          className="btn-ghost text-xs border border-[--color-border] px-2 py-1 disabled:opacity-50 disabled:pointer-events-none"
                          onClick={() => resendInvite(r.email)}
                          disabled={!isAdmin}
                          title="Resend invitation"
                        >
                          Resend
                        </button>
                      )}
                      <button
                        className="btn-ghost text-[--color-accent] disabled:opacity-50 disabled:pointer-events-none"
                        onClick={()=>removeRow(r.email)}
                        disabled={!isAdmin}
                        title="Delete row"
                      >
                        âœ•
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="sticky bottom-0 z-10 modal-chrome modal-footer px-5 py-3 flex items-center justify-end gap-2">
          <button className="btn-ghost" onClick={onClose}>Close</button>
        </div>
      </div>
    </div>
  );

  if (typeof document === 'undefined') return null;
  return createPortal(body, document.body);
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\auth\SignOutButton.tsx =====
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';

export default function SignOutButton() {
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [loading, setLoading] = useState(false);

  const onClick = () => {
    setLoading(true);

    // Lanzamos el signOut en segundo plano (sin bloquear la UI)
    const p = supabase.auth.signOut().catch(console.error);

    // Redirigimos ya â€” asÃ­ no dependemos de la red
    const fallback = setTimeout(() => {
      router.replace('/login');
    }, 200); // pequeÃ±o delay para que el click se vea â€œrespondidoâ€

    // Si el signOut termina antes/ despuÃ©s, volvemos a asegurar la redirecciÃ³n
    p.finally(() => {
      clearTimeout(fallback);
      router.replace('/login');
    });
  };

  return (
    <button
      type="button"
      onClick={onClick}
      disabled={loading}
      aria-busy={loading}
      aria-label="Sign out"
      title="Sign out"
      className="btn-ghost h-9 px-3"
    >
      {loading ? 'Signing outâ€¦' : 'Sign out'}
    </button>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\catalogs\ManageCatalogsModal.tsx =====
'use client';

import { createPortal } from 'react-dom';
import { useEffect, useMemo, useRef, useState } from 'react';
import { useCatalogs } from '@/context/CatalogOverridesContext';
import RowActions from '@/components/table/RowActions';
import { useAuth } from '@/context/AuthContext'; // ðŸ†• roles
import { normalizeGeoStrict } from '@/utils/geo'; // ðŸ†• GEO strict

type TabKey = 'campaigns' | 'partners' | 'databases' | 'themes' | 'types';

export default function ManageCatalogsModal({ onClose }: { onClose: () => void }) {
  const {
    CAMPAIGNS, PARTNERS, DATABASES, THEMES, TYPES,
    addCampaignRef, updateCampaignRef, removeCampaignRef,
    addPartnerRef, updatePartnerRef, removePartnerRef,
    addDatabaseRef, updateDatabaseRef, removeDatabaseRef,
    addTheme, removeTheme, addType, removeType,
    exportOverrides, resetOverrides,
    hasLocalChanges, importOverrides,
  } = useCatalogs();

  // ðŸ†• auth/roles
  const auth = useAuth?.();
  const role = (auth?.role as 'admin' | 'editor' | 'viewer' | undefined) ?? (auth?.isAdmin ? 'admin' : auth?.isEditor ? 'editor' : 'viewer');
  const isAdmin = role === 'admin' || !!auth?.isAdmin;
  const isEditor = role === 'editor' || !!auth?.isEditor;
  const canEdit = isAdmin || isEditor;    // puede CRUD unitario
  const canBulk = isAdmin;                // puede importar/exportar/reset

  const trapRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [tab, setTab] = useState<TabKey>('campaigns');

  // banner simple de feedback
  const [banner, setBanner] = useState<null | { text: string; variant: 'success' | 'error' | 'info' }>(null);
  const showBanner = (b: { text: string; variant: 'success' | 'error' | 'info' }) => {
    setBanner(b);
    window.clearTimeout((showBanner as any)._t);
    (showBanner as any)._t = window.setTimeout(() => setBanner(null), 3200);
  };

  // ESC -> cerrar
  useEffect(() => {
    const onKey = (e: KeyboardEvent) => { if (e.key === 'Escape') onClose(); };
    document.addEventListener('keydown', onKey);
    return () => document.removeEventListener('keydown', onKey);
  }, [onClose]);

  // Export JSON (delta de overrides)
  const download = () => {
    if (!canBulk) {
      showBanner({ text: 'Only admins can export overrides.', variant: 'error' });
      return;
    }
    if (!hasLocalChanges) return;
    const blob = new Blob([exportOverrides()], { type: 'application/json;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'catalog_overrides.json';
    a.click();
    URL.revokeObjectURL(url);
  };

  // Import JSON
  const triggerImport = () => {
    if (!canBulk) {
      showBanner({ text: 'Only admins can import overrides.', variant: 'error' });
      return;
    }
    fileInputRef.current?.click();
  };

  const onFilePicked: React.ChangeEventHandler<HTMLInputElement> = (e) => {
    const f = e.target.files?.[0];
    e.currentTarget.value = ''; // permite re-seleccionar el mismo archivo
    if (!f) return;
    if (!canBulk) {
      showBanner({ text: 'Only admins can import overrides.', variant: 'error' });
      return;
    }
    const reader = new FileReader();
    reader.onload = () => {
      const text = String(reader.result || '');
      const res = importOverrides(text);
      if (res.ok) {
        showBanner({ text: 'Overrides imported successfully.', variant: 'success' });
      } else {
        showBanner({ text: `Import failed: ${res.reason}`, variant: 'error' });
      }
    };
    reader.onerror = () => showBanner({ text: 'Could not read file.', variant: 'error' });
    reader.readAsText(f);
  };

  const body = (
    <div
      className="fixed inset-0 z-[120] flex items-center justify-center p-4"
      role="dialog" aria-modal="true"
      onMouseDown={(e) => { if (e.target === e.currentTarget) onClose(); }}
    >
      <div className="absolute inset-0 bg-black/55 backdrop-blur-sm" />
      <div
        ref={trapRef}
        className="relative card w-full max-w-5xl max-h[90vh] max-h-[90vh] overflow-hidden border border-[--color-border] shadow-xl"
        style={{ background: 'var(--color-surface)' }}
        onMouseDown={(e) => e.stopPropagation()}
      >
        {/* Header (chrome unificado) */}
        <div className="sticky top-0 z-10 modal-chrome modal-header px-5 py-3">
          <div className="accent-strip" aria-hidden />
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold flex items-center gap-2">
              Manage catalogs
              {/* ðŸ†• insignia de rol */}
              <RolePill role={isAdmin ? 'Admin' : isEditor ? 'Editor' : 'Viewer'} />
            </h3>
            <button className="btn-ghost" onClick={onClose} aria-label="Close">âœ•</button>
          </div>
        </div>

        {/* Body (con edge fades para scroll) */}
        <div className="overflow-y-auto px-5 py-4 space-y-4 relative">
          <div className="edge-fade edge-top" aria-hidden />

          {/* banner */}
          {banner && (
            <div
              className={`rounded-lg border px-3 py-2 text-sm ${
                banner.variant === 'success'
                  ? 'border-emerald-500/40 bg-emerald-500/10 text-emerald-600'
                  : banner.variant === 'info'
                    ? 'border-sky-500/40 bg-sky-500/10 text-sky-700'
                    : 'border-[--color-accent]/50 bg-[--color-accent]/10 text-[--color-accent]'
              }`}
              role="status"
            >
              {banner.text}
            </div>
          )}

          {/* Aviso de permisos */}
          {!canEdit && (
            <div className="rounded-lg border px-3 py-2 text-sm border-sky-500/40 bg-sky-500/10 text-sky-700">
              Read-only. Ask an admin for edit access.
            </div>
          )}
          {canEdit && !canBulk && (
            <div className="rounded-lg border px-3 py-2 text-sm border-amber-400/40 bg-amber-400/10 text-amber-700">
              Editors can edit items but only admins can import/export or reset overrides.
            </div>
          )}

          {/* resumen (tiles tipo KPI/subcard) */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-3">
            <Stat label="Campaigns" value={CAMPAIGNS.length} />
            <Stat label="Partners" value={PARTNERS.length} />
            <Stat label="Databases" value={DATABASES.length} />
            <Stat label="Themes" value={THEMES.length} />
            <Stat label="Types" value={TYPES.length} />
          </div>

          {/* tabs (pill/segmented) */}
          <TabBar value={tab} onChange={setTab} />

          {/* panels */}
          {tab === 'campaigns' && (
            <CampaignsPanel
              items={CAMPAIGNS}
              onAdd={(name, advertiser) => canEdit && addCampaignRef({ name, advertiser })}
              onUpdate={(oldName, patch) => canEdit && updateCampaignRef(oldName, patch)}
              onRemove={(name) => {
                if (!canEdit) return;
                if (confirm(`Remove local override for campaign "${name}"?`)) removeCampaignRef(name);
              }}
              disabled={!canEdit}
            />
          )}

          {tab === 'partners' && (
            <PartnersPanel
              items={PARTNERS}
              onAdd={(name, invoiceOffice) => canEdit && addPartnerRef({ name, invoiceOffice })}
              onUpdate={(oldName, patch) => canEdit && updatePartnerRef(oldName, patch)}
              onRemove={(name) => {
                if (!canEdit) return;
                if (confirm(`Remove local override for partner "${name}"?`)) removePartnerRef(name);
              }}
              disabled={!canEdit}
            />
          )}

          {tab === 'databases' && (
            <DatabasesPanel
              items={DATABASES}
              onAdd={(payload) => canEdit && addDatabaseRef(payload)}
              onUpdate={(oldName, patch) => canEdit && updateDatabaseRef(oldName, patch)}
              onRemove={(name) => {
                if (!canEdit) return;
                if (confirm(`Remove local override for database "${name}"?`)) removeDatabaseRef(name);
              }}
              disabled={!canEdit}
            />
          )}

          {tab === 'themes' && (
            <ThemesPanel
              items={THEMES}
              onAdd={(t) => canEdit && addTheme(t)}
              onRemove={(t) => {
                if (!canEdit) return;
                if (confirm(`Remove theme "${t}" from local overrides?`)) removeTheme(t);
              }}
              disabled={!canEdit}
            />
          )}

          {tab === 'types' && (
            <TypesPanel
              items={TYPES}
              onAdd={(t) => canEdit && addType(t)}
              onRemove={(t) => {
                if (!canEdit) return;
                if (confirm(`Remove type "${t}" from local overrides?`)) removeType(t);
              }}
              disabled={!canEdit}
            />
          )}

          <div className="edge-fade edge-bottom" aria-hidden />
        </div>

        {/* Footer (chrome unificado) */}
        <div className="sticky bottom-0 z-10 modal-chrome modal-footer px-5 py-3 flex items-center justify-end gap-2">
          {/* input oculto para importar */}
          <input
            ref={fileInputRef}
            type="file"
            accept="application/json,.json"
            className="hidden"
            onChange={onFilePicked}
          />
          {canBulk && (
            <button type="button" className="btn-ghost" onClick={triggerImport}>
              Import
            </button>
          )}
          <button
            type="button"
            className="btn-ghost disabled:opacity-50 disabled:pointer-events-none"
            onClick={() => {
              if (!canBulk) {
                showBanner({ text: 'Only admins can reset overrides.', variant: 'error' });
                return;
              }
              resetOverrides();
            }}
            disabled={!hasLocalChanges || !canBulk}
            title={
              !canBulk
                ? 'Only admins can reset overrides'
                : hasLocalChanges
                  ? 'Clear local overrides'
                  : 'No local changes'
            }
          >
            Reset local changes
          </button>
          <button
            type="button"
            className="btn-primary disabled:opacity-50 disabled:pointer-events-none"
            onClick={download}
            disabled={!hasLocalChanges || !canBulk}
            title={
              !canBulk
                ? 'Only admins can export overrides'
                : hasLocalChanges
                  ? 'Export local overrides as JSON'
                  : 'Nothing to export'
            }
          >
            Export changes
          </button>
        </div>
      </div>
    </div>
  );

  if (typeof document === 'undefined') return null;
  return createPortal(body, document.body);
}

/* -------------------------------- UI bits -------------------------------- */

function RolePill({ role }: { role: 'Admin' | 'Editor' | 'Viewer' }) {
  const cls =
    role === 'Admin'
      ? 'bg-emerald-500/12 text-emerald-700 border-emerald-300/60'
      : role === 'Editor'
        ? 'bg-amber-500/12 text-amber-700 border-amber-300/60'
        : 'bg-slate-400/15 text-slate-700 border-slate-300/60';
  return (
    <span className={`px-2 py-0.5 rounded-full text-[11px] font-semibold border ${cls}`}>
      {role}
    </span>
  );
}

function TabBar({ value, onChange }: { value: TabKey; onChange: (k: TabKey) => void }) {
  const tabs: { k: TabKey; label: string }[] = [
    { k: 'campaigns', label: 'Campaigns' },
    { k: 'partners',  label: 'Partners'  },
    { k: 'databases', label: 'Databases' },
    { k: 'themes',    label: 'Themes'    },
    { k: 'types',     label: 'Types'     },
  ];

  return (
    <nav className="sticky top-0 z-[1] pt-1" aria-label="Catalog sections">
      <div className="segmented">
        {tabs.map(({ k, label }) => (
          <button
            key={k}
            type="button"
            role="tab"
            aria-selected={value === k}
            className="segmented-tab"
            onClick={() => onChange(k)}
          >
            {label}
          </button>
        ))}
      </div>
    </nav>
  );
}

function Stat({ label, value }: { label: string; value: number | string }) {
  return (
    <div className="stat-tile p-3">
      <div className="text-[11px] uppercase text-[color:var(--color-text)]/65">{label}</div>
      <div className="text-xl font-semibold mt-1" style={{ fontVariantNumeric: 'tabular-nums' }}>
        {value}
      </div>
    </div>
  );
}

/* ------------------------------- Panels ---------------------------------- */

function CampaignsPanel(props: {
  items: { id: string; name: string; advertiser: string }[];
  onAdd: (name: string, advertiser?: string) => void;
  onUpdate: (oldName: string, patch: Partial<{ name: string; advertiser: string }>) => void;
  onRemove: (name: string) => void;
  disabled?: boolean;
}) {
  const { items, onAdd, onUpdate, onRemove, disabled } = props;
  const [q, setQ] = useState('');
  const [name, setName] = useState('');
  const [adv, setAdv] = useState('');

  const list = useMemo(() => {
    const s = q.trim().toLowerCase();
    if (!s) return items;
    return items.filter(i => i.name.toLowerCase().includes(s) || i.advertiser.toLowerCase().includes(s));
  }, [items, q]);

  return (
    <section className="grid gap-3">
      <SearchAndAdd
        searchValue={q}
        onSearch={setQ}
        addArea={
          disabled ? null : (
            <>
              <input value={name} onChange={(e)=>setName(e.target.value)} placeholder="Campaign name" className="input" />
              <input value={adv}  onChange={(e)=>setAdv(e.target.value)}  placeholder="Advertiser (optional)" className="input" />
              <button
                className="btn-primary"
                onClick={() => { if (name.trim()) { onAdd(name, adv || undefined); setName(''); setAdv(''); } }}
              >
                Add
              </button>
            </>
          )
        }
      />
      <EditableTable
        cols={['Name', 'Advertiser', '']}
        rows={list.map(i => ({
          key: i.id,
          cells: [
            <EditableText key="n" value={i.name} onSave={(v)=> v && onUpdate(i.name,{name:v})} disabled={disabled} />,
            <EditableText key="a" value={i.advertiser} onSave={(v)=> onUpdate(i.name,{advertiser:v})} disabled={disabled} />,
            <div key="act" className="shrink-0">
              {disabled ? null : (
                <RowActions
                  onEdit={() => {}}
                  onDuplicate={() => {
                    const newName = `${i.name} (copy)`;
                    onAdd(newName, i.advertiser);
                  }}
                  onDelete={() => onRemove(i.name)}
                />
              )}
            </div>
          ],
        }))}
      />
    </section>
  );
}

function PartnersPanel(props: {
  items: { id: string; name: string; defaultInvoiceOffice: 'DAT'|'CAR'|'INT'; isInternal?: boolean }[];
  onAdd: (name: string, invoiceOffice: string) => void;
  onUpdate: (oldName: string, patch: Partial<{ name: string; invoiceOffice: string }>) => void;
  onRemove: (name: string) => void;
  disabled?: boolean;
}) {
  const { items, onAdd, onUpdate, onRemove, disabled } = props;
  const [q, setQ] = useState('');
  const [name, setName] = useState('');
  const [office, setOffice] = useState<'DAT'|'CAR'|'INT'>('DAT');

  const list = useMemo(() => {
    const s = q.trim().toLowerCase();
    if (!s) return items;
    return items.filter(i => i.name.toLowerCase().includes(s));
  }, [items, q]);

  return (
    <section className="grid gap-3">
      <SearchAndAdd
        searchValue={q}
        onSearch={setQ}
        addArea={
          disabled ? null : (
            <>
              <input value={name} onChange={(e)=>setName(e.target.value)} placeholder="Partner name" className="input" />
              <select className="input" value={office} onChange={(e)=>setOffice(e.target.value as any)}>
                <option value="DAT">DAT</option><option value="CAR">CAR</option><option value="INT">INT</option>
              </select>
              <button className="btn-primary" onClick={()=>{ if (name.trim()) { onAdd(name, office); setName(''); setOffice('DAT'); }}}>Add</button>
            </>
          )
        }
      />
      <EditableTable
        cols={['Name', 'Invoice office', '']}
        rows={list.map(i => ({
          key: i.id,
          cells: [
            <EditableText key="n" value={i.name} onSave={(v)=> v && onUpdate(i.name,{name:v})} disabled={disabled} />,
            <EditableSelect
              key="o"
              value={i.defaultInvoiceOffice}
              options={['DAT','CAR','INT']}
              onSave={(v)=> onUpdate(i.name,{invoiceOffice:v})}
              disabled={disabled}
            />,
            <div key="act" className="shrink-0">
              {disabled ? null : (
                <RowActions
                  onEdit={() => {}}
                  onDuplicate={() => onAdd(`${i.name} (copy)`, i.defaultInvoiceOffice)}
                  onDelete={() => onRemove(i.name)}
                />
              )}
            </div>,
          ],
        }))}
      />
    </section>
  );
}

function DatabasesPanel(props: {
  items: { id: string; name: string; geo: string; dbType: 'B2B'|'B2C'|'Mixed'|string }[];
  onAdd: (d: { name: string; id?: string; geo: string; dbType: 'B2B'|'B2C'|'Mixed'|string }) => void;
  onUpdate: (oldName: string, patch: Partial<{ name: string; id?: string; geo: string; dbType: 'B2B'|'B2C'|'Mixed'|string }>) => void;
  onRemove: (name: string) => void;
  disabled?: boolean;
}) {
  const { items, onAdd, onUpdate, onRemove, disabled } = props;
  const [q, setQ] = useState('');
  const [name, setName] = useState('');
  const [geo, setGeo] = useState('');
  const [dbType, setDbType] = useState<'B2B'|'B2C'|'Mixed'>('B2C');

  const geoStrict = normalizeGeoStrict(geo);

  const list = useMemo(() => {
    const s = q.trim().toLowerCase();
    if (!s) return items;
    return items.filter(i => i.name.toLowerCase().includes(s) || i.geo.toLowerCase().includes(s));
  }, [items, q]);

  return (
    <section className="grid gap-3">
      <SearchAndAdd
        searchValue={q}
        onSearch={setQ}
        addArea={
          disabled ? null : (
            <>
              <input value={name} onChange={(e)=>setName(e.target.value)} placeholder="Database name" className="input" />
              <input
                value={geo}
                onChange={(e)=>setGeo(e.target.value.toUpperCase().slice(0,5))}
                placeholder="GEO (ES, FR, GB, MULTI)"
                className={`input ${geo && !geoStrict ? 'input-error' : ''}`}
                aria-invalid={geo && !geoStrict || undefined}
              />
              <select className="input" value={dbType} onChange={(e)=>setDbType(e.target.value as any)}>
                <option value="B2C">B2C</option>
                <option value="B2B">B2B</option>
                <option value="Mixed">Mixed</option>
              </select>
              <button
                className="btn-primary"
                disabled={!name.trim() || !geoStrict}
                onClick={()=>{
                  if (!name.trim() || !geoStrict) return;
                  onAdd({ name, geo: geoStrict, dbType });
                  setName(''); setGeo(''); setDbType('B2C');
                }}
              >
                Add
              </button>
            </>
          )
        }
      />
      <EditableTable
        cols={['Name', 'GEO', 'DB Type', '']}
        rows={list.map(i => ({
          key: i.id,
          cells: [
            <EditableText key="n" value={i.name} onSave={(v)=> v && onUpdate(i.name,{name:v})} disabled={disabled} />,
            <GeoCell key="g" value={i.geo} onValid={(g)=> onUpdate(i.name,{geo:g})} disabled={disabled} />,
            <EditableSelect
              key="t"
              value={i.dbType}
              options={['B2C','B2B','Mixed']}
              onSave={(v)=> onUpdate(i.name,{dbType:v})}
              disabled={disabled}
            />,
            <div key="act" className="shrink-0">
              {disabled ? null : (
                <RowActions
                  onEdit={() => {}}
                  onDuplicate={() =>
                    onAdd({ name: `${i.name} (copy)`, geo: i.geo, dbType: (i.dbType as any) || 'B2C' })
                  }
                  onDelete={() => onRemove(i.name)}
                />
              )}
            </div>,
          ],
        }))}
      />
    </section>
  );
}

function ThemesPanel(props: {
  items: string[];
  onAdd: (t: string) => void;
  onRemove: (t: string) => void;
  disabled?: boolean;
}) {
  const { items, onAdd, onRemove, disabled } = props;
  const [q, setQ] = useState('');
  const [val, setVal] = useState('');

  const list = useMemo(() => {
    const s = q.trim().toLowerCase();
    if (!s) return items;
    return items.filter(i => i.toLowerCase().includes(s));
  }, [items, q]);

  return (
    <section className="grid gap-3">
      <SearchAndAdd
        searchValue={q}
        onSearch={setQ}
        addArea={
          disabled ? null : (
            <>
              <input value={val} onChange={(e)=>setVal(e.target.value)} placeholder="Theme" className="input" />
              <button className="btn-primary" onClick={()=>{ if (val.trim()) { onAdd(val); setVal(''); }}}>Add</button>
            </>
          )
        }
      />
      <EditableTable
        cols={['Theme', '']}
        rows={list.map(v => ({
          key: v,
          cells: [
            <span key="t" className="px-1.5 py-0.5 rounded bg-white/5 border border-[--color-border]">{v}</span>,
            <div key="d" className="shrink-0">
              {disabled ? null : <DangerButton onClick={()=>onRemove(v)} />}
            </div>,
          ],
        }))}
      />
    </section>
  );
}

function TypesPanel(props: {
  items: string[];
  onAdd: (t: string) => void;
  onRemove: (t: string) => void;
  disabled?: boolean;
}) {
  const { items, onAdd, onRemove, disabled } = props;
  const [q, setQ] = useState('');
  const [val, setVal] = useState('');

  const list = useMemo(() => {
    const s = q.trim().toLowerCase();
    if (!s) return items;
    return items.filter(i => i.toLowerCase().includes(s));
  }, [items, q]);

  return (
    <section className="grid gap-3">
      <SearchAndAdd
        searchValue={q}
        onSearch={setQ}
        addArea={
          disabled ? null : (
            <>
              <input value={val} onChange={(e)=>setVal(e.target.value)} placeholder="Type (e.g., CPL)" className="input" />
              <button className="btn-primary" onClick={()=>{ if (val.trim()) { onAdd(val); setVal(''); }}}>Add</button>
            </>
          )
        }
      />
      <EditableTable
        cols={['Type', '']}
        rows={list.map(v => ({
          key: v,
          cells: [
            <span key="t" className="px-1.5 py-0.5 rounded bg-white/5 border border-[--color-border]">{v}</span>,
            <div key="d" className="shrink-0">
              {disabled ? null : <DangerButton onClick={()=>onRemove(v)} />}
            </div>,
          ],
        }))}
      />
    </section>
  );
}

/* ---------------------------- Reusable pieces ----------------------------- */

function SearchAndAdd({
  searchValue, onSearch, addArea,
}: {
  searchValue: string;
  onSearch: (v: string) => void;
  addArea: React.ReactNode | null;
}) {
  return (
    <div className="subcard p-3 md:p-4 grid gap-2">
      <div className="flex items-center gap-2">
        <input
          className="input w-full"
          placeholder="Searchâ€¦"
          value={searchValue}
          onChange={(e)=>onSearch(e.target.value)}
        />
      </div>
      {addArea && <div className="flex flex-wrap items-center gap-2">{addArea}</div>}
    </div>
  );
}

function EditableTable({ cols, rows }: {
  cols: string[];
  rows: { key: string; cells: React.ReactNode[] }[];
}) {
  return (
    <div className="manage-table">
      <table className="w-full text-sm">
        <thead className="sticky top-0 bg-[--color-surface] z-[1]">
          <tr>
            {cols.map((c) => (
              <th key={c} className="text-left font-medium px-3 py-2">{c}</th>
            ))}
          </tr>
        </thead>
      </table>

      {/* ðŸ†• Scroll vertical para todas las listas */}
      <div className="manage-rows divide-y divide-[--color-border]/60 max-h-[60vh] overflow-y-auto pr-1">
        {rows.map(r => (
          <div
            key={r.key}
            className="grid grid-cols-[1fr_1fr_auto] md:grid-cols-[1.2fr_1fr_1fr_auto] gap-3 px-3 py-2 items-center"
          >
            {r.cells.map((cell, i) => <div key={i} className="min-w-0">{cell}</div>)}
          </div>
        ))}
        {rows.length === 0 && (
          <div className="px-3 py-5 text-sm opacity-70">No items.</div>
        )}
      </div>
    </div>
  );
}

function EditableText({ value, onSave, disabled }: { value: string; onSave: (v: string) => void; disabled?: boolean }) {
  const [v, setV] = useState(value);
  useEffect(()=>setV(value),[value]);
  return (
    <div className="flex items-center gap-2">
      <input className="input w-full" value={v} onChange={(e)=>setV(e.target.value)} disabled={disabled} />
      <button className="btn-ghost disabled:opacity-50" title="Save" onClick={()=>onSave(v)} disabled={disabled}>âœ”</button>
    </div>
  );
}

function EditableSelect({
  value, options, onSave, disabled,
}: { value: string; options: string[]; onSave: (v: string) => void; disabled?: boolean }) {
  const [v, setV] = useState(value);
  useEffect(()=>setV(value),[value]);
  return (
    <div className="flex items-center gap-2">
      <select className="input" value={v} onChange={(e)=>setV(e.target.value)} disabled={disabled}>
        {options.map(o => <option key={o} value={o}>{o}</option>)}
      </select>
      <button className="btn-ghost disabled:opacity-50" title="Save" onClick={()=>onSave(v)} disabled={disabled}>âœ”</button>
    </div>
  );
}

/** ðŸ†• Celda con validaciÃ³n estricta de GEO */
function GeoCell({
  value, onValid, disabled,
}: {
  value: string;
  onValid: (geo: string) => void; // sÃ³lo se llama con GEO vÃ¡lido
  disabled?: boolean;
}) {
  const [v, setV] = useState(value);
  useEffect(() => setV(value), [value]);

  const valid = normalizeGeoStrict(v);

  return (
    <div className="flex items-center gap-2">
      <input
        className={`input w-full ${v && !valid ? 'input-error' : ''}`}
        value={v}
        onChange={(e)=>setV(e.target.value.toUpperCase().slice(0,5))}
        onBlur={()=>{
          const norm = normalizeGeoStrict(v);
          if (norm && norm !== value) onValid(norm);
          else setV(value); // vuelve si no es vÃ¡lido
        }}
        placeholder="ES / FR / GB / MULTI"
        aria-invalid={v && !valid || undefined}
        disabled={disabled}
      />
      <button
        className="btn-ghost disabled:opacity-50"
        title="Save"
        onClick={()=>{ const norm = normalizeGeoStrict(v); if (norm) onValid(norm); }}
        disabled={disabled || !valid}
      >
        âœ”
      </button>
    </div>
  );
}

function DangerButton({ onClick, disabled }: { onClick: () => void; disabled?: boolean }) {
  return (
    <button className="btn-ghost text-[--color-accent] disabled:opacity-50 disabled:pointer-events-none" title="Remove" onClick={onClick} disabled={disabled}>
      âœ•
    </button>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\charts\theme.ts =====
// components/charts/theme.ts
export const chartTheme = {
  tick: { fill: 'var(--chart-axis)', fontSize: 12 },
  axisLine: { stroke: 'var(--chart-grid)' },
  tickLine: { stroke: 'var(--chart-grid)' },
  grid: 'var(--chart-grid)',
  tooltip: {
    contentStyle: {
      background: 'var(--chart-tooltip-bg)',
      border: '1px solid var(--color-border)',
      borderRadius: 8,
    },
    itemStyle: { color: 'var(--color-text)' },
    labelStyle: { color: 'var(--color-text)' },
  },
  palette: ['var(--chart-1)','var(--chart-2)','var(--chart-3)','var(--chart-4)','var(--chart-5)'],
};

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\create-campaign\CreateCampaignModal.tsx =====
'use client';

import { createPortal } from 'react-dom';
import { useEffect, useRef, useState } from 'react';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { useCampaignData } from '@/context/CampaignDataContext';
import { CampaignRow } from '@/types/campaign';
import Combobox from '@/components/ui/Combobox';
import Tooltip from '@/components/ui/Tooltip';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';
import QuickAddCampaignModal from '@/components/create-campaign/QuickAddCampaignModal';
import QuickAddPartnerModal from '@/components/create-campaign/QuickAddPartnerModal';
import QuickAddDatabaseModal from '@/components/create-campaign/QuickAddDatabaseModal';
import FieldWithAddon from '@/components/ui/FieldWithAddon';
import type { DBType, InvoiceOffice } from '@/data/reference';
import { useAuth } from '@/context/AuthContext'; // ðŸ†• roles para quick-add

// ======================= Utils =======================

const fmtEUR = new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' });
const fmtPct = new Intl.NumberFormat('es-ES', { style: 'percent', maximumFractionDigits: 2 });
const fmtNum = new Intl.NumberFormat('es-ES', { maximumFractionDigits: 2 });

function parseNum(v: any): number {
  if (v === '' || v == null) return 0;
  if (typeof v === 'number') return Number.isFinite(v) ? v : 0;

  let s = String(v).trim().replace(/\s/g, '');
  if (s === '') return 0;

  const hasComma = s.includes(',');
  const hasDot = s.includes('.');

  if (hasComma && hasDot) {
    const lastComma = s.lastIndexOf(',');
    const lastDot = s.lastIndexOf('.');
    if (lastComma > lastDot) s = s.replace(/\./g, '').replace(',', '.');
    else s = s.replace(/,/g, '');
  } else if (hasComma) {
    s = s.replace(',', '.');
  }

  const n = Number(s);
  return Number.isFinite(n) ? n : 0;
}

// Toast sin dependencias (ajustado a tema claro)
function showToast(message: string, opts?: { variant?: 'success' | 'error'; duration?: number }) {
  if (typeof document === 'undefined') return;
  const { variant = 'success', duration = 2600 } = opts || {};
  const host = document.createElement('div');
  host.className = 'fixed bottom-4 right-4 z-[200]';
  const toast = document.createElement('div');
  toast.className = 'pointer-events-auto select-none rounded-lg border px-3 py-2 shadow-xl text-sm';
  toast.style.borderColor = 'var(--color-border)';
  toast.style.background = 'var(--color-surface)';
  toast.style.color = 'var(--color-text)';
  toast.style.transition = 'transform 180ms ease, opacity 180ms ease';
  toast.style.transform = 'translateY(8px)';
  toast.style.opacity = '0';
  toast.textContent = message;

  if (variant === 'error') {
    toast.style.outline = '1px solid #ff6b6b55';
    toast.style.boxShadow = '0 10px 30px rgba(239,68,68,0.12)';
  } else {
    toast.style.outline = '1px solid rgba(16,185,129,.25)';
    toast.style.boxShadow = '0 10px 30px rgba(16,185,129,.12)';
  }

  host.appendChild(toast);
  document.body.appendChild(host);

  requestAnimationFrame(() => {
    toast.style.transform = 'translateY(0px)';
    toast.style.opacity = '1';
  });

  setTimeout(() => {
    toast.style.transform = 'translateY(8px)';
    toast.style.opacity = '0';
    setTimeout(() => {
      try { document.body.removeChild(host); } catch {}
    }, 200);
  }, duration);
}

type Mode = 'create' | 'edit';

// ===== Enums fuertes (sin casts) =====
const DEAL_TYPES = ['CPL', 'CPM', 'CPC', 'CPA'] as const;
type DealType = typeof DEAL_TYPES[number];

const DB_TYPES = ['B2B', 'B2C', 'Mixed'] as const;
const INVOICE_OFFICES = ['DAT', 'CAR', 'INT'] as const;

const isDBType = (x: any): x is DBType => (DB_TYPES as readonly string[]).includes(x);
const isInvoiceOffice = (x: any): x is InvoiceOffice => (INVOICE_OFFICES as readonly string[]).includes(x);

// Zod helpers
const ZDealType = z.enum(DEAL_TYPES);
const ZDBType = z.enum(DB_TYPES);
const ZInvoiceOffice = z.enum(INVOICE_OFFICES);

// ======================= Component =======================
export default function CreateCampaignModal({
  mode = 'create',
  initialRow,
  seed,
  onClose,
  onSaved,
}: {
  mode?: Mode;
  initialRow?: CampaignRow;
  seed?: Partial<CampaignRow>;
  onClose: () => void;
  onSaved?: (id: string) => void;
}) {
  const { addCampaign, updateCampaign } = useCampaignData();

  // ðŸ†• flag de permisos para quick-add
  const { isAdmin, isEditor } = useAuth();
  const canQuickAdd = isAdmin || isEditor;

  // === CatÃ¡logos dinÃ¡micos ===
  const catalogs = useCatalogOverrides();
  const CAMPAIGNS = catalogs?.CAMPAIGNS ?? [];
  const PARTNERS = catalogs?.PARTNERS ?? [];
  const DATABASES = catalogs?.DATABASES ?? [];
  const THEMES = catalogs?.THEMES ?? [];
  const TYPES = (catalogs?.TYPES ?? DEAL_TYPES.slice()).slice();

  // Resolver de oficina de facturaciÃ³n tipado y seguro
  function resolveOffice(geo?: string, partner?: string): InvoiceOffice {
    const res = catalogs?.resolveInvoiceOfficeMerged
      ? catalogs.resolveInvoiceOfficeMerged(geo, partner)
      : 'DAT';
    return isInvoiceOffice(res) ? res : 'DAT';
  }

  // == Scroll lock mientras el modal estÃ¡ abierto ==
  useEffect(() => {
    const html = document.documentElement;
    const prevOverflow = html.style.overflow;
    const prevPadRight = html.style.paddingRight;

    const scrollbarW = window.innerWidth - html.clientWidth;
    html.style.overflow = 'hidden';
    if (scrollbarW > 0) html.style.paddingRight = `${scrollbarW}px`;

    return () => {
      html.style.overflow = prevOverflow;
      html.style.paddingRight = prevPadRight;
    };
  }, []);

  // funciones locales
  const findCampaignByName = (name: string) =>
    CAMPAIGNS.find(
      (c: any) => (c?.name || '').trim().toLowerCase() === (name || '').trim().toLowerCase()
    );

  const [submitMode, setSubmitMode] = useState<'save' | 'save_add'>('save');
  const [openAddCampaign, setOpenAddCampaign] = useState(false);
  const [openAddPartner, setOpenAddPartner] = useState(false);
  const [openAddDatabase, setOpenAddDatabase] = useState(false);

  // ValidaciÃ³n con campaÃ±as dinÃ¡micas
  const allowedCampaigns = new Set(CAMPAIGNS.map((c: any) => String(c?.name || '').toLowerCase()));

  const schema = z.object({
    date: z.string().min(1, 'Required'),
    campaign: z
      .string()
      .min(1, 'Required')
      .refine((v) => {
        const val = (v ?? '').trim().toLowerCase();
        if (allowedCampaigns.has(val)) return true;
        if (mode === 'edit' && initialRow) return val === initialRow.campaign.trim().toLowerCase();
        return false;
      }, 'Selecciona una campaÃ±a de la lista'),
    advertiser: z.string().min(1, 'Required'),
    invoiceOffice: ZInvoiceOffice, // <- enum fuerte
    partner: z.string().min(1, 'Required'),
    theme: z.string().min(1, 'Required'),
    price: z.coerce.number().nonnegative(),
    priceCurrency: z.string().default('EUR'),
    type: ZDealType, // <- enum fuerte
    vSent: z.coerce.number().int().nonnegative(),
    routingCosts: z.coerce.number().nonnegative(),
    qty: z.coerce.number().int().nonnegative(),
    turnover: z.coerce.number().nonnegative(),
    margin: z.coerce.number(),
    marginPct: z.number().nullable().default(null),
    ecpm: z.coerce.number().nonnegative(),
    database: z.string().min(1, 'Required'),
    geo: z.string().min(1, 'Required'),
    databaseType: ZDBType, // <- enum fuerte
  });
  type FormValues = z.infer<typeof schema>;
  type FieldName = keyof FormValues;

  // Helpers
  const safeDealType = (t: any): DealType =>
    (DEAL_TYPES as readonly string[]).includes(t) ? (t as DealType) : 'CPL';

  // RHF
  const { register, handleSubmit, formState, reset, watch, setValue, getValues } =
    useForm<FormValues>({
      resolver: zodResolver(schema),
      mode: 'onSubmit',
      defaultValues:
        mode === 'edit' && initialRow
          ? {
              date: initialRow.date,
              campaign: initialRow.campaign,
              advertiser: initialRow.advertiser,
              invoiceOffice: isInvoiceOffice(initialRow.invoiceOffice)
                ? initialRow.invoiceOffice
                : resolveOffice(initialRow.geo, initialRow.partner),
              partner: initialRow.partner || '',
              theme: initialRow.theme || '',
              price: initialRow.price,
              priceCurrency: initialRow.priceCurrency || 'EUR',
              type: safeDealType(initialRow.type),
              vSent: initialRow.vSent,
              routingCosts: initialRow.routingCosts,
              qty: initialRow.qty,
              turnover: initialRow.turnover,
              margin: initialRow.margin,
              marginPct:
                initialRow.turnover > 0 ? initialRow.margin / initialRow.turnover : null,
              ecpm: initialRow.ecpm,
              database: initialRow.database,
              geo: initialRow.geo,
              databaseType: isDBType(initialRow.databaseType) ? initialRow.databaseType : 'B2B',
            }
          : {
              date: seed?.date ?? new Date().toISOString().slice(0, 10),
              campaign: seed?.campaign ?? '',
              advertiser: seed?.advertiser ?? '',
              invoiceOffice: isInvoiceOffice(seed?.invoiceOffice)
                ? seed!.invoiceOffice!
                : resolveOffice(undefined, undefined),
              partner: seed?.partner ?? '',
              theme: seed?.theme ?? '',
              price: seed?.price ?? 0,
              priceCurrency: seed?.priceCurrency ?? 'EUR',
              type: safeDealType(seed?.type ?? TYPES[0] ?? 'CPL'),
              vSent: seed?.vSent ?? 0,
              routingCosts: seed?.routingCosts ?? 0,
              qty: seed?.qty ?? 0,
              turnover: seed?.turnover ?? 0,
              margin: seed?.margin ?? 0,
              marginPct: seed?.turnover ? (seed.margin ?? 0) / (seed.turnover ?? 1) : null,
              ecpm: seed?.ecpm ?? 0,
              database: seed?.database ?? '',
              // geo y databaseType se autocompletan tras escoger DB
            } as Partial<FormValues>,
    });

  const { errors, isSubmitting, isDirty, isSubmitted, touchedFields, dirtyFields } = formState;

  const showErr = (name: FieldName) =>
    !!(errors as any)[name] &&
    (isSubmitted || (touchedFields as any)[name] || (dirtyFields as any)[name]);

  const firstRef = useRef<HTMLInputElement>(null);
  const formRef = useRef<HTMLFormElement>(null);
  const trapRef = useRef<HTMLDivElement>(null);

  // Watches
  const campaign = watch('campaign');
  const database = watch('database');
  const geo = watch('geo');
  const partner = watch('partner');
  const price = watch('price');
  const qty = watch('qty');
  const vSent = watch('vSent');
  const watchTurnover = watch('turnover');
  const watchMargin = watch('margin');
  const watchEcpm = watch('ecpm');
  const watchMarginPct = watch('marginPct');

  // === Reglas automÃ¡ticas con catÃ¡logos dinÃ¡micos ===

  // (1) Campaign -> Advertiser (aÃ±ade CAMPAIGNS a deps)
  useEffect(() => {
    const c = findCampaignByName(campaign || '');
    setValue('advertiser', c?.advertiser ?? '', { shouldValidate: !!c });
  }, [campaign, CAMPAIGNS, setValue]);

  // Database -> GEO + DB Type (idempotente)
  useEffect(() => {
    const db = DATABASES.find((d: any) => d?.name === database);
    const nextGeo = db?.geo ?? '';
    const nextDbType: DBType | undefined = isDBType(db?.dbType) ? db!.dbType : undefined;

    const currGeo = getValues('geo');
    const currDbt = getValues('databaseType');

    if (currGeo !== nextGeo) {
      setValue('geo', nextGeo, { shouldValidate: !!db, shouldDirty: !!db });
    }
    if (nextDbType && currDbt !== nextDbType) {
      setValue('databaseType', nextDbType, { shouldValidate: !!db, shouldDirty: !!db });
    }
  }, [database, DATABASES, getValues, setValue]);

  // (2) GEO + Partner -> Invoice office (no ensuciar si no cambia)
  useEffect(() => {
    const inv = resolveOffice(geo || undefined, partner || undefined);
    const curr = getValues('invoiceOffice');
    if (curr !== inv) {
      setValue('invoiceOffice', inv, { shouldValidate: false, shouldDirty: true });
    }
  }, [geo, partner, setValue, getValues]);

  // CÃ¡lculos en vivo
  useEffect(() => {
    const _price = parseNum(price);
    const _qty = parseNum(qty);
    const _vSent = parseNum(vSent);

    const routingCosts = (_vSent / 1000) * 0.18;
    const turnover = _qty * _price;
    const margin = turnover - routingCosts;
    const marginPct = turnover > 0 ? margin / turnover : null;
    const ecpm = _vSent > 0 ? (turnover / _vSent) * 1000 : 0;

    setValue('routingCosts', Number(routingCosts.toFixed(2)));
    setValue('turnover', Number(turnover.toFixed(2)));
    setValue('margin', Number(margin.toFixed(2)));
    setValue('marginPct', marginPct == null ? null : Number(marginPct.toFixed(4)));
    setValue('ecpm', Number(ecpm.toFixed(2)));
  }, [price, qty, vSent, setValue]);

  // EnvÃ­o
  const onSubmit = async (data: FormValues) => {
    try {
      const _price = parseNum(data.price);
      const _qty = parseNum(data.qty);
      const _vSent = parseNum(data.vSent);
      const routingCosts = Number(((_vSent / 1000) * 0.18).toFixed(2));
      const turnover = Number((_qty * _price).toFixed(2));
      const margin = Number((turnover - routingCosts).toFixed(2));
      const ecpm = Number((_vSent > 0 ? (turnover / _vSent) * 1000 : 0).toFixed(2));

      const payload: Omit<CampaignRow, 'id'> = {
        date: data.date,
        campaign: data.campaign,
        advertiser: data.advertiser,
        invoiceOffice: data.invoiceOffice,
        partner: data.partner,
        theme: data.theme,
        price: _price,
        priceCurrency: data.priceCurrency || 'EUR',
        type: data.type,
        vSent: _vSent,
        routingCosts,
        qty: _qty,
        turnover,
        margin,
        ecpm,
        database: data.database,
        geo: data.geo,
        databaseType: data.databaseType,
      };

      if (mode === 'edit' && initialRow) {
        updateCampaign(initialRow.id, payload);
        showToast('Campaign updated successfully');
        onSaved?.(initialRow.id);
        onClose();
        return;
      }

      await Promise.resolve(addCampaign(payload));
      showToast(
        submitMode === 'save_add' ? 'Campaign saved. Add anotherâ€¦' : 'Campaign saved successfully'
      );

      if (submitMode === 'save_add') {
        reset();
        setTimeout(() => firstRef.current?.focus(), 0);
      } else {
        reset();
        onClose();
      }
    } catch (e) {
      console.error(e);
      showToast('Something went wrong while saving', { variant: 'error' });
    }
  };

  const onInvalid = () => {
    showToast('Please fix the highlighted fields', { variant: 'error' });
  };

  const requestClose = () => {
    if (mode === 'edit' && isDirty) {
      const ok = confirm('You have unsaved changes. Discard them?');
      if (!ok) return;
    }
    onClose();
  };

  // ESC + foco inicial + atajos
  useEffect(() => {
    const onKey = (e: KeyboardEvent) => {
      if (e.key === 'Escape') requestClose();
      if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === 's') {
        e.preventDefault();
        setSubmitMode('save');
        formRef.current?.requestSubmit();
      }
      const target = e.target as HTMLElement | null;
      const role = target?.getAttribute?.('role');
      if (!e.ctrlKey && !e.metaKey && !e.altKey && e.key === 'Enter' && role !== 'combobox') {
        setSubmitMode('save');
      }
    };
    document.addEventListener('keydown', onKey);
    setTimeout(() => firstRef.current?.focus(), 0);
    return () => document.removeEventListener('keydown', onKey);
  }, []); // eslint-disable-line

  // Focus trap
  useEffect(() => {
    const node = trapRef.current;
    if (!node) return;

    const selector = [
      'a[href]',
      'button:not([disabled])',
      'textarea:not([disabled])',
      'input:not([disabled])',
      'select:not([disabled])',
      '[tabindex]:not([tabindex="-1"])',
    ].join(',');

    const handle = (e: KeyboardEvent) => {
      if (e.key !== 'Tab') return;
      const focusables = Array.from(node.querySelectorAll<HTMLElement>(selector)).filter(
        (el) => el.offsetParent !== null
      );
      if (!focusables.length) return;
      const first = focusables[0];
      const last = focusables[focusables.length - 1];
      const active = document.activeElement as HTMLElement | null;

      if (e.shiftKey) {
        if (active === first || !node.contains(active)) {
          last.focus();
          e.preventDefault();
        }
      } else {
        if (active === last) {
          first.focus();
          e.preventDefault();
        }
      }
    };

    node.addEventListener('keydown', handle);
    return () => node.removeEventListener('keydown', handle);
  }, []);

  const marginTextClass =
    watchMargin > 0
      ? 'text-[--color-primary]'
      : watchMargin < 0
      ? 'text-[--color-accent]'
      : 'opacity-70';

  // Inputs de solo lectura â€” compacto + contraste
  const roInput = 'input h-10 border-dotted bg-[color:var(--color-surface-2)]/70';
  const roErr = (bad?: boolean) => `${roInput} ${bad ? 'input-error' : ''}`;
  const errId = (name: string) => `err-${name}`;

  const routingHint =
    vSent > 0 ? `${fmtNum.format(vSent)}/1000 Ã— 0.18` : 'vSent / 1000 Ã— 0.18';
  const turnoverHint =
    qty > 0 || price > 0
      ? `${fmtNum.format(qty || 0)} Ã— ${fmtNum.format(price || 0)}`
      : 'qty Ã— price';
  const marginHint =
    watchTurnover > 0 || (watch('routingCosts') ?? 0) > 0
      ? `${fmtEUR.format(watchTurnover || 0)} âˆ’ ${fmtEUR.format(watch('routingCosts') || 0)}`
      : 'turnover âˆ’ routing';
  const ecpmHint =
    vSent > 0
      ? `(${fmtEUR.format(watchTurnover || 0)} / ${fmtNum.format(vSent)}) Ã— 1000`
      : '(turnover / vSent) Ã— 1000';

  // === UI ===
  const modal = (
    <div
      className="fixed inset-0 z-[100] flex items-center justify-center p-4"
      role="dialog"
      aria-modal="true"
    >
      {/* Backdrop (oscuro + blur) */}
      <div
        className="absolute inset-0 bg-black/55 backdrop-blur-sm"
        data-backdrop="true"
        onMouseDown={requestClose}
        aria-hidden="true"
      />

      {/* Card */}
      <div
        ref={trapRef}
        className="relative card w-full max-w-5xl max-h-[90vh] overflow-hidden border border-[--color-border] shadow-xl"
        style={{ background: 'var(--color-surface)' }}
        onMouseDown={(e) => {
          // Evita que el click dentro del card burbujee al backdrop
          e.stopPropagation();
        }}
      >
        {/* Header sticky */}
        <div className="sticky top-0 z-10 modal-chrome modal-header px-5 py-3">
          <div className="accent-strip" aria-hidden />
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold">
              {mode === 'edit' ? 'Edit campaign' : 'Create campaign'}
            </h3>
            <button className="btn-ghost" onClick={requestClose} aria-label="Close">âœ•</button>
          </div>
        </div>

        {/* Body */}
        <div className="overflow-y-auto px-5 py-4 relative">
          <div className="edge-fade edge-top" aria-hidden />

          <form
            ref={formRef}
            id="create-edit-campaign-form"
            onSubmit={handleSubmit(onSubmit, onInvalid)}
            className="grid grid-cols-12 gap-3"
          >
            {/* A) Basics */}
            <Section title="Basics">
              <div className="grid grid-cols-12 gap-2">
                <div className="col-span-12 md:col-span-4">
                  <Field label="Date">
                    <div className="relative">
                      <input
                        ref={firstRef as any}
                        type="date"
                        {...register('date')}
                        aria-invalid={showErr('date') || undefined}
                        aria-describedby={showErr('date') ? errId('date') : undefined}
                        className={`input input-date h-10 ${showErr('date') ? 'input-error' : ''}`}
                      />
                      {showErr('date') && (
                        <Tooltip
                          content={errors.date?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err id={errId('date')} e={showErr('date') ? errors.date : undefined} />
                  </Field>
                </div>
                <div className="col-span-12 md:col-span-8">
                  <Field label="Campaign">
                    <FieldWithAddon
                      onAdd={canQuickAdd ? () => setOpenAddCampaign(true) : undefined} // ðŸ†•
                      addAriaLabel="Add campaign"
                      className="w-full"
                    >
                      <div className="w-full rounded-r-none">
                        <Combobox
                          id="campaign"
                          ariaLabel="Campaign"
                          className="w-full"
                          options={CAMPAIGNS.map((c: any) => ({ id: c.id, value: c.name }))}
                          value={watch('campaign')}
                          onChange={(v) =>
                            setValue('campaign', v, { shouldValidate: true, shouldDirty: true })
                          }
                          invalid={showErr('campaign')}
                          ariaDescribedby={showErr('campaign') ? errId('campaign') : undefined}
                        />
                      </div>
                    </FieldWithAddon>

                    <Err
                      id={errId('campaign')}
                      e={showErr('campaign') ? errors.campaign : undefined}
                    />
                  </Field>
                </div>
                <div className="col-span-12 md:col-span-6">
                  <Field label="Advertiser" badge="AUTO">
                    <div className="relative">
                      <input
                        type="text"
                        {...register('advertiser')}
                        readOnly
                        aria-invalid={showErr('advertiser') || undefined}
                        aria-describedby={showErr('advertiser') ? errId('advertiser') : undefined}
                        className={roErr(showErr('advertiser'))}
                      />
                      {showErr('advertiser') && (
                        <Tooltip
                          content={errors.advertiser?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err
                      id={errId('advertiser')}
                      e={showErr('advertiser') ? errors.advertiser : undefined}
                    />
                  </Field>
                </div>

                <div className="col-span-12 md:col-span-6">
                  <Field label="Invoice office" badge="AUTO">
                    <div className="relative">
                      <input
                        type="text"
                        {...register('invoiceOffice')}
                        readOnly
                        aria-invalid={showErr('invoiceOffice') || undefined}
                        aria-describedby={
                          showErr('invoiceOffice') ? errId('invoiceOffice') : undefined
                        }
                        className={roErr(showErr('invoiceOffice'))}
                      />
                      {showErr('invoiceOffice') && (
                        <Tooltip
                          content={errors.invoiceOffice?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err
                      id={errId('invoiceOffice')}
                      e={showErr('invoiceOffice') ? errors.invoiceOffice : undefined}
                    />
                  </Field>
                </div>

                <div className="col-span-12 md:col-span-6">
                  <Field label="Partner">
                    <FieldWithAddon
                      onAdd={canQuickAdd ? () => setOpenAddPartner(true) : undefined} // ðŸ†•
                      addAriaLabel="Add partner"
                    >
                      <select
                        {...register('partner')}
                        className="input h-10 rounded-r-none"
                        aria-invalid={showErr('partner') || undefined}
                        aria-describedby={showErr('partner') ? errId('partner') : undefined}
                      >
                        <option value="">-- Select --</option>
                        {PARTNERS.map((p: any) => (
                          <option key={p.id} value={p.name}>
                            {p.name}
                            {p.isInternal ? ' (INT)' : ''}
                          </option>
                        ))}
                      </select>
                    </FieldWithAddon>
                    <Err id={errId('partner')} e={showErr('partner') ? errors.partner : undefined} />
                  </Field>
                </div>

                <div className="col-span-12 md:col-span-6">
                  <Field label="Theme">
                    <div className="relative">
                      <select
                        {...register('theme')}
                        aria-invalid={showErr('theme') || undefined}
                        aria-describedby={showErr('theme') ? errId('theme') : undefined}
                        className={`input h-10 ${showErr('theme') ? 'input-error' : ''}`}
                      >
                        <option value="">-- Select --</option>
                        {THEMES.map((t: string) => (
                          <option key={t} value={t}>
                            {t}
                          </option>
                        ))}
                      </select>
                      {showErr('theme') && (
                        <Tooltip
                          content={errors.theme?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err id={errId('theme')} e={showErr('theme') ? errors.theme : undefined} />
                  </Field>
                </div>
              </div>
            </Section>

            {/* B) Commercial */}
            <Section title="Commercial">
              <div className="grid grid-cols-12 gap-2">
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="Type">
                    <div className="relative">
                      <select
                        {...register('type')}
                        aria-invalid={showErr('type') || undefined}
                        aria-describedby={showErr('type') ? errId('type') : undefined}
                        className={`input h-10 ${showErr('type') ? 'input-error' : ''}`}
                      >
                        {TYPES.filter((t: string) =>
                          (DEAL_TYPES as readonly string[]).includes(t)
                        ).map((t: string) => (
                          <option key={t} value={t}>
                            {t}
                          </option>
                        ))}
                      </select>
                      {showErr('type') && (
                        <Tooltip
                          content={errors.type?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err id={errId('type')} e={showErr('type') ? errors.type : undefined} />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="Price (â‚¬)">
                    <div className="relative">
                      <input
                        type="number"
                        step="0.01"
                        {...register('price')}
                        aria-invalid={showErr('price') || undefined}
                        aria-describedby={showErr('price') ? errId('price') : undefined}
                        className={`input h-10 ${showErr('price') ? 'input-error' : ''}`}
                      />
                      {showErr('price') && (
                        <Tooltip
                          content={errors.price?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err id={errId('price')} e={showErr('price') ? errors.price : undefined} />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="QTY">
                    <div className="relative">
                      <input
                        type="number"
                        step="1"
                        {...register('qty')}
                        aria-invalid={showErr('qty') || undefined}
                        aria-describedby={showErr('qty') ? errId('qty') : undefined}
                        className={`input h-10 ${showErr('qty') ? 'input-error' : ''}`}
                      />
                      {showErr('qty') && (
                        <Tooltip
                          content={errors.qty?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err id={errId('qty')} e={showErr('qty') ? errors.qty : undefined} />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="V Sent">
                    <div className="relative">
                      <input
                        type="number"
                        {...register('vSent')}
                        aria-invalid={showErr('vSent') || undefined}
                        aria-describedby={showErr('vSent') ? errId('vSent') : undefined}
                        className={`input h-10 ${showErr('vSent') ? 'input-error' : ''}`}
                      />
                      {showErr('vSent') && (
                        <Tooltip
                          content={errors.vSent?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err id={errId('vSent')} e={showErr('vSent') ? errors.vSent : undefined} />
                  </Field>
                </div>
              </div>
            </Section>

            {/* C) Data source */}
            <Section title="Data source">
              <div className="grid grid-cols-12 gap-2">
                <div className="col-span-12 md:col-span-6">
                  <Field label="Database">
                    <FieldWithAddon
                      onAdd={canQuickAdd ? () => setOpenAddDatabase(true) : undefined} // ðŸ†•
                      addAriaLabel="Add database"
                    >
                      <select
                        {...register('database')}
                        className="input h-10 rounded-r-none"
                        aria-invalid={showErr('database') || undefined}
                        aria-describedby={showErr('database') ? errId('database') : undefined}
                      >
                        <option value="">-- Select --</option>
                        {DATABASES.map((d: any) => (
                          <option key={d.id} value={d.name}>
                            {d.name}
                          </option>
                        ))}
                      </select>
                    </FieldWithAddon>
                    <Err
                      id={errId('database')}
                      e={showErr('database') ? errors.database : undefined}
                    />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="GEO" badge="AUTO">
                    <div className="relative">
                      <input
                        type="text"
                        {...register('geo')}
                        readOnly
                        aria-invalid={showErr('geo') || undefined}
                        aria-describedby={showErr('geo') ? errId('geo') : undefined}
                        className={roErr(showErr('geo'))}
                      />
                      {showErr('geo') && (
                        <Tooltip
                          content={errors.geo?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err id={errId('geo')} e={showErr('geo') ? errors.geo : undefined} />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="DB Type" badge="AUTO">
                    <div className="relative">
                      <input
                        type="text"
                        {...register('databaseType')}
                        readOnly
                        aria-invalid={showErr('databaseType') || undefined}
                        aria-describedby={
                          showErr('databaseType') ? errId('databaseType') : undefined
                        }
                        className={roErr(showErr('databaseType'))}
                      />
                      {showErr('databaseType') && (
                        <Tooltip
                          content={errors.databaseType?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err
                      id={errId('databaseType')}
                      e={showErr('databaseType') ? errors.databaseType : undefined}
                    />
                  </Field>
                </div>
              </div>
            </Section>

            {/* KPI BAR */}
            <div className="col-span-12">
              <KPIBar
                turnover={watchTurnover || 0}
                margin={watchMargin || 0}
                marginPct={watchMarginPct}
                ecpm={watchEcpm || 0}
                fmtEUR={fmtEUR}
                fmtPct={fmtPct}
                positiveClass="text-[--color-primary]"
                negativeClass="text-[--color-accent]"
              />
            </div>

            {/* D) Results */}
            <Section title="Results">
              <div className="grid grid-cols-12 gap-2">
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="Routing costs (â‚¬)" badge="CALC" hint={`Formula: ${routingHint}`}>
                    <input
                      type="number"
                      step="0.01"
                      {...register('routingCosts')}
                      className={roInput}
                      readOnly
                    />
                    <Err
                      id={errId('routingCosts')}
                      e={showErr('routingCosts') ? errors.routingCosts : undefined}
                    />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="Turnover (â‚¬)" badge="CALC" hint={`Formula: ${turnoverHint}`}>
                    <div className="relative group">
                      <input
                        type="number"
                        step="0.01"
                        {...register('turnover')}
                        className={`${roInput} pr-16`}
                        readOnly
                      />
                      <span className="absolute inset-y-0 right-2 flex items-center text-xs opacity-0 group-hover:opacity-70 group-focus-within:opacity-70 transition-opacity">
                        {fmtEUR.format(watchTurnover || 0)}
                      </span>
                    </div>
                    <Err
                      id={errId('turnover')}
                      e={showErr('turnover') ? errors.turnover : undefined}
                    />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="Margin" badge="CALC" hint={`Formula: ${marginHint}`}>
                    <div className="relative group">
                      <input
                        type="number"
                        step="0.01"
                        {...register('margin')}
                        className={`${roInput} pr-24 ${marginTextClass}`}
                        readOnly
                        aria-live="polite"
                      />
                      <span
                        className={`absolute inset-y-0 right-2 flex items-center text-xs opacity-0 group-hover:opacity-90 group-focus-within:opacity-90 transition-opacity ${marginTextClass}`}
                      >
                        {fmtEUR.format(watchMargin || 0)}
                        {watchMarginPct == null ? '' : ` (${fmtPct.format(watchMarginPct)})`}
                      </span>
                    </div>
                    <Err id={errId('margin')} e={showErr('margin') ? errors.margin : undefined} />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="eCPM (â‚¬)" badge="CALC" hint={`Formula: ${ecpmHint}`}>
                    <div className="relative group">
                      <input
                        type="number"
                        step="0.01"
                        {...register('ecpm')}
                        className={`${roInput} pr-16`}
                        readOnly
                      />
                      <span className="absolute inset-y-0 right-2 flex items-center text-xs opacity-0 group-hover:opacity-70 group-focus-within:opacity-70 transition-opacity">
                        {fmtEUR.format(watchEcpm || 0)}
                      </span>
                    </div>
                    <Err id={errId('ecpm')} e={showErr('ecpm') ? errors.ecpm : undefined} />
                  </Field>
                </div>
              </div>
            </Section>
          </form>

          <div className="edge-fade edge-bottom" aria-hidden />
        </div>

        {/* Footer */}
        <div className="sticky bottom-0 z-10 modal-chrome modal-footer px-5 py-3">
          <div className="flex items-center justify-end gap-2">
            <button type="button" onClick={requestClose} className="btn-ghost">Cancel</button>
            {mode === 'create' && (
              <button
                type="button"
                disabled={isSubmitting}
                className="btn-ghost"
                onClick={() => { setSubmitMode('save_add'); formRef.current?.requestSubmit(); }}
              >
                Save & add another
              </button>
            )}
            <button
              type="button"
              disabled={isSubmitting}
              className="btn-primary"
              onClick={() => { setSubmitMode('save'); formRef.current?.requestSubmit(); }}
            >
              {isSubmitting ? 'Savingâ€¦' : mode === 'edit' ? 'Save changes' : 'Save'}
            </button>
          </div>
        </div>
      </div>

      {/* Quick-add modals */}
      {openAddCampaign && (
        <QuickAddCampaignModal
          onClose={() => setOpenAddCampaign(false)}
          onCreated={(newName) => {
            setValue('campaign', newName, { shouldDirty: true, shouldValidate: true });
          }}
        />
      )}
      {openAddPartner && (
        <QuickAddPartnerModal
          onClose={() => setOpenAddPartner(false)}
          onCreated={(newName) => {
            setValue('partner', newName, { shouldDirty: true, shouldValidate: true });
          }}
        />
      )}
      {openAddDatabase && (
        <QuickAddDatabaseModal
          onClose={() => setOpenAddDatabase(false)}
          onCreated={(newName) => {
            setValue('database', newName, { shouldDirty: true, shouldValidate: true });
          }}
        />
      )}
    </div>
  );

  if (typeof document === 'undefined') return null;
  return createPortal(modal, document.body);
}

// ======================= UI helpers =======================
function Field({
  label,
  children,
  badge,
  hint,
}: {
  label: string;
  children: React.ReactNode;
  badge?: 'AUTO' | 'CALC';
  hint?: string;
}) {
  return (
    <label className="text-[13px] grid gap-1">
      <span className="muted font-medium flex items-center gap-2">
        {label}
        {badge ? <FieldBadge type={badge} /> : null}
      </span>
      {children}
      {hint ? <span className="text-[11px] opacity-60">{hint}</span> : null}
    </label>
  );
}

function FieldBadge({ type }: { type: 'AUTO' | 'CALC' }) {
  return (
    <span
      className="badge-field"
      data-variant={type === 'CALC' ? 'calc' : undefined}
      aria-label={type === 'AUTO' ? 'Auto-filled' : 'Calculated'}
      title={type === 'AUTO' ? 'Auto-filled' : 'Calculated'}
    >
      {type}
    </span>
  );
}

function Err({ id, e }: { id: string; e?: { message?: string } }) {
  if (!e?.message) return null;
  return (
    <span id={id} role="status" className="text-[--color-accent] text-xs">
      {e.message}
    </span>
  );
}

function Section({ title, children }: { title: string; children: React.ReactNode }) {
  return (
    <section className="col-span-12 grid gap-2">
      <div className="sticky -top-px z-[1] bg-[color:var(--color-surface)] pt-1">
        <h4 className="text-sm font-semibold text-[color:var(--color-text)]/85">{title}</h4>
      </div>
      <div className="subcard p-3 md:p-4">
        {children}
      </div>
    </section>
  );
}

function KPIBar({
  turnover,
  margin,
  marginPct,
  ecpm,
  fmtEUR,
  fmtPct,
  positiveClass,
  negativeClass,
}: {
  turnover: number;
  margin: number;
  marginPct: number | null;
  ecpm: number;
  fmtEUR: Intl.NumberFormat;
  fmtPct: Intl.NumberFormat;
  positiveClass?: string;
  negativeClass?: string;
}) {
  const marginClass =
    margin > 0
      ? (positiveClass || 'text-green-600')
      : margin < 0
      ? (negativeClass || 'text-red-600')
      : 'opacity-80';

  return (
    <div className="grid grid-cols-12 gap-3">
      <div className="col-span-12">
        <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)]/80 p-3 md:sticky md:top-2">
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
            <div className="rounded-lg bg-[color:var(--color-surface-2)]/60 p-3">
              <div className="text-xs uppercase text-[color:var(--color-text)]/65">Turnover</div>
              <div className="text-xl font-semibold" style={{ fontVariantNumeric: 'tabular-nums' }}>
                {fmtEUR.format(turnover || 0)}
              </div>
            </div>
            <div className="rounded-lg bg-[color:var(--color-surface-2)]/60 p-3">
              <div className="text-xs uppercase text-[color:var(--color-text)]/65">Margin</div>
              <div className={`text-xl font-semibold ${marginClass}`} style={{ fontVariantNumeric: 'tabular-nums' }}>
                {fmtEUR.format(margin || 0)}
                {marginPct == null ? '' : ` (${fmtPct.format(marginPct)})`}
              </div>
            </div>
            <div className="rounded-lg bg-[color:var(--color-surface-2)]/60 p-3">
              <div className="text-xs uppercase text-[color:var(--color-text)]/65">eCPM</div>
              <div className="text-xl font-semibold" style={{ fontVariantNumeric: 'tabular-nums' }}>
                {fmtEUR.format(ecpm || 0)}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\create-campaign\QuickAddCampaignModal.tsx =====
'use client';

import { useEffect, useRef, useState } from 'react';
import MiniModal from '@/components/ui/MiniModal';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';
import { trimCollapse } from '@/data/reference';

const trim = trimCollapse;
const norm = (s: string) => trimCollapse(s).toLowerCase();

export default function QuickAddCampaignModal({
  onClose,
  onCreated,
}: {
  onClose: () => void;
  onCreated: (campaignName: string) => void;
}) {
  const { CAMPAIGNS, addCampaignRef } = useCatalogOverrides();
  const [name, setName] = useState('');
  const [advertiser, setAdvertiser] = useState('');
  const [err, setErr] = useState<string>('');

  const nameRef = useRef<HTMLInputElement | null>(null);

  useEffect(() => {
    const t = setTimeout(() => nameRef.current?.focus(), 0);
    return () => clearTimeout(t);
  }, []);

  const submit = () => {
    const n = trim(name);
    const a = trim(advertiser) || 'White Label';
    if (!n) { setErr('Name is required'); return; }

    const exists = CAMPAIGNS.some(c => norm(c.name) === norm(n));
    if (exists) { setErr('Campaign already exists'); return; }

    addCampaignRef({ name: n, advertiser: a });
    onCreated(n);
    onClose();
  };

  const onKeyDown: React.KeyboardEventHandler<HTMLDivElement> = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      submit();
    }
  };

  const hasErr = Boolean(err);
  const errId = 'quick-add-campaign-error';

  return (
    <MiniModal
      title="Add campaign"
      onClose={onClose}
      footer={(
        <>
          <button className="btn-ghost" onClick={onClose}>Cancel</button>
          <button className="btn-primary disabled:opacity-50 disabled:pointer-events-none" onClick={submit} disabled={!trim(name)}>
            Add
          </button>
        </>
      )}
    >
      <div className="grid gap-3" onKeyDown={onKeyDown}>
        <label className="text-sm grid gap-1">
          <span className="muted">Name</span>
          <input
            ref={nameRef}
            className={`input ${hasErr ? 'input-error' : ''}`}
            value={name}
            onChange={e => { setName(e.target.value); setErr(''); }}
            aria-invalid={hasErr || undefined}
            aria-describedby={hasErr ? errId : undefined}
          />
        </label>
        <label className="text-sm grid gap-1">
          <span className="muted">Advertiser</span>
          <input
            className="input"
            value={advertiser}
            onChange={e => setAdvertiser(e.target.value)}
            placeholder="White Label"
          />
        </label>
        {hasErr ? (
          <div id={errId} className="text-[--color-accent] text-sm">{err}</div>
        ) : null}
      </div>
    </MiniModal>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\create-campaign\QuickAddDatabaseModal.tsx =====
'use client';

import { useEffect, useMemo, useRef, useState } from 'react';
import MiniModal from '@/components/ui/MiniModal';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';
import { trimCollapse, type DBType } from '@/data/reference';

const norm = (s: string) => trimCollapse(s).toLowerCase();

/** --- ISO-3166 validator (estricto) con compat UKâ†’GB + MULTI --- */
function isIsoCountry(code: string): boolean {
  const c = code.toUpperCase();
  if (!/^[A-Z]{2}$/.test(c)) return false;
  try {
    // Si el cÃ³digo es vÃ¡lido, devuelve un nombre localizado distinto al propio cÃ³digo
    const dn = new (Intl as any).DisplayNames(['en'], { type: 'region' });
    const name = dn?.of?.(c);
    return typeof name === 'string' && name && name !== c;
  } catch {
    return false;
  }
}
function normalizeGeoStrict(raw: string): string | null {
  const g = trimCollapse(raw).toUpperCase();
  if (!g) return null;
  if (g === 'MULTI') return 'MULTI';
  const mapped = g === 'UK' ? 'GB' : g; // compatibilidad
  return isIsoCountry(mapped) ? mapped : null;
}

export default function QuickAddDatabaseModal({
  onClose,
  onCreated,
}: {
  onClose: () => void;
  onCreated: (dbName: string) => void;
}) {
  const { DATABASES, addDatabaseRef } = useCatalogOverrides();
  const [name, setName] = useState('');
  const [geo, setGeo] = useState('ES');
  const [dbType, setDbType] = useState<DBType>('B2B');
  const [err, setErr] = useState<string>('');

  const nameRef = useRef<HTMLInputElement | null>(null);
  useEffect(() => {
    const t = setTimeout(() => nameRef.current?.focus(), 0);
    return () => clearTimeout(t);
  }, []);

  const geoNormalized = useMemo(() => normalizeGeoStrict(geo), [geo]);
  const geoValid = geoNormalized !== null;

  const hasErr = Boolean(err);
  const errId = 'quick-add-db-error';

  const submit = () => {
    const n = trimCollapse(name);
    if (!n) { setErr('Name is required'); return; }

    // GEO estricto
    if (!geoValid) {
      setErr('Invalid GEO. Use ISO-3166-1 alpha-2 (e.g., ES, FR, GB) or MULTI.');
      return;
    }

    // 1) Evitar duplicado por NOMBRE (case-insensitive)
    const existsByName = DATABASES.some(d => norm(d.name) === norm(n));
    if (existsByName) { setErr('Database already exists'); return; }

    addDatabaseRef({
      name: n,
      geo: geoNormalized!,          // ya validado (incluye UKâ†’GB y MULTI)
      dbType,
    });
    onCreated(n);
    onClose();
  };

  const onKeyDown: React.KeyboardEventHandler<HTMLDivElement> = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      submit();
    }
  };

  return (
    <MiniModal
      title="Add database"
      onClose={onClose}
      footer={(
        <>
          <button className="btn-ghost" onClick={onClose}>Cancel</button>
          <button
            className="btn-primary disabled:opacity-50 disabled:pointer-events-none"
            onClick={submit}
            disabled={!trimCollapse(name) || !geoValid}
          >
            Add
          </button>
        </>
      )}
    >
      <div className="grid gap-3" onKeyDown={onKeyDown}>
        <label className="text-sm grid gap-1">
          <span className="muted">Name</span>
          <input
            ref={nameRef}
            className={`input ${hasErr ? 'input-error' : ''}`}
            value={name}
            onChange={e => { setName(e.target.value); setErr(''); }}
            aria-invalid={hasErr || undefined}
            aria-describedby={hasErr ? errId : undefined}
          />
        </label>

        <div className="grid grid-cols-2 gap-3">
          <label className="text-sm grid gap-1">
            <span className="muted">GEO</span>
            <input
              className={`input ${!geoValid ? 'input-error' : ''}`}
              value={geo}
              onChange={e => { setGeo(e.target.value.toUpperCase()); setErr(''); }}
              placeholder="ES / FR / GB / MULTI (UK â†’ GB)"
              aria-invalid={!geoValid || undefined}
            />
            {!geoValid && (
              <span className="text-[--color-accent] text-xs">
                Use ISO-3166-1 alpha-2 (p. ej., ES, FR, GB) o MULTI. (UK se normaliza a GB)
              </span>
            )}
          </label>

          <label className="text-sm grid gap-1">
            <span className="muted">DB Type</span>
            <select
              className="input"
              value={dbType}
              onChange={e => setDbType(e.target.value as DBType)}
            >
              <option value="B2B">B2B</option>
              <option value="B2C">B2C</option>
              <option value="Mixed">Mixed</option>
            </select>
          </label>
        </div>

        {hasErr ? <div id={errId} className="text-[--color-accent] text-sm">{err}</div> : null}
      </div>
    </MiniModal>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\create-campaign\QuickAddPartnerModal.tsx =====
'use client';

import { useEffect, useRef, useState } from 'react';
import MiniModal from '@/components/ui/MiniModal';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';
import { toSlug, trimCollapse, type InvoiceOffice } from '@/data/reference';

const norm = (s: string) => trimCollapse(s).toLowerCase();

export default function QuickAddPartnerModal({
  onClose,
  onCreated,
}: {
  onClose: () => void;
  onCreated: (partnerName: string) => void;
}) {
  const { PARTNERS, addPartnerRef } = useCatalogOverrides();
  const [name, setName] = useState('');
  const [office, setOffice] = useState<InvoiceOffice>('DAT');
  const [err, setErr] = useState<string>('');

  const nameRef = useRef<HTMLInputElement | null>(null);
  useEffect(() => {
    const t = setTimeout(() => nameRef.current?.focus(), 0);
    return () => clearTimeout(t);
  }, []);

  const hasErr = Boolean(err);
  const errId = 'quick-add-partner-error';

  const submit = () => {
    const n = trimCollapse(name);
    if (!n) { setErr('Name is required'); return; }

    // 1) Evitar duplicado por NOMBRE (case-insensitive)
    const existsByName = PARTNERS.some(p => norm(p.name) === norm(n));
    if (existsByName) { setErr('Partner already exists'); return; }

    // 2) Generar id Ãºnico (slug) a partir del nombre
    const base = toSlug(n) || 'partner';
    // Algunos overrides podrÃ­an no tener id; fallback al slug del nombre
    const usedIds = new Set(
      PARTNERS.map(p => (p.id ? p.id : toSlug(p.name))).filter(Boolean).map(x => x.toLowerCase())
    );

    let finalId = base;
    let k = 2;
    while (usedIds.has(finalId.toLowerCase())) {
      finalId = `${base}-${k++}`;
    }

    const payload: any = {
      id: finalId,
      name: n,
      invoiceOffice: office,
      // marcar interno si procede (Ãºtil para mostrar "(INT)" en selects)
      ...(office === 'INT' ? { isInternal: true } : {}),
    };

    addPartnerRef(payload);
    onCreated(n);
    onClose();
  };

  const onKeyDown: React.KeyboardEventHandler<HTMLDivElement> = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      submit();
    }
  };

  return (
    <MiniModal
      title="Add partner"
      onClose={onClose}
      footer={(
        <>
          <button className="btn-ghost" onClick={onClose}>Cancel</button>
          <button
            className="btn-primary disabled:opacity-50 disabled:pointer-events-none"
            onClick={submit}
            disabled={!trimCollapse(name)}
          >
            Add
          </button>
        </>
      )}
    >
      <div className="grid gap-3" onKeyDown={onKeyDown}>
        <label className="text-sm grid gap-1">
          <span className="muted">Name</span>
          <input
            ref={nameRef}
            className={`input ${hasErr ? 'input-error' : ''}`}
            value={name}
            onChange={e => { setName(e.target.value); setErr(''); }}
            aria-invalid={hasErr || undefined}
            aria-describedby={hasErr ? errId : undefined}
          />
        </label>

        <label className="text-sm grid gap-1">
          <span className="muted">Invoice office</span>
          <select
            className="input"
            value={office}
            onChange={e => setOffice(e.target.value as InvoiceOffice)}
          >
            <option value="DAT">DAT</option>
            <option value="CAR">CAR</option>
            <option value="INT">INT (Internal)</option>
          </select>
        </label>

        {hasErr ? <div id={errId} className="text-[--color-accent] text-sm">{err}</div> : null}
      </div>
    </MiniModal>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\export\ExportModal.tsx =====
// components/export/ExportModal.tsx
'use client';

import { useMemo, useState } from 'react';
import MiniModal from '@/components/ui/MiniModal';
import { useAuth } from '@/context/AuthContext'; // ðŸ†• admin guard
import type { CampaignRow } from '@/types/campaign';
import {
  buildExportRows,
  rowsToCSV,
  rowsToJSON,
  downloadBlob,
  type ColumnSpec,
  type ExportScope,
  type ExportColumnsKind,
} from '@/utils/exporters';

type Props = {
  onClose: () => void;
  // filas ya filtradas y ordenadas (todas)
  allRows: CampaignRow[];
  // filas de la pÃ¡gina actual (para scope=page)
  pageRows: CampaignRow[];
  // columnas visibles (para "visible")
  visibleColumns: ColumnSpec[];
  // columnas completas (para "all")
  allColumns: ColumnSpec[];
  defaultFilename?: string; // sin extensiÃ³n
};

export default function ExportModal({
  onClose,
  allRows,
  pageRows,
  visibleColumns,
  allColumns,
  defaultFilename = 'campaigns_export',
}: Props) {
  const { isAdmin } = useAuth(); // ðŸ†•

  const [format, setFormat] = useState<'csv-excel' | 'csv-rfc' | 'json'>('csv-excel');
  const [scope, setScope] = useState<ExportScope>('all');
  const [colsKind, setColsKind] = useState<ExportColumnsKind>('visible');
  const [includeSummary, setIncludeSummary] = useState(false);
  const [fileBase, setFileBase] = useState(defaultFilename);

  const effectiveRows = scope === 'all' ? allRows : pageRows;
  const effectiveColumns = colsKind === 'visible' ? visibleColumns : allColumns;
  const count = effectiveRows.length;

  const ext = format === 'json' ? 'json' : 'csv';
  const filename = `${fileBase}.${ext}`;

  // base y efectivo (admin-only)
  const canExportBase = count > 0 && effectiveColumns.length > 0;
  const canExport = canExportBase && !!isAdmin;

  function doExport() {
    if (!canExport) return;
    const rows = buildExportRows({
      rows: effectiveRows,
      columns: effectiveColumns,
      includeSummary,
    });

    if (format === 'json') {
      const blob = rowsToJSON(rows);
      downloadBlob(blob, filename);
      return;
    }

    const delimiter = format === 'csv-excel' ? ';' : ',';
    const blob = rowsToCSV(rows, delimiter);
    downloadBlob(blob, filename);
  }

  return (
    <MiniModal
      title="Export data"
      onClose={onClose}
      solid={false}
      widthClass="max-w-2xl w-[min(100vw-2rem,720px)]"
      footer={
        <>
          <div className="mr-auto text-xs opacity-80">
            {count === 0 ? 'No rows to export' : `Will export ${count} row${count === 1 ? '' : 's'}`}
          </div>
          {!isAdmin && (
            <div className="mr-2 text-xs text-[--color-accent]">
              Admin-only: exporting is disabled for your account.
            </div>
          )}
          <button className="btn-ghost" onClick={onClose}>Cancel</button>
          <button
            className="btn-primary disabled:opacity-50 disabled:pointer-events-none"
            onClick={doExport}
            disabled={!canExport}
            aria-disabled={!canExport}
            title={!isAdmin ? 'Admins only' : undefined}
          >
            Export
          </button>
        </>
      }
    >
      <div className="grid gap-4">
        {/* Aviso admin-only */}
        {!isAdmin && (
          <div className="rounded-lg border border-[--color-accent]/40 bg-[--color-accent]/10 p-3 text-sm">
            <strong>Admin-only.</strong> You can adjust options, but exporting is disabled for non-admin users.
          </div>
        )}

        {/* Formato */}
        <fieldset className="grid gap-2">
          <legend className="text-sm font-semibold">Format</legend>
          <div className="flex flex-wrap gap-2">
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="radio" name="fmt" checked={format === 'csv-excel'} onChange={() => setFormat('csv-excel')} />
              CSV (Excel-friendly ; )
            </label>
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="radio" name="fmt" checked={format === 'csv-rfc'} onChange={() => setFormat('csv-rfc')} />
              CSV (RFC 4180 , )
            </label>
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="radio" name="fmt" checked={format === 'json'} onChange={() => setFormat('json')} />
              JSON
            </label>
          </div>
        </fieldset>

        {/* Ãmbito */}
        <fieldset className="grid gap-2">
          <legend className="text-sm font-semibold">Scope</legend>
          <div className="flex flex-wrap gap-2">
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="radio" name="scope" checked={scope === 'all'} onChange={() => setScope('all')} />
              All filtered rows
            </label>
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="radio" name="scope" checked={scope === 'page'} onChange={() => setScope('page')} />
              Current page only
            </label>
          </div>
        </fieldset>

        {/* Columnas */}
        <fieldset className="grid gap-2">
          <legend className="text-sm font-semibold">Columns</legend>
          <div className="flex flex-wrap gap-2">
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="radio" name="cols" checked={colsKind === 'visible'} onChange={() => setColsKind('visible')} />
              Visible only (default)
            </label>
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="radio" name="cols" checked={colsKind === 'all'} onChange={() => setColsKind('all')} />
              All columns
            </label>
          </div>
        </fieldset>

        {/* Opciones extra */}
        <div className="flex items-center gap-2">
          <input
            id="incl-summary"
            type="checkbox"
            checked={includeSummary}
            onChange={(e) => setIncludeSummary(e.target.checked)}
          />
          <label htmlFor="incl-summary" className="text-sm">Include summary row</label>
        </div>

        {/* Nombre archivo */}
        <label className="text-sm grid gap-1">
          <span className="muted">File name</span>
          <div className="flex">
            <input
              className="input flex-1 rounded-r-none"
              value={fileBase}
              onChange={(e) => setFileBase(e.target.value.replace(/\.(csv|json)$/i, ''))}
            />
            <div className="input bg-[color:var(--color-surface-2)]/70 w-28 pointer-events-none rounded-l-none">
              .{format === 'json' ? 'json' : 'csv'}
            </div>
          </div>
        </label>
      </div>
    </MiniModal>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\guards\IfAdmin.tsx =====
'use client';

import { PropsWithChildren } from 'react';
import { useAuth } from '@/context/AuthContext';

export default function IfAdmin({ children }: PropsWithChildren) {
  const { isAdmin, loading } = useAuth();
  if (loading) return null;
  return isAdmin ? <>{children}</> : null;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\guards\IfEditorOrAdmin.tsx =====
'use client';

import { PropsWithChildren } from 'react';
import { useAuth } from '@/context/AuthContext';

export default function IfEditorOrAdmin({ children }: PropsWithChildren) {
  const { isEditor, loading } = useAuth();
  if (loading) return null;
  return isEditor ? <>{children}</> : null;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\import\ImportCsvModal.tsx =====
// components/import/ImportCsvModal.tsx
'use client';

import { useEffect, useMemo, useRef, useState } from 'react';
import { useAuth } from '@/context/AuthContext';                 // ðŸ†• admin guard
import MiniModal from '@/components/ui/MiniModal';
import { useCampaignData } from '@/context/CampaignDataContext';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';
import type { CampaignRow } from '@/types/campaign';

type Draft = Omit<CampaignRow, 'id'>;

type RowState = 'OK' | 'WARN' | 'ERROR';
type RowIssue = { level: RowState; msg: string };

const REQUIRED_HEADERS = [
  'date','campaign','partner','theme','price','type','vSent','qty','database'
] as const;
type RequiredHeader = typeof REQUIRED_HEADERS[number];

const OPTIONAL_HEADERS = ['priceCurrency'] as const;

const fmtEUR = new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' });

/* =======================
   Utils
   ======================= */

function parseNum(v: any): number {
  if (v === '' || v == null) return 0;
  if (typeof v === 'number') return Number.isFinite(v) ? v : 0;

  let s = String(v).trim();
  if (!s) return 0;
  s = s.replace(/\s/g, '');
  s = s.replace(/[^\d,.\-]/g, '');

  if (s === '' || s === '-' || s === ',' || s === '.') return 0;

  const hasComma = s.includes(',');
  const hasDot = s.includes('.');

  if (hasComma && hasDot) {
    if (s.lastIndexOf(',') > s.lastIndexOf('.')) {
      s = s.replace(/\./g, '').replace(',', '.');
    } else {
      s = s.replace(/,/g, '');
    }
  } else if (hasComma) {
    s = s.replace(',', '.');
  }
  const n = Number(s);
  return Number.isFinite(n) ? n : 0;
}

function normalizeDate(d: string): string | null {
  const s = (d || '').trim();
  if (!s) return null;
  if (/^\d{4}-\d{2}-\d{2}$/.test(s)) return s;
  const m = /^(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})$/.exec(s);
  if (m) {
    const dd = String(m[1]).padStart(2, '0');
    const mm = String(m[2]).padStart(2, '0');
    const yyyy = m[3];
    return `${yyyy}-${mm}-${dd}`;
  }
  const t = new Date(s);
  if (isNaN(t.getTime())) return null;
  return t.toISOString().slice(0, 10);
}

// CSV parser con autodetecciÃ³n de delimitador
function parseCSV(text: string): { headers: string[]; rows: Record<string, string>[] } {
  const lines = text.replace(/\r/g, '\n').split('\n').filter(l => l.trim() !== '');
  if (lines.length === 0) return { headers: [], rows: [] };

  const firstLine = lines[0];
  const delim = detectDelimiter(firstLine);

  const headers = splitCSVLine(firstLine, delim).map(h => h.trim());
  const rows: Record<string, string>[] = [];

  for (let i = 1; i < lines.length; i++) {
    const cols = splitCSVLine(lines[i], delim);
    if (cols.length === 1 && cols[0].trim() === '') continue;
    const row: Record<string, string> = {};
    headers.forEach((h, idx) => { row[h] = (cols[idx] ?? '').trim(); });
    rows.push(row);
  }
  return { headers, rows };
}

function detectDelimiter(sample: string): string {
  const count = (d: string) => {
    let c = 0, inQ = false;
    for (let i = 0; i < sample.length; i++) {
      const ch = sample[i];
      if (ch === '"') {
        if (inQ && sample[i + 1] === '"') { i++; continue; }
        inQ = !inQ;
      } else if (!inQ && ch === d) c++;
    }
    return c;
  };
  const candidates: readonly string[] = [',',';','\t'];
  let best = candidates[0], bestCount = -1;
  for (const d of candidates) {
    const n = count(d);
    if (n > bestCount) { best = d; bestCount = n; }
  }
  return best;
}

function splitCSVLine(line: string, d: string): string[] {
  const out: string[] = [];
  let cur = '';
  let inQuotes = false;

  for (let i = 0; i < line.length; i++) {
    const ch = line[i];
    if (ch === '"') {
      if (inQuotes && line[i + 1] === '"') { cur += '"'; i++; continue; }
      inQuotes = !inQuotes;
      continue;
    }
    if (ch === d && !inQuotes) { out.push(cur); cur = ''; continue; }
    if ((ch === '\n' || ch === '\r') && !inQuotes) { continue; }
    cur += ch;
  }
  out.push(cur);
  return out;
}

// Lectura case-insensitive de celdas
function getCI(obj: Record<string, string>, key: string): string {
  const target = key.trim().toLowerCase();
  for (const k of Object.keys(obj)) {
    if (k.trim().toLowerCase() === target) return obj[k];
  }
  return '';
}

/* =======================
   Componente
   ======================= */
export default function ImportCsvModal({ onClose }: { onClose: () => void }) {
  const { isAdmin } = useAuth();                                  // ðŸ†•
  const { addManyCampaigns } = useCampaignData();

  const catalogs = useCatalogOverrides();
  const {
    CAMPAIGNS = [], PARTNERS = [], DATABASES = [], THEMES = [], TYPES = ['CPL','CPM','CPC','CPA'],
    resolveInvoiceOfficeMerged = () => 'DAT',
  } = catalogs || {};

  // ðŸ”’ Guard: solo admins pueden importar
  if (!isAdmin) {
    return (
      <MiniModal
        title="Import from CSV"
        onClose={onClose}
        solid={false}
        footer={<button className="btn-primary" onClick={onClose}>Close</button>}
      >
        <div className="p-2 text-sm">
          This action is restricted to <strong>admins</strong>. If you think this is a mistake, please contact an administrator.
        </div>
      </MiniModal>
    );
  }

  // archivo + datos parseados
  const [fileName, setFileName] = useState('');
  const [rawHeaders, setRawHeaders] = useState<string[]>([]);
  const [rawRows, setRawRows] = useState<Record<string, string>[]>([]);

  // preview
  const [issues, setIssues] = useState<RowIssue[][]>([]);
  const [drafts, setDrafts] = useState<Draft[]>([]);
  const [parsing, setParsing] = useState(false);
  const [importing, setImporting] = useState(false);
  const inputRef = useRef<HTMLInputElement | null>(null);

  const headerOk = useMemo(() => {
    const hset = new Set(rawHeaders.map(h => h.trim().toLowerCase()));
    return REQUIRED_HEADERS.every(h => hset.has(h.toLowerCase()));
  }, [rawHeaders]);

  // Helpers de catÃ¡logo
  const findCampaign = (name: string) =>
    CAMPAIGNS.find((c: any) => (c?.name || '').trim().toLowerCase() === (name||'').trim().toLowerCase());
  const partnerExists = (name: string) =>
    PARTNERS.some((p: any) => (p?.name || '').trim().toLowerCase() === (name||'').trim().toLowerCase());
  const findDatabase = (name: string) =>
    DATABASES.find((d: any) => (d?.name || '').trim().toLowerCase() === (name||'').trim().toLowerCase());
  const themeExists = (name: string) =>
    THEMES.some((t: string) => t.trim().toLowerCase() === (name||'').trim().toLowerCase());
  const typeExists = (name: string) =>
    TYPES.some((t: string) => t.trim().toLowerCase() === (name||'').trim().toLowerCase());

  // Parse + validar
  useEffect(() => {
    if (!rawRows.length || !headerOk) { setIssues([]); setDrafts([]); return; }

    const nextDrafts: Draft[] = [];
    const nextIssues: RowIssue[][] = [];

    for (const row of rawRows) {
      const rowIssues: RowIssue[] = [];

      const date = normalizeDate(getCI(row, 'date'));
      if (!date) rowIssues.push({ level: 'ERROR', msg: 'Fecha invÃ¡lida' });

      const campaign = (getCI(row, 'campaign') || '').trim();
      if (!campaign) rowIssues.push({ level: 'ERROR', msg: 'Campaign requerida' });
      const cRef = findCampaign(campaign);
      if (!cRef) rowIssues.push({ level: 'ERROR', msg: 'Campaign no existe en catÃ¡logo' });
      const advertiser = cRef?.advertiser || '';

      const partner = (getCI(row, 'partner') || '').trim();
      if (!partner) rowIssues.push({ level: 'ERROR', msg: 'Partner requerido' });
      if (partner && !partnerExists(partner)) rowIssues.push({ level: 'ERROR', msg: 'Partner no existe en catÃ¡logo' });

      const theme = (getCI(row, 'theme') || '').trim();
      if (!theme) rowIssues.push({ level: 'ERROR', msg: 'Theme requerido' });
      if (theme && !themeExists(theme)) rowIssues.push({ level: 'ERROR', msg: 'Theme no existe en catÃ¡logo' });

      const type = (getCI(row, 'type') || '').trim();
      if (!type) rowIssues.push({ level: 'ERROR', msg: 'Type requerido' });
      if (type && !typeExists(type)) rowIssues.push({ level: 'ERROR', msg: 'Type no existe en catÃ¡logo' });

      const price = parseNum(getCI(row, 'price'));
      if (price < 0) rowIssues.push({ level: 'ERROR', msg: 'Price < 0' });

      const vSent = parseNum(getCI(row, 'vSent'));
      if (vSent < 0) rowIssues.push({ level: 'ERROR', msg: 'vSent < 0' });
      if (vSent === 0) rowIssues.push({ level: 'WARN', msg: 'vSent = 0' });

      const qty = parseNum(getCI(row, 'qty'));
      if (qty < 0) rowIssues.push({ level: 'ERROR', msg: 'qty < 0' });

      const database = (getCI(row, 'database') || '').trim();
      if (!database) rowIssues.push({ level: 'ERROR', msg: 'Database requerida' });
      const dbRef = findDatabase(database);
      if (!dbRef) rowIssues.push({ level: 'ERROR', msg: 'Database no existe en catÃ¡logo' });

      const priceCurrency = (getCI(row, 'priceCurrency') || 'EUR').trim() || 'EUR';

      const geo = dbRef?.geo || '';
      const databaseType = (dbRef?.dbType || '') as CampaignRow['databaseType'];
      const invoiceOffice = resolveInvoiceOfficeMerged(geo || undefined, partner || undefined) as CampaignRow['invoiceOffice'];

      const routingCosts = Number(((vSent / 1000) * 0.18).toFixed(2));
      const turnover = Number((qty * price).toFixed(2));
      const margin = Number((turnover - routingCosts).toFixed(2));
      const ecpm = Number((vSent > 0 ? (turnover / vSent) * 1000 : 0).toFixed(2));

      const draft: Draft = {
        date: date || '',
        campaign,
        advertiser,
        invoiceOffice,
        partner,
        theme,
        price,
        priceCurrency,
        type: type as CampaignRow['type'],
        vSent,
        routingCosts,
        qty,
        turnover,
        margin,
        ecpm,
        database,
        geo,
        databaseType: (databaseType || '') as CampaignRow['databaseType'],
      };

      nextDrafts.push(draft);
      nextIssues.push(rowIssues);
    }

    setDrafts(nextDrafts);
    setIssues(nextIssues);
  }, [rawRows, headerOk]); // eslint-disable-line

  const totals = useMemo(() => {
    let ok = 0, warn = 0, err = 0;
    let vSent = 0, turnover = 0, margin = 0, wEcpm = 0;
    drafts.forEach((d, i) => {
      const rowErr = issues[i]?.some(x => x.level === 'ERROR');
      const rowWarn = !rowErr && issues[i]?.some(x => x.level === 'WARN');
      if (rowErr) err++; else if (rowWarn) warn++; else ok++;
      vSent += d.vSent || 0;
      turnover += d.turnover || 0;
      margin += d.margin || 0;
      wEcpm += (d.ecpm || 0) * (d.vSent || 0);
    });
    const ecpm = vSent > 0 ? wEcpm / vSent : 0;
    return { ok, warn, err, vSent, turnover, margin, ecpm };
  }, [drafts, issues]);

  const canImport = drafts.length > 0 && totals.err === 0;

  function onPickFile() { inputRef.current?.click(); }
  async function onFileChange(e: React.ChangeEvent<HTMLInputElement>) {
    const f = e.target.files?.[0];
    e.currentTarget.value = '';
    if (!f) return;
    setParsing(true);
    setFileName(f.name);
    try {
      const text = await f.text();
      const parsed = parseCSV(text);
      setRawHeaders(parsed.headers);
      setRawRows(parsed.rows);
    } finally {
      setParsing(false);
    }
  }

  // Dropzone
  function onDropFile(e: React.DragEvent<HTMLDivElement>) {
    e.preventDefault();
    const f = e.dataTransfer.files?.[0];
    if (!f) return;
    const fakeEvt = { target: { files: [f] }, currentTarget: { value: '' } } as any;
    onFileChange(fakeEvt);
  }
  function onDragOver(e: React.DragEvent<HTMLDivElement>) { e.preventDefault(); }

  async function doImport() {
    if (!canImport) return;
    try {
      setImporting(true);
      const res = await Promise.resolve(
        addManyCampaigns(drafts, { upsertBy: 'composite', onConflict: 'update' })
      );

      alert(
        `Import done:
Added: ${res.added}
Updated: ${res.updated}
Skipped: ${res.skipped}
Total: ${res.total}`
      );
      onClose();
    } catch (e) {
      console.error(e);
      alert('Import failed. See console for details.');
    } finally {
      setImporting(false);
    }
  }

  function downloadTemplate() {
    const headers = [...REQUIRED_HEADERS, ...OPTIONAL_HEADERS].join(',');
    const sample = [
      headers,
      '2025-01-15,Winter Sale,Partner A,Retail,1.2,CPL,100000,8000,DB_ES,EUR'
    ].join('\n');
    const blob = new Blob([sample], { type: 'text/csv;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = 'campaigns_template.csv'; a.click();
    URL.revokeObjectURL(url);
  }

  // === Responsive modal width: compacto vs preview ===
  const preview = headerOk && drafts.length > 0;
  const modalWidthClass = preview
    ? 'w-full max-w-[min(95vw,1400px)]'
    : 'w-full max-w-[720px]';

  // === Fades locales para overflow-x del Ã¡rea de tabla ===
  const hWrapRef = useRef<HTMLDivElement>(null);
  const [showLeftFade, setShowLeftFade] = useState(false);
  const [showRightFade, setShowRightFade] = useState(false);

  function updateHFades() {
    const el = hWrapRef.current;
    if (!el) return;
    const { scrollLeft, clientWidth, scrollWidth } = el;
    setShowLeftFade(scrollLeft > 0);
    setShowRightFade(scrollLeft + clientWidth < scrollWidth - 1);
  }
  useEffect(() => {
    const el = hWrapRef.current;
    if (!el) return;
    updateHFades();
    el.addEventListener('scroll', updateHFades);
    window.addEventListener('resize', updateHFades);
    return () => {
      el.removeEventListener('scroll', updateHFades);
      window.removeEventListener('resize', updateHFades);
    };
  }, [preview]);

  /* =======================
     UI
     ======================= */
  return (
    <MiniModal
      title="Import from CSV"
      onClose={onClose}
      widthClass={modalWidthClass}
      solid={false}
      headerClassName="modal-chrome py-2.5"
      footerClassName="modal-chrome py-2.5"
      accentStrip
      /* edgeFades quitado aquÃ­ para que no oscurezca todo el body */
      footer={(
        <>
          <button className="btn-ghost" onClick={downloadTemplate}>Download template</button>
          <button className="btn-ghost" onClick={onClose}>Cancel</button>
          <button
            className="btn-primary disabled:opacity-50 disabled:pointer-events-none"
            disabled={!canImport || importing}
            onClick={doImport}
            style={{ fontVariantNumeric: 'tabular-nums' }}
          >
            {importing ? 'Importingâ€¦' : `Import ${totals.ok + totals.warn} rows`}
          </button>
        </>
      )}
    >
      {/* Hidden file input */}
      <input
        ref={inputRef}
        type="file"
        className="hidden"
        accept=".csv,text/csv"
        onChange={onFileChange}
      />

      {/* Uploader / Dropzone */}
      <div className="grid gap-3">
        <div
          role="button"
          tabIndex={0}
          aria-label="Select or drop a CSV file"
          onDragOver={onDragOver}
          onDrop={onDropFile}
          onKeyDown={(e) => {
            if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); onPickFile(); }
          }}
          className="rounded-lg border border-[--color-border] p-3 flex items-center justify-between
                     bg-[color:var(--color-surface)] outline-none transition
                     hover:shadow-md focus:shadow-md"
        >
          <div className="text-sm">
            <div className="font-medium">CSV file</div>
            <div className="opacity-70" style={{ fontVariantNumeric: 'tabular-nums' }}>
              {fileName || (parsing ? 'Parsingâ€¦' : 'No file selected')}
            </div>
          </div>
          <button className="btn-ghost" onClick={onPickFile} disabled={parsing}>
            {parsing ? 'Parsingâ€¦' : 'Select CSV'}
          </button>
        </div>

        {/* Headers check */}
        {rawHeaders.length > 0 && (
          <div
            className={`rounded-lg border p-3 ${
              headerOk
                ? 'border-emerald-500/40 bg-emerald-500/10'
                : 'border-[--color-accent]/40 bg-[--color-accent]/10'
            }`}
          >
            <div className="text-sm font-medium mb-1">Headers detected</div>
            <div className="text-xs opacity-80 break-words">{rawHeaders.join(', ')}</div>
            {!headerOk && (
              <div className="text-xs mt-2">
                Missing required headers:{' '}
                <strong>
                  {REQUIRED_HEADERS
                    .filter(h => !rawHeaders.map(x=>x.trim().toLowerCase()).includes(h.toLowerCase()))
                    .join(', ')}
                </strong>
              </div>
            )}
          </div>
        )}

        {/* Preview & summary */}
        {preview && (
          <>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-3">
              <Stat label="Rows" value={drafts.length} />
              <Stat label="OK" value={totals.ok} />
              <Stat label="Warnings" value={totals.warn} />
              <Stat label="Errors" value={totals.err} />
              <Stat label="Turnover" value={fmtEUR.format(totals.turnover)} />
            </div>

            <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)]">
              {/* Wrapper relativo para los fades locales */}
              <div className="relative">
                <div ref={hWrapRef} className="overflow-x-auto">
                  {/* Header */}
                  <table className="w-full min-w-[1000px] lg:min-w-[1200px] xl:min-w-[1400px] text-sm">
                    <thead className="bg-[color:var(--color-surface-2)]/60">
                      <tr>
                        <Th>State</Th>
                        <Th>Date</Th>
                        <Th>Campaign</Th>
                        <Th>Partner</Th>
                        <Th>Theme</Th>
                        <Th>Type</Th>
                        <Th className="text-right">Price</Th>
                        <Th className="text-right">QTY</Th>
                        <Th className="text-right">V Sent</Th>
                        <Th>Database</Th>
                        <Th>GEO</Th>
                        <Th>DB Type</Th>
                        <Th className="text-right">Turnover</Th>
                        <Th className="text-right">Margin</Th>
                        <Th className="text-right">eCPM</Th>
                      </tr>
                    </thead>
                  </table>

                  {/* Body (scroll) */}
                  <div className="max-h-[50vh] overflow-y-auto">
                    <div className="min-w-[1000px] lg:min-w-[1200px] xl:min-w-[1400px] divide-y divide-[--color-border]/60">
                      {drafts.map((d, i) => {
                        const isErr = issues[i]?.some(x => x.level === 'ERROR');
                        const isWarn = !isErr && issues[i]?.some(x => x.level === 'WARN');
                        const badge =
                          isErr ? <Badge className="bg-[--color-accent]/15 text-[--color-accent] border border-[--color-accent]/30">ERROR</Badge> :
                          isWarn ? <Badge className="bg-amber-500/12 text-amber-700 border border-amber-300/60">WARN</Badge> :
                          <Badge className="bg-emerald-500/12 text-emerald-700 border border-emerald-300/60">OK</Badge>;

                        return (
                          <div
                            key={i}
                            className="grid grid-cols-[auto_auto_auto_auto_auto_auto_auto_auto_auto_auto_auto_auto_auto_auto_auto] gap-3 px-3 py-2 items-center hover:bg-black/[0.03] transition-colors"
                            style={{ fontVariantNumeric: 'tabular-nums' }}
                          >
                            <div>{badge}</div>
                            <Cell>{d.date}</Cell>
                            <Cell>{d.campaign}</Cell>
                            <Cell>{d.partner}</Cell>
                            <Cell>{d.theme}</Cell>
                            <Cell>{d.type}</Cell>
                            <Cell className="text-right">{d.price.toFixed(2)}</Cell>
                            <Cell className="text-right">{d.qty}</Cell>
                            <Cell className="text-right">{d.vSent}</Cell>
                            <Cell>{d.database}</Cell>
                            <Cell>{d.geo}</Cell>
                            <Cell>{d.databaseType || 'â€”'}</Cell>
                            <Cell className="text-right">{d.turnover.toFixed(2)}</Cell>
                            <Cell
                              className={`text-right ${
                                d.margin > 0 ? 'text-[--color-primary]' :
                                d.margin < 0 ? 'text-[--color-accent]' : ''
                              }`}
                            >
                              {d.margin.toFixed(2)}
                            </Cell>
                            <Cell className="text-right">{d.ecpm.toFixed(2)}</Cell>

                            {(issues[i] && issues[i].length > 0) && (
                              <div className="col-span-full text-xs opacity-80 -mt-1">
                                {issues[i].map((it, k) => (
                                  <span
                                    key={k}
                                    className="inline-block mr-2 mt-1 px-1.5 py-0.5 rounded border border-[--color-border] bg-[color:var(--color-surface)]"
                                  >
                                    {it.level}: {it.msg}
                                  </span>
                                ))}
                              </div>
                            )}
                          </div>
                        );
                      })}
                      {drafts.length === 0 && (
                        <div className="px-3 py-5 text-sm opacity-70">No rows.</div>
                      )}
                    </div>
                  </div>
                </div>

                {/* Fades locales solo si hay overflow-x */}
                {showLeftFade && (
                  <div
                    aria-hidden
                    className="pointer-events-none absolute inset-y-0 left-0 w-6
                               bg-gradient-to-r from-[color:var(--color-surface)] to-transparent"
                  />
                )}
                {showRightFade && (
                  <div
                    aria-hidden
                    className="pointer-events-none absolute inset-y-0 right-0 w-6
                               bg-gradient-to-l from-[color:var(--color-surface)] to-transparent"
                  />
                )}
              </div>
            </div>
          </>
        )}
      </div>
    </MiniModal>
  );
}

/* =======================
   Subcomponentes
   ======================= */
function Th({ children, className = '' }: { children: React.ReactNode; className?: string }) {
  return (
    <th className={`text-left font-medium px-3 py-2 border-b border-[--color-border]/60 ${className}`}>
      {children}
    </th>
  );
}
function Cell({ children, className = '' }: { children: React.ReactNode; className?: string }) {
  return <div className={`min-w-0 ${className}`}>{children}</div>;
}
function Badge({ children, className = '' }: { children: React.ReactNode; className?: string }) {
  return (
    <span className={`px-2 py-0.5 rounded-full text-[11px] font-semibold ${className}`}>
      {children}
    </span>
  );
}
function Stat({ label, value }: { label: string; value: number | string }) {
  return (
    <div className="rounded-lg border border-[--color-border] bg-[color:var(--color-surface)]/70 p-3">
      <div className="text-xs uppercase text-[color:var(--color-text)]/65">{label}</div>
      <div className="text-xl font-semibold mt-1" style={{ fontVariantNumeric: 'tabular-nums' }}>
        {String(value)}
      </div>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsChart.tsx =====
// components/reports/ReportsChart.tsx
'use client';

import {
  ResponsiveContainer,
  BarChart, Bar,
  XAxis, YAxis,
  CartesianGrid,
  Tooltip,
  LabelList,
} from 'recharts';
import type { AggregateRow, Metric } from '@/types/reports';
import { fmtEUR2, fmtINT, formatByMetric, makeYAxisTick } from '@/utils/format';

type Props = {
  data: AggregateRow[];
  metric: Metric;
  title?: string;
  height?: number;
  showTable?: boolean;
  groupLabel?: string;
};

const chartTheme = {
  tick: { fill: 'var(--chart-axis)', fontSize: 12 },
  axisLine: { stroke: 'var(--chart-grid)' },
  tickLine: { stroke: 'var(--chart-grid)' },
  grid: 'var(--chart-grid)',
  gridStrong: 'var(--chart-grid-strong)',
  tooltip: {
    contentStyle: {
      background: 'var(--chart-tooltip-bg)',
      border: '1px solid var(--color-border)',
      borderRadius: 8,
    } as React.CSSProperties,
    itemStyle: { color: 'var(--color-text)' } as React.CSSProperties,
    labelStyle: { color: 'var(--color-text)' } as React.CSSProperties,
  },
};

export default function ReportsChart({
  data,
  metric,
  title = 'Top ranking',
  height = 360,
  showTable = true,
  groupLabel = 'Group',
}: Props) {
  const yTick = makeYAxisTick(metric);
  const hStyle = { height: `${height}px` }; // â¬…ï¸ altura explÃ­cita para el contenedor

  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-3">
      <div className="flex items-center justify-between px-1 pb-2">
        <div className="text-sm opacity-80">{title}</div>
        <div className="text-xs opacity-60">Right click â†’ â€œSave imageâ€</div>
      </div>

      {/* â¬‡ï¸ altura fija en inline-style (nada de variables CSS) */}
      <div style={hStyle}>
        {data.length === 0 ? (
          <div className="h-full flex items-center justify-center text-sm opacity-70">
            No data for current filters
          </div>
        ) : (
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={data} margin={{ top: 8, right: 12, left: 12, bottom: 40 }}>
              <CartesianGrid stroke={chartTheme.grid} vertical={false} />
              <XAxis
                dataKey="label"
                interval={0}
                angle={-25}
                textAnchor="end"
                height={55}
                tick={chartTheme.tick}
                axisLine={chartTheme.axisLine}
                tickLine={chartTheme.tickLine}
              />
              <YAxis
                tickFormatter={yTick}
                tick={chartTheme.tick}
                axisLine={chartTheme.axisLine}
                tickLine={chartTheme.tickLine}
              />
              <Tooltip
                cursor={{ stroke: chartTheme.gridStrong }}
                contentStyle={chartTheme.tooltip.contentStyle}
                itemStyle={chartTheme.tooltip.itemStyle}
                labelStyle={chartTheme.tooltip.labelStyle}
                formatter={(v: any, name: any) => {
                  const val = Number(v || 0);
                  if (metric === 'ecpm') return [fmtEUR2.format(val), 'eCPM'];
                  if (metric === 'turnover' || metric === 'margin') return [fmtEUR2.format(val), name];
                  return [fmtINT.format(val), name];
                }}
                labelFormatter={(label: any) => String(label)}
              />
              <Bar dataKey={metric} name={legendName(metric)} radius={[6, 6, 0, 0]} fill="var(--chart-1)">
                <LabelList
                  dataKey={metric}
                  position="top"
                  formatter={(v: number) => formatByMetric(metric, v)}
                  style={{ fontSize: 11, opacity: 0.9 }}
                />
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        )}
      </div>

      {showTable && data.length > 0 && (
        <div className="overflow-x-auto mt-3">
          <table className="min-w-[720px] w-full text-sm">
            <thead className="bg-white/5">
              <tr>
                <th className="text-left px-3 py-2">{groupLabel}</th>
                <th className="text-right px-3 py-2">Turnover</th>
                <th className="text-right px-3 py-2">Margin</th>
                <th className="text-right px-3 py-2">eCPM</th>
                <th className="text-right px-3 py-2">V Sent</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-[--color-border]/60">
              {data.map((d) => (
                <tr key={d.key}>
                  <td className="px-3 py-2">{d.label}</td>
                  <td className="px-3 py-2 text-right">{fmtEUR2.format(d.turnover)}</td>
                  <td className={`px-3 py-2 text-right ${d.margin>0?'text-[--color-primary]':d.margin<0?'text-[--color-accent]':''}`}>
                    {fmtEUR2.format(d.margin)}
                  </td>
                  <td className="px-3 py-2 text-right">{fmtEUR2.format(d.ecpm)}</td>
                  <td className="px-3 py-2 text-right">{fmtINT.format(d.vSent)}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}

function legendName(m: Metric) {
  return m === 'turnover' ? 'Turnover' : m === 'margin' ? 'Margin' : m === 'ecpm' ? 'eCPM' : 'V Sent';
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsGeoBreakdown.tsx =====
'use client';

import Card from '@/components/ui/Card';
import { useReportData } from '@/hooks/useReportData';

const fmtEUR = new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' });
const fmtPct = new Intl.NumberFormat('es-ES', { style: 'percent', maximumFractionDigits: 2 });

function Block({
  title,
  turnover,
  margin,
  marginPct,
}: {
  title: string;
  turnover: number;
  margin: number;
  marginPct: number | null;
}) {
  const tone =
    marginPct == null ? ''
    : marginPct >= 0.70 ? 'text-[color:var(--color-primary)]'
    : marginPct >= 0.01 ? 'text-[color-mix(in_oklab,var(--color-accent)_58%,var(--color-primary)_42%)]'
    : 'text-[color:var(--color-accent)]';

  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface-2)]/60 p-4">
      <div className="text-xs uppercase opacity-70">{title}</div>
      <div className="mt-2 grid gap-1">
        <div className="text-sm">Turnover</div>
        <div className="text-lg font-semibold tabular-nums">{fmtEUR.format(turnover)}</div>
        <div className="mt-1 text-sm">Margin (%)</div>
        <div className={`text-lg font-semibold tabular-nums ${tone}`}>
          {marginPct == null ? 'â€”' : fmtPct.format(marginPct)}
        </div>
        <div className="text-xs opacity-75 tabular-nums">Margin: <strong>{fmtEUR.format(margin)}</strong></div>
      </div>
    </div>
  );
}

export default function ReportsGeoBreakdown() {
  const { computeTotals } = useReportData();

  const isFR    = (g?: string) => (g || '').toUpperCase() === 'FR';
  const isB2C   = (t?: string) => t === 'B2C';
  const isB2B   = (t?: string) => t === 'B2B';

  const frB2C = computeTotals(r => isFR(r.geo) && isB2C(r.databaseType));
  const frB2B = computeTotals(r => isFR(r.geo) && isB2B(r.databaseType));
  const intl  = computeTotals(r => !isFR(r.geo)); // todos los geos â‰  FR, incluye B2B+B2C (y geos vacÃ­os si los hay)
  const total = computeTotals(); // summary sobre el filtro activo

  return (
    <Card title="France vs INTL">
      <div className="grid grid-cols-1 md:grid-cols-4 gap-3">
        <Block title="France Â· B2C" turnover={frB2C.turnover} margin={frB2C.margin} marginPct={frB2C.marginPct} />
        <Block title="France Â· B2B" turnover={frB2B.turnover} margin={frB2B.margin} marginPct={frB2B.marginPct} />
        <Block title="INTL (â‰ FR)"   turnover={intl.turnover} margin={intl.margin}   marginPct={intl.marginPct} />
        <Block title="Summary (Total filtro)" turnover={total.turnover} margin={total.margin} marginPct={total.marginPct} />
      </div>
    </Card>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsHeader.tsx =====
'use client';

import { useMemo, useRef, useState, useEffect } from 'react';
import Link from 'next/link';
import Chip from '@/components/ui/Chip';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';
import type { GroupBy, Metric, ReportFilters } from '@/types/reports';

type Props = {
  groupBy: GroupBy;
  metric: Metric;
  topN: number;

  filters: ReportFilters;
  onChangeFilters: (next: ReportFilters) => void;

  onChangeGroupBy: (g: GroupBy) => void;
  onChangeMetric: (m: Metric) => void;
  onChangeTopN: (n: number) => void;

  onQuickLast30?: () => void;
  onExportCsv?: () => void;

  summary?: { filteredCount?: number; groupCount?: number; };
};

const groupByOptions: { value: GroupBy; label: string }[] = [
  { value: 'database',     label: 'Database' },
  { value: 'partner',      label: 'Partner' },
  { value: 'campaign',     label: 'Campaign' },
  { value: 'advertiser',   label: 'Advertiser' },
  { value: 'theme',        label: 'Theme' },
  { value: 'geo',          label: 'GEO' },
  { value: 'type',         label: 'Type' },
  { value: 'databaseType', label: 'DB Type' },
];

const metrics: Metric[] = ['turnover', 'margin', 'ecpm', 'vSent'];

/** Presets iguales a CampaÃ±as */
type DatePreset =
  | 'today' | 'yesterday' | 'thisWeek' | 'lastWeek'
  | 'thisMonth' | 'lastMonth' | 'last7' | 'last30' | 'custom';

function fmtLocal(d: Date) {
  const y = d.getFullYear();
  const m = String(d.getMonth() + 1).padStart(2, '0');
  const day = String(d.getDate()).padStart(2, '0');
  return `${y}-${m}-${day}`;
}
function startOfWeek(d: Date) {
  const n = new Date(d.getFullYear(), d.getMonth(), d.getDate());
  const w = (n.getDay() || 7) - 1; // lunes
  n.setDate(n.getDate() - w);
  return n;
}
function endOfWeek(d: Date) {
  const s = startOfWeek(d);
  return new Date(s.getFullYear(), s.getMonth(), s.getDate() + 6);
}
function startOfMonth(d: Date) { return new Date(d.getFullYear(), d.getMonth(), 1); }
function endOfMonth(d: Date)   { return new Date(d.getFullYear(), d.getMonth() + 1, 0); }

function rangeForPreset(p: Exclude<DatePreset,'custom'>): [string, string] {
  const now = new Date();
  if (p === 'today')     { const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()); const s=fmtLocal(a); return [s,s]; }
  if (p === 'yesterday') { const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()-1); const s=fmtLocal(a); return [s,s]; }
  if (p === 'thisWeek')  return [fmtLocal(startOfWeek(now)), fmtLocal(endOfWeek(now))];
  if (p === 'lastWeek')  { const k=new Date(now.getFullYear(),now.getMonth(),now.getDate()-7); return [fmtLocal(startOfWeek(k)), fmtLocal(endOfWeek(k))]; }
  if (p === 'thisMonth') return [fmtLocal(startOfMonth(now)), fmtLocal(endOfMonth(now))];
  if (p === 'lastMonth') { const k=new Date(now.getFullYear(),now.getMonth()-1,15); return [fmtLocal(startOfMonth(k)), fmtLocal(endOfMonth(k))]; }
  if (p === 'last7')     { const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()-6); const b=new Date(now.getFullYear(),now.getMonth(),now.getDate()); return [fmtLocal(a),fmtLocal(b)]; }
  // last30
  const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()-29);
  const b=new Date(now.getFullYear(),now.getMonth(),now.getDate());
  return [fmtLocal(a),fmtLocal(b)];
}

export default function ReportsHeader({
  groupBy,
  metric,
  topN,
  filters,
  onChangeFilters,
  onChangeGroupBy,
  onChangeMetric,
  onChangeTopN,
  onQuickLast30,
  onExportCsv,
  summary,
}: Props) {
  const { PARTNERS, DATABASES, THEMES, TYPES } = useCatalogOverrides();

  const geoOptions = useMemo(() => {
    const set = new Set<string>();
    DATABASES.forEach(d => d.geo && set.add((d.geo || '').toUpperCase()));
    return Array.from(set).sort();
  }, [DATABASES]);

  const partnerOptions = useMemo(
    () => PARTNERS.map(p => ({ id: p.id, name: p.name, isInternal: !!p.isInternal })),
    [PARTNERS],
  );
  const themeOptions = useMemo(() => THEMES, [THEMES]);
  const typeOptions  = useMemo(() => TYPES, [TYPES]);
  const dbTypeOptions = ['B2C', 'B2B', 'Mixed'] as const;

  const s = summary || {};
  const set = <K extends keyof ReportFilters>(key: K, value: ReportFilters[K]) =>
    onChangeFilters({ ...filters, [key]: value });

  const toggleOnlyInternal = () =>
    onChangeFilters({ ...filters, onlyInternalPartners: !filters.onlyInternalPartners });

  // --- periodo activo (solo para resaltar chips)
  const startDate = filters.from || '';
  const endDate   = filters.to   || '';
  const hasRange  = !!(startDate && endDate);
  const [activePreset, setActivePreset] = useState<DatePreset>('custom');

  useEffect(() => {
    if (!hasRange) { setActivePreset('custom'); return; }
    const candidates: Exclude<DatePreset,'custom'>[] =
      ['today','yesterday','thisWeek','lastWeek','thisMonth','lastMonth','last7','last30'];
    for (const key of candidates) {
      const [s,e] = rangeForPreset(key);
      if (s === startDate && e === endDate) { setActivePreset(key); return; }
    }
    setActivePreset('custom');
  }, [startDate, endDate, hasRange]);

  function choosePreset(p: Exclude<DatePreset,'custom'> | 'custom') {
    if (p === 'custom') { setActivePreset('custom'); return; }
    const [s, e] = rangeForPreset(p);
    setActivePreset(p);
    onChangeFilters({ ...filters, from: s, to: e });
  }

  // refs para botÃ³n del picker (UX igual que CampaÃ±as)
  const startRef = useRef<HTMLInputElement | null>(null);
  const endRef   = useRef<HTMLInputElement | null>(null);
  const openPicker = (ref: React.RefObject<HTMLInputElement>) => {
    const el = ref.current;
    if (!el) return;
    // @ts-ignore
    if (el.showPicker) el.showPicker(); else el.focus();
  };

  return (
    <div className="grid gap-4">
      {/* TÃ­tulo + acciones */}
      <div className="flex items-center justify-between gap-3">
        <div>
          <h1 className="text-2xl font-semibold">Reports</h1>
          <p className="muted">
            {groupByLabel(groupBy)} performance Â·{' '}
            <span className="opacity-80">
              {s.filteredCount != null ? `${s.filteredCount} rows` : ''}{s.filteredCount!=null && s.groupCount!=null ? ' Â· ' : ''}
              {s.groupCount != null ? `${s.groupCount} groups` : ''}
            </span>
          </p>
        </div>
        <div className="flex items-center gap-2">
          {onExportCsv && <button className="btn-ghost" onClick={onExportCsv}>â¬‡ Export CSV</button>}
          <Link href="/" className="btn-ghost">â† Back to campaigns</Link>
        </div>
      </div>

      {/* Stack de filtros */}
      <div className="filters-stack">
        {/* Row A â€” mÃ©trica, groupBy, TopN */}
        <div className="grid gap-3 md:grid-cols-12 items-end">
          <div className="md:col-span-2">
            <label className="text-sm grid gap-1">
              <span className="muted">Group by</span>
              <select className="input" value={groupBy} onChange={(e) => onChangeGroupBy(e.target.value as GroupBy)}>
                {groupByOptions.map(o => <option key={o.value} value={o.value}>{o.label}</option>)}
              </select>
            </label>
          </div>

          <div className="md:col-span-8">
            <span className="muted text-sm mb-1 inline-block">Metric</span>
            <div className="flex gap-1 flex-wrap">
              {metrics.map(m => (
                <Chip key={m} active={metric === m} onClick={() => onChangeMetric(m)} title={`Rank by ${m}`}>
                  {m === 'turnover' ? 'Turnover' : m === 'margin' ? 'Margin' : m === 'ecpm' ? 'eCPM' : 'V Sent'}
                </Chip>
              ))}
            </div>
          </div>

          <div className="md:col-span-2">
            <label className="text-sm grid gap-1">
              <span className="muted">Top N</span>
              <input
                type="number"
                className="input"
                min={1}
                max={50}
                value={topN}
                onChange={(e) => onChangeTopN(Math.max(1, Math.min(50, Number(e.target.value || 1))))}
              />
            </label>
          </div>
        </div>

        {/* Row B â€” chips de periodo */}
        <div className="flex flex-wrap items-center gap-3">
          {([
            ['today','Today'],
            ['yesterday','Yesterday'],
            ['last7','Last 7'],
            ['last30','Last 30'],
            ['thisWeek','This week'],
            ['lastWeek','Last week'],
            ['thisMonth','This month'],
            ['lastMonth','Last month'],
            ['custom','Custom'],
          ] as [DatePreset,string][])
            .map(([key,label]) => (
              <Chip
                key={key}
                active={activePreset === key}
                onClick={() => choosePreset(key === 'custom' ? 'custom' : key)}
              >
                {label}
              </Chip>
            ))}
        </div>

        {/* Row C â€” rango de fechas + toggles */}
        <div className="flex flex-wrap items-center gap-3 md:gap-4">
          {/* Start */}
          <div className="relative">
            <input
              ref={startRef}
              type="date"
              value={startDate}
              onChange={(e) => onChangeFilters({ ...filters, from: e.target.value || undefined })}
              className="input input-date w-40 pr-9"
            />
            <button
              type="button"
              className="absolute inset-y-0 right-0 px-2 rounded-r-lg hover:bg-black/5 focus:outline-none focus:ring-2 focus:ring-primary/40"
              aria-label="Open start date picker"
              onClick={() => openPicker(startRef)}
            >
              ðŸ“…
            </button>
          </div>

          {/* End */}
          <div className="relative">
            <input
              ref={endRef}
              type="date"
              value={endDate}
              onChange={(e) => onChangeFilters({ ...filters, to: e.target.value || undefined })}
              className="input input-date w-40 pr-9"
            />
            <button
              type="button"
              className="absolute inset-y-0 right-0 px-2 rounded-r-lg hover:bg-black/5 focus:outline-none focus:ring-2 focus:ring-primary/40"
              aria-label="Open end date picker"
              onClick={() => openPicker(endRef)}
            >
              ðŸ“…
            </button>
          </div>

          <div className="flex-1" />

          <label className="inline-flex items-center gap-2 text-sm">
            <input
              type="checkbox"
              className="accent-[--color-primary]"
              checked={!!filters.onlyInternalPartners}
              onChange={toggleOnlyInternal}
            />
            <span className="muted">Only internal</span>
          </label>

          <button
            className="btn-ghost"
            onClick={() => onChangeFilters({})}
            title="Clear filters"
          >
            Clear
          </button>
        </div>

        {/* Row D â€” filtros de entidad */}
        <div className="grid gap-3 md:grid-cols-12">
          <div className="md:col-span-2">
            <label className="text-sm grid gap-1">
              <span className="muted">GEO</span>
              <select
                className="input"
                value={(filters.geos && filters.geos[0]) || ''}
                onChange={(e) => set('geos', e.target.value ? [e.target.value] : undefined)}
              >
                <option value="">All</option>
                {geoOptions.map(g => <option key={g} value={g}>{g}</option>)}
              </select>
            </label>
          </div>

          <div className="md:col-span-3">
            <label className="text-sm grid gap-1">
              <span className="muted">Partner</span>
              <select
                className="input"
                value={(filters.partners && filters.partners[0]) || ''}
                onChange={(e) => set('partners', e.target.value ? [e.target.value] : undefined)}
              >
                <option value="">All</option>
                {partnerOptions.map(p => (
                  <option key={p.id} value={p.name}>
                    {p.name}{p.isInternal ? ' Â· INT' : ''}
                  </option>
                ))}
              </select>
            </label>
          </div>

          <div className="md:col-span-2">
            <label className="text-sm grid gap-1">
              <span className="muted">Theme</span>
              <select
                className="input"
                value={(filters.themes && filters.themes[0]) || ''}
                onChange={(e) => set('themes', e.target.value ? [e.target.value] : undefined)}
              >
                <option value="">All</option>
                {themeOptions.map(t => <option key={t} value={t}>{t}</option>)}
              </select>
            </label>
          </div>

          <div className="md:col-span-2">
            <label className="text-sm grid gap-1">
              <span className="muted">Type</span>
              <select
                className="input"
                value={(filters.types && filters.types[0]) || ''}
                onChange={(e) => set('types', e.target.value ? [e.target.value as any] : undefined)}
              >
                <option value="">All</option>
                {typeOptions.map(t => <option key={t} value={t}>{t}</option>)}
              </select>
            </label>
          </div>

          <div className="md:col-span-2">
            <label className="text-sm grid gap-1">
              <span className="muted">DB Type</span>
              <select
                className="input"
                value={(filters.databaseTypes && filters.databaseTypes[0]) || ''}
                onChange={(e) => set('databaseTypes', e.target.value ? [e.target.value as any] : undefined)}
              >
                <option value="">All</option>
                {dbTypeOptions.map(t => <option key={t} value={t}>{t}</option>)}
              </select>
            </label>
          </div>
        </div>
      </div>
    </div>
  );
}

function groupByLabel(g: GroupBy) {
  return groupByOptions.find(o => o.value === g)?.label ?? 'Group';
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsKpis.tsx =====
// components/reports/ReportsKpis.tsx
'use client';

import { fmtEUR2, fmtINT as fmtNum } from '@/utils/format';

type Kpis = {
  vSent: number;
  turnover: number;
  margin: number;
  ecpm: number;
  marginPct: number | null;
};

export default function ReportsKpis({ kpis }: { kpis: Kpis }) {
  const marginText =
    `${fmtEUR2.format(kpis.margin)}${
      kpis.marginPct == null ? '' : ` (${(kpis.marginPct * 100).toFixed(1)}%)`
    }`;

  const highlight: 'pos' | 'neg' | undefined =
    kpis.margin > 0 ? 'pos' : kpis.margin < 0 ? 'neg' : undefined;

  return (
    <div className="grid gap-3 mt-4 sm:grid-cols-2 lg:grid-cols-4">
      <Kpi title="Total V Sent" value={fmtNum.format(kpis.vSent)} />
      <Kpi title="Turnover" value={fmtEUR2.format(kpis.turnover)} />
      <Kpi title="Margin" value={marginText} highlight={highlight} />
      <Kpi title="Weighted eCPM" value={fmtEUR2.format(kpis.ecpm)} />
    </div>
  );
}

function Kpi({
  title,
  value,
  highlight,
}: {
  title: string;
  value: string;
  highlight?: 'pos' | 'neg';
}) {
  const color =
    highlight === 'pos'
      ? 'text-[--color-primary]'
      : highlight === 'neg'
      ? 'text-[--color-accent]'
      : 'opacity-100';
  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)]/80 p-3">
      <div className="text-xs uppercase opacity-70">{title}</div>
      <div className={`text-xl font-semibold mt-1 ${color}`}>{value}</div>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsTimeSeries.tsx =====
// components/reports/ReportsTimeSeries.tsx
'use client';

import { useMemo, useState } from 'react';
import type { UseReportDataResult } from '@/hooks/useReportData';
import { fmtEUR2, fmtINT } from '@/utils/format';
import {
  ResponsiveContainer, LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend,
} from 'recharts';

type MetricOpt = 'ecpm' | 'turnover' | 'margin' | 'marginPct' | 'vSent';
type GroupOpt = 'none' | 'database' | 'partner' | 'geo';

const fmtPCT1 = new Intl.NumberFormat('es-ES', { style: 'percent', maximumFractionDigits: 1 });

export default function ReportsTimeSeries({
  makeSeries,
  title = 'Time series',
  height = 300,
}: {
  makeSeries: UseReportDataResult['makeTimeSeries'];
  title?: string;
  height?: number;
}) {
  const [metric, setMetric] = useState<MetricOpt>('ecpm');
  const [by, setBy] = useState<GroupOpt>('none');
  const [topN, setTopN] = useState(5);
  const [includeOthers, setIncludeOthers] = useState(true);
  const [focus, setFocus] = useState<string>(''); // '' = All

  const { data, keys } = useMemo(
    () => makeSeries({ metric, by, topN, includeOthers }),
    [makeSeries, metric, by, topN, includeOthers],
  );

  const visibleKeys = focus ? keys.filter(k => k === focus) : keys;

  const tickFormatter = (v: any) =>
    metric === 'marginPct'
      ? fmtPCT1.format(Number(v || 0))
      : metric === 'vSent'
      ? fmtINT.format(Number(v || 0))
      : fmtEUR2.format(Number(v || 0));

  const tooltipFormatter = (value: any) => [
    metric === 'marginPct'
      ? fmtPCT1.format(Number(value || 0))
      : metric === 'vSent'
      ? fmtINT.format(Number(value || 0))
      : fmtEUR2.format(Number(value || 0)),
    labelOf(metric),
  ];

  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-3">
      <div className="flex items-center justify-between mb-2">
        <div className="text-sm font-medium">{title}</div>

        <div className="flex gap-2 items-center">
          <label className="text-sm">
            <span className="muted mr-2">Group lines by</span>
            <select className="input" value={by} onChange={e => { setBy(e.target.value as GroupOpt); setFocus(''); }}>
              <option value="none">Total</option>
              <option value="database">Database</option>
              <option value="partner">Partner</option>
              <option value="geo">GEO</option>
            </select>
          </label>

          <label className="text-sm">
            <span className="muted mr-2">Metric</span>
            <select className="input" value={metric} onChange={e => setMetric(e.target.value as MetricOpt)}>
              <option value="ecpm">eCPM</option>
              <option value="turnover">Turnover</option>
              <option value="margin">Margin</option>
              <option value="marginPct">Margin %</option>
              <option value="vSent">V Sent</option>
            </select>
          </label>

          {by !== 'none' && (
            <>
              <label className="text-sm">
                <span className="muted mr-2">Top N</span>
                <input
                  className="input w-[88px]"
                  type="number"
                  min={1}
                  max={10}
                  value={topN}
                  onChange={e => setTopN(Math.max(1, Math.min(10, Number(e.target.value || 1))))}
                />
              </label>
              <label className="text-sm inline-flex items-center gap-2">
                <input
                  type="checkbox"
                  className="accent-[--color-primary]"
                  checked={includeOthers}
                  onChange={e => setIncludeOthers(e.target.checked)}
                />
                <span className="muted">Include â€œOthersâ€</span>
              </label>
              <label className="text-sm">
                <span className="muted mr-2">Focus</span>
                <select className="input min-w-[160px]" value={focus} onChange={e => setFocus(e.target.value)}>
                  <option value="">All</option>
                  {keys.map(k => <option key={k} value={k}>{k}</option>)}
                </select>
              </label>
            </>
          )}
        </div>
      </div>

      <div className="h-[--h]" style={{ ['--h' as any]: `${height}px` }}>
        {data.length === 0 ? (
          <div className="h-full flex items-center justify-center text-sm opacity-70">No data for current filters</div>
        ) : (
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={data} margin={{ left: 8, right: 8, top: 8, bottom: 0 }}>
              <CartesianGrid stroke="var(--chart-grid)" vertical={false} />
              <XAxis
                dataKey="date"
                tick={{ fill: 'var(--chart-axis)', fontSize: 12 }}
                axisLine={{ stroke: 'var(--chart-grid)' }}
                tickLine={{ stroke: 'var(--chart-grid)' }}
              />
              <YAxis
                tick={{ fill: 'var(--chart-axis)', fontSize: 12 }}
                axisLine={{ stroke: 'var(--chart-grid)' }}
                tickLine={{ stroke: 'var(--chart-grid)' }}
                tickFormatter={tickFormatter}
              />
              <Tooltip
                cursor={{ stroke: 'var(--chart-grid-strong)' }}
                contentStyle={{ background: 'var(--chart-tooltip-bg)', border: '1px solid var(--color-border)', borderRadius: 8 }}
                itemStyle={{ color: 'var(--color-text)' }}
                labelStyle={{ color: 'var(--color-text)' }}
                formatter={tooltipFormatter}
              />
              <Legend />
              {visibleKeys.map((k) => (
                <Line
                  key={k}
                  type="monotone"
                  dataKey={k}
                  dot={false}
                  name={k}
                  strokeWidth={focus && k !== focus ? 1 : 2}
                  strokeOpacity={focus && k !== focus ? 0.25 : 1}
                  stroke={colorFor(k)}
                />
              ))}
            </LineChart>
          </ResponsiveContainer>
        )}
      </div>
    </div>
  );
}

/* Color estable por clave */
function colorFor(key: string) {
  const palette = [
    'var(--chart-1)', 'var(--chart-2)', 'var(--chart-3)', 'var(--chart-4)', 'var(--chart-5)',
    '#6B7280', '#10B981', '#F59E0B', '#EF4444', '#3B82F6',
  ];
  let h = 0;
  for (let i = 0; i < key.length; i++) h = (h * 31 + key.charCodeAt(i)) >>> 0;
  return palette[h % palette.length];
}
function labelOf(m: MetricOpt) {
  return m === 'ecpm' ? 'eCPM' : m === 'marginPct' ? 'Margin %' : m === 'vSent' ? 'V Sent' : m[0].toUpperCase() + m.slice(1);
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsTopTable.tsx =====
// components/reports/ReportsTopTable.tsx
'use client';

import type { AggregateRow } from '@/types/reports';
import { fmtEUR2, fmtINT as fmtNum } from '@/utils/format';

type RowLike = Pick<AggregateRow, 'label' | 'vSent' | 'turnover' | 'margin' | 'ecpm'> & {
  key?: string;
};

export default function ReportsTopTable({
  data,
  rows,
  groupLabel = 'Group',
}: {
  /** Nueva prop opcional para retro-compat: */
  rows?: RowLike[];
  /** Prop â€œcanÃ³nicaâ€: */
  data?: RowLike[];
  groupLabel?: string;
}) {
  const list: RowLike[] = (data ?? rows ?? []);

  if (!list.length) {
    return (
      <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-3">
        <div className="text-sm opacity-70">No data for current filters.</div>
      </div>
    );
  }

  return (
    <div className="overflow-x-auto mt-3">
      <table className="w-full text-sm min-w-[720px]">
        <thead>
          <tr className="border-b border-[--color-border]/60">
            <Th>{groupLabel}</Th>
            <Th className="text-right">V Sent</Th>
            <Th className="text-right">Turnover</Th>
            <Th className="text-right">Margin</Th>
            <Th className="text-right">eCPM</Th>
          </tr>
        </thead>
        <tbody className="divide-y divide-[--color-border]/60">
          {list.map((r) => (
            <tr key={r.key ?? r.label}>
              <Td>{r.label}</Td>
              <Td className="text-right">{fmtNum.format(r.vSent)}</Td>
              <Td className="text-right">{fmtEUR2.format(r.turnover)}</Td>
              <Td
                className={[
                  'text-right',
                  r.margin > 0 ? 'text-[--color-primary]' : r.margin < 0 ? 'text-[--color-accent]' : '',
                ].join(' ')}
              >
                {fmtEUR2.format(r.margin)}
              </Td>
              <Td className="text-right">{fmtEUR2.format(r.ecpm)}</Td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

function Th({ children, className = '' }: { children: React.ReactNode; className?: string }) {
  return <th className={`text-left font-medium px-3 py-2 ${className}`}>{children}</th>;
}
function Td({ children, className = '' }: { children: React.ReactNode; className?: string }) {
  return <td className={`px-3 py-2 ${className}`}>{children}</td>;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsTrend.tsx =====
// components/reports/ReportsTrend.tsx
'use client';

import type { TrendPoint } from '@/types/reports';
import { fmtEUR2 } from '@/utils/format';
import {
  ResponsiveContainer,
  LineChart, Line,
  CartesianGrid, XAxis, YAxis, Tooltip, Legend,
} from 'recharts';

export default function ReportsTrend({ data }: { data: TrendPoint[] }) {
  const hasData = Array.isArray(data) && data.length > 0;

  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-3">
      <div className="text-sm font-medium mb-2">eCPM trend</div>
      <div className="h-[280px]">
        {!hasData ? (
          <div className="h-full flex items-center justify-center text-sm opacity-70">
            No data for current filters
          </div>
        ) : (
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={data} margin={{ left: 8, right: 8, top: 8, bottom: 0 }}>
              <CartesianGrid stroke="var(--chart-grid)" vertical={false} />
              <XAxis
                dataKey="date"
                tick={{ fill: 'var(--chart-axis)', fontSize: 12 }}
                axisLine={{ stroke: 'var(--chart-grid)' }}
                tickLine={{ stroke: 'var(--chart-grid)' }}
              />
              <YAxis
                tick={{ fill: 'var(--chart-axis)', fontSize: 12 }}
                axisLine={{ stroke: 'var(--chart-grid)' }}
                tickLine={{ stroke: 'var(--chart-grid)' }}
                tickFormatter={(v: number) => fmtEUR2.format(Number(v || 0))}
              />
              <Tooltip
                cursor={{ stroke: 'var(--chart-grid-strong)' }}
                contentStyle={{
                  background: 'var(--chart-tooltip-bg)',
                  border: '1px solid var(--color-border)',
                  borderRadius: 8,
                }}
                itemStyle={{ color: 'var(--color-text)' }}
                labelStyle={{ color: 'var(--color-text)' }}
                formatter={(value: any) => [fmtEUR2.format(Number(value || 0)), 'eCPM']}
              />
              <Legend />
              <Line
                type="monotone"
                dataKey="ecpm"
                dot={false}
                activeDot={{ r: 4 }}
                stroke="var(--chart-2)"
                strokeWidth={2}
              />
            </LineChart>
          </ResponsiveContainer>
        )}
      </div>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsTurnoverTrend.tsx =====
'use client';

import { fmtEUR2 } from '@/utils/format';
import {
  ResponsiveContainer,
  LineChart, Line,
  CartesianGrid, XAxis, YAxis, Tooltip, Legend,
} from 'recharts';

type By = 'none' | 'database' | 'partner' | 'geo';

export default function ReportsTurnoverTrend(props: {
  data: Array<Record<string, any>>;
  keys: string[];
  by: By;
  onChangeBy: (v: By) => void;
  topN: number;
  onChangeTopN: (n: number) => void;
  includeOthers: boolean;
  onToggleOthers: (v: boolean) => void;

  // NUEVO: focus
  focusKey?: string | null;
  focusOptions?: string[];
  onChangeFocus?: (k: string | null) => void;
}) {
  const {
    data, keys, by, onChangeBy,
    topN, onChangeTopN,
    includeOthers, onToggleOthers,
    focusKey, focusOptions, onChangeFocus,
  } = props;

  const disabledByFocus = !!focusKey;

  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-3">
      <div className="flex flex-wrap gap-3 items-end mb-2">
        <div className="text-sm font-medium mr-auto">Turnover trend</div>

        <label className="text-sm grid gap-1">
          <span className="muted">Group lines by</span>
          <select
            className="input"
            value={by}
            onChange={e => onChangeBy(e.target.value as By)}
          >
            <option value="none">Total</option>
            <option value="database">Database</option>
            <option value="partner">Partner</option>
            <option value="geo">GEO</option>
          </select>
        </label>

        {by !== 'none' && (
          <>
            <label className="text-sm grid gap-1">
              <span className="muted">Focus</span>
              <select
                className="input"
                value={focusKey ?? ''}
                onChange={e => onChangeFocus?.(e.target.value || null)}
              >
                <option value="">All</option>
                {(focusOptions ?? []).map(k => (
                  <option key={k} value={k}>{k}</option>
                ))}
              </select>
            </label>

            <label className="text-sm grid gap-1">
              <span className="muted">Top N</span>
              <input
                type="number"
                className="input"
                min={1}
                max={20}
                value={topN}
                onChange={e => onChangeTopN(Math.max(1, Math.min(20, Number(e.target.value || 1))))}
                disabled={disabledByFocus}
              />
            </label>

            <label className="text-sm inline-flex items-center gap-2 mt-6 ml-1">
              <input
                type="checkbox"
                checked={includeOthers}
                onChange={e => onToggleOthers(e.target.checked)}
                disabled={disabledByFocus}
              />
              <span className={disabledByFocus ? 'opacity-50' : ''}>Include â€œOthersâ€</span>
            </label>
          </>
        )}
      </div>

      <div className="h-[300px]">
        {(!data || data.length === 0) ? (
          <div className="h-full flex items-center justify-center text-sm opacity-70">
            No data for current filters
          </div>
        ) : (
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={data} margin={{ left: 8, right: 8, top: 8, bottom: 0 }}>
              <CartesianGrid stroke="var(--chart-grid)" vertical={false} />
              <XAxis
                dataKey="date"
                tick={{ fill: 'var(--chart-axis)', fontSize: 12 }}
                axisLine={{ stroke: 'var(--chart-grid)' }}
                tickLine={{ stroke: 'var(--chart-grid)' }}
              />
              <YAxis
                tick={{ fill: 'var(--chart-axis)', fontSize: 12 }}
                axisLine={{ stroke: 'var(--chart-grid)' }}
                tickLine={{ stroke: 'var(--chart-grid)' }}
                tickFormatter={(v: number) => fmtEUR2.format(Number(v || 0))}
              />
              <Tooltip
                cursor={{ stroke: 'var(--chart-grid-strong)' }}
                contentStyle={{
                  background: 'var(--chart-tooltip-bg)',
                  border: '1px solid var(--color-border)',
                  borderRadius: 8,
                }}
                itemStyle={{ color: 'var(--color-text)' }}
                labelStyle={{ color: 'var(--color-text)' }}
                formatter={(value: any, name: any) => [fmtEUR2.format(Number(value || 0)), String(name)]}
              />
              <Legend />
              {keys.map((k) => (
                <Line
                  key={k}
                  type="monotone"
                  dataKey={k}
                  dot={false}
                  activeDot={{ r: 3 }}
                  strokeWidth={2}
                />
              ))}
            </LineChart>
          </ResponsiveContainer>
        )}
      </div>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsUnifiedTrend.tsx =====
// components/reports/ReportsUnifiedTrend.tsx
'use client';

import {
  ResponsiveContainer,
  LineChart, Line,
  CartesianGrid,
  XAxis, YAxis,
  Tooltip, Legend,
} from 'recharts';
import { fmtEUR2, fmtINT } from '@/utils/format';

type TrendMetric = 'ecpm' | 'turnover' | 'margin' | 'marginPct' | 'vSent';
type GroupBy = 'none' | 'database' | 'partner' | 'geo';

type Props = {
  data: Array<Record<string, number | string>>;
  keys: string[];

  // controles
  metric: TrendMetric;
  onChangeMetric: (m: TrendMetric) => void;

  by: GroupBy;
  onChangeBy: (b: GroupBy) => void;

  topN: number;
  onChangeTopN: (n: number) => void;

  includeOthers: boolean;
  onToggleOthers: (v: boolean) => void;

  // ðŸ”Ž Focus (opcional)
  focusKey?: string | null;
  focusOptions?: string[];
  onChangeFocus?: (key: string | null) => void;
};

const chartTheme = {
  tick: { fill: 'var(--chart-axis)', fontSize: 12 },
  axisLine: { stroke: 'var(--chart-grid)' },
  tickLine: { stroke: 'var(--chart-grid)' },
  grid: 'var(--chart-grid)',
  gridStrong: 'var(--chart-grid-strong)',
  palette: [
    'var(--chart-1)',
    'var(--chart-2)',
    'var(--chart-3)',
    'var(--chart-4)',
    'var(--chart-5)',
    'var(--chart-6)',
    'var(--chart-7)',
    'var(--chart-8)',
  ],
};

function colorAt(i: number) {
  const p = chartTheme.palette;
  return p[i % p.length];
}

function formatByMetric(m: TrendMetric, v: number): string {
  const n = Number(v || 0);
  if (m === 'ecpm' || m === 'turnover' || m === 'margin') return fmtEUR2.format(n);
  if (m === 'marginPct') return `${(n * 100).toFixed(1)}%`;
  return fmtINT.format(n); // vSent
}

function yTickFormatter(m: TrendMetric) {
  return (v: number) => {
    if (m === 'marginPct') return `${(Number(v || 0) * 100).toFixed(0)}%`;
    if (m === 'ecpm' || m === 'turnover' || m === 'margin') return fmtEUR2.format(Number(v || 0));
    return fmtINT.format(Number(v || 0));
  };
}

export default function ReportsUnifiedTrend({
  data,
  keys,
  metric,
  onChangeMetric,
  by,
  onChangeBy,
  topN,
  onChangeTopN,
  includeOthers,
  onToggleOthers,
  // Focus
  focusKey = null,
  focusOptions = [],
  onChangeFocus,
}: Props) {
  const hasData = Array.isArray(data) && data.length > 0 && keys.length > 0;

  const focusEnabled = by !== 'none' && !!onChangeFocus;
  const hasFocus = focusEnabled && !!focusKey;

  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-3">
      <div className="flex items-center justify-between gap-3 mb-2">
        <div className="text-sm font-medium">Time series</div>

        {/* Controles */}
        <div className="flex items-end gap-2">
          <label className="text-sm grid gap-1">
            <span className="muted">Metric</span>
            <select
              className="input"
              value={metric}
              onChange={e => onChangeMetric(e.target.value as TrendMetric)}
            >
              <option value="ecpm">eCPM</option>
              <option value="turnover">Turnover</option>
              <option value="margin">Margin</option>
              <option value="marginPct">Margin %</option>
              <option value="vSent">V Sent</option>
            </select>
          </label>

          <label className="text-sm grid gap-1">
            <span className="muted">Group lines by</span>
            <select
              className="input"
              value={by}
              onChange={e => onChangeBy(e.target.value as GroupBy)}
            >
              <option value="none">Total</option>
              <option value="database">Database</option>
              <option value="partner">Partner</option>
              <option value="geo">GEO</option>
            </select>
          </label>

          {/* ðŸ”Ž Focus selector */}
          <label className="text-sm grid gap-1">
            <span className="muted">Focus</span>
            <select
              className="input"
              value={focusKey ?? ''}
              onChange={e => onChangeFocus?.(e.target.value ? e.target.value : null)}
              disabled={!focusEnabled}
            >
              <option value="">All</option>
              {focusOptions.map(k => (
                <option key={k} value={k}>{k}</option>
              ))}
            </select>
          </label>

          <label className="text-sm grid gap-1">
            <span className="muted">Top N</span>
            <input
              type="number"
              className="input"
              min={1}
              max={20}
              value={topN}
              onChange={e => onChangeTopN(Math.max(1, Math.min(20, Number(e.target.value || 1))))}
              disabled={by === 'none' || hasFocus}
              title={hasFocus ? 'Disabled when Focus is active' : undefined}
            />
          </label>

          <label
            className={`text-sm inline-flex items-center gap-2 ${
              by === 'none' || hasFocus ? 'opacity-50' : ''
            }`}
            title={hasFocus ? 'Disabled when Focus is active' : undefined}
          >
            <input
              type="checkbox"
              className="accent-[--color-primary]"
              checked={includeOthers}
              onChange={e => onToggleOthers(e.target.checked)}
              disabled={by === 'none' || hasFocus}
            />
            <span className="muted">Include â€œOthersâ€</span>
          </label>
        </div>
      </div>

      <div className="h-[320px]">
        {!hasData ? (
          <div className="h-full flex items-center justify-center text-sm opacity-70">
            No data for current filters
          </div>
        ) : (
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={data} margin={{ left: 8, right: 8, top: 8, bottom: 0 }}>
              <CartesianGrid stroke={chartTheme.grid} vertical={false} />
              <XAxis
                dataKey="date"
                tick={chartTheme.tick}
                axisLine={chartTheme.axisLine}
                tickLine={chartTheme.tickLine}
              />
              <YAxis
                tick={chartTheme.tick}
                axisLine={chartTheme.axisLine}
                tickLine={chartTheme.tickLine}
                tickFormatter={yTickFormatter(metric)}
              />
              <Tooltip
                cursor={{ stroke: chartTheme.gridStrong }}
                contentStyle={{
                  background: 'var(--chart-tooltip-bg)',
                  border: '1px solid var(--color-border)',
                  borderRadius: 8,
                }}
                itemStyle={{ color: 'var(--color-text)' }}
                labelStyle={{ color: 'var(--color-text)' }}
                formatter={(value: any, name: any) => [formatByMetric(metric, Number(value || 0)), String(name)]}
              />
              <Legend />
              {keys.map((k, idx) => (
                <Line
                  key={k}
                  type="monotone"
                  dataKey={k}
                  name={k}
                  dot={false}
                  stroke={colorAt(idx)}
                  strokeWidth={2}
                  activeDot={{ r: 4 }}
                />
              ))}
            </LineChart>
          </ResponsiveContainer>
        )}
      </div>

      <div className="text-xs opacity-60 mt-2 text-right">Right click â†’ â€œSave imageâ€</div>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsView.tsx =====
'use client';

import { useMemo, useState } from 'react';

import Card from '@/components/ui/Card';
import ReportsHeader from '@/components/reports/ReportsHeader';
import ReportsKpis from '@/components/reports/ReportsKpis';
import ReportsUnifiedTrend from '@/components/reports/ReportsUnifiedTrend';
import ReportsChart from '@/components/reports/ReportsChart';
import ReportsTopTable from '@/components/reports/ReportsTopTable';

import { useReportData } from '@/hooks/useReportData';
import type { Metric } from '@/types/reports';

const fmtEUR = new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' });
const fmtInt = new Intl.NumberFormat('es-ES');
const fmtPct = new Intl.NumberFormat('es-ES', { style: 'percent', maximumFractionDigits: 2 });

export default function ReportsView() {
  const {
    filters, setFilters,
    groupBy, setGroupBy,
    metric, setMetric,
    topN, setTopN,
    ranking, fullRanking,
    summary,
    quickLast30,
    makeTrendSeries,          // â¬…ï¸ unificado
    listAvailableKeys,
    computeTotals,            // â¬…ï¸ nuevo helper para FR/INTL
  } = useReportData();

  // Estado del unified trend
  const [trendMetric, setTrendMetric] =
    useState<'ecpm' | 'turnover' | 'margin' | 'marginPct' | 'vSent'>('turnover');
  const [trendBy, setTrendBy] = useState<'none' | 'database' | 'partner' | 'geo'>('database');
  const [trendTopN, setTrendTopN] = useState<number>(5);
  const [trendIncludeOthers, setTrendIncludeOthers] = useState<boolean>(true);
  const [trendFocusKey, setTrendFocusKey] = useState<string | null>(null);

  const focusOptions = useMemo(
    () => (trendBy === 'none' ? [] : listAvailableKeys(trendBy)),
    [trendBy, listAvailableKeys]
  );

  const trendSeries = useMemo(
    () => makeTrendSeries({
      metric: trendMetric,
      by: trendBy,
      topN: trendFocusKey ? 1 : trendTopN,
      includeOthers: trendFocusKey ? false : trendIncludeOthers,
      only: trendFocusKey ? [trendFocusKey] : undefined,
    }),
    [makeTrendSeries, trendMetric, trendBy, trendTopN, trendIncludeOthers, trendFocusKey]
  );

  // Export ranking completo (no solo Top-N)
  const exportCsv = () => {
    const header = ['group', 'vSent', 'turnover', 'margin', 'ecpm'];
    const lines = [header.join(',')];
    fullRanking.forEach(r => {
      const g = `"${String(r.label).replaceAll('"', '""')}"`;
      lines.push([g, r.vSent, r.turnover.toFixed(2), r.margin.toFixed(2), r.ecpm.toFixed(2)].join(','));
    });
    const blob = new Blob([lines.join('\n')], { type: 'text/csv;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = `${groupBy}_ranking.csv`; a.click();
    URL.revokeObjectURL(url);
  };

  // ====== Geo mix (France B2C, France B2B, INTL) ======
  const frB2C = computeTotals(r => (r.geo || '').toUpperCase() === 'FR' && r.databaseType === 'B2C');
  const frB2B = computeTotals(r => (r.geo || '').toUpperCase() === 'FR' && r.databaseType === 'B2B');
  const intl   = computeTotals(r => (r.geo || '').toUpperCase() !== 'FR' && (r.databaseType === 'B2B' || r.databaseType === 'B2C'));

  const subtotal = {
    vSent: frB2C.vSent + frB2B.vSent + intl.vSent,
    turnover: frB2C.turnover + frB2B.turnover + intl.turnover,
    margin: frB2C.margin + frB2B.margin + intl.margin,
  };
  const subtotalMarginPct = subtotal.turnover > 0 ? subtotal.margin / subtotal.turnover : null;

  return (
    <div className="grid gap-6">
      {/* Filtros (en tarjeta) */}
      <Card>
        <ReportsHeader
          groupBy={groupBy}
          metric={metric}
          topN={topN}
          filters={filters}
          onChangeFilters={setFilters}
          onChangeGroupBy={setGroupBy}
          onChangeMetric={(m: Metric) => setMetric(m)}
          onChangeTopN={setTopN}
          onQuickLast30={quickLast30}
          onExportCsv={exportCsv}
          summary={{ filteredCount: summary.filteredRows, groupCount: summary.groups }}
        />
      </Card>

      {/* KPIs globales */}
      <Card>
        <ReportsKpis kpis={summary.totals} />
      </Card>

      {/* Unified time series â€” inmediatamente tras KPIs */}
      <Card>
        <ReportsUnifiedTrend
          data={trendSeries.data}
          keys={trendSeries.keys}
          metric={trendMetric}
          onChangeMetric={setTrendMetric}
          by={trendBy}
          onChangeBy={setTrendBy}
          topN={trendTopN}
          onChangeTopN={setTrendTopN}
          includeOthers={trendIncludeOthers}
          onToggleOthers={setTrendIncludeOthers}
          focusKey={trendFocusKey}
          focusOptions={focusOptions}
          onChangeFocus={setTrendFocusKey}
        />
      </Card>

      {/* Geo mix: France B2C / France B2B / INTL + subtotal */}
      <Card>
        <div className="mb-3 text-sm font-medium">Geo mix</div>
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
          <GeoTile title="France B2C" v={frB2C} />
          <GeoTile title="France B2B" v={frB2B} />
          <GeoTile title="INTL (B2B+B2C, no FR)" v={intl} />
        </div>
        <div className="mt-3 pt-3 border-t border-[--color-border] text-sm flex flex-wrap items-center gap-4">
          <span className="opacity-70">Subtotal (B2B+B2C):</span>
          <span><strong>Turnover:</strong> {fmtEUR.format(subtotal.turnover)}</span>
          <span>
            <strong>Margin (%):</strong>{' '}
            {subtotalMarginPct == null ? 'â€”' : fmtPct.format(subtotalMarginPct)}{' '}
            <span className="opacity-70">({fmtEUR.format(subtotal.margin)})</span>
          </span>
          <span><strong>V Sent:</strong> {fmtInt.format(subtotal.vSent)}</span>
        </div>
      </Card>

      {/* Top-N (grÃ¡fico de barras) */}
      <Card>
        <ReportsChart
          data={ranking}
          metric={metric}
          title={`Top ${topN} by ${legendName(metric)}`}
          height={360}
          showTable={false}
          groupLabel={groupLabel(groupBy)}
        />
      </Card>

      {/* Top-N (tabla) */}
      <Card>
        <ReportsTopTable
          data={ranking}
          groupLabel={groupLabel(groupBy)}
        />
      </Card>
    </div>
  );
}

function GeoTile({ title, v }: {
  title: string;
  v: { vSent: number; turnover: number; margin: number; ecpm: number; marginPct: number | null };
}) {
  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-4">
      <div className="text-xs uppercase opacity-70">{title}</div>
      <div className="mt-2 grid grid-cols-2 gap-2 text-sm">
        <div><span className="opacity-70">Turnover</span><br /><strong>{fmtEUR.format(v.turnover)}</strong></div>
        <div>
          <span className="opacity-70">Margin (%)</span><br />
          <strong>{v.marginPct == null ? 'â€”' : fmtPct.format(v.marginPct)}</strong>
          <span className="opacity-70"> Â· {fmtEUR.format(v.margin)}</span>
        </div>
        <div><span className="opacity-70">V Sent</span><br /><strong>{fmtInt.format(v.vSent)}</strong></div>
        <div><span className="opacity-70">eCPM</span><br /><strong>{fmtEUR.format(v.ecpm)}</strong></div>
      </div>
    </div>
  );
}

function legendName(m: Metric) {
  return m === 'turnover' ? 'Turnover' : m === 'margin' ? 'Margin' : m === 'ecpm' ? 'eCPM' : 'V Sent';
}
function groupLabel(g: string) {
  switch (g) {
    case 'database': return 'Database';
    case 'partner': return 'Partner';
    case 'campaign': return 'Campaign';
    case 'advertiser': return 'Advertiser';
    case 'theme': return 'Theme';
    case 'geo': return 'GEO';
    case 'type': return 'Type';
    case 'databaseType': return 'DB Type';
    default: return 'Group';
  }
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\table\RowActions.tsx =====
'use client';

import { useEffect, useRef, useState } from 'react';

export default function RowActions({
  onEdit,
  onDuplicate,
  onDelete,
}: {
  onEdit: () => void;
  onDuplicate: () => void;
  onDelete: () => void;
}) {
  const [open, setOpen] = useState(false);
  const wrapRef = useRef<HTMLDivElement | null>(null);

  // Cerrar al hacer click fuera
  useEffect(() => {
    const onDoc = (e: MouseEvent) => {
      if (!wrapRef.current?.contains(e.target as Node)) setOpen(false);
    };
    document.addEventListener('mousedown', onDoc);
    return () => document.removeEventListener('mousedown', onDoc);
  }, []);

  return (
    <div ref={wrapRef} className="relative flex justify-end">
      <button
        type="button"
        className="rounded-md border border-[--color-border] px-2 py-1 text-sm
                   hover:bg-black/5 focus:outline-none focus:ring-2 focus:ring-primary/30"
        aria-haspopup="menu"
        aria-expanded={open}
        title="Row actions"
        onClick={(e) => { e.stopPropagation(); setOpen(o => !o); }}
        onMouseDown={(e) => e.stopPropagation()}
        onKeyDown={(e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            setOpen(o => !o);
          }
          if (e.key === 'Escape') setOpen(false);
        }}
      >
        â‹¯
      </button>

      {open && (
        <div
          role="menu"
          className="absolute right-0 top-full z-50 mt-1 min-w-36 rounded-md border border-[--color-border]
                     bg-[color:var(--color-surface-2)] p-1 shadow-[0_12px_32px_rgba(0,0,0,.12)]"
          onMouseDown={(e) => e.stopPropagation()}
        >
          <button
            type="button"
            role="menuitem"
            className="w-full rounded px-3 py-2 text-left text-sm
                       hover:bg-black/5 focus:bg-primary/5 focus:outline-none focus:ring-1 focus:ring-primary/30"
            onClick={() => { setOpen(false); onEdit(); }}
          >
            Edit
          </button>

          <button
            type="button"
            role="menuitem"
            className="w-full rounded px-3 py-2 text-left text-sm
                       hover:bg-black/5 focus:bg-primary/5 focus:outline-none focus:ring-1 focus:ring-primary/30"
            onClick={() => { setOpen(false); onDuplicate(); }}
          >
            Duplicateâ€¦
          </button>

          <button
            type="button"
            role="menuitem"
            className="w-full rounded px-3 py-2 text-left text-sm text-[--color-accent]
                       hover:bg-black/5 focus:bg-primary/5 focus:outline-none focus:ring-1 focus:ring-primary/30"
            onClick={() => { setOpen(false); onDelete(); }}
          >
            Delete
          </button>
        </div>
      )}
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\Card.tsx =====
'use client';

export default function Card({
  title,
  right,
  className = '',
  children,
}: {
  title?: React.ReactNode;
  right?: React.ReactNode;
  className?: string;
  children: React.ReactNode;
}) {
  return (
    <section className={`card ${title || right ? '' : ''} ${className}`}>
      {(title || right) && (
        <header className="flex items-center justify-between px-4 pt-4 pb-2">
          <div className="text-sm font-medium">{title}</div>
          <div className="flex items-center gap-2">{right}</div>
        </header>
      )}
      <div className={title || right ? 'px-4 pb-4' : 'p-4'}>{children}</div>
    </section>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\Chip.tsx =====
type Props = {
  active?: boolean;
  children: React.ReactNode;
  onClick?: () => void;
  title?: string;
};

export default function Chip({ active = false, children, onClick, title }: Props) {
  return (
    <button
      type="button"
      title={title}
      aria-pressed={active}
      onClick={onClick}
      className={[
        'px-3 py-1.5 rounded-full border text-sm transition',
        'focus:outline-none focus:ring-2',
        'focus:ring-[color:var(--color-primary)] focus:ring-opacity-30',
        active
          ? [
              'bg-[color:var(--color-primary)]',
              'hover:bg-[color:color-mix(in oklab,var(--color-primary) 88%, black)]',
              'text-white border-transparent shadow-sm',
            ].join(' ')
          : [
              'bg-[color:var(--color-surface-2)]',
              'hover:bg-[color:var(--color-surface)]',
              'text-[color:var(--color-text)]/80',
              'border-[color:var(--color-border)]',
            ].join(' '),
      ].join(' ')}
    >
      {children}
    </button>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\ColumnPicker.tsx =====
'use client';

import { createPortal } from 'react-dom';
import { useEffect, useRef, useState, useId } from 'react';

type ColumnItem = { id: string; label: string; disabled?: boolean };

export default function ColumnPicker({
  columns,
  visible,
  onChange,
  onClose,
  defaults,
}: {
  columns: ColumnItem[];
  visible: Set<string>;
  onChange: (next: Set<string>) => void;
  onClose: () => void;
  /** ids visibles por defecto (para reset) */
  defaults?: string[];
}) {
  const [mounted, setMounted] = useState(false);
  const trapRef = useRef<HTMLDivElement | null>(null);
  const firstFocusRef = useRef<HTMLButtonElement | null>(null);
  const titleId = useId();

  useEffect(() => { setMounted(true); }, []);

  // Cerrar con Esc
  useEffect(() => {
    const onKey = (e: KeyboardEvent) => { if (e.key === 'Escape') onClose(); };
    document.addEventListener('keydown', onKey);
    return () => document.removeEventListener('keydown', onKey);
  }, [onClose]);

  // Focus trap simple (Tab/Shift+Tab)
  useEffect(() => {
    const node = trapRef.current;
    if (!node) return;

    const selector = [
      'a[href]','button:not([disabled])','textarea:not([disabled])','input:not([disabled])',
      'select:not([disabled])','[tabindex]:not([tabindex="-1"])',
    ].join(',');

    const onKeyDown = (e: KeyboardEvent) => {
      if (e.key !== 'Tab') return;
      const focusables = Array.from(node.querySelectorAll<HTMLElement>(selector))
        .filter(el => el.offsetParent !== null);
      if (!focusables.length) return;

      const first = focusables[0];
      const last  = focusables[focusables.length - 1];
      const active = document.activeElement as HTMLElement | null;

      if (e.shiftKey) {
        if (active === first || !node.contains(active)) {
          last.focus(); e.preventDefault();
        }
      } else {
        if (active === last) {
          first.focus(); e.preventDefault();
        }
      }
    };

    node.addEventListener('keydown', onKeyDown);
    const t = setTimeout(() => firstFocusRef.current?.focus(), 0);
    return () => { node.removeEventListener('keydown', onKeyDown); clearTimeout(t); };
  }, []);

  // Bloquear scroll de la pÃ¡gina mientras el modal estÃ© abierto
  useEffect(() => {
    const prev = document.body.style.overflow;
    document.body.style.overflow = 'hidden';
    return () => { document.body.style.overflow = prev; };
  }, []);

  // Acciones
  const toggle = (id: string) => {
    const next = new Set(visible);
    if (next.has(id)) next.delete(id);
    else next.add(id);
    onChange(next);
  };
  const selectAll = () => {
    const next = new Set(visible);
    for (const c of columns) next.add(c.id);
    onChange(next);
  };
  const resetDefaults = () => {
    if (!defaults?.length) return;
    onChange(new Set(defaults));
  };

  if (!mounted) return null;

  return createPortal(
    <div
      className="fixed inset-0 z-[200] flex items-center justify-center p-4"
      role="dialog"
      aria-modal="true"
      aria-labelledby={titleId}
      onMouseDown={(e) => { if (e.target === e.currentTarget) onClose(); }}
    >
      {/* Backdrop alineado con otros modales */}
      <div
        className="absolute inset-0"
        style={{ background: 'rgba(0,0,0,0.55)', backdropFilter: 'blur(6px)' }}
      />

      {/* Panel */}
      <div
        ref={trapRef}
        className="relative card w-full max-w-lg max-h-[85vh] overflow-hidden border border-[--color-border] shadow-xl"
        style={{ background: 'var(--color-surface)' }}
        onMouseDown={(e) => e.stopPropagation()}
      >
        {/* Header (chrome unificado) */}
        <div className="sticky top-0 z-10 modal-chrome modal-header px-5 py-3">
          <div className="accent-strip" aria-hidden />
          <div className="flex items-center justify-between">
            <h3 id={titleId} className="text-base font-semibold">Columns</h3>
            <button className="btn-ghost" onClick={onClose} aria-label="Close">âœ•</button>
          </div>
        </div>

        {/* Body */}
        <div className="px-5 pb-4 pt-0 overflow-y-auto relative">
          <div className="edge-fade edge-top" aria-hidden />

          {/* Toolbar sticky dentro del scroll */}
          <div className="sticky top-0 z-[1] -mx-5 px-5 py-2 bg-[color:var(--color-surface)]/95 backdrop-blur-sm border-b border-[--color-border]">
            <div className="flex items-center gap-2 text-xs">
              <button ref={firstFocusRef} className="btn-ghost" onClick={selectAll}>
                Select all
              </button>
              {defaults?.length ? (
                <button className="btn-ghost" onClick={resetDefaults}>
                  Reset defaults
                </button>
              ) : null}
            </div>
          </div>

          {/* Lista en subcard con divisores suaves */}
          <div className="subcard p-0 mt-3">
            <ul className="max-h-[52vh] overflow-y-auto">
              {columns.map(col => {
                const checked = visible.has(col.id);
                const disabled = !!col.disabled;
                return (
                  <li key={col.id} className="group">
                    <label
                      className={[
                        'flex items-center gap-3 px-3 py-2.5',
                        disabled
                          ? 'opacity-55 cursor-not-allowed'
                          : 'cursor-pointer hover:bg-[color:var(--color-surface)]',
                        'rounded-md focus-within:outline-none focus-within:ring-2 focus-within:ring-[color:var(--color-primary)]/30',
                      ].join(' ')}
                    >
                      <input
                        type="checkbox"
                        checked={checked}
                        disabled={disabled}
                        onChange={() => { if (!disabled) toggle(col.id); }}
                        className="h-4 w-4 rounded-sm"
                        style={{ accentColor: 'var(--color-primary)' }}
                      />
                      <span className="text-sm select-none">{col.label}</span>
                    </label>
                    <div className="divider-soft mx-2" />
                  </li>
                );
              })}
            </ul>
          </div>

          <div className="edge-fade edge-bottom" aria-hidden />
        </div>

        {/* Footer (chrome unificado) */}
        <div className="sticky bottom-0 z-10 modal-chrome modal-footer px-5 py-3">
          <div className="flex items-center justify-end">
            <button className="btn-primary" onClick={onClose}>Done</button>
          </div>
        </div>
      </div>
    </div>,
    document.body
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\Combobox.tsx =====
'use client';
import { useEffect, useMemo, useRef, useState, useId } from 'react';

type Option = { id?: string; value: string; label?: string };

export default function Combobox({
  options,
  value,
  onChange,
  placeholder = 'Start typing to searchâ€¦',
  ariaLabel,
  id,
  invalid = false,
  ariaDescribedby,
  className,
}: {
  options: Option[];
  value?: string;
  onChange: (v: string) => void;
  placeholder?: string;
  ariaLabel?: string;
  id?: string;
  invalid?: boolean;
  ariaDescribedby?: string;
  className?: string;
}) {
  const autoId = useId();
  const inputId = id ?? `cb_${autoId}`;
  const listboxId = `${inputId}-listbox`;

  const [open, setOpen] = useState(false);
  const [q, setQ] = useState(value || '');
  const [activeIndex, setActiveIndex] = useState<number>(-1);
  const [suppressNextOpen, setSuppressNextOpen] = useState(false);

  const wrapRef = useRef<HTMLDivElement | null>(null);
  const listRef = useRef<HTMLUListElement | null>(null);
  const inputRef = useRef<HTMLInputElement | null>(null);

  // Sincroniza valor externo
  useEffect(() => {
    setQ(value || '');
  }, [value]);

  // Cierre al hacer click fuera
  useEffect(() => {
    const onDoc = (e: MouseEvent) => {
      if (!wrapRef.current?.contains(e.target as Node)) {
        setOpen(false);
        setActiveIndex(-1);
      }
    };
    document.addEventListener('mousedown', onDoc);
    return () => document.removeEventListener('mousedown', onDoc);
  }, []);

  // Filtrado + dedupe + truncado a 50
  const filtered = useMemo(() => {
    const s = q.trim().toLowerCase();
    const base = s ? options.filter(o => (o.label || o.value).toLowerCase().includes(s)) : options;
    const seen = new Set<string>();
    const out: Option[] = [];
    for (const o of base) {
      const k = (o.label || o.value).toLowerCase();
      if (seen.has(k)) continue;
      seen.add(k);
      out.push(o);
      if (out.length >= 50) break;
    }
    return out;
  }, [q, options]);

  // Determina Ã­ndice "seleccionado" dentro del array filtrado (si coincide el valor exacto)
  const selectedIndex = useMemo(() => {
    const val = (q || '').toLowerCase();
    return filtered.findIndex(o => (o.value || '').toLowerCase() === val);
  }, [filtered, q]);

  // Al abrir, sitÃºa el foco en el elemento seleccionado o el primero si hay query
  useEffect(() => {
    if (!open) return;
    if (selectedIndex >= 0) {
      setActiveIndex(selectedIndex);
    } else if (q && filtered.length) {
      setActiveIndex(0);
    } else {
      setActiveIndex(-1);
    }
  }, [open, selectedIndex, q, filtered.length]);

  // Asegura que el elemento activo quede visible en el scroll
  useEffect(() => {
    if (!open || activeIndex < 0) return;
    const el = document.getElementById(`${listboxId}-opt-${activeIndex}`);
    el?.scrollIntoView({ block: 'nearest' });
  }, [activeIndex, open, listboxId]);

  // Roving focus dentro del listbox
  const focusItem = (index: number) => {
    const btns = listRef.current?.querySelectorAll<HTMLButtonElement>('button[role="option"]');
    if (!btns || !btns.length) return;
    const i = Math.max(0, Math.min(index, btns.length - 1));
    setActiveIndex(i);
    btns[i].focus();
  };

  // Resalta todas las coincidencias
  const renderHighlighted = (text: string, query: string) => {
    if (!query) return text;
    const ql = query.trim().toLowerCase();
    if (!ql) return text;
    const parts: Array<string | JSX.Element> = [];
    let start = 0;
    const lower = text.toLowerCase();
    while (true) {
      const i = lower.indexOf(ql, start);
      if (i === -1) {
        parts.push(text.slice(start));
        break;
      }
      if (i > start) parts.push(text.slice(start, i));
      const mid = text.slice(i, i + ql.length);
      parts.push(
        <mark
          key={`${i}-${mid}`}
          className="px-0.5 rounded bg-[color:var(--color-primary)]/18 text-[color:var(--color-text)]"
        >
          {mid}
        </mark>
      );
      start = i + ql.length;
    }
    return <>{parts}</>;
  };

  const selectValue = (val: string) => {
    onChange(val);
    setQ(val);
    setOpen(false);
    setActiveIndex(-1);
    setSuppressNextOpen(true);
  };

  return (
    <div ref={wrapRef} className={`relative w-full min-w-0 ${className ?? ''}`}>
      {/* Input + acciones inline */}
      <div className="relative">
        <input
          ref={inputRef}
          id={inputId}
          role="combobox"
          aria-expanded={open}
          aria-controls={open ? listboxId : undefined}
          aria-activedescendant={open && activeIndex >= 0 ? `${listboxId}-opt-${activeIndex}` : undefined}
          aria-label={ariaLabel}
          aria-invalid={invalid || undefined}
          aria-describedby={ariaDescribedby}
          aria-autocomplete="list"
          className={`input h-10 w-full pr-18 ${invalid ? 'input-error' : ''}`}
          placeholder={placeholder}
          value={q}
          autoComplete="off" autoCorrect="off" autoCapitalize="off" spellCheck={false}
          inputMode="search" data-gramm="false" data-lt-active="false"
          onFocus={() => {
            if (suppressNextOpen) { setSuppressNextOpen(false); return; }
            setOpen(true);
          }}
          onChange={(e) => {
            const v = e.target.value;
            setQ(v);
            setOpen(true);
            setActiveIndex(v ? 0 : -1);
            onChange(v);
          }}
          onKeyDown={(e) => {
            if (e.key === 'ArrowDown') {
              e.preventDefault();
              if (!open) setOpen(true);
              focusItem(activeIndex >= 0 ? activeIndex + 1 : 0);
            }
            if (e.key === 'ArrowUp') {
              if (!open) return;
              e.preventDefault();
              if (activeIndex <= 0) {
                setActiveIndex(-1);
                inputRef.current?.focus();
              } else {
                focusItem(activeIndex - 1);
              }
            }
            if (e.key === 'PageDown') {
              if (!open) return;
              e.preventDefault();
              focusItem(activeIndex + 10);
            }
            if (e.key === 'PageUp') {
              if (!open) return;
              e.preventDefault();
              focusItem(activeIndex - 10);
            }
            if (e.key === 'Home') { if (open) { e.preventDefault(); focusItem(0); } }
            if (e.key === 'End')  { if (open) { e.preventDefault(); focusItem(filtered.length - 1); } }
            if (e.key === 'Enter') {
              e.preventDefault();
              if (open && activeIndex >= 0 && filtered[activeIndex]) {
                selectValue(filtered[activeIndex].value);
              } else if (selectedIndex >= 0) {
                // Si el texto coincide exactamente con una opciÃ³n, selecciÃ³nala
                selectValue(filtered[selectedIndex].value);
              } else {
                setOpen(false);
              }
            }
            if (e.key === 'Escape') {
              e.preventDefault();
              if (q) {
                // Escape limpia primero; segundo Escape cierra
                setQ('');
                onChange('');
                setActiveIndex(-1);
              } else {
                setOpen(false);
                setActiveIndex(-1);
              }
            }
          }}
        />

        {/* Botones: clear + toggle */}
        {q ? (
          <button
            type="button"
            aria-label="Clear"
            title="Clear"
            className="absolute right-9 top-1/2 -translate-y-1/2 rounded-md px-1.5 py-0.5 text-sm border border-[--color-border] bg-[color:var(--color-surface-2)] hover:bg-[color:var(--color-surface)]"
            onMouseDown={(e) => e.preventDefault()}
            onClick={() => {
              setQ('');
              onChange('');
              setActiveIndex(-1);
              inputRef.current?.focus();
              setOpen(true);
            }}
          >
            Ã—
          </button>
        ) : null}

        <button
          type="button"
          aria-label={open ? 'Close options' : 'Open options'}
          title={open ? 'Close' : 'Open'}
          className="absolute right-1.5 top-1/2 -translate-y-1/2 rounded-md px-2 py-1 border border-[--color-border] bg-[color:var(--color-surface-2)] hover:bg-[color:var(--color-surface)]"
          onMouseDown={(e) => e.preventDefault()}
          onClick={() => {
            const next = !open;
            setOpen(next);
            if (next) {
              inputRef.current?.focus();
              setActiveIndex(selectedIndex >= 0 ? selectedIndex : (q ? 0 : -1));
            }
          }}
        >
          â–¾
        </button>
      </div>

      {open && (
        <ul
          ref={listRef}
          id={listboxId}
          role="listbox"
          className="absolute z-50 mt-1 max-h-60 left-0 right-0 overflow-auto rounded-lg border border-[--color-border] bg-[color:var(--color-surface-2)] p-1 shadow-xl"
        >
          {filtered.length === 0 && (
            <li className="px-3 py-2 text-sm opacity-70">No results</li>
          )}
          {filtered.map((o, idx) => {
            const isSelected = (q || '').toLowerCase() === (o.value || '').toLowerCase();
            const isActive = idx === activeIndex;
            const optId = `${listboxId}-opt-${idx}`;
            return (
              <li key={o.id ?? o.value}>
                <button
                  id={optId}
                  type="button"
                  role="option"
                  aria-selected={isSelected}
                  className={[
                    'w-full rounded px-3 py-2 text-left text-sm flex items-center justify-between',
                    isActive
                      ? 'bg-[color:var(--color-surface)]/80 outline-none'
                      : 'hover:bg-[color:var(--color-surface)]/55 focus:bg-[color:var(--color-surface)]/70',
                  ].join(' ')}
                  onMouseEnter={() => setActiveIndex(idx)}
                  onMouseDown={(e) => {
                    // Evita perder el foco del input antes de seleccionar
                    e.preventDefault();
                  }}
                  onClick={() => selectValue(o.value)}
                  onKeyDown={(e) => {
                    const btns = listRef.current?.querySelectorAll<HTMLButtonElement>('button[role="option"]');
                    const count = btns?.length ?? 0;
                    if (!count) return;
                    if (e.key === 'ArrowDown') {
                      e.preventDefault();
                      focusItem(Math.min(idx + 1, count - 1));
                    }
                    if (e.key === 'ArrowUp') {
                      e.preventDefault();
                      if (idx <= 0) {
                        inputRef.current?.focus();
                        setActiveIndex(-1);
                      } else {
                        focusItem(idx - 1);
                      }
                    }
                    if (e.key === 'Home') { e.preventDefault(); focusItem(0); }
                    if (e.key === 'End') { e.preventDefault(); focusItem(count - 1); }
                    if (e.key === 'Enter') {
                      e.preventDefault();
                      selectValue(o.value);
                    }
                    if (e.key === 'Escape') {
                      e.preventDefault();
                      setOpen(false);
                      setActiveIndex(-1);
                      inputRef.current?.focus();
                    }
                  }}
                >
                  <span className="truncate">{renderHighlighted(o.label || o.value, q)}</span>
                  {isSelected ? (
                    <span aria-hidden className="ml-3 text-[--color-primary]">âœ“</span>
                  ) : null}
                </button>
              </li>
            );
          })}
        </ul>
      )}
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\FieldWithAddon.tsx =====
'use client';

import React from 'react';

type Props = {
  children: React.ReactNode;
  onAdd: () => void;
  addAriaLabel?: string;
  className?: string;
  buttonDisabled?: boolean;
};

export default function FieldWithAddon({
  children,
  onAdd,
  addAriaLabel = 'Add item',
  className = '',
  buttonDisabled = false,
}: Props) {
  return (
    <div className={`grid grid-cols-[1fr_auto] items-stretch ${className}`}>
      {/* Nota: el control hijo deberÃ­a llevar `rounded-r-none` para unirse visualmente */}
      <div className="contents">{children}</div>

      <button
        type="button"
        onClick={onAdd}
        disabled={buttonDisabled}
        aria-disabled={buttonDisabled || undefined}
        aria-label={addAriaLabel}
        title={addAriaLabel}
        className={[
          'btn-ghost h-10 px-3 transition-colors',
          'rounded-l-none -ml-px border border-[--color-border] border-l-0',
          'bg-[color:var(--color-surface-2)] hover:bg-[color:var(--color-surface)]',
          // No anulamos el focus ring global (:focus-visible en globals.css)
          'disabled:opacity-50 disabled:pointer-events-none',
        ].join(' ')}
      >
        {/* Plus en SVG para mejor nitidez y hereda el color actual */}
        <svg
          aria-hidden="true"
          width="14"
          height="14"
          viewBox="0 0 14 14"
          fill="none"
        >
          <path
            d="M7 2v10M2 7h10"
            stroke="currentColor"
            strokeWidth="1.75"
            strokeLinecap="round"
          />
        </svg>
      </button>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\FooterBar.tsx =====
'use client';

export default function FooterBar() {
  return (
    <footer
      className="app-footer modal-chrome fixed bottom-0 left-0 right-0 z-[90]"
      role="contentinfo"
      aria-label="Site footer"
    >
      <div className="h-full w-full flex items-center justify-between px-3 sm:px-4">
        <span className="text-[11px] sm:text-xs opacity-80 select-none">
          Â© 2025 Dataventure â€” All Rights Reserved
        </span>

        <span className="text-[11px] sm:text-xs opacity-80 flex items-center whitespace-nowrap select-none">
          Crafted with
          <img
            src="/love1.png"        
            alt=""                      /* decorativo */
            aria-hidden="true"
            width={14}
            height={14}
            className="inline-block h-3 w-3 mx-1 align-[-2px]"
          />
          by David
          <span className="sr-only">with love</span>
        </span>
      </div>
    </footer>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\MiniModal.tsx =====
'use client';

import { useEffect, useRef, useId } from 'react';
import { createPortal } from 'react-dom';

export default function MiniModal({
  title,
  onClose,
  children,
  footer,
  widthClass = 'max-w-md',
  panelClassName = '',
  headerClassName = '',
  footerClassName = '',
  /** NUEVO: clases extra para el cuerpo */
  bodyClassName = '',
  /** NUEVO: muestra tira de acento en el header */
  accentStrip = false,
  /** NUEVO: aÃ±ade fades superior/inferior dentro del Ã¡rea scroll */
  edgeFades = false,
  /** fuerza panel/header/footer opacos; true por defecto */
  solid = true,
}: {
  title: string;
  onClose: () => void;
  children: React.ReactNode;
  footer?: React.ReactNode;
  widthClass?: string;
  panelClassName?: string;
  headerClassName?: string;
  footerClassName?: string;
  bodyClassName?: string;
  accentStrip?: boolean;
  edgeFades?: boolean;
  solid?: boolean;
}) {
  const trapRef = useRef<HTMLDivElement | null>(null);
  const titleId = useId();

  useEffect(() => {
    const onKey = (e: KeyboardEvent) => { if (e.key === 'Escape') onClose(); };
    document.addEventListener('keydown', onKey);
    return () => document.removeEventListener('keydown', onKey);
  }, [onClose]);

  useEffect(() => {
    const node = trapRef.current;
    if (!node) return;
    const selector = [
      'a[href]',
      'button:not([disabled])',
      'textarea:not([disabled])',
      'input:not([disabled])',
      'select:not([disabled])',
      '[tabindex]:not([tabindex="-1"])',
    ].join(',');
    const onKeyDown = (e: KeyboardEvent) => {
      if (e.key !== 'Tab') return;
      const focusables = Array.from(node.querySelectorAll<HTMLElement>(selector))
        .filter(el => el.offsetParent !== null);
      if (!focusables.length) return;
      const first = focusables[0];
      const last  = focusables[focusables.length - 1];
      const active = document.activeElement as HTMLElement | null;
      if (e.shiftKey) {
        if (active === first || !node.contains(active)) { last.focus(); e.preventDefault(); }
      } else {
        if (active === last) { first.focus(); e.preventDefault(); }
      }
    };
    node.addEventListener('keydown', onKeyDown);
    const t = setTimeout(() => {
      (node.querySelector<HTMLElement>('input,select,button,[tabindex]') || node).focus();
    }, 0);
    return () => { node.removeEventListener('keydown', onKeyDown); clearTimeout(t); };
  }, []);

  useEffect(() => {
    const prev = document.body.style.overflow;
    document.body.style.overflow = 'hidden';
    return () => { document.body.style.overflow = prev; };
  }, []);

  // Backdrop translÃºcido + blur
  const backdropStyle: React.CSSProperties = {
    background: 'rgba(0,0,0,0.55)',
    backdropFilter: 'blur(6px)',
    WebkitBackdropFilter: 'blur(6px)',
  };

  const modal = (
    <div
      className="fixed inset-0 z-[500] flex items-center justify-center p-4"
      role="dialog"
      aria-modal="true"
      aria-labelledby={titleId}
      onMouseDown={(e) => { if (e.target === e.currentTarget) onClose(); }}
    >
      <div className="absolute inset-0" style={backdropStyle} />

      <div
        ref={trapRef}
        className={[
          'relative card w-full',
          widthClass,
          'max-h-[90vh] overflow-hidden border border-[--color-border] shadow-xl',
          panelClassName,
        ].join(' ')}
        style={solid ? { background: 'var(--color-surface)' } : undefined}
        onMouseDown={(e) => e.stopPropagation()}
      >
        {/* Header */}
        <div
          className={[
            'sticky top-0 z-10 border-b border-[--color-border] px-5 py-3 flex items-center justify-between',
            solid
              ? '!bg-[color:var(--color-surface)] !backdrop-blur-0'
              : 'bg-[color:var(--color-surface)]/95 backdrop-blur-sm',
            headerClassName,
          ].join(' ')}
        >
          {accentStrip ? <div className="accent-strip" aria-hidden /> : null}
          <h3 id={titleId} className="text-base font-semibold">{title}</h3>
          <button className="btn-ghost" onClick={onClose} aria-label="Close">âœ•</button>
        </div>

        {/* Body (scroll) */}
        <div className={['px-5 py-4 overflow-y-auto', bodyClassName].join(' ')}>
          {edgeFades && (
            <div
              aria-hidden
              className="pointer-events-none sticky top-0 -mt-4 h-4 bg-gradient-to-b from-[color:var(--color-surface)] to-transparent z-[5]"
            />
          )}

          {children}

          {edgeFades && (
            <div
              aria-hidden
              className="pointer-events-none sticky bottom-0 -mb-4 h-4 bg-gradient-to-t from-[color:var(--color-surface)] to-transparent z-[5]"
            />
          )}
        </div>

        {/* Footer */}
        <div
          className={[
            'sticky bottom-0 z-10 border-t border-[--color-border] px-5 py-3 flex items-center justify-end gap-2',
            solid
              ? '!bg-[color:var(--color-surface)] !backdrop-blur-0'
              : 'bg-[color:var(--color-surface)]/95 backdrop-blur-sm',
            footerClassName,
          ].join(' ')}
        >
          {footer}
        </div>
      </div>
    </div>
  );

  if (typeof document === 'undefined') return null;
  return createPortal(modal, document.body);
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\Tooltip.tsx =====
'use client';

import { useEffect, useRef, useState, useId } from 'react';

type Side = 'top' | 'right' | 'bottom' | 'left';

export default function Tooltip({
  content,
  side = 'top',
  children,
  className = '',
  /** Delay en ms para mostrar/ocultar (evita flicker) */
  delay = 80,
}: {
  content: React.ReactNode;
  side?: Side;
  children: React.ReactNode;
  className?: string;
  delay?: number;
}) {
  const [open, setOpen] = useState(false);
  const wrapRef = useRef<HTMLSpanElement | null>(null);
  const tidRef = useRef<number | null>(null);
  const tipId = useId();

  // Cierre al hacer click fuera
  useEffect(() => {
    const onDoc = (e: MouseEvent) => {
      if (!wrapRef.current?.contains(e.target as Node)) setOpen(false);
    };
    document.addEventListener('mousedown', onDoc);
    return () => document.removeEventListener('mousedown', onDoc);
  }, []);

  // Limpia timers al desmontar
  useEffect(() => {
    return () => { if (tidRef.current) window.clearTimeout(tidRef.current); };
  }, []);

  const show = () => {
    if (tidRef.current) window.clearTimeout(tidRef.current);
    tidRef.current = window.setTimeout(() => setOpen(true), delay);
  };
  const hide = () => {
    if (tidRef.current) window.clearTimeout(tidRef.current);
    tidRef.current = window.setTimeout(() => setOpen(false), delay);
  };

  const pos =
    side === 'top'
      ? 'bottom-full left-1/2 -translate-x-1/2 -translate-y-1'
      : side === 'bottom'
      ? 'top-full left-1/2 -translate-x-1/2 translate-y-1'
      : side === 'left'
      ? 'right-full top-1/2 -translate-y-1/2 -translate-x-1'
      : 'left-full top-1/2 -translate-y-1/2 translate-x-1';

  return (
    <span
      ref={wrapRef}
      className={`relative inline-flex ${className}`}
      // Hover / focus accesibles
      onMouseEnter={show}
      onMouseLeave={hide}
      onFocus={show}
      onBlur={hide}
      tabIndex={0}
      aria-describedby={open ? tipId : undefined}
    >
      {children}
      {open && (
        <span
          id={tipId}
          role="tooltip"
          className={`tooltip-panel absolute ${pos}`}
          // TransiciÃ³n sutil (opcional)
          style={{ transition: 'opacity .12s ease, transform .12s ease' }}
        >
          {content}
        </span>
      )}
    </span>
  );
}


===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\z_reposummary\root_context.txt =====
===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\context\AuthContext.tsx =====
'use client';

import {
  createContext,
  useCallback,
  useContext,
  useEffect,
  useMemo,
  useState,
} from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import type { SupabaseClient } from '@supabase/supabase-js';

import type { SessionUser, Role } from '@/types/auth';
import { DEFAULT_ROLE } from '@/types/auth';
import { isAdmin, isEditor } from '@/lib/roles';

type AuthCtx = {
  user: SessionUser | null;
  loading: boolean;
  signIn: (
    email: string,
    password: string
  ) => Promise<{ ok: true } | { ok: false; message: string }>;
  signOut: () => Promise<void>;
  role: Role | null;
  isAdmin: boolean;
  isEditor: boolean;
};

const AuthContext = createContext<AuthCtx | null>(null);

/** Lee el rol desde la tabla app_users (por user_id).
 *  Si no hay fila, si estÃ¡ inactivo o hay error -> DEFAULT_ROLE.
 */
async function fetchRole(sb: SupabaseClient, userId: string): Promise<Role> {
  const { data, error } = await sb
    .from('app_users')
    .select('role, is_active')
    .eq('user_id', userId)
    .single();

  if (error || !data?.role || data.is_active === false) return DEFAULT_ROLE;

  const r = String(data.role).toLowerCase();
  return (r === 'admin' ? 'admin' : 'editor') as Role;
}

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<SessionUser | null>(null);
  const [role, setRole] = useState<Role | null>(null);
  const [loading, setLoading] = useState(true);

  // Cliente Ãºnico y estable para todo el provider
  const supabase = useMemo(() => createClientComponentClient(), []);

  // Carga inicial de sesiÃ³n + rol y suscripciÃ³n a cambios
  useEffect(() => {
    let mounted = true;

    (async () => {
      const { data: authData } = await supabase.auth.getUser();
      const authUser = authData.user;
      if (!mounted) return;

      if (authUser) {
        const r = await fetchRole(supabase, authUser.id).catch(() => DEFAULT_ROLE);
        if (!mounted) return;
        setUser({ id: authUser.id, email: authUser.email, role: r });
        setRole(r);
      } else {
        setUser(null);
        setRole(null);
      }
      setLoading(false);
    })();

    const { data: sub } = supabase.auth.onAuthStateChange(async (_event, session) => {
      if (!mounted) return;
      const authUser = session?.user ?? null;
      if (authUser) {
        const r = await fetchRole(supabase, authUser.id).catch(() => DEFAULT_ROLE);
        setUser({ id: authUser.id, email: authUser.email, role: r });
        setRole(r);
      } else {
        setUser(null);
        setRole(null);
      }
    });

    return () => {
      mounted = false;
      sub.subscription.unsubscribe();
    };
  }, [supabase]);

  const signIn = useCallback(
    async (email: string, password: string) => {
      const { error } = await supabase.auth.signInWithPassword({ email, password });
      if (error) {
        return { ok: false as const, message: error.message || 'No se pudo iniciar sesiÃ³n' };
      }
      return { ok: true as const };
    },
    [supabase]
  );

  const signOut = useCallback(async () => {
    await supabase.auth.signOut();
  }, [supabase]);

  const value = useMemo<AuthCtx>(
    () => ({
      user,
      role,
      loading,
      signIn,
      signOut,
      isAdmin: isAdmin(role),
      isEditor: isEditor(role),
    }),
    [user, role, loading, signIn, signOut]
  );

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

export function useAuth() {
  const ctx = useContext(AuthContext);
  if (!ctx) throw new Error('useAuth must be used within AuthProvider');
  return ctx;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\context\CampaignDataContext.tsx =====
'use client';

import { createContext, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';
import { CampaignRow } from '@/types/campaign';
import { autoFromCampaign, autoFromDatabase, autoInvoiceOffice, calcDerived } from '@/lib/campaign-calcs';
import { useAuth } from '@/context/AuthContext'; // ðŸ†• soft guard por rol

/* ================================
   Tipado del contexto (ampliado)
   ================================ */
type BulkResult = { added: number; updated: number; skipped: number; total: number };
type UpsertKey = 'id' | 'composite';
type OnConflict = 'update' | 'skip';

type ImportCsvOptions = {
  delimiter?: string;
  headerMap?: Partial<Record<string, keyof CampaignRow>>;
  upsertBy?: UpsertKey;
  onConflict?: OnConflict;
};

type ImportCsvReport = BulkResult & {
  errors: { line: number; reason: string }[];
  columns: string[];
};

type Ctx = {
  rows: (CampaignRow & { _idx: number })[];
  addCampaign: (r: Omit<CampaignRow, 'id'> & { id?: string }) => void;
  updateCampaign: (id: string, patch: Partial<CampaignRow>) => void;
  removeCampaign: (id: string) => void;
  resetToMock: () => void;
  addManyCampaigns: (
    list: (Omit<CampaignRow, 'id'> & { id?: string })[],
    opts?: { upsertBy?: UpsertKey; onConflict?: OnConflict }
  ) => BulkResult;
  importFromCsv: (csvText: string, opts?: ImportCsvOptions) => ImportCsvReport;
};

const CampaignDataContext = createContext<Ctx | null>(null);

const STORAGE_KEY = 'monet_campaigns_v1';

/* ====================
   Datos mock iniciales
   ==================== */
const MOCK_DATA: (CampaignRow & { _idx: number })[] = [
  { _idx: 0, id: '1', date: '2025-07-01', campaign: 'Helvetia', advertiser: 'Helvetia', invoiceOffice: 'DAT', partner: 'Startend Marketing', theme: 'Insurance', price: 11, priceCurrency: 'EUR', type: 'CPL', vSent: 493987, routingCosts: 123.5, qty: 8, turnover: 88.0, margin: -35.5, ecpm: 0.18, database: 'Tu Opinion', geo: 'ES', databaseType: 'B2C' },
  { _idx: 1, id: '2', date: '2025-07-01', campaign: 'Allianz sante', advertiser: 'Allianz', invoiceOffice: 'CAR', partner: 'Oceads', theme: 'Insurance', price: 10, priceCurrency: 'EUR', type: 'CPL', vSent: 383443, routingCosts: 95.86, qty: 7, turnover: 70.0, margin: -25.86, ecpm: 0.18, database: 'The coupon party', geo: 'FR', databaseType: 'B2C' },
  { _idx: 2, id: '3', date: '2025-07-01', campaign: 'North Fox Property Axiom', advertiser: 'North Fox Property', invoiceOffice: 'DAT', partner: 'Loud Europe', theme: 'Services', price: 16, priceCurrency: 'EUR', type: 'CPL', vSent: 246423, routingCosts: 61.61, qty: 3, turnover: 48.0, margin: -13.61, ecpm: 0.19, database: 'Brit Consumer Net', geo: 'UK', databaseType: 'B2C' },
  { _idx: 3, id: '4', date: '2025-07-02', campaign: 'Melia Hotels CPM - ES', advertiser: 'Melia Hotels', invoiceOffice: 'DAT', partner: 'Feebbo', theme: 'Travel & Tourism', price: 2, priceCurrency: 'EUR', type: 'CPM', vSent: 156563, routingCosts: 39.14, qty: 100, turnover: 200.0, margin: 160.86, ecpm: 1.28, database: 'Tu Opinion', geo: 'ES', databaseType: 'B2B' },
];

/* ==========================
   Helpers (reglas & parsing)
   ========================== */
function applyBusinessRules(row: CampaignRow): CampaignRow {
  const { advertiser } = autoFromCampaign(row.campaign);
  const dbAuto = autoFromDatabase(row.database);
  const geo = dbAuto.geo || row.geo || '';
  const databaseType = (dbAuto.dbType as CampaignRow['databaseType']) || row.databaseType;
  const invoiceOffice = autoInvoiceOffice(geo, row.partner);
  const d = calcDerived({ price: row.price, qty: row.qty, vSent: row.vSent });

  return {
    ...row,
    advertiser,
    geo,
    databaseType,
    invoiceOffice,
    routingCosts: d.routingCosts,
    turnover: d.turnover,
    margin: d.margin,
    ecpm: d.ecpm,
  };
}

function compositeKey(r: Pick<CampaignRow, 'date' | 'campaign' | 'partner' | 'database'>) {
  return [r.date, r.campaign, r.partner, r.database].map(s => (s ?? '').trim().toLowerCase()).join('|');
}

function parseNumberLoose(v: any): number {
  if (v == null || v === '') return 0;
  if (typeof v === 'number') return Number.isFinite(v) ? v : 0;
  let s = String(v).trim();
  if (!s) return 0;
  const hasComma = s.includes(',');
  const hasDot = s.includes('.');
  if (hasComma && hasDot) {
    if (s.lastIndexOf(',') > s.lastIndexOf('.')) s = s.replace(/\./g, '').replace(',', '.');
    else s = s.replace(/,/g, '');
  } else if (hasComma) {
    s = s.replace(',', '.');
  }
  const n = Number(s);
  return Number.isFinite(n) ? n : 0;
}

function parseCsv(text: string, delimiter?: string): { header: string[]; rows: string[][] } {
  const firstLine = (text.split(/\r?\n/, 1)[0] ?? '');
  const guess = delimiter || (firstLine.split(';').length > firstLine.split(',').length ? ';' : ',');
  const d = guess;

  const out: string[][] = [];
  let row: string[] = [];
  let cell = '';
  let inQuotes = false;

  const pushCell = () => { row.push(cell); cell = ''; };
  const pushRow = () => { if (row.length === 1 && row[0] === '') { row = []; return; } out.push(row); row = []; };

  const len = text.length;
  for (let i = 0; i < len; i++) {
    const ch = text[i];
    if (inQuotes) {
      if (ch === '"') {
        if (text[i + 1] === '"') { cell += '"'; i++; }
        else { inQuotes = false; }
      } else {
        cell += ch;
      }
    } else {
      if (ch === '"') { inQuotes = true; }
      else if (ch === d) { pushCell(); }
      else if (ch === '\n') { pushCell(); pushRow(); }
      else if (ch === '\r') { }
      else { cell += ch; }
    }
  }
  pushCell();
  if (row.length) pushRow();

  if (!out.length) return { header: [], rows: [] };
  const header = (out.shift() || []).map(h => h.trim());
  return { header, rows: out };
}

const REQUIRED_MIN: (keyof CampaignRow)[] = [
  'date', 'campaign', 'partner', 'database', 'type',
  'price', 'qty', 'vSent',
];

/* =========================
   Provider con nuevas APIs
   ========================= */
export function CampaignDataProvider({ children }: { children: React.ReactNode }) {
  // ðŸ†• lÃ­mites suaves para no-admin
  const { isAdmin } = useAuth();
  const NON_ADMIN_BULK_LIMIT = 500; // nÃºmero mÃ¡ximo de filas por operaciÃ³n para no-admin

  // 1) Arrancamos vacÃ­o; hidrataremos en efecto (evita escribir MOCK en LS)
  const [rows, setRows] = useState<(CampaignRow & { _idx: number })[]>([]);
  const idxRef = useRef(0);

  // Guardas para StrictMode y para bloquear la primera escritura
  const didInitRef = useRef(false);     // evita doble hidratar en StrictMode
  const hydratedRef = useRef(false);    // hasta que no sea true, no persistimos

  // 2) Hidratar una Ãºnica vez desde LS; si no hay datos, caer a MOCK
  useEffect(() => {
    if (didInitRef.current) return;
    didInitRef.current = true;

    try {
      const raw = localStorage.getItem(STORAGE_KEY);
      let seed: CampaignRow[] | null = null;

      if (raw) {
        const parsed = JSON.parse(raw);
        if (Array.isArray(parsed) && parsed.length > 0) seed = parsed as CampaignRow[];
      }

      // Si no hay datos en LS, usa mock (quitando _idx del mock)
      const base = seed ?? MOCK_DATA.map(({ _idx, ...r }) => r);

      const withIdx = base.map((r, i) => ({ ...applyBusinessRules(r), _idx: i }));
      idxRef.current = withIdx.length;
      setRows(withIdx);
    } catch {
      // fallback total si algo falla
      idxRef.current = MOCK_DATA.length;
      setRows(MOCK_DATA);
    } finally {
      hydratedRef.current = true;
    }
  }, []);

  // 3) Persistir SOLO despuÃ©s de hidratar (evita pisar datos con MOCK)
  useEffect(() => {
    if (!hydratedRef.current) return;
    const plain: CampaignRow[] = rows.map(({ _idx, ...r }) => r);
    try { localStorage.setItem(STORAGE_KEY, JSON.stringify(plain)); } catch {}
  }, [rows]);

  const addCampaign = useCallback((input: Omit<CampaignRow, 'id'> & { id?: string }) => {
    const id = input.id ?? (globalThis.crypto?.randomUUID ? crypto.randomUUID() : Math.random().toString(36).slice(2));
    const row: CampaignRow & { _idx: number } = { ...applyBusinessRules({ ...input, id } as CampaignRow), _idx: idxRef.current++ };
    setRows(prev => [row, ...prev]);
  }, []);

  const updateCampaign = useCallback((id: string, patch: Partial<CampaignRow>) => {
    setRows(prev => prev.map(r => {
      if (r.id !== id) return r;
      const merged: CampaignRow = { ...r, ...patch };
      const finalRow = applyBusinessRules(merged);
      return { ...finalRow, _idx: r._idx };
    }));
  }, []);

  const removeCampaign = useCallback((id: string) => {
    setRows(prev => prev.filter(r => r.id !== id));
  }, []);

  const resetToMock = useCallback(() => {
    idxRef.current = MOCK_DATA.length;
    setRows(MOCK_DATA);
  }, []);

  // ============ InserciÃ³n masiva / upsert ============
  const addManyCampaigns = useCallback((
    list: (Omit<CampaignRow, 'id'> & { id?: string })[],
    opts?: { upsertBy?: UpsertKey; onConflict?: OnConflict }
  ): BulkResult => {
    // ðŸ†• guard suave para no-admin:
    // - limita tamaÃ±o de lote
    // - fuerza onConflict = 'skip' para evitar overwrites
    const hardTotal = list.length;
    const effectiveList = isAdmin ? list : list.slice(0, NON_ADMIN_BULK_LIMIT);
    const trimmedOut = hardTotal - effectiveList.length;

    const upsertBy = opts?.upsertBy ?? 'composite';
    const onConflictEffective: OnConflict = isAdmin ? (opts?.onConflict ?? 'update') : 'skip';

    let added = 0, updated = 0, skipped = 0;

    setRows(prev => {
      let next = [...prev];

      for (const input of effectiveList) {
        const id =
          input.id ??
          (globalThis.crypto?.randomUUID
            ? crypto.randomUUID()
            : Math.random().toString(36).slice(2));

        const prepared = applyBusinessRules({ ...(input as any), id } as CampaignRow);

        // Recalcular mapas sobre `next` en cada iteraciÃ³n
        const byId = new Map<string, number>();
        const byComposite = new Map<string, number>();
        for (let i = 0; i < next.length; i++) {
          const r = next[i];
          byId.set(r.id, i);
          byComposite.set(compositeKey(r), i);
        }

        let targetIndex: number | undefined = undefined;
        if (upsertBy === 'id' && id) {
          const idx = byId.get(id);
          if (idx != null) targetIndex = idx;
        } else {
          const key = compositeKey(prepared);
          const idx = byComposite.get(key);
          if (idx != null) targetIndex = idx;
        }

        if (targetIndex == null) {
          // Alta nueva al principio
          const rowWithIdx = { ...prepared, _idx: idxRef.current++ };
          next = [rowWithIdx, ...next];
          added++;
        } else {
          if (onConflictEffective === 'skip') {
            skipped++;
          } else {
            // Update in-place preservando _idx
            const prevRow = next[targetIndex];
            const preservedIdx =
              (prevRow as (CampaignRow & { _idx: number }) | undefined)?._idx ?? idxRef.current++;
            next[targetIndex] = { ...prepared, _idx: preservedIdx };
            updated++;
          }
        }
      }

      return next;
    });

    // lo recortado por el guard cuenta como skipped
    skipped += trimmedOut;

    return { added, updated, skipped, total: hardTotal };
  }, [isAdmin]);

  const importFromCsv = useCallback((csvText: string, opts?: ImportCsvOptions): ImportCsvReport => {
    const parsed = parseCsv(csvText, opts?.delimiter);
    const headerRaw = parsed.header;
    const rowsRaw = parsed.rows;
    const normalize = (s: string) => s.trim().toLowerCase();
    const columns = headerRaw;
    const headerMap = new Map<string, keyof CampaignRow>();

    if (opts?.headerMap) {
      for (const [k, v] of Object.entries(opts.headerMap)) {
        headerMap.set(normalize(k), v);
      }
    }

    const possibleFields: (keyof CampaignRow)[] = [
      'id','date','campaign','advertiser','invoiceOffice','partner','theme','price','priceCurrency','type','vSent','routingCosts','qty','turnover','margin','ecpm','database','geo','databaseType',
    ];
    headerRaw.forEach(h => {
      const n = normalize(h);
      if (!headerMap.has(n)) {
        const direct = possibleFields.find(f => normalize(String(f)) === n);
        if (direct) headerMap.set(n, direct);
      }
    });

    const failures: { line: number; reason: string }[] = [];
    const batch: (Omit<CampaignRow, 'id'> & { id?: string })[] = [];

    rowsRaw.forEach((cells, rowIdx) => {
      const lineNo = rowIdx + 2;
      const obj: any = {};
      headerRaw.forEach((h, i) => {
        const mapped = headerMap.get(normalize(h));
        if (!mapped) return;
        obj[mapped] = cells[i];
      });

      obj.price = parseNumberLoose(obj.price);
      obj.qty = Math.round(parseNumberLoose(obj.qty));
      obj.vSent = Math.round(parseNumberLoose(obj.vSent));
      if (!obj.priceCurrency) obj.priceCurrency = 'EUR';
      if (!obj.type) obj.type = 'CPL';

      const missing = REQUIRED_MIN.filter(k => !String(obj[k] ?? '').trim());
      if (missing.length) {
        failures.push({ line: lineNo, reason: `Missing required: ${missing.join(', ')}` });
        return;
      }

      batch.push({
        id: obj.id || undefined,
        date: String(obj.date),
        campaign: String(obj.campaign),
        advertiser: String(obj.advertiser || ''),
        invoiceOffice: String(obj.invoiceOffice || 'DAT'),
        partner: String(obj.partner),
        theme: String(obj.theme || ''),
        price: Number(obj.price || 0),
        priceCurrency: String(obj.priceCurrency || 'EUR'),
        type: String(obj.type),
        vSent: Number(obj.vSent || 0),
        routingCosts: 0,
        qty: Number(obj.qty || 0),
        turnover: 0,
        margin: 0,
        ecpm: 0,
        database: String(obj.database),
        geo: String(obj.geo || ''),
        databaseType: String(obj.databaseType || ''),
      });
    });

    // ðŸ†• aplica guard suave tambiÃ©n en CSV: no-admin => conflictos a 'skip'
    const bulk = addManyCampaigns(batch, {
      upsertBy: opts?.upsertBy ?? 'composite',
      onConflict: isAdmin ? (opts?.onConflict ?? 'update') : 'skip',
    });

    return {
      ...bulk,
      errors: failures,
      columns,
    };
  }, [addManyCampaigns, isAdmin]);

  const value = useMemo<Ctx>(
    () => ({
      rows,
      addCampaign,
      updateCampaign,
      removeCampaign,
      resetToMock,
      addManyCampaigns,
      importFromCsv,
    }),
    [rows, addCampaign, updateCampaign, removeCampaign, resetToMock, addManyCampaigns, importFromCsv]
  );

  return <CampaignDataContext.Provider value={value}>{children}</CampaignDataContext.Provider>;
}

export function useCampaignData() {
  const ctx = useContext(CampaignDataContext);
  if (!ctx) throw new Error('useCampaignData must be used within CampaignDataProvider');
  return ctx;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\context\CatalogOverridesContext.tsx =====
'use client';

import React, {
  createContext,
  useCallback,
  useContext,
  useEffect,
  useMemo,
  useRef,
  useState,
} from 'react';

import {
  CAMPAIGNS as BASE_CAMPAIGNS,
  PARTNERS as BASE_PARTNERS,
  DATABASES as BASE_DATABASES,
  THEMES as BASE_THEMES,
  TYPES as BASE_TYPES,
  INVOICE_RULES,
} from '@/data/reference';
import type {
  CampaignRef,
  PartnerRef,
  DatabaseRef,
  DBType,
  InvoiceOffice,
  InvoiceRule,
} from '@/data/reference';

import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { useAuth } from '@/context/AuthContext';

const STORAGE_KEY = 'monet_catalog_overrides_v1';

/* ============================== NormalizaciÃ³n ============================== */
type CampaignIn = { name: string; advertiser?: string };
type PartnerIn  = { name: string; invoiceOffice: string };
type DatabaseIn = { id?: string; name: string; geo: string; dbType: DBType };

type OverridesShape = {
  campaigns?: CampaignIn[];
  partners?: PartnerIn[];
  databases?: DatabaseIn[];
  themes?: string[] | { label: string }[];
  types?: string[];
};

function trimCollapse(s: string) {
  return (s ?? '').trim().replace(/\s+/g, ' ');
}
function norm(s?: string) {
  return (s ?? '').trim().toLowerCase();
}
function toSlug(s?: string) {
  const x = (s ?? '')
    .normalize('NFKD')
    .replace(/[\u0300-\u036f]/g, '')
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '')
    .slice(0, 60);
  return x || 'item';
}
function mapInvoiceOffice(s: string): { office: InvoiceOffice; isInternal?: boolean } {
  const v = norm(s);
  if (v === 'car') return { office: 'CAR' };
  if (v === 'dat') return { office: 'DAT' };
  if (v === 'internal' || v === 'int') return { office: 'INT', isInternal: true };
  return { office: 'DAT' };
}

/** ===== GEO estricto: ISO-3166-1 alpha-2 + MULTI, con alias UKâ†’GB ===== */
function isIsoCountry(code: string): boolean {
  const c = (code || '').toUpperCase();
  if (!/^[A-Z]{2}$/.test(c)) return false;
  try {
    const dn = new (Intl as any).DisplayNames(['en'], { type: 'region' });
    const name = dn?.of?.(c);
    return typeof name === 'string' && name && name !== c;
  } catch {
    return false;
  }
}
function normalizeGeoStrict(raw?: string): string | null {
  const g = trimCollapse(raw || '').toUpperCase();
  if (!g) return null;
  if (g === 'MULTI') return 'MULTI';
  const mapped = g === 'UK' ? 'GB' : g;
  return isIsoCountry(mapped) ? mapped : null;
}

function normalizeOverrides(raw: any): OverridesShape {
  const out: OverridesShape = {};
  if (Array.isArray(raw?.campaigns)) {
    out.campaigns = raw.campaigns
      .map((c: any) => ({
        name: trimCollapse(c?.name || ''),
        advertiser: trimCollapse(c?.advertiser || 'White Label'),
      }))
      .filter((c: any) => !!c.name);
  }
  if (Array.isArray(raw?.partners)) {
    out.partners = raw.partners
      .map((p: any) => ({
        name: trimCollapse(p?.name || ''),
        invoiceOffice: (p?.invoiceOffice || 'DAT') as string,
      }))
      .filter((p: any) => !!p.name);
  }
  if (Array.isArray(raw?.databases)) {
    out.databases = raw.databases
      .map((d: any) => {
        const name = trimCollapse(d?.name || '');
        const geoNorm = normalizeGeoStrict(d?.geo);
        return {
          id: trimCollapse(d?.id || ''),
          name,
          geo: geoNorm ?? '',
          dbType: (d?.dbType || 'B2C') as DBType,
        };
      })
      .filter((d: any) => !!d.name && !!normalizeGeoStrict(d.geo));
  }
  if (Array.isArray(raw?.themes)) {
    out.themes = raw.themes
      .map((t: any) => (typeof t === 'string' ? trimCollapse(t) : trimCollapse(t?.label || '')))
      .filter((t: string) => !!t);
  }
  if (Array.isArray(raw?.types)) {
    out.types = raw.types
      .map((t: any) => trimCollapse(String(t || '')).toUpperCase())
      .filter((t: string) => !!t);
  }
  return out;
}

/* ============================== Merge helpers ============================== */
function mergeCampaigns(base: CampaignRef[], adds: CampaignIn[] = []): CampaignRef[] {
  const out = [...base.map((c) => ({ ...c }))];
  const usedIds = new Set(out.map((c) => c.id));
  const seenNames = new Set(out.map((c) => norm(c.name)));

  for (const r of adds) {
    const name = trimCollapse(r.name);
    if (!name) continue;
    const key = norm(name);
    if (seenNames.has(key)) continue;
    seenNames.add(key);

    const advertiser = trimCollapse(r.advertiser || 'White Label');
    let id = toSlug(name);
    let n = 2;
    while (usedIds.has(id)) id = `${id}-${n++}`;
    usedIds.add(id);

    out.push({ id, name, advertiser });
  }
  out.sort((a, b) => a.name.localeCompare(b.name, 'es'));
  return out;
}

function mergePartners(base: PartnerRef[], adds: PartnerIn[] = []): PartnerRef[] {
  const out = [...base.map((p) => ({ ...p }))];
  const usedIds = new Set(out.map((p) => p.id));
  const seenNames = new Set(out.map((p) => norm(p.name)));

  for (const r of adds) {
    const name = trimCollapse(r.name);
    if (!name) continue;
    const key = norm(name);
    if (seenNames.has(key)) continue;
    seenNames.add(key);

    const baseId = toSlug(name);
    let id = baseId;
    let n = 2;
    while (usedIds.has(id)) id = `${baseId}-${n++}`;
    usedIds.add(id);

    const { office, isInternal } = mapInvoiceOffice(r.invoiceOffice);
    out.push({
      id,
      name,
      defaultInvoiceOffice: office,
      ...(isInternal ? { isInternal: true } : {}),
    });
  }
  out.sort((a, b) => a.name.localeCompare(b.name, 'es'));
  return out;
}

function mergeDatabases(base: DatabaseRef[], adds: DatabaseIn[] = []): DatabaseRef[] {
  const out = [...base.map((d) => ({ ...d }))];
  const usedIds = new Set(out.map((d) => d.id));
  const seen = new Set(out.map((d) => norm(d.name)));

  for (const r of adds) {
    const name = trimCollapse(r.name);
    if (!name) continue;
    const key = norm(name);
    if (seen.has(key)) continue;

    const geoStrict = normalizeGeoStrict(r.geo);
    if (!geoStrict) continue;

    // ID autogenerado (o normalizado si viene)
    const baseId = toSlug(r.id ? r.id : name);
    let id = baseId || 'db';
    let n = 2;
    while (usedIds.has(id)) id = `${baseId}-${n++}`;

    usedIds.add(id);
    seen.add(key);

    out.push({
      id,
      name,
      geo: geoStrict,
      dbType: r.dbType,
    });
  }
  out.sort((a, b) => a.name.localeCompare(b.name, 'es'));
  return out;
}

function mergeThemes(base: string[], adds: (string | { label: string })[] = []): string[] {
  const out = new Set(base);
  for (const t of adds) {
    const label = typeof t === 'string' ? t : t?.label;
    const v = trimCollapse(label || '');
    if (!v) continue;
    out.add(v);
  }
  const arr = [...out];
  arr.sort((a, b) => {
    const ax = a.toLowerCase() === 'unknown';
    const bx = b.toLowerCase() === 'unknown';
    if (ax && !bx) return 1;
    if (!ax && bx) return -1;
    return a.localeCompare(b, 'es');
  });
  return arr;
}

function mergeTypes(base: readonly string[], adds: string[] = []): string[] {
  const out = new Set<string>(base);
  for (const t of adds) {
    const v = trimCollapse(t).toUpperCase();
    if (!v) continue;
    out.add(v);
  }
  return [...out].sort();
}

/* ====== Resolver de invoice office con reglas + partners fusionados ======= */
function makeResolveInvoiceOffice(rules: InvoiceRule[], partners: PartnerRef[]) {
  return (geo?: string, partnerNameOrId?: string): InvoiceOffice => {
    const g = norm(geo);
    const pRaw = norm(partnerNameOrId);

    const partnerObj =
      partners.find((pp) => norm(pp.id) === pRaw || norm(pp.name) === pRaw) || null;
    const p = partnerObj ? norm(partnerObj.name) : pRaw;

    const rulesEff = rules.filter((r) => !!(r.geo || r.partner));

    const exact = rulesEff.find(
      (r) => r.geo && r.partner && norm(r.geo) === g && norm(r.partner) === p,
    );
    if (exact) return exact.invoiceOffice;

    const byPartner = rulesEff.find((r) => r.partner && !r.geo && norm(r.partner) === p);
    if (byPartner) return byPartner.invoiceOffice;

    if (partnerObj?.defaultInvoiceOffice) return partnerObj.defaultInvoiceOffice;

    const byGeo = rulesEff.find((r) => r.geo && !r.partner && norm(r.geo) === g);
    if (byGeo) return byGeo.invoiceOffice;

    return 'DAT';
  };
}

/* ================================ Contexto ================================= */
export type CatalogsCtx = {
  // Colecciones fusionadas (BASE + overrides compartidos)
  CAMPAIGNS: CampaignRef[];
  PARTNERS: PartnerRef[];
  DATABASES: DatabaseRef[];
  THEMES: string[];
  TYPES: string[];
  resolveInvoiceOfficeMerged: (geo?: string, partner?: string) => InvoiceOffice;

  // CRUD (APIs existentes - compat)
  addCampaignRef: (c: CampaignIn) => void;
  addPartnerRef:  (p: PartnerIn) => void;
  addDatabaseRef: (d: DatabaseIn) => void;
  addTheme: (t: string) => void;
  addType:  (t: string) => void;

  updateCampaignRef: (name: string, patch: Partial<CampaignIn>) => void;
  removeCampaignRef: (name: string) => void;

  updatePartnerRef: (name: string, patch: Partial<PartnerIn>) => void;
  removePartnerRef: (name: string) => void;

  updateDatabaseRef: (name: string, patch: Partial<DatabaseIn>) => void;
  removeDatabaseRef: (name: string) => void;

  removeTheme: (t: string) => void;
  removeType:  (t: string) => void;

  // Mantenimiento
  resetOverrides: () => void;
  exportOverrides: () => string;

  // Estado
  hasLocalChanges: boolean;

  // ImportaciÃ³n segura
  importOverrides: (data: string | OverridesShape) => { ok: true } | { ok: false; reason: string };

  // Info remota
  syncing: boolean;
  lastSyncedAt: string | null;
  canWriteShared: boolean;
};

const CatalogOverridesContext = createContext<CatalogsCtx | null>(null);

/* ======================= Supabase adapter (tabla Ãºnica) ====================

  Tabla sugerida en Supabase (SQL):

  create table if not exists catalog_overrides (
    key text primary key,
    data jsonb not null default '{}',
    updated_at timestamptz not null default now(),
    updated_by uuid references auth.users(id)
  );

  -- Para realtime
  alter publication supabase_realtime add table catalog_overrides;

  Usamos la fila con key='global'. Puedes cambiarlo a nivel organizaciÃ³n si lo necesitÃ¡is.
============================================================================= */

const S_TABLE = 'catalog_overrides';
const S_KEY   = 'global';

export function CatalogOverridesProvider({ children }: { children: React.ReactNode }) {
  const { user, isAdmin, isEditor } = useAuth();
  const canWriteShared = Boolean(isAdmin || isEditor);

  const supabase = useMemo(() => createClientComponentClient(), []);

  const [overrides, setOverrides] = useState<OverridesShape>(() => {
    try {
      const raw = localStorage.getItem(STORAGE_KEY);
      return raw ? (JSON.parse(raw) as OverridesShape) : {};
    } catch {
      return {};
    }
  });

  const [syncing, setSyncing] = useState(false);
  const [lastSyncedAt, setLastSyncedAt] = useState<string | null>(null);

  // Para evitar bucles de eco: cuando aplicamos remoto, no disparemos guardado
  const skipNextSaveRef = useRef(false);
  const hydratedRemoteRef = useRef(false);
  const saveTimerRef = useRef<number | null>(null);

  // Persistir en cache local siempre (mejor UX offline)
  useEffect(() => {
    try { localStorage.setItem(STORAGE_KEY, JSON.stringify(overrides)); } catch {}
  }, [overrides]);

  /* -------------------------- Carga inicial remota ------------------------- */
  useEffect(() => {
    let active = true;

    (async () => {
      try {
        setSyncing(true);
        const { data, error } = await supabase
          .from(S_TABLE)
          .select('data, updated_at')
          .eq('key', S_KEY)
          .single();

        if (!active) return;

        if (!error && data?.data) {
          skipNextSaveRef.current = true; // no salvar de vuelta este set
          setOverrides(normalizeOverrides(data.data));
          setLastSyncedAt(data.updated_at ?? new Date().toISOString());
        } else {
          // Si no existe fila remota, mantenemos lo local; se crearÃ¡ al primer write
        }
      } finally {
        hydratedRemoteRef.current = true;
        setSyncing(false);
      }
    })();

    return () => { active = false; };
  }, [supabase]);

  /* --------------------------- SuscripciÃ³n realtime ------------------------ */
  useEffect(() => {
    const channel = supabase
      .channel('catalog_overrides_global')
      .on(
        'postgres_changes',
        { event: '*', schema: 'public', table: S_TABLE, filter: `key=eq.${S_KEY}` },
        (payload) => {
          const row: any = payload.new || payload.record || null;
          if (!row || !row.data) return;
          // Aplicar remoto y evitar eco
          skipNextSaveRef.current = true;
          setOverrides(normalizeOverrides(row.data));
          setLastSyncedAt(row.updated_at ?? new Date().toISOString());
        }
      )
      .subscribe();

    return () => { supabase.removeChannel(channel); };
  }, [supabase]);

  /* ----------------------------- Guardado remoto --------------------------- */
  const upsertRemote = useCallback(async (data: OverridesShape) => {
    if (!canWriteShared) return; // viewers no escriben
    setSyncing(true);
    try {
      await supabase
        .from(S_TABLE)
        .upsert({
          key: S_KEY,
          data,
          updated_by: user?.id ?? null,
        }, { onConflict: 'key' })
        .select()
        .single();
      setLastSyncedAt(new Date().toISOString());
    } finally {
      setSyncing(false);
    }
  }, [supabase, user?.id, canWriteShared]);

  // Debounce: cada cambio local (user action) -> upsert remoto (si procede)
  useEffect(() => {
    if (!hydratedRemoteRef.current) return; // hasta cargar remoto
    if (skipNextSaveRef.current) {
      skipNextSaveRef.current = false;
      return;
    }
    if (!canWriteShared) return; // viewers no suben

    if (saveTimerRef.current) window.clearTimeout(saveTimerRef.current);
    saveTimerRef.current = window.setTimeout(() => {
      upsertRemote(overrides);
    }, 500);

    return () => {
      if (saveTimerRef.current) {
        window.clearTimeout(saveTimerRef.current);
        saveTimerRef.current = null;
      }
    };
  }, [overrides, canWriteShared, upsertRemote]);

  /* -------------------------- Fusionados (memo) ---------------------------- */
  const CAMPAIGNS = useMemo(
    () => mergeCampaigns(BASE_CAMPAIGNS, overrides.campaigns),
    [overrides.campaigns],
  );
  const PARTNERS = useMemo(
    () => mergePartners(BASE_PARTNERS, overrides.partners),
    [overrides.partners],
  );
  const DATABASES = useMemo(
    () => mergeDatabases(BASE_DATABASES, overrides.databases),
    [overrides.databases],
  );
  const THEMES = useMemo(
    () => mergeThemes(BASE_THEMES, overrides.themes as any),
    [overrides.themes],
  );
  const TYPES = useMemo(
    () => mergeTypes(BASE_TYPES, overrides.types),
    [overrides.types],
  );

  const resolveInvoiceOfficeMerged = useMemo(
    () => makeResolveInvoiceOffice(INVOICE_RULES, PARTNERS),
    [PARTNERS],
  );

  /* ---------------------------- Mutadores (compat) ------------------------- */
  const setLocal = <T,>(updater: (prev: OverridesShape) => OverridesShape) => {
    setOverrides(prev => updater(prev));
  };

  const addCampaignRef = useCallback((c: CampaignIn) => {
    setLocal(prev => {
      const list = [...(prev.campaigns || [])];
      const key = norm(c.name);
      const exists =
        list.some((x) => norm(x.name) === key) ||
        CAMPAIGNS.some((x) => norm(x.name) === key);
      if (!exists) {
        list.push({
          name: trimCollapse(c.name),
          advertiser: trimCollapse(c.advertiser || 'White Label'),
        });
      }
      return { ...prev, campaigns: list };
    });
  }, [CAMPAIGNS]);

  const addPartnerRef = useCallback((p: PartnerIn) => {
    setLocal(prev => {
      const list = [...(prev.partners || [])];
      const key = norm(p.name);
      const exists =
        list.some((x) => norm(x.name) === key) ||
        PARTNERS.some((x) => norm(x.name) === key);
      if (!exists) {
        list.push({ name: trimCollapse(p.name), invoiceOffice: p.invoiceOffice });
      }
      return { ...prev, partners: list };
    });
  }, [PARTNERS]);

  const addDatabaseRef = useCallback((d: DatabaseIn) => {
    setLocal(prev => {
      const list = [...(prev.databases || [])];

      // Dedupe por nombre (case-insensitive)
      const key = norm(d.name);
      const exists =
        list.some((x) => norm(x.name) === key) ||
        DATABASES.some((x) => norm(x.name) === key);
      if (exists) return prev;

      // GEO validado (estricto)
      const geoStrict = normalizeGeoStrict(d.geo);
      if (!geoStrict) {
        console.warn('Invalid GEO ignored in addDatabaseRef:', d.geo);
        return prev;
      }

      // ID autogenerado Ãºnico (ignora cualquier id externo)
      const usedIds = new Set<string>([
        ...DATABASES.map(db => db.id.toLowerCase()),
        ...list.map(db => (db.id || '').toLowerCase()),
      ]);
      const baseId = toSlug(d.name) || 'db';
      let id = baseId;
      let n = 2;
      while (usedIds.has(id.toLowerCase())) id = `${baseId}-${n++}`;

      list.push({
        id,
        name: trimCollapse(d.name),
        geo: geoStrict,      // UKâ†’GB, permite MULTI
        dbType: d.dbType,
      });
      return { ...prev, databases: list };
    });
  }, [DATABASES]);

  const addTheme = useCallback((t: string) => {
    setLocal(prev => {
      const list = Array.isArray(prev.themes) ? [...prev.themes] : [];
      const label = trimCollapse(t);
      if (!label) return prev;
      const exists =
        (list as any[]).some(
          (x) => trimCollapse(typeof x === 'string' ? x : x?.label) === label,
        ) || THEMES.some((v) => v === label);
      if (!exists) (list as any[]).push(label);
      return { ...prev, themes: list as any };
    });
  }, [THEMES]);

  const addType = useCallback((t: string) => {
    setLocal(prev => {
      const list = [...(prev.types || [])];
      const v = trimCollapse(t).toUpperCase();
      if (!v) return prev;
      const exists = list.includes(v) || TYPES.includes(v);
      if (!exists) list.push(v);
      return { ...prev, types: list };
    });
  }, [TYPES]);

  const updateCampaignRef = useCallback((name: string, patch: Partial<CampaignIn>) => {
    const key = norm(name);
    setLocal(prev => {
      const list = [...(prev.campaigns || [])];
      const idx = list.findIndex((x) => norm(x.name) === key);
      if (idx >= 0) {
        list[idx] = {
          ...list[idx],
          ...(patch.name ? { name: trimCollapse(patch.name) } : {}),
          ...(patch.advertiser ? { advertiser: trimCollapse(patch.advertiser) } : {}),
        };
      } else {
        list.push({
          name: trimCollapse(patch.name || name),
          advertiser: trimCollapse(patch.advertiser || 'White Label'),
        });
      }
      return { ...prev, campaigns: list };
    });
  }, []);

  const removeCampaignRef = useCallback((name: string) => {
    const key = norm(name);
    setLocal(prev => ({
      ...prev,
      campaigns: (prev.campaigns || []).filter((x) => norm(x.name) !== key),
    }));
  }, []);

  const updatePartnerRef = useCallback((name: string, patch: Partial<PartnerIn>) => {
    const key = norm(name);
    setLocal(prev => {
      const list = [...(prev.partners || [])];
      const idx = list.findIndex((x) => norm(x.name) === key);
      const invoiceOffice = patch.invoiceOffice ?? list[idx]?.invoiceOffice ?? 'DAT';
      if (idx >= 0) {
        list[idx] = {
          ...list[idx],
          ...(patch.name ? { name: trimCollapse(patch.name) } : {}),
          invoiceOffice,
        };
      } else {
        list.push({ name: trimCollapse(patch.name || name), invoiceOffice });
      }
      return { ...prev, partners: list };
    });
  }, []);

  const removePartnerRef = useCallback((name: string) => {
    const key = norm(name);
    setLocal(prev => ({
      ...prev,
      partners: (prev.partners || []).filter((x) => norm(x.name) !== key),
    }));
  }, []);

  const updateDatabaseRef = useCallback((name: string, patch: Partial<DatabaseIn>) => {
    const key = norm(name);
    setLocal(prev => {
      const list = [...(prev.databases || [])];
      const idx = list.findIndex((x) => norm(x.name) === key);

      const applyGeo = (g?: string) => {
        if (g == null) return undefined;
        const strict = normalizeGeoStrict(g);
        return strict ?? undefined;
      };

      // Helper para generar ID Ãºnico si se edita el id
      const makeUniqueId = (desiredBase: string) => {
        const used = new Set<string>([
          ...DATABASES.map(db => db.id.toLowerCase()),
          ...list.map(db => (db.id || '').toLowerCase()),
        ]);
        const baseId = toSlug(desiredBase) || 'db';
        let id = baseId, n = 2;
        while (used.has(id.toLowerCase())) id = `${baseId}-${n++}`;
        return id;
      };

      if (idx >= 0) {
        const next = { ...list[idx] };
        if (patch.name) next.name = trimCollapse(patch.name);
        const g = applyGeo(patch.geo);
        if (g) next.geo = g; // si no es vÃ¡lido, se ignora cambio de GEO
        if (patch.dbType) next.dbType = patch.dbType;
        if (patch.id) next.id = makeUniqueId(patch.id || next.name);
        list[idx] = next;
      } else {
        // Si no existÃ­a, creamos nuevo (con validaciÃ³n)
        const nm = trimCollapse(patch.name || name);
        const g = applyGeo(patch.geo || '');
        if (!nm || !g) return prev;
        list.push({
          id: makeUniqueId(patch.id || nm),
          name: nm,
          geo: g,
          dbType: (patch.dbType || 'B2C') as DBType,
        });
      }
      return { ...prev, databases: list };
    });
  }, [DATABASES]);

  const removeDatabaseRef = useCallback((name: string) => {
    const key = norm(name);
    setLocal(prev => ({
      ...prev,
      databases: (prev.databases || []).filter((x) => norm(x.name) !== key),
    }));
  }, []);

  const removeTheme = useCallback((t: string) => {
    const lbl = trimCollapse(t);
    setLocal(prev => ({
      ...prev,
      themes: (prev.themes || []).filter((x: any) =>
        trimCollapse(typeof x === 'string' ? x : x?.label) !== lbl,
      ),
    }));
  }, []);

  const removeType = useCallback((t: string) => {
    const v = trimCollapse(t).toUpperCase();
    setLocal(prev => ({
      ...prev,
      types: (prev.types || []).filter((x) => x !== v),
    }));
  }, []);

  /* ----------------------------- Mantenimiento ----------------------------- */
  const resetOverrides = useCallback(() => {
    setOverrides({});
  }, []);

  const exportOverrides = useCallback(() => {
    const data: OverridesShape = {};
    if (overrides.campaigns?.length)  data.campaigns = overrides.campaigns;
    if (overrides.partners?.length)   data.partners  = overrides.partners;
    if (overrides.databases?.length)  data.databases = overrides.databases;
    if (overrides.themes && (overrides.themes as any[]).length) data.themes = overrides.themes;
    if (overrides.types?.length)      data.types     = overrides.types;
    return JSON.stringify(data, null, 2);
  }, [overrides]);

  const hasLocalChanges = useMemo(() => {
    const o = overrides;
    return Boolean(
      (o.campaigns && o.campaigns.length) ||
      (o.partners && o.partners.length) ||
      (o.databases && o.databases.length) ||
      (o.themes && (o.themes as any[]).length) ||
      (o.types && o.types.length)
    );
  }, [overrides]);

  const importOverrides = useCallback((data: string | OverridesShape) => {
    try {
      const src = typeof data === 'string' ? JSON.parse(data) : data;
      const normd = normalizeOverrides(src);
      setOverrides(normd);
      return { ok: true as const };
    } catch (e) {
      console.error(e);
      return { ok: false as const, reason: 'Invalid JSON' };
    }
  }, []);

  const value: CatalogsCtx = {
    CAMPAIGNS,
    PARTNERS,
    DATABASES,
    THEMES,
    TYPES,
    resolveInvoiceOfficeMerged,

    addCampaignRef,
    addPartnerRef,
    addDatabaseRef,
    addTheme,
    addType,

    updateCampaignRef,
    removeCampaignRef,
    updatePartnerRef,
    removePartnerRef,
    updateDatabaseRef,
    removeDatabaseRef,
    removeTheme,
    removeType,

    resetOverrides,
    exportOverrides,

    hasLocalChanges,
    importOverrides,

    syncing,
    lastSyncedAt,
    canWriteShared,
  };

  return (
    <CatalogOverridesContext.Provider value={value}>
      {children}
    </CatalogOverridesContext.Provider>
  );
}

/** Hook principal */
export function useCatalogs() {
  const ctx = useContext(CatalogOverridesContext);
  if (!ctx) throw new Error('useCatalogs must be used within CatalogOverridesProvider');
  return ctx;
}

/** Alias de compatibilidad */
export function useCatalogOverrides() {
  return useCatalogs();
}


===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\z_reposummary\root_data.txt =====
===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\data\reference.ts =====
// data/reference.ts
import { z } from 'zod';
import rawCampaigns from './catalogs/campaigns.json';
import rawPartners from './catalogs/partners.json';
import rawDatabases from './catalogs/databases.json';
import rawRules from './catalogs/invoice_rules.json';
import rawThemes from './catalogs/themes.json';

// ---------------- Constantes (tuplas as const) ----------------
export const DB_TYPES = ['B2B', 'B2C', 'Mixed'] as const;
export const INVOICE_OFFICES = ['CAR', 'DAT', 'INT'] as const;
export const TYPES = ['CPL', 'CPM', 'CPC', 'CPA'] as const;

// ---------------- Tipos base ----------------
export type DBType = 'B2C' | 'B2B' | 'Mixed';
export type InvoiceOffice = 'CAR' | 'DAT' | 'INT';

export type CampaignRef = { id: string; name: string; advertiser: string };

export type PartnerRef = {
  id: string;                          // slug estable
  name: string;                        // visible en UI
  defaultInvoiceOffice: InvoiceOffice; // fallback si no hay regla por GEO/partner
  isInternal?: boolean;                // flag si viene "Internal"/"INT" en la fuente
};

export type DatabaseRef = { id: string; name: string; geo: string; dbType: DBType };
export type ThemeRef = { id: string; label: string };

// ---------------- Utils (funciones hoisted) ----------------
export function trimCollapse(s: string) {
  return (s ?? '').trim().replace(/\s+/g, ' ');
}
export function toSlug(s: string) {
  return (s ?? '')
    .normalize('NFKD').replace(/[\u0300-\u036f]/g, '')
    .toLowerCase().replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '').slice(0, 60);
}
function norm(s?: string) {
  return (s ?? '').trim().toLowerCase();
}

// ---------------- THEMES (JSON) ----------------
const ThemeInZ = z.object({ label: z.string() });
type ThemeIn = z.infer<typeof ThemeInZ>;

function normalizeThemes(input: unknown): ThemeRef[] {
  const parsed = z.array(ThemeInZ).parse(input);

  const seen = new Set<string>();
  const out: ThemeRef[] = [];

  for (const r of parsed) {
    const label = trimCollapse(r.label);
    if (!label) continue;
    const key = label.toLowerCase();
    if (seen.has(key)) continue; // dedupe case-insensitive
    seen.add(key);

    const base = toSlug(label) || 'theme';
    let id = base, n = 2;
    while (out.some(t => t.id === id)) id = `${base}-${n++}`;

    out.push({ id, label });
  }

  // Orden alfabÃ©tico, dejando "Unknown" al final si existe
  out.sort((a, b) => {
    const ax = a.label.toLowerCase() === 'unknown';
    const bx = b.label.toLowerCase() === 'unknown';
    if (ax && !bx) return 1;
    if (!ax && bx) return -1;
    return a.label.localeCompare(b.label, 'es');
  });

  return out;
}

export const THEMES_META: ThemeRef[] = normalizeThemes(rawThemes);
export const THEMES: string[] = THEMES_META.map(t => t.label);

// ---------------- CAMPAIGNS (JSON) ----------------
const CampaignInZ = z.object({ name: z.string(), advertiser: z.string() });
type CampaignIn = z.infer<typeof CampaignInZ>;

function normalizeCampaigns(input: unknown): CampaignRef[] {
  const parsed = z.array(CampaignInZ).parse(input);

  const used = new Set<string>();
  const rows = parsed.map((r) => {
    const name = trimCollapse(r.name);
    const advertiser = trimCollapse(r.advertiser);
    const base = toSlug(name) || toSlug(`${name}-${advertiser || 'wl'}`) || 'campaign';
    let id = base;
    let n = 2;
    while (used.has(id)) id = `${base}-${n++}`;
    used.add(id);
    return { id, name, advertiser };
  });

  rows.sort((a, b) => a.name.localeCompare(b.name, 'es'));
  return rows;
}

export const CAMPAIGNS: CampaignRef[] = normalizeCampaigns(rawCampaigns);

// ---------------- PARTNERS (JSON) ----------------
const PartnerInZ = z.object({
  name: z.string(),
  invoiceOffice: z.string(), // puede venir "Internal", "CAR", "DAT"
});
type PartnerIn = z.infer<typeof PartnerInZ>;

function mapInvoiceOffice(s: string): { office: InvoiceOffice; isInternal?: boolean } {
  const v = norm(s);
  if (v === 'car') return { office: 'CAR' };
  if (v === 'dat') return { office: 'DAT' };
  if (v === 'internal' || v === 'int') return { office: 'INT', isInternal: true };
  // fallback prudente
  return { office: 'DAT' };
}

function normalizePartners(input: unknown): PartnerRef[] {
  const parsed = z.array(PartnerInZ).parse(input);
  const used = new Set<string>();
  const out: PartnerRef[] = [];

  for (const r of parsed) {
    const name = trimCollapse(r.name);
    const base = toSlug(name) || 'partner';
    let id = base;
    let n = 2;
    while (used.has(id)) id = `${base}-${n++}`;
    used.add(id);

    const { office, isInternal } = mapInvoiceOffice(r.invoiceOffice);
    out.push({
      id,
      name,
      defaultInvoiceOffice: office,
      ...(isInternal ? { isInternal: true } : {}),
    });
  }

  out.sort((a, b) => a.name.localeCompare(b.name, 'es'));
  return out;
}

export const PARTNERS: PartnerRef[] = normalizePartners(rawPartners);

// ---------------- DATABASES (JSON) ----------------
const DatabaseInZ = z.object({
  id: z.string(),
  name: z.string(),
  geo: z.string(),                         // tal cual (ES, FR, UK, MULTI, etc.)
  dbType: z.enum(DB_TYPES),
});
type DatabaseIn = z.infer<typeof DatabaseInZ>;

function normalizeDatabases(input: unknown): DatabaseRef[] {
  const parsed = z.array(DatabaseInZ).parse(input);
  return parsed
    .map(d => ({ ...d, name: trimCollapse(d.name), geo: trimCollapse(d.geo).toUpperCase() }))
    .sort((a, b) => a.name.localeCompare(b.name, 'es'));
}

export const DATABASES: DatabaseRef[] = normalizeDatabases(rawDatabases);

// ---------------- REGLAS de invoice (JSON) ----------------
const RuleInZ = z.object({
  geo: z.string().optional(),
  partner: z.string().optional(), // por nombre o id; resolvemos abajo
  office: z.enum(INVOICE_OFFICES),
});
type RuleIn = z.infer<typeof RuleInZ>;

export type InvoiceRule = { geo?: string; partner?: string; invoiceOffice: InvoiceOffice };

function normalizeRules(input: unknown): InvoiceRule[] {
  const parsed = z.array(RuleInZ).parse(input);
  // Guardamos tal cual; la resoluciÃ³n harÃ¡ el matching por id o nombre.
  return parsed.map(r => ({ geo: r.geo, partner: r.partner, invoiceOffice: r.office }));
}

export const INVOICE_RULES: InvoiceRule[] = normalizeRules(rawRules);

// ---------------- ResoluciÃ³n de Invoice Office ----------------
// Precedencia:
// 1) Regla exacta geo+partner
// 2) Regla por partner (sin geo)
// 3) Default del partner
// 4) Regla por geo (sin partner)
// 5) Fallback DAT
export function resolveInvoiceOffice(geo?: string, partnerNameOrId?: string): InvoiceOffice {
  const g = norm(geo);
  const pRaw = norm(partnerNameOrId);

  // Localiza partner por id o por nombre (soportamos ambos)
  const partnerObj = PARTNERS.find(pp => norm(pp.id) === pRaw || norm(pp.name) === pRaw);
  const pByName = partnerObj ? norm(partnerObj.name) : pRaw;
  const pById = partnerObj ? norm(partnerObj.id) : pRaw;

  const matchGeo = (rg?: string) => !!rg && norm(rg) === g;
  const matchPartner = (rp?: string) => {
    if (!rp) return false;
    const rpNorm = norm(rp);
    // match por nombre o por id
    return rpNorm === pByName || rpNorm === pById;
  };

  // Solo reglas con al menos una condiciÃ³n
  const rules = INVOICE_RULES.filter(r => !!(r.geo || r.partner));

  // 1) geo+partner
  const exact = rules.find(r => matchGeo(r.geo) && matchPartner(r.partner));
  if (exact) return exact.invoiceOffice;

  // 2) solo partner
  const byPartner = rules.find(r => !r.geo && matchPartner(r.partner));
  if (byPartner) return byPartner.invoiceOffice;

  // 3) default del partner
  if (partnerObj?.defaultInvoiceOffice) return partnerObj.defaultInvoiceOffice;

  // 4) solo geo
  const byGeo = rules.find(r => matchGeo(r.geo) && !r.partner);
  if (byGeo) return byGeo.invoiceOffice;

  // 5) fallback
  return 'DAT';
}

// Alias opcional por legibilidad â€” mismo comportamiento
export const resolveInvoiceOfficeMerged = resolveInvoiceOffice;

// ---------------- Helpers ----------------
export function findCampaignByName(name?: string) {
  const n = (name ?? '').trim().toLowerCase();
  if (!n) return undefined;
  return CAMPAIGNS.find(c => c.name.toLowerCase() === n)
      ?? CAMPAIGNS.find(c => toSlug(c.name) === toSlug(n));
}
export function findPartnerByName(name?: string) {
  const n = norm(name);
  return PARTNERS.find(p => norm(p.name) === n);
}
export function findPartnerById(id?: string) {
  const i = norm(id);
  return PARTNERS.find(p => norm(p.id) === i);
}
export function findDatabaseByName(name?: string) {
  const n = norm(name);
  return DATABASES.find(d => norm(d.name) === n);
}
export function findDatabaseById(id?: string) {
  const i = norm(id);
  return DATABASES.find(d => norm(d.id) === i);
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\data\catalogs\campaigns.json =====
[
  {
    "name": "Assurland Auto",
    "advertiser": "Assurland"
  },
  {
    "name": "Cofidis",
    "advertiser": "Cofidis"
  },
  {
    "name": "Credit Dispo",
    "advertiser": "White Label"
  },
  {
    "name": "We sur Auto",
    "advertiser": "We sur Auto"
  },
  {
    "name": "X trade",
    "advertiser": "X trade"
  },
  {
    "name": "adoucisseur d'eau",
    "advertiser": "adoucisseur d'eau"
  },
  {
    "name": "Ascenseur Maison",
    "advertiser": "White Label"
  },
  {
    "name": "Assurland Assurance RC Pro B2B",
    "advertiser": "Assurland"
  },
  {
    "name": "Commercial Cleaning FR",
    "advertiser": "White Label"
  },
  {
    "name": "Distributeur automatique",
    "advertiser": "White Label"
  },
  {
    "name": "Garantie Decenale",
    "advertiser": "White Label"
  },
  {
    "name": "Mergers & Acquisitions // Fusac",
    "advertiser": "White Label"
  },
  {
    "name": "Prevoyance B2B",
    "advertiser": "White Label"
  },
  {
    "name": "Telecoms providers",
    "advertiser": "White Label"
  },
  {
    "name": "Ticket Restaurant FR",
    "advertiser": "Edenred"
  },
  {
    "name": "Tracking FR",
    "advertiser": "White Label"
  },
  {
    "name": "voiture",
    "advertiser": "White Label"
  },
  {
    "name": "Water Coolers",
    "advertiser": "White Label"
  },
  {
    "name": "website designer",
    "advertiser": "White Label"
  },
  {
    "name": "Ulys",
    "advertiser": "Ulys"
  },
  {
    "name": "volkswagen",
    "advertiser": "volkswagen"
  },
  {
    "name": "Allianz Auto FR",
    "advertiser": "Allianz"
  },
  {
    "name": "Allianz MRH",
    "advertiser": "Allianz"
  },
  {
    "name": "Allianz sante",
    "advertiser": "Allianz"
  },
  {
    "name": "Arts et fenetres",
    "advertiser": "White Label"
  },
  {
    "name": "Comparateur mutuelle",
    "advertiser": "White Label"
  },
  {
    "name": "ikki sante",
    "advertiser": "Ikki"
  },
  {
    "name": "Investiment immobilier",
    "advertiser": "White Label"
  },
  {
    "name": "Isolation",
    "advertiser": "White Label"
  },
  {
    "name": "ITE",
    "advertiser": "ITE"
  },
  {
    "name": "Monte Escalier",
    "advertiser": "White Label"
  },
  {
    "name": "PER",
    "advertiser": "White Label"
  },
  {
    "name": "Radiateur Electrique",
    "advertiser": "White Label"
  },
  {
    "name": "Sodedif santÃ©",
    "advertiser": "Sodedif santÃ©"
  },
  {
    "name": "Chez les seniors obseques",
    "advertiser": "White Label"
  },
  {
    "name": "Prevoyance",
    "advertiser": "Prevoyance"
  },
  {
    "name": "Comme J'aime",
    "advertiser": "Comme J'aime"
  },
  {
    "name": "Credit mini taux",
    "advertiser": "White Label"
  },
  {
    "name": "Mateva",
    "advertiser": "Mateva"
  },
  {
    "name": "Melia Mutuelle",
    "advertiser": "Melia Mutuelle"
  },
  {
    "name": "Agos",
    "advertiser": "Agos"
  },
  {
    "name": "Arquati",
    "advertiser": "Arquati"
  },
  {
    "name": "Attiva Risparmia Enel",
    "advertiser": "Enel"
  },
  {
    "name": "Bagnitaliani",
    "advertiser": "White Label"
  },
  {
    "name": "BNT",
    "advertiser": "BNT"
  },
  {
    "name": "Citroen",
    "advertiser": "Citroen"
  },
  {
    "name": "Climatizzatore",
    "advertiser": "White Label"
  },
  {
    "name": "Dam Service Tim",
    "advertiser": "Tim"
  },
  {
    "name": "Depuragreen",
    "advertiser": "Depuragreen"
  },
  {
    "name": "Fastweb",
    "advertiser": "Fastweb"
  },
  {
    "name": "Febal Casa",
    "advertiser": "Febal Casa"
  },
  {
    "name": "Intelligenza artificiale",
    "advertiser": "White Label"
  },
  {
    "name": "Lenergy",
    "advertiser": "Lenergy"
  },
  {
    "name": "Movenzia Panda",
    "advertiser": "Movenzia"
  },
  {
    "name": "Murprotec ES",
    "advertiser": "Murprotect"
  },
  {
    "name": "Murprotec IT",
    "advertiser": "Murprotect"
  },
  {
    "name": "Nielsen",
    "advertiser": "Nielsen"
  },
  {
    "name": "Remail Docce",
    "advertiser": "White Label"
  },
  {
    "name": "Satispay",
    "advertiser": "Satispay"
  },
  {
    "name": "Studium",
    "advertiser": "White Label"
  },
  {
    "name": "Verisure IT",
    "advertiser": "Verisure"
  },
  {
    "name": "Wallstreet english",
    "advertiser": "Wallstreet english"
  },
  {
    "name": "Svenson",
    "advertiser": "Svenson"
  },
  {
    "name": "Accounting ES",
    "advertiser": "White Label"
  },
  {
    "name": "Commercial Cleaning",
    "advertiser": "White Label"
  },
  {
    "name": "Fuel Card - ES",
    "advertiser": "White Label"
  },
  {
    "name": "Merchant Service",
    "advertiser": "White Label"
  },
  {
    "name": "Tracking ES",
    "advertiser": "White Label"
  },
  {
    "name": "Miatel",
    "advertiser": "Miatel"
  },
  {
    "name": "Sanitas",
    "advertiser": "Sanitas"
  },
  {
    "name": "Endesa",
    "advertiser": "Endesa"
  },
  {
    "name": "Ricoh Print ES",
    "advertiser": "Ricoh"
  },
  {
    "name": "Caixa research CPM",
    "advertiser": "Caixa"
  },
  {
    "name": "Justalia",
    "advertiser": "Justalia"
  },
  {
    "name": "aldeas infantiles",
    "advertiser": "aldeas infantiles"
  },
  {
    "name": "Clinica Baviera",
    "advertiser": "Clinica Baviera"
  },
  {
    "name": "dacia",
    "advertiser": "Dacia"
  },
  {
    "name": "Dacia",
    "advertiser": "Dacia"
  },
  {
    "name": "FlexiCar",
    "advertiser": "FlexiCar"
  },
  {
    "name": "Lowi",
    "advertiser": "Lowi"
  },
  {
    "name": "Melia Hotels CPM - ES",
    "advertiser": "Melia Hotels"
  },
  {
    "name": "Movistar Prosegur Alarmas",
    "advertiser": "Movistar Prosegur"
  },
  {
    "name": "Movistar+ CPC",
    "advertiser": "Movistar+"
  },
  {
    "name": "naturgy",
    "advertiser": "naturgy"
  },
  {
    "name": "Northgate Particulares",
    "advertiser": "Northgate"
  },
  {
    "name": "para y compara",
    "advertiser": "White Label"
  },
  {
    "name": "Repsol EnergÃ­a y Gas",
    "advertiser": "Repsol"
  },
  {
    "name": "Sanitas Dental",
    "advertiser": "Sanitas"
  },
  {
    "name": "Securitas CPM",
    "advertiser": "Securitas Direct"
  },
  {
    "name": "Securitas Direct ES",
    "advertiser": "Securitas Direct"
  },
  {
    "name": "Tarifalo Solar",
    "advertiser": "Tarifalo Solar"
  },
  {
    "name": "Veci",
    "advertiser": "Veci"
  },
  {
    "name": "Ariel Caldaie",
    "advertiser": "Ariel Caldaie"
  },
  {
    "name": "Banklider Home",
    "advertiser": "Banklider"
  },
  {
    "name": "Banklider Paneles Solares",
    "advertiser": "Banklider"
  },
  {
    "name": "Badkamerrenoveren",
    "advertiser": "Badkamerrenoveren"
  },
  {
    "name": "Capitall",
    "advertiser": "Capitall"
  },
  {
    "name": "Dakreiniging",
    "advertiser": "Dakreiniging"
  },
  {
    "name": "dakrenovatie",
    "advertiser": "dakrenovatie"
  },
  {
    "name": "Helan Hospitalia",
    "advertiser": "Helan Hospitalia"
  },
  {
    "name": "IBIS BENL",
    "advertiser": "Ibis"
  },
  {
    "name": "Laadpalen",
    "advertiser": "Laadpalen"
  },
  {
    "name": "Nomad",
    "advertiser": "Nomad"
  },
  {
    "name": "Panneaux Solaires",
    "advertiser": "White Label"
  },
  {
    "name": "Warmtepomp",
    "advertiser": "White Label"
  },
  {
    "name": "Zonnepanelen BENL",
    "advertiser": "Zonnepanelen"
  },
  {
    "name": "Adeslas",
    "advertiser": "Adeslas"
  },
  {
    "name": "Adeslas",
    "advertiser": "Adeslas"
  },
  {
    "name": "Aquaservice",
    "advertiser": "Aquaservice"
  },
  {
    "name": "Asisa Decesos",
    "advertiser": "Asisa"
  },
  {
    "name": "DKV Decesos",
    "advertiser": "DKV"
  },
  {
    "name": "Iberdrola",
    "advertiser": "Iberdrola"
  },
  {
    "name": "Preventiva",
    "advertiser": "Preventiva"
  },
  {
    "name": "Santa Lucia",
    "advertiser": "Santa Lucia"
  },
  {
    "name": "Revolut",
    "advertiser": "Revolut"
  },
  {
    "name": "Borne Recharge",
    "advertiser": "White Label"
  },
  {
    "name": "Business Alarm",
    "advertiser": "White Label"
  },
  {
    "name": "cartes cadeaux",
    "advertiser": "White Label"
  },
  {
    "name": "Company Car",
    "advertiser": "White Label"
  },
  {
    "name": "Copiers And Printers",
    "advertiser": "White Label"
  },
  {
    "name": "Mutuelle FR",
    "advertiser": "White Label"
  },
  {
    "name": "Vending Machines",
    "advertiser": "White Label"
  },
  {
    "name": "Allianz Coche",
    "advertiser": "Allianz"
  },
  {
    "name": "Investiment immobilier",
    "advertiser": "White Label"
  },
  {
    "name": "Orange maison protegee",
    "advertiser": "White Label"
  },
  {
    "name": "Primaliance",
    "advertiser": "White Label"
  },
  {
    "name": "Sector Alarm",
    "advertiser": "White Label"
  },
  {
    "name": "April Assurance",
    "advertiser": "April"
  },
  {
    "name": "Assurance ObsÃ¨ques",
    "advertiser": "White Label"
  },
  {
    "name": "Canal plus B2B",
    "advertiser": "White Label"
  },
  {
    "name": "Culligan Adoucisseur",
    "advertiser": "Culligan"
  },
  {
    "name": "Mobility Fleet",
    "advertiser": "White Label"
  },
  {
    "name": "Verisure FR",
    "advertiser": "Verisure"
  },
  {
    "name": "Alfa Romeo Stelvio",
    "advertiser": "Alfa Romeo"
  },
  {
    "name": "amazon",
    "advertiser": "White Label"
  },
  {
    "name": "Audifonos",
    "advertiser": "White Label"
  },
  {
    "name": "Energia 3c",
    "advertiser": "Energia 3c"
  },
  {
    "name": "Equity Release",
    "advertiser": "White Label"
  },
  {
    "name": "Groene Energie",
    "advertiser": "Groene Energie"
  },
  {
    "name": "TelePass",
    "advertiser": "TelePass"
  },
  {
    "name": "Unipegasso",
    "advertiser": "Unipegasso"
  },
  {
    "name": "Acqualife IT",
    "advertiser": "Acqualife"
  },
  {
    "name": "Cartel de coches",
    "advertiser": "Cartel de coches"
  },
  {
    "name": "Pharmacy2U",
    "advertiser": "Pharmacy2U"
  },
  {
    "name": "Help by windows",
    "advertiser": "White Label"
  },
  {
    "name": "Accounting software ES",
    "advertiser": "White Label"
  },
  {
    "name": "Fuel Cards ES",
    "advertiser": "White Label"
  },
  {
    "name": "Tracking GÃ©olocalisation ES",
    "advertiser": "White Label"
  },
  {
    "name": "EF Cpm",
    "advertiser": "EF"
  },
  {
    "name": "Linea Directa",
    "advertiser": "Linea Directa"
  },
  {
    "name": "Medicos sin fronteras",
    "advertiser": "Medicos sin fronteras"
  },
  {
    "name": "OCU",
    "advertiser": "OCU"
  },
  {
    "name": "Ok Mobility",
    "advertiser": "Ok Mobility"
  },
  {
    "name": "Sicor Alarmas",
    "advertiser": "Sicor"
  },
  {
    "name": "Eni Plenitud Fotovoltaico",
    "advertiser": "Eni Plenitud"
  },
  {
    "name": "Air ConditionnÃ© BENL",
    "advertiser": "White Label"
  },
  {
    "name": "Decesos Marca Blanca",
    "advertiser": "White Label"
  },
  {
    "name": "Helvetia",
    "advertiser": "Helvetia"
  },
  {
    "name": "Olio frantoio",
    "advertiser": "Olio frantoio"
  },
  {
    "name": "Ricoh Docuware",
    "advertiser": "Ricoh"
  },
  {
    "name": "Yooz CPM",
    "advertiser": "Yooz"
  },
  {
    "name": "pompe a chaleur",
    "advertiser": "White Label"
  },
  {
    "name": "Costa Croisieres",
    "advertiser": "Costa Croisieres"
  },
  {
    "name": "Gift Vouchers",
    "advertiser": "White Label"
  },
  {
    "name": "daikin",
    "advertiser": "daikin"
  },
  {
    "name": "mutuelle senior immediate devis",
    "advertiser": "White Label"
  },
  {
    "name": "afi sante",
    "advertiser": "afi sante"
  },
  {
    "name": "Banque et credit",
    "advertiser": "White Label"
  },
  {
    "name": "Piscine",
    "advertiser": "White Label"
  },
  {
    "name": "Telepass end to end CPL",
    "advertiser": "Energia 3c"
  },
  {
    "name": "Eni Plenitude",
    "advertiser": "Eni Plenitude"
  },
  {
    "name": "piu finestre",
    "advertiser": "White Label"
  },
  {
    "name": "Accounting Software",
    "advertiser": "White Label"
  },
  {
    "name": "Tracking // GÃ©olocalisation",
    "advertiser": "White Label"
  },
  {
    "name": "cear",
    "advertiser": "Cear"
  },
  {
    "name": "Divina Pastora Salud",
    "advertiser": "Divina Pastora"
  },
  {
    "name": "Linea directa CPM",
    "advertiser": "Linea directa"
  },
  {
    "name": "Optica 2000",
    "advertiser": "Optica 2000"
  },
  {
    "name": "renault trafic",
    "advertiser": "renault trafic"
  },
  {
    "name": "DKV Integral",
    "advertiser": "DKV"
  },
  {
    "name": "FuneCap",
    "advertiser": "FuneCap"
  },
  {
    "name": "Occhiali24",
    "advertiser": "Occhiali24"
  },
  {
    "name": "leapmotor",
    "advertiser": "leapmotor"
  },
  {
    "name": "Europcar",
    "advertiser": "Europcar"
  },
  {
    "name": "Goldcar",
    "advertiser": "Goldcar"
  },
  {
    "name": "Gafas Steiner",
    "advertiser": "Gafas Steiner"
  },
  {
    "name": "clubmed",
    "advertiser": "clubmed"
  },
  {
    "name": "Genci",
    "advertiser": "Genci"
  },
  {
    "name": "landrover",
    "advertiser": "landrover"
  },
  {
    "name": "decathlon",
    "advertiser": "decathlon"
  },
  {
    "name": "FundaciÃ³n Caixa",
    "advertiser": "FundaciÃ³n Caixa"
  },
  {
    "name": "Climatisation",
    "advertiser": "White Label"
  },
  {
    "name": "Depiltech",
    "advertiser": "Depiltech"
  },
  {
    "name": "metlife",
    "advertiser": "metlife"
  },
  {
    "name": "rachatcredit",
    "advertiser": "White Label"
  },
  {
    "name": "BNL",
    "advertiser": "White Label"
  },
  {
    "name": "Energia Guida Gratuita",
    "advertiser": "White Label"
  },
  {
    "name": "Sicor",
    "advertiser": "White Label"
  },
  {
    "name": "Weekend desk",
    "advertiser": "Weekend desk"
  },
  {
    "name": "OCASO",
    "advertiser": "OCASO"
  },
  {
    "name": "DS AUTO",
    "advertiser": "DS AUTO"
  },
  {
    "name": "IDA",
    "advertiser": "IDA"
  },
  {
    "name": "Epargne",
    "advertiser": "Ã‰pargne&Retraite"
  },
  {
    "name": "mutuelle integrale",
    "advertiser": "White Label"
  },
  {
    "name": "assurance animaux",
    "advertiser": "White Label"
  },
  {
    "name": "Buoni Pasto Restaurant",
    "advertiser": "Edenred"
  },
  {
    "name": "Business alarm",
    "advertiser": "White Label"
  },
  {
    "name": "carte restaurant",
    "advertiser": "White Label"
  },
  {
    "name": "Diesel Emissions Claims",
    "advertiser": "Diesel Claim"
  },
  {
    "name": "EdenRed",
    "advertiser": "Edenred"
  },
  {
    "name": "Energy Supplier",
    "advertiser": "White Label"
  },
  {
    "name": "EPOS - FR",
    "advertiser": "White Label"
  },
  {
    "name": "Fraking Machine",
    "advertiser": "White Label"
  },
  {
    "name": "Magnet Kitchen",
    "advertiser": "Magnet"
  },
  {
    "name": "Sell my car",
    "advertiser": "Car wow"
  },
  {
    "name": "TimVision",
    "advertiser": "Tim"
  },
  {
    "name": "Alarma Segura",
    "advertiser": "White Label"
  },
  {
    "name": "Aseguramos decesos",
    "advertiser": "Aseguramos online"
  },
  {
    "name": "B100 CPM",
    "advertiser": "B100"
  },
  {
    "name": "Masterclass CPM",
    "advertiser": "Digital Group"
  },
  {
    "name": "AutoSecure",
    "advertiser": "White Label"
  },
  {
    "name": "British Gas",
    "advertiser": "British Gas"
  },
  {
    "name": "Car Finance Claim",
    "advertiser": "White Label"
  },
  {
    "name": "Knight knox",
    "advertiser": "Knight knox"
  },
  {
    "name": "North Fox Property Axiom",
    "advertiser": "North Fox Property"
  },
  {
    "name": "PiperDrive",
    "advertiser": "PiperDrive"
  },
  {
    "name": "Shutterly",
    "advertiser": "Shutterly"
  },
  {
    "name": "Hello Fresh",
    "advertiser": "Hello Fresh"
  },
  {
    "name": "Caser General",
    "advertiser": "Caser Seguros"
  },
  {
    "name": "Kpark",
    "advertiser": "Kpark"
  },
  {
    "name": "InterFlora",
    "advertiser": "InterFlora"
  },
  {
    "name": "Toyota",
    "advertiser": "Toyota"
  },
  {
    "name": "Opera San Francisco",
    "advertiser": "Opera San Francesco"
  },
  {
    "name": "Claudie Pierlot",
    "advertiser": "Claudie Pierlot"
  },
  {
    "name": "Aliexpress",
    "advertiser": "Aliexpress"
  },
  {
    "name": "Douche senior",
    "advertiser": "White Label"
  },
  {
    "name": "Expert assur Mutuelle",
    "advertiser": "White Label"
  },
  {
    "name": "Car wow",
    "advertiser": "Car wow"
  },
  {
    "name": "Grohe",
    "advertiser": "Grohe"
  },
  {
    "name": "iCompario B2B",
    "advertiser": "White Label"
  },
  {
    "name": "MG Auto",
    "advertiser": "MG Auto"
  },
  {
    "name": "windows recycling",
    "advertiser": "White Label"
  },
  {
    "name": "Save energy",
    "advertiser": "White Label"
  },
  {
    "name": "MÃ¡sMovil",
    "advertiser": "MÃ¡sMovil"
  },
  {
    "name": "Movistar+ CPC",
    "advertiser": "Movistar"
  },
  {
    "name": "Ariel Clima",
    "advertiser": "White Label"
  },
  {
    "name": "HomePanda",
    "advertiser": "HomePanda"
  },
  {
    "name": "Birchmore Axiom",
    "advertiser": "White Label"
  },
  {
    "name": "Hillarys",
    "advertiser": "Hillarys"
  },
  {
    "name": "Medical Negligence Experts",
    "advertiser": "White Label"
  },
  {
    "name": "Wickes Kitchen",
    "advertiser": "White Label"
  },
  {
    "name": "leclerc energies",
    "advertiser": "leclerc energies"
  },
  {
    "name": "Sabadell",
    "advertiser": "Sabadell"
  },
  {
    "name": "Diblafe",
    "advertiser": "Diblafe"
  },
  {
    "name": "Vodafone",
    "advertiser": "Vodafone"
  },
  {
    "name": "LaFuma",
    "advertiser": "LaFuma"
  },
  {
    "name": "Bmw IX",
    "advertiser": "Bmw"
  },
  {
    "name": "NovaLuz",
    "advertiser": "NovaLuz"
  },
  {
    "name": "Apicil",
    "advertiser": "Apicil"
  },
  {
    "name": "ENGIE my power",
    "advertiser": "ENGIE my power"
  },
  {
    "name": "people & baby",
    "advertiser": "people & baby"
  },
  {
    "name": "Volvo",
    "advertiser": "Volvo"
  },
  {
    "name": "Photovoltaique",
    "advertiser": "White Label"
  },
  {
    "name": "Car Insurance Quote",
    "advertiser": "White Label"
  },
  {
    "name": "Deakin's Yard",
    "advertiser": "Deakin's Yard"
  },
  {
    "name": "deal direct remortage",
    "advertiser": "White Label"
  },
  {
    "name": "Free Boiler",
    "advertiser": "White Label"
  },
  {
    "name": "Police Claims",
    "advertiser": "White Label"
  },
  {
    "name": "Radius Vehicle Tracking",
    "advertiser": "White Label"
  },
  {
    "name": "Serious injury consultants",
    "advertiser": "White Label"
  },
  {
    "name": "Unimercatorum",
    "advertiser": "Unimercatorum"
  },
  {
    "name": "Verisure - UK",
    "advertiser": "Verisure"
  },
  {
    "name": "Doddle Health",
    "advertiser": "Doddle Health"
  },
  {
    "name": "Fuel Card - UK",
    "advertiser": "White Label"
  },
  {
    "name": "National Disrepair Claims",
    "advertiser": "White Label"
  },
  {
    "name": "Nify fifty",
    "advertiser": "Nify fifty"
  },
  {
    "name": "Amazon Code",
    "advertiser": "White Label"
  },
  {
    "name": "Cruz Roja",
    "advertiser": "Cruz Roja"
  },
  {
    "name": "Birchmor",
    "advertiser": "White Label"
  },
  {
    "name": "ONG",
    "advertiser": "White Label"
  },
  {
    "name": "Tim Fibra",
    "advertiser": "Tim"
  },
  {
    "name": "Defensores Legales",
    "advertiser": "White Label"
  },
  {
    "name": "AirZone",
    "advertiser": "White Label"
  },
  {
    "name": "Lissac",
    "advertiser": "Lissac"
  },
  {
    "name": "Sarenza",
    "advertiser": "Sarenza"
  },
  {
    "name": "Vente a la propriete CPC",
    "advertiser": "White Label"
  },
  {
    "name": "Volotea",
    "advertiser": "Volotea"
  }
]

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\data\catalogs\databases.json =====
[
  {
    "id": "gestioncorp",
    "name": "GestionCorp",
    "geo": "ES",
    "dbType": "B2B"
  },
  {
    "id": "gestao-negocios",
    "name": "GestÃ£o NegÃ³cios",
    "geo": "PT",
    "dbType": "B2B"
  },
  {
    "id": "idee-del-giorno",
    "name": "Idee Del Giorno",
    "geo": "IT",
    "dbType": "B2C"
  },
  {
    "id": "coin-affaires",
    "name": "Coin Affaires",
    "geo": "FR",
    "dbType": "B2B"
  },
  {
    "id": "smart-deals",
    "name": "Smart Deals",
    "geo": "ES",
    "dbType": "Mixed"
  },
  {
    "id": "conso-autokoo",
    "name": "Conso-Autokoo",
    "geo": "FR",
    "dbType": "B2C"
  },
  {
    "id": "tuopinion-sms",
    "name": "TuOpinion SMS",
    "geo": "ES",
    "dbType": "B2C"
  },
  {
    "id": "gestione-impresa",
    "name": "Gestione Impresa",
    "geo": "IT",
    "dbType": "B2B"
  },
  {
    "id": "tuopinion",
    "name": "TuOpinion",
    "geo": "ES",
    "dbType": "B2C"
  },
  {
    "id": "canada",
    "name": "Canada",
    "geo": "CA",
    "dbType": "B2B"
  },
  {
    "id": "promomex",
    "name": "PromoMex",
    "geo": "MX",
    "dbType": "B2C"
  },
  {
    "id": "biz-data-hub",
    "name": "Biz Data Hub",
    "geo": "UK",
    "dbType": "B2B"
  },
  {
    "id": "argentina",
    "name": "Argentina",
    "geo": "AR",
    "dbType": "B2B"
  },
  {
    "id": "chile",
    "name": "Chile",
    "geo": "CL",
    "dbType": "B2B"
  },
  {
    "id": "world-scope-deals",
    "name": "World Scope Deals",
    "geo": "MULTI",
    "dbType": "Mixed"
  },
  {
    "id": "conso-enquete",
    "name": "Conso EnquÃªte",
    "geo": "FR",
    "dbType": "B2C"
  },
  {
    "id": "autokoo",
    "name": "Autokoo",
    "geo": "FR",
    "dbType": "B2C"
  },
  {
    "id": "markt-fusion",
    "name": "Markt Fusion",
    "geo": "BE",
    "dbType": "B2B"
  },
  {
    "id": "nexo-profesional",
    "name": "Nexo Profesional",
    "geo": "ES",
    "dbType": "B2B"
  },
  {
    "id": "brit-consumer-net",
    "name": "Brit Consumer Net",
    "geo": "UK",
    "dbType": "B2C"
  },
  {
    "id": "vida-conexao",
    "name": "Vida ConexÃ£o",
    "geo": "PT",
    "dbType": "B2C"
  },
  {
    "id": "datavision",
    "name": "Datavision",
    "geo": "FR",
    "dbType": "B2C"
  },
  {
    "id": "connessione-clienti",
    "name": "Connessione Clienti",
    "geo": "IT",
    "dbType": "B2C"
  },
  {
    "id": "rete-aziendale",
    "name": "Rete Aziendale",
    "geo": "IT",
    "dbType": "B2B"
  },
  {
    "id": "sconti-subito",
    "name": "Sconti Subito",
    "geo": "IT",
    "dbType": "B2C"
  },
  {
    "id": "solucoes-pro",
    "name": "SoluÃ§Ãµes pro",
    "geo": "PT",
    "dbType": "B2B"
  },
  {
    "id": "netherlands",
    "name": "Netherlands",
    "geo": "NL",
    "dbType": "B2B"
  },
  {
    "id": "ireland",
    "name": "Ireland",
    "geo": "IE",
    "dbType": "B2B"
  },
  {
    "id": "poland",
    "name": "Poland",
    "geo": "PL",
    "dbType": "B2B"
  },
  {
    "id": "autcon",
    "name": "Autcon",
    "geo": "FR",
    "dbType": "B2C"
  },
  {
    "id": "belgian-bazaar",
    "name": "Belgian Bazaar",
    "geo": "BE",
    "dbType": "B2C"
  },
  {
    "id": "piazza-digitale",
    "name": "Piazza Digitale",
    "geo": "IT",
    "dbType": "B2C"
  },
  {
    "id": "impresa-connect",
    "name": "Impresa Connect",
    "geo": "IT",
    "dbType": "B2B"
  },
  {
    "id": "greengo",
    "name": "Greengo",
    "geo": "IT",
    "dbType": "B2C"
  },
  {
    "id": "gestao-negocios-b2b-pt",
    "name": "GestÃ£o NegÃ³cios B2B PT",
    "geo": "PT",
    "dbType": "B2B"
  },
  {
    "id": "solucoes-pro-2",
    "name": "SoluÃ§Ãµes Pro",
    "geo": "PT",
    "dbType": "B2B"
  },
  {
    "id": "redcom",
    "name": "RedCom",
    "geo": "ES",
    "dbType": "B2B"
  },
  {
    "id": "the-coupon-party",
    "name": "The coupon party",
    "geo": "FR",
    "dbType": "B2C"
  },
  {
    "id": "synercom",
    "name": "SynerCom",
    "geo": "FR",
    "dbType": "B2B"
  }
]

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\data\catalogs\invoice_rules.json =====
[
  { "geo": "FR", "partner": "Oceads", "office": "CAR" },
  { "partner": "Feebbo", "office": "DAT" },
  { "geo": "UK", "office": "CAR" }
]

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\data\catalogs\partners.json =====
[
  {
    "name": "Adkomo",
    "invoiceOffice": "CAR"
  },
  {
    "name": "ADS Enterprise",
    "invoiceOffice": "CAR"
  },
  {
    "name": "Companeo",
    "invoiceOffice": "CAR"
  },
  {
    "name": "Dataventure (Cardata)",
    "invoiceOffice": "Internal"
  },
  {
    "name": "nova digital",
    "invoiceOffice": "CAR"
  },
  {
    "name": "Oceads",
    "invoiceOffice": "CAR"
  },
  {
    "name": "Swarmiz",
    "invoiceOffice": "CAR"
  },
  {
    "name": "TimeOne Performance",
    "invoiceOffice": "CAR"
  },
  {
    "name": "Weedoit",
    "invoiceOffice": "CAR"
  },
  {
    "name": "Across",
    "invoiceOffice": "DAT"
  },
  {
    "name": "Adpepper",
    "invoiceOffice": "DAT"
  },
  {
    "name": "Dataventure (Adventure Conseil)",
    "invoiceOffice": "Internal"
  },
  {
    "name": "Dataventure (Datawork Marketing)",
    "invoiceOffice": "Internal"
  },
  {
    "name": "Feebbo",
    "invoiceOffice": "DAT"
  },
  {
    "name": "Media Adgo",
    "invoiceOffice": "DAT"
  },
  {
    "name": "RePublish",
    "invoiceOffice": "DAT"
  },
  {
    "name": "Startend Marketing",
    "invoiceOffice": "DAT"
  },
  {
    "name": "Mailxpertise (Routing Costs)",
    "invoiceOffice": "CAR"
  },
  {
    "name": "Webdataconsulting",
    "invoiceOffice": "CAR"
  },
  {
    "name": "CleverAd",
    "invoiceOffice": "DAT"
  },
  {
    "name": "Cognetrix Global",
    "invoiceOffice": "DAT"
  },
  {
    "name": "Loud Europe",
    "invoiceOffice": "DAT"
  },
  {
    "name": "Lovvis Advertising SL",
    "invoiceOffice": "DAT"
  },
  {
    "name": "leadiya",
    "invoiceOffice": "CAR"
  },
  {
    "name": "digitalmedia",
    "invoiceOffice": "DAT"
  },
  {
    "name": "LetsRockData",
    "invoiceOffice": "DAT"
  },
  {
    "name": "Kwanko",
    "invoiceOffice": "CAR"
  }
]

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\data\catalogs\themes.json =====
[
  {
    "label": "Insurance"
  },
  {
    "label": "Home Improvement & Maintenance"
  },
  {
    "label": "Energy & Utilities"
  },
  {
    "label": "Services"
  },
  {
    "label": "Travel & Tourism"
  },
  {
    "label": "Food & Beverages"
  },
  {
    "label": "Automotive"
  },
  {
    "label": "Beauty & Personal Care"
  },
  {
    "label": "Banking & Finance"
  },
  {
    "label": "Jobs & Education"
  },
  {
    "label": "Investments & Savings"
  },
  {
    "label": "Fashion & Accessories"
  },
  {
    "label": "Health & Wellness"
  },
  {
    "label": "Home & Decoration"
  },
  {
    "label": "Hi-Tech & Gadgets"
  },
  {
    "label": "Community & Social Causes"
  },
  {
    "label": "E-commerce & Shopping"
  },
  {
    "label": "Mutuelle"
  },
  {
    "label": "Emploi & formation"
  },
  {
    "label": "Cars & vehicules"
  },
  {
    "label": "Health"
  },
  {
    "label": "Hi-Tech"
  },
  {
    "label": "Assurance"
  },
  {
    "label": "Unknown"
  },
  {
    "label": "Banking"
  },
  {
    "label": "Beauty"
  },
  {
    "label": "Culture & loisirs"
  },
  {
    "label": "Credits"
  },
  {
    "label": "Travel"
  },
  {
    "label": "Forex"
  },
  {
    "label": "Casino & Games"
  },
  {
    "label": "Travaux & entretien"
  },
  {
    "label": "Community"
  },
  {
    "label": "Defisc & investissement"
  },
  {
    "label": "Welcome Pack"
  },
  {
    "label": "Voyance"
  }
]


===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\z_reposummary\root_hooks.txt =====
===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\hooks\useCampaignFilterEngine.ts =====
// hooks/useCampaignFilterEngine.ts
'use client';

import { useMemo, useState, useTransition, useCallback } from 'react';
import type { CampaignRow } from '@/types/campaign';
import { useDebouncedValue } from '@/hooks/useDebouncedValue';
import { useNormalizedCampaignRows, type NormalizedCampaignRow } from '@/hooks/useNormalizedCampaignRows';
import { buildIndexes, type CampaignIndexes } from '@/lib/indexes';
import {
  useFilterPredicates,
  type Filters as RawFilters,
  type UseFilterPredicatesResult,
} from '@/hooks/useFilterPredicates';

export type Filters = RawFilters;

export const defaultFilters: Filters = {
  q: '',
  partners: [],
  themes: [],
  databases: [],
  types: [],
  geos: [],
  dbTypes: [],
  invoiceOffices: [],
  monthRange: undefined,
  dateRange: undefined,
  priceMin: null,
  priceMax: null,
  marginSign: undefined,
};

export type UseCampaignFilterEngineResult = {
  // estado de filtros
  filters: Filters;
  setFilters: React.Dispatch<React.SetStateAction<Filters>>;
  updateFilters: (patch: Partial<Filters>) => void;
  resetFilters: () => void;

  // derivadas
  qDebounced: string;
  normalizedRows: NormalizedCampaignRow[];
  indexes: CampaignIndexes;

  // resultado
  filteredRows: NormalizedCampaignRow[];
  totals: UseFilterPredicatesResult['totals'];
  predicate: UseFilterPredicatesResult['predicate'];

  // UX
  pending: boolean; // true mientras recalculamos bajo startTransition
};

export function useCampaignFilterEngine(
  rows: CampaignRow[],
  opts?: {
    initial?: Partial<Filters>;
    debounceMs?: number;
  }
): UseCampaignFilterEngineResult {
  const debounceMs = opts?.debounceMs ?? 300;

  // 1) estado de filtros
  const [filters, setFilters] = useState<Filters>(() => ({
    ...defaultFilters,
    ...(opts?.initial || {}),
  }));

  // 2) transiciÃ³n para evitar jank en recomputos pesados
  const [pending, startTransition] = useTransition();

  // 3) debounced search
  const qDebounced = useDebouncedValue(filters.q ?? '', debounceMs);

  // 4) normalizaciÃ³n Ãºnica por fila (strings lower/trim/sin acentos + monthKey, nTextâ€¦)
  const normalizedRows = useNormalizedCampaignRows(rows);

  // 5) Ã­ndices por columna (partner/theme/database/type/geo/dbType/invoice/month)
  const indexes = useMemo<CampaignIndexes>(() => buildIndexes(normalizedRows), [normalizedRows]);

  // 6) filtros efectivos (sustituimos q por su versiÃ³n debounced)
  const effectiveFilters: Filters = useMemo(
    () => ({ ...filters, q: qDebounced }),
    [filters, qDebounced]
  );

  // 7) pasada Ãºnica con predicados + acumulaciÃ³n de totales
  const { filteredRows, totals, predicate } = useFilterPredicates({
    rows: normalizedRows,
    indexes,
    filters: effectiveFilters,
  });

  // 8) helpers de mutaciÃ³n (agrupan cambios y usan transiciÃ³n)
  const updateFilters = useCallback((patch: Partial<Filters>) => {
    startTransition(() => {
      setFilters(prev => ({ ...prev, ...patch }));
    });
  }, [startTransition]);

  const resetFilters = useCallback(() => {
    startTransition(() => setFilters(defaultFilters));
  }, [startTransition]);

  return {
    filters,
    setFilters,      // por si necesitas un control mÃ¡s fino
    updateFilters,   // recomendado para cambios desde la UI
    resetFilters,

    qDebounced,
    normalizedRows,
    indexes,

    filteredRows,
    totals,
    predicate,

    pending,
  };
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\hooks\useCatalogs.ts =====
export { useCatalogs } from '@/context/CatalogOverridesContext';

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\hooks\useDebouncedValue.ts =====
// hooks/useDebouncedValue.ts
'use client';

import { useEffect, useRef, useState } from 'react';

/**
 * Devuelve una versiÃ³n "debounced" del valor.
 * Ãštil para bÃºsquedas: evita recomputar en cada tecla.
 *
 * @param value Valor de entrada (cualquier tipo)
 * @param delay Retardo en ms (por defecto 300ms)
 */
export function useDebouncedValue<T>(value: T, delay = 300): T {
  const [debounced, setDebounced] = useState<T>(value);
  const firstRun = useRef(true);

  useEffect(() => {
    // Evita el retardo en el primer render para que la UI pinte rÃ¡pido
    if (firstRun.current) {
      firstRun.current = false;
      setDebounced(value);
      return;
    }

    const id = window.setTimeout(() => setDebounced(value), Math.max(0, delay));
    return () => window.clearTimeout(id);
  }, [value, delay]);

  return debounced;
}

export default useDebouncedValue;

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\hooks\useFilterPredicates.ts =====
// hooks/useFilterPredicates.ts
'use client';

import { useMemo } from 'react';
import type { NormalizedCampaignRow } from '@/hooks/useNormalizedCampaignRows';
import { normalizeString } from '@/lib/strings';
import {
  buildIndexes as _noopBuild, // tip aid
  filterByIndexSet,
  intersectSets,
  setForSelection,
  type CampaignIndexes,
} from '@/lib/indexes';

export type Filters = {
  // texto libre (ya puedes pasar aquÃ­ el valor "debounced")
  q?: string;

  // multi-selects
  partners?: string[];
  themes?: string[];
  databases?: string[];
  types?: string[];
  geos?: string[];
  dbTypes?: Array<'B2B' | 'B2C' | 'Mixed'>;
  invoiceOffices?: Array<'DAT' | 'CAR' | 'INT'>;

  // rangos temporales
  /** YYYY-MM inclusive */
  monthRange?: [string | null | undefined, string | null | undefined];
  /** YYYY-MM-DD inclusive (tiene prioridad sobre monthRange si ambos existen) */
  dateRange?: [string | null | undefined, string | null | undefined];

  // numÃ©ricos
  priceMin?: number | null;
  priceMax?: number | null;
  /** -1 -> negativos, 0 -> ~0, 1 -> positivos */
  marginSign?: -1 | 0 | 1;
};

export type Totals = {
  count: number;
  vSent: number;
  qty: number;
  turnover: number;
  margin: number;
  ecpm: number; // ponderado por vSent
};

export type UseFilterPredicatesResult = {
  filteredRows: NormalizedCampaignRow[];
  totals: Totals;
  /** Predicado de depuraciÃ³n (el usado en la pasada final) */
  predicate: (r: NormalizedCampaignRow) => boolean;
};

/** Util: comprueba ISO date (YYYY-MM-DD) y compara lexicogrÃ¡ficamente */
function inIsoDateRange(dateISO: string, from?: string | null, to?: string | null): boolean {
  const d = (dateISO || '').slice(0, 10);
  if (!d) return false;
  if (from && d < from) return false;
  if (to && d > to) return false;
  return true;
}

/** Genera meses YYYY-MM entre lÃ­mites (inclusive) */
function enumerateMonths(a?: string | null, b?: string | null): string[] {
  const start = (a || '').slice(0, 7);
  const end = (b || '').slice(0, 7);
  if (!start && !end) return [];
  const s = start || end;
  const e = end || start;
  if (!s || !e) return [s || e].filter(Boolean) as string[];

  const [sy, sm] = s.split('-').map(Number);
  const [ey, em] = e.split('-').map(Number);
  let y = sy, m = sm;
  const out: string[] = [];
  while (y < ey || (y === ey && m <= em)) {
    out.push(`${y.toString().padStart(4, '0')}-${m.toString().padStart(2, '0')}`);
    m++;
    if (m > 12) { m = 1; y++; }
  }
  return out;
}

/** Crea un matcher de texto: todas las palabras deben aparecer en nText */
function makeTextMatcher(q?: string): ((row: NormalizedCampaignRow) => boolean) | null {
  const norm = normalizeString(q || '');
  if (!norm) return null;
  const tokens = norm.split(/\s+/).filter(Boolean);
  if (!tokens.length) return null;
  return (row: any) => {
    const haystack: string =
      row.nText ||
      normalizeString(
        [
          row.campaign, row.advertiser, row.partner, row.theme,
          row.database, row.type, row.geo, row.invoiceOffice,
        ]
          .filter(Boolean)
          .join(' '),
      );
    for (const tk of tokens) {
      if (!haystack.includes(tk)) return false;
    }
    return true;
  };
}

function signOf(n: number): -1 | 0 | 1 {
  if (Object.is(n, -0)) return 0;
  if (Math.abs(n) < 1e-9) return 0;
  return n > 0 ? 1 : -1;
}

export function useFilterPredicates({
  rows,
  indexes,
  filters,
}: {
  rows: NormalizedCampaignRow[];
  indexes: CampaignIndexes;
  filters: Filters;
}): UseFilterPredicatesResult {
  // Memo de normalizados/estructuras derivadas de filtros
  const {
    q,
    partners, themes, databases, types, geos, dbTypes, invoiceOffices,
    dateRange, monthRange,
    priceMin, priceMax, marginSign,
  } = filters;

  const textMatcher = useMemo(() => makeTextMatcher(q), [q]);

  // 1) IntersecciÃ³n por Ã­ndices (OR dentro de cada dimensiÃ³n; AND entre dimensiones)
  const candidateIdxSet = useMemo(() => {
    // Dimensiones categÃ³ricas indexadas
    const byPartner = setForSelection(indexes.byPartner, partners);
    const byTheme = setForSelection(indexes.byTheme, themes);
    const byDatabase = setForSelection(indexes.byDatabase, databases);
    const byType = setForSelection(indexes.byType, types);
    const byGeo = setForSelection(indexes.byGeo, geos);
    const byDbType = setForSelection(indexes.byDbType, dbTypes as string[] | undefined);
    const byInv = setForSelection(indexes.byInvoiceOffice, invoiceOffices as string[] | undefined);

    // Rango por meses: union de meses -> otro set OR que intersectaremos
    let byMonth: Set<number> | null = null;
    if (!dateRange && monthRange) {
      const [mFrom, mTo] = monthRange;
      const months = enumerateMonths(mFrom, mTo);
      const monthSets = months.map((m) => indexes.byMonth.get(normalizeString(m))).filter(Boolean) as Set<number>[];
      byMonth = monthSets.length ? (monthSets.length === 1 ? monthSets[0] : (monthSets.reduce((acc, s) => {
        const out = new Set<number>(acc);
        for (const v of s) out.add(v);
        return out;
      }))) : new Set<number>();
    }

    // Si ninguna dimensiÃ³n estÃ¡ activa, devolvemos null para indicar "sin restricciÃ³n previa"
    const dims = [byPartner, byTheme, byDatabase, byType, byGeo, byDbType, byInv, byMonth];
    const hasAnyDim = dims.some((s) => s && s.size >= 0); // size>=0 permite el caso 'vacÃ­o' (que debe vaciar el resultado)
    if (!hasAnyDim) return null;

    // Si alguna dimensiÃ³n produjo set vacÃ­o -> no hay matches
    for (const s of dims) {
      if (s && s.size === 0) return new Set<number>();
    }

    // IntersecciÃ³n de todas las dimensiones activas
    const inter = intersectSets(dims.filter(Boolean) as Set<number>[]);
    return inter;
  }, [
    indexes,
    partners, themes, databases, types, geos, dbTypes, invoiceOffices,
    monthRange, dateRange,
  ]);

  // 2) Pasada final: aplica texto, rango fecha (ISO), numÃ©ricos y acumula totales
  const { filteredRows, totals, predicate } = useMemo(() => {
    const pred = (r: NormalizedCampaignRow): boolean => {
      // 2.a) pre-candidate por Ã­ndices (si existen)
      // map rows->idx: usamos posiciÃ³n actual del array
      // (candidateIdxSet === null) => no restricciÃ³n previa
      if (candidateIdxSet && candidateIdxSet.size && !candidateIdxSet.has((r as any).__rowIndex ?? -1)) {
        return false;
      }

      // 2.b) filtros de fecha (si hay dateRange tiene prioridad sobre monthRange)
      if (dateRange && (dateRange[0] || dateRange[1])) {
        if (!inIsoDateRange(r.date, dateRange[0] || undefined, dateRange[1] || undefined)) return false;
      } else if (monthRange && (monthRange[0] || monthRange[1])) {
        const month = (r as any).monthKey || (r.date || '').slice(0, 7);
        const [mFrom, mTo] = monthRange;
        const ms = enumerateMonths(mFrom, mTo);
        const want = new Set(ms.map(normalizeString));
        if (!want.has(normalizeString(month))) return false;
      }

      // 2.c) texto
      if (textMatcher && !textMatcher(r as any)) return false;

      // 2.d) numÃ©ricos
      if (priceMin != null && r.price < priceMin) return false;
      if (priceMax != null && r.price > priceMax) return false;
      if (marginSign != null) {
        const s = signOf(r.margin);
        if (s !== marginSign) return false;
      }

      return true;
    };

    const out: NormalizedCampaignRow[] = [];
    let vSent = 0, qty = 0, turnover = 0, margin = 0;

    // recorremos una sola vez
    for (let i = 0; i < rows.length; i++) {
      const r = rows[i] as any;
      // anotamos index para la comprobaciÃ³n candidateIdxSet (sin mutar el objeto â€œrealâ€)
      r.__rowIndex = i;
      if (!pred(r)) continue;
      out.push(r);
      vSent += r.vSent || 0;
      qty += r.qty || 0;
      turnover += r.turnover || 0;
      margin += r.margin || 0;
    }

    const ecpm = vSent > 0 ? (turnover / vSent) * 1000 : 0;
    const t: Totals = {
      count: out.length,
      vSent,
      qty,
      turnover: Number(turnover.toFixed(2)),
      margin: Number(margin.toFixed(2)),
      ecpm: Number(ecpm.toFixed(2)),
    };

    return { filteredRows: out as NormalizedCampaignRow[], totals: t, predicate: pred };
  }, [rows, candidateIdxSet, textMatcher, dateRange, monthRange, priceMin, priceMax, marginSign]);

  return { filteredRows, totals, predicate };
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\hooks\useNormalizedCampaignRows.ts =====
// hooks/useNormalizedCampaignRows.ts
'use client';

import { useMemo } from 'react';
import { useCampaignData } from '@/context/CampaignDataContext';
import type { RowWithIdx } from '@/types/campaign';
import { normalizeStr, normalizeForSearch, toMonthKey } from '@/lib/strings';

export type NormalizedCampaignRow = RowWithIdx & {
  norm: {
    date: string;         // "2025-07-01"
    month: string;        // "2025-07"
    campaign: string;
    advertiser: string;
    partner: string;
    theme: string;
    type: string;
    database: string;
    geo: string;
    databaseType: string;
    invoiceOffice: string;
    priceCurrency: string;
    blob: string;         // concatenaciÃ³n para bÃºsqueda rÃ¡pida
  };
};

/**
 * Devuelve las filas con campos ya normalizados para filtros/bÃºsqueda.
 * Se recalcula SOLO cuando cambian las `rows` del store.
 */
export function useNormalizedCampaignRows(): NormalizedCampaignRow[] {
  const { rows } = useCampaignData();

  const normalized = useMemo<NormalizedCampaignRow[]>(() => {
    return rows.map((r) => {
      const nCampaign      = normalizeStr(r.campaign);
      const nAdvertiser    = normalizeStr(r.advertiser);
      const nPartner       = normalizeStr(r.partner);
      const nTheme         = normalizeStr(r.theme);
      const nType          = normalizeStr(r.type);
      const nDatabase      = normalizeStr(r.database);
      const nGeo           = normalizeStr(r.geo);
      const nDbType        = normalizeStr(r.databaseType);
      const nInvoiceOffice = normalizeStr(r.invoiceOffice);
      const nCurrency      = normalizeStr(r.priceCurrency);

      // Blob para bÃºsqueda libre
      const blob = normalizeForSearch(
        [
          r.campaign,
          r.advertiser,
          r.partner,
          r.theme,
          r.type,
          r.database,
          r.geo,
          r.databaseType,
          r.invoiceOffice,
        ].join(' | ')
      );

      return {
        ...r,
        norm: {
          date: r.date,
          month: toMonthKey(r.date),
          campaign: nCampaign,
          advertiser: nAdvertiser,
          partner: nPartner,
          theme: nTheme,
          type: nType,
          database: nDatabase,
          geo: nGeo,
          databaseType: nDbType,
          invoiceOffice: nInvoiceOffice,
          priceCurrency: nCurrency,
          blob,
        },
      };
    });
  }, [rows]);

  return normalized;
}

export default useNormalizedCampaignRows;

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\hooks\useReportData.ts =====
// hooks/useReportData.ts
'use client';

import { useMemo, useState, useCallback } from 'react';
import { addDays, parseISO, format, differenceInDays } from 'date-fns';
import { useCampaignData } from '@/context/CampaignDataContext';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';
import type {
  ReportFilters,
  GroupBy,
  Metric,
  AggregateRow,
  TrendPoint,
} from '@/types/reports';

/** Entrada opcional del hook (todas las props son iniciales) */
type UseReportParams = {
  groupBy?: GroupBy;
  metric?: Metric;
  topN?: number;
  filters?: ReportFilters;
};

type TrendMetric = 'ecpm' | 'turnover' | 'margin' | 'marginPct' | 'vSent';

/** Serie para charts de lÃ­neas */
type TrendSeries = {
  data: Array<Record<string, number | string>>;
  keys: string[];
};

/** Args del generador de series unificado */
type MakeTrendArgs = {
  metric?: TrendMetric;                            // mÃ©trica a graficar
  by?: 'none' | 'database' | 'partner' | 'geo';    // agrupaciÃ³n por lÃ­nea
  topN?: number;                                   // nÂº de lÃ­neas Top
  includeOthers?: boolean;                         // incluir "Others"
  only?: string[];                                 // foco: restringe a estas claves
  bucket?: 'auto' | 'day' | 'month';               // agrupaciÃ³n temporal
};

/** Resultado del hook */
export type UseReportDataResult = {
  // estado + setters
  filters: ReportFilters;
  setFilters: (next: ReportFilters | ((prev: ReportFilters) => ReportFilters)) => void;

  groupBy: GroupBy;
  setGroupBy: (g: GroupBy) => void;

  metric: Metric;
  setMetric: (m: Metric) => void;

  topN: number;
  setTopN: (n: number) => void;

  // datos derivados
  ranking: AggregateRow[];      // Top-N ya cortado
  fullRanking: AggregateRow[];  // ranking completo (para export/paginaciÃ³n)
  ecpmTrend: TrendPoint[];      // serie temporal eCPM ponderado

  summary: {
    totals: { vSent: number; turnover: number; margin: number; ecpm: number; marginPct: number | null };
    filteredRows: number; // nÂº filas tras filtro
    groups: number;       // nÂº grupos tras agregaciÃ³n (antes de cortar TopN)
  };

  // helpers
  quickLast30: () => void;

  // generadores de series
  makeTrendSeries: (opts?: MakeTrendArgs) => TrendSeries;
  makeTurnoverSeries: (opts?: Omit<MakeTrendArgs, 'metric'>) => TrendSeries;

  // utilidades
  listAvailableKeys: (by: 'database' | 'partner' | 'geo') => string[];

  // NUEVO: agregador genÃ©rico de totales sobre el dataset filtrado (con predicado opcional)
  computeTotals: (predicate?: (row: any) => boolean) => {
    vSent: number; turnover: number; margin: number; ecpm: number; marginPct: number | null; count: number;
  };
};

const normalizeStr = (s?: string) => (s ?? '').trim();
const lc = (s?: string) => normalizeStr(s).toLowerCase();

/** Predicado de fecha inclusivo (strings ISO yyyy-mm-dd) */
function within(dateISO: string, from?: string, to?: string) {
  if (!from && !to) return true;
  if (from && dateISO < from) return false;
  if (to && dateISO > to) return false;
  return true;
}

export function useReportData(params: UseReportParams = {}): UseReportDataResult {
  const { rows } = useCampaignData();
  const { PARTNERS } = useCatalogOverrides();

  // -------- iniciales seguros
  const initialGroupBy: GroupBy = params.groupBy ?? 'database';
  const initialMetric:  Metric  = params.metric  ?? 'margin';
  const initialTopN             = Math.max(1, Math.min(50, params.topN ?? 10));
  const initialFilters: ReportFilters = params.filters ?? {};

  // -------- estado controlado
  const [groupBy, setGroupBy] = useState<GroupBy>(initialGroupBy);
  const [metric, setMetric]   = useState<Metric>(initialMetric);
  const [topN, setTopN]       = useState<number>(initialTopN);
  const [filters, setFilters] = useState<ReportFilters>(initialFilters);

  // -------- sets normalizados para filtros
  const sets = useMemo(() => {
    const toSetLC = (arr?: string[]) => new Set((arr ?? []).map((s) => lc(s)));
    const toSetUP = (arr?: string[]) => new Set((arr ?? []).map((s) => normalizeStr(s).toUpperCase()));

    const internalPartnerNamesLC = new Set(
      PARTNERS.filter((p) => p.isInternal).map((p) => lc(p.name)),
    );

    return {
      geos: toSetUP(filters.geos),
      partners: toSetLC(filters.partners),
      campaigns: toSetLC(filters.campaigns),
      advertisers: toSetLC(filters.advertisers),
      themes: toSetLC(filters.themes),
      databases: toSetLC(filters.databases),
      types: new Set(filters.types ?? []),               // union ya vÃ¡lida
      dbTypes: new Set(filters.databaseTypes ?? []),     // union ya vÃ¡lida
      onlyInternalPartners: !!filters.onlyInternalPartners,
      internalPartnerNamesLC,
    };
  }, [filters, PARTNERS]);

  // -------- 1) Filtrado fila a fila
  const filtered = useMemo(() => {
    const f = filters;
    const s = sets;

    return rows.filter((r) => {
      // fechas
      if (!within(r.date, f.from, f.to)) return false;

      // GEO
      if (s.geos.size && !s.geos.has((r.geo || '').toUpperCase())) return false;

      // Partner (incluye flag "solo internos")
      const partnerLC = lc(r.partner);
      if (s.onlyInternalPartners && !s.internalPartnerNamesLC.has(partnerLC)) return false;
      if (s.partners.size && !s.partners.has(partnerLC)) return false;

      // Campaign / Advertiser / Theme / Database
      if (s.campaigns.size && !s.campaigns.has(lc(r.campaign))) return false;
      if (s.advertisers.size && !s.advertisers.has(lc(r.advertiser))) return false;
      if (s.themes.size && !s.themes.has(lc(r.theme))) return false;
      if (s.databases.size && !s.databases.has(lc(r.database))) return false;

      // Type / DBType
      if (s.types.size && !s.types.has(r.type)) return false;
      if (s.dbTypes.size && !s.dbTypes.has(r.databaseType)) return false;

      return true;
    });
  }, [rows, filters, sets]);

  // -------- 2) KPIs globales
  const totals = useMemo(() => {
    let vSent = 0, turnover = 0, margin = 0, wEcpm = 0;

    for (const r of filtered) {
      vSent     += r.vSent || 0;
      turnover  += r.turnover || 0;
      margin    += r.margin || 0;
      wEcpm     += (r.ecpm || 0) * (r.vSent || 0);
    }
    const ecpm = vSent > 0 ? wEcpm / vSent : 0;
    const marginPct = turnover > 0 ? margin / turnover : null;

    return { vSent, turnover, margin, ecpm, marginPct };
  }, [filtered]);

  // -------- 3) AgregaciÃ³n por dimensiÃ³n (groupBy)
  const { fullRanking, groupCount } = useMemo(() => {
    type Acc = {
      key: string;
      label: string;
      vSent: number;
      turnover: number;
      margin: number;
      qty: number;
      _w: number; // peso vSent
      count: number;
    };

    const keyOf = (r: typeof filtered[number]): string => {
      switch (groupBy) {
        case 'database':    return r.database || '(unknown)';
        case 'partner':     return r.partner || '(unknown)';
        case 'campaign':    return r.campaign || '(unknown)';
        case 'advertiser':  return r.advertiser || '(unknown)';
        case 'theme':       return r.theme || '(unknown)';
        case 'geo':         return (r.geo || '(unknown)').toUpperCase();
        case 'type':        return r.type || '(unknown)';
        case 'databaseType':return r.databaseType || '(unknown)';
      }
    };

    const map = new Map<string, Acc>();
    for (const r of filtered) {
      const key = keyOf(r);
      const curr = map.get(key) ?? {
        key, label: key, vSent: 0, turnover: 0, margin: 0, qty: 0, _w: 0, count: 0,
      };
      curr.vSent     += r.vSent || 0;
      curr.turnover  += r.turnover || 0;
      curr.margin    += r.margin || 0;
      curr.qty       += r.qty || 0;
      curr._w        += r.vSent || 0;
      curr.count     += 1;
      map.set(key, curr);
    }

    const arr: AggregateRow[] = Array.from(map.values()).map(a => ({
      key: a.key,
      label: a.label,
      vSent: a.vSent,
      turnover: +a.turnover.toFixed(2),
      margin: +a.margin.toFixed(2),
      ecpm: a._w > 0 ? +((a.turnover / a._w) * 1000).toFixed(2) : 0,
      qty: a.qty,
      count: a.count,
    }));

    // ordenar por mÃ©trica y por label como desempate estable
    arr.sort((x, y) => {
      const d = (y as any)[metric] - (x as any)[metric];
      return d !== 0 ? d : x.label.localeCompare(y.label, 'es');
    });

    return { fullRanking: arr, groupCount: arr.length };
  }, [filtered, groupBy, metric]);

  // -------- 4) Top-N
  const ranking = useMemo<AggregateRow[]>(() => fullRanking.slice(0, topN), [fullRanking, topN]);

  // -------- 5) Serie temporal (eCPM ponderado por dÃ­a) [legacy: eCPM]
  const ecpmTrend = useMemo<TrendPoint[]>(() => {
    const map = new Map<string, { vSent: number; turnover: number }>();
    for (const r of filtered) {
      const key = r.date;
      const curr = map.get(key) ?? { vSent: 0, turnover: 0 };
      curr.vSent    += r.vSent || 0;
      curr.turnover += r.turnover || 0;
      map.set(key, curr);
    }
    return Array.from(map.entries())
      .map(([date, v]) => ({
        date,
        vSent: v.vSent,
        turnover: +v.turnover.toFixed(2),
        ecpm: v.vSent > 0 ? +((v.turnover / v.vSent) * 1000).toFixed(2) : 0,
      }))
      .sort((a, b) => a.date.localeCompare(b.date));
  }, [filtered]);

  // -------- Lista de claves disponibles para un agrupador (para Focus)
  const listAvailableKeys = useCallback((by: 'database' | 'partner' | 'geo'): string[] => {
    const s = new Set<string>();
    for (const r of filtered) {
      if (by === 'database') s.add((r.database || '(unknown)').trim());
      else if (by === 'partner') s.add((r.partner || '(unknown)').trim());
      else if (by === 'geo') s.add((r.geo || '(unknown)').toUpperCase());
    }
    return Array.from(s).sort((a, b) => a.localeCompare(b, 'es'));
  }, [filtered]);

  // -------- Generador de series UNIFICADO
  const makeTrendSeries = useCallback((opts?: MakeTrendArgs): TrendSeries => {
    const metric: TrendMetric = opts?.metric ?? 'turnover';
    const by = opts?.by ?? 'none';
    const includeOthers = opts?.includeOthers ?? true;
    const only = (opts?.only ?? []).map(s => s.trim()).filter(Boolean);
    const top = Math.max(1, Math.min(20, opts?.topN ?? 5));

    // bucket temporal: auto => month si rango > 45 dÃ­as
    let bucket: 'day' | 'month' = 'day';
    if (opts?.bucket === 'month') bucket = 'month';
    else if (opts?.bucket === 'day') bucket = 'day';
    else {
      // auto
      if (filtered.length > 1) {
        const min = filtered.reduce((m, r) => (r.date < m ? r.date : m), filtered[0].date);
        const max = filtered.reduce((m, r) => (r.date > m ? r.date : m), filtered[0].date);
        const days = differenceInDays(parseISO(max), parseISO(min));
        if (days > 45) bucket = 'month';
      }
    }

    const bucketKey = (d: string) => bucket === 'month'
      ? format(parseISO(d), 'yyyy-MM')
      : d;

    type Sum = { v: number; t: number; m: number };
    const keyOf = (r: typeof filtered[number]) => {
      if (by === 'database') return (r.database || '(unknown)').trim();
      if (by === 'partner')  return (r.partner || '(unknown)').trim();
      if (by === 'geo')      return (r.geo || '(unknown)').toUpperCase();
      return 'total';
    };

    if (by === 'none') {
      // una sola serie "total"
      const map = new Map<string, Sum>();
      for (const r of filtered) {
        const b = bucketKey(r.date);
        const s = map.get(b) ?? { v: 0, t: 0, m: 0 };
        s.v += r.vSent || 0;
        s.t += r.turnover || 0;
        s.m += r.margin || 0;
        map.set(b, s);
      }
      const data = Array.from(map.entries())
        .sort(([a], [b]) => a.localeCompare(b))
        .map(([date, s]) => {
          const row: Record<string, number | string> = { date };
          let val = 0;
          if (metric === 'vSent') val = s.v;
          else if (metric === 'turnover') val = +s.t.toFixed(2);
          else if (metric === 'margin') val = +s.m.toFixed(2);
          else if (metric === 'ecpm') val = s.v > 0 ? +((s.t / s.v) * 1000).toFixed(2) : 0;
          else if (metric === 'marginPct') val = s.t > 0 ? +(s.m / s.t).toFixed(6) : 0; // 0..1
          row['total'] = val;
          return row;
        });
      return { data, keys: ['total'] };
    }

    // Totales por clave (para Top-N si no hay "only")
    const totals = new Map<string, Sum>();
    for (const r of filtered) {
      const k = keyOf(r);
      const s = totals.get(k) ?? { v: 0, t: 0, m: 0 };
      s.v += r.vSent || 0;
      s.t += r.turnover || 0;
      s.m += r.margin || 0;
      totals.set(k, s);
    }

    const useOnly = only.length > 0;
    let keys: string[];
    if (useOnly) {
      const onlySet = new Set(only);
      keys = Array.from(totals.keys()).filter(k => onlySet.has(k));
      if (keys.length === 0) return { data: [], keys: [] };
    } else {
      // rankeamos por turnover acumulado
      const topKeys = Array.from(totals.entries())
        .sort((a, b) => b[1].t - a[1].t)
        .slice(0, top)
        .map(([k]) => k);
      keys = includeOthers ? [...topKeys, 'Others'] : topKeys;
    }
    const topSet = new Set(keys);

    // AgregaciÃ³n por fecha y clave (con Others si aplica)
    const dateMap = new Map<string, Map<string, Sum>>();
    const push = (d: string, k: string, add: Sum) => {
      const inner = dateMap.get(d) ?? new Map<string, Sum>();
      const s = inner.get(k) ?? { v: 0, t: 0, m: 0 };
      s.v += add.v; s.t += add.t; s.m += add.m;
      inner.set(k, s);
      dateMap.set(d, inner);
    };

    for (const r of filtered) {
      const d = bucketKey(r.date);
      const k = keyOf(r);
      const add: Sum = { v: r.vSent || 0, t: r.turnover || 0, m: r.margin || 0 };

      if (useOnly) {
        if (topSet.has(k)) push(d, k, add);
      } else {
        const seriesKey = topSet.has(k) ? k : (includeOthers ? 'Others' : null);
        if (seriesKey) push(d, seriesKey, add);
      }
    }

    const data = Array.from(dateMap.entries())
      .sort(([a], [b]) => a.localeCompare(b))
      .map(([date, inner]) => {
        const row: Record<string, number | string> = { date };
        for (const k of keys) {
          const s = inner.get(k) ?? { v: 0, t: 0, m: 0 };
          let val = 0;
          if (metric === 'vSent') val = s.v;
          else if (metric === 'turnover') val = +s.t.toFixed(2);
          else if (metric === 'margin') val = +s.m.toFixed(2);
          else if (metric === 'ecpm') val = s.v > 0 ? +((s.t / s.v) * 1000).toFixed(2) : 0;
          else if (metric === 'marginPct') val = s.t > 0 ? +(s.m / s.t).toFixed(6) : 0; // 0..1
          row[k] = val;
        }
        return row;
      });

    return { data, keys };
  }, [filtered]);

  // Compat: turnover especÃ­fico
  const makeTurnoverSeries = useCallback(
    (opts?: Omit<MakeTrendArgs, 'metric'>) =>
      makeTrendSeries({ metric: 'turnover', ...opts }),
    [makeTrendSeries]
  );

  // -------- NUEVO: agregador genÃ©rico de totales sobre el "filtered" actual
  const computeTotals = useCallback((
    predicate?: (row: typeof filtered[number]) => boolean
  ) => {
    let vSent = 0, turnover = 0, margin = 0, wEcpm = 0, count = 0;
    for (const r of filtered) {
      if (predicate && !predicate(r)) continue;
      vSent    += r.vSent || 0;
      turnover += r.turnover || 0;
      margin   += r.margin || 0;
      wEcpm    += (r.ecpm || 0) * (r.vSent || 0);
      count++;
    }
    const ecpm = vSent > 0 ? wEcpm / vSent : 0;
    const marginPct = turnover > 0 ? margin / turnover : null;
    return { vSent, turnover, margin, ecpm, marginPct, count };
  }, [filtered]);

  // -------- helper: Ãºltimos 30 dÃ­as respecto al mÃ¡ximo disponible
  const quickLast30 = useCallback(() => {
    const max = rows.reduce(
      (m, r) => (r.date > m ? r.date : m),
      rows[0]?.date ?? new Date().toISOString().slice(0, 10),
    );
    const fromDate = format(addDays(parseISO(max), -29), 'yyyy-MM-dd');
    setFilters(prev => ({ ...prev, from: fromDate, to: max }));
  }, [rows, setFilters]);

  // -------- resumen para cabeceras
  const summary = useMemo(() => ({
    totals,
    filteredRows: filtered.length,
    groups: groupCount,
  }), [totals, filtered.length, groupCount]);

  return {
    // estado
    filters, setFilters,
    groupBy, setGroupBy,
    metric, setMetric,
    topN, setTopN,

    // datos
    ranking,
    fullRanking,
    ecpmTrend,
    summary,

    // helpers y series
    quickLast30,
    makeTrendSeries,
    makeTurnoverSeries,
    listAvailableKeys,

    // utilidades nuevas
    computeTotals,
  };
}


===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\z_reposummary\root_lib.txt =====
===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\lib\campaign-calcs.ts =====
// lib/campaign-calcs.ts
import {
  findCampaignByName,
  findDatabaseByName,
  resolveInvoiceOffice,
} from '@/data/reference';

type NumLike = number | null | undefined;

function n2(v: NumLike): number {
  const n = typeof v === 'number' ? v : Number(v ?? 0);
  return Number.isFinite(n) ? n : 0;
}

export function calcDerived(input: { price: NumLike; qty: NumLike; vSent: NumLike }) {
  const price = n2(input.price);
  const qty   = Math.trunc(n2(input.qty));
  const vSent = Math.trunc(n2(input.vSent));

  const routingCosts = Number(((vSent / 1000) * 0.18).toFixed(2));
  const turnover     = Number((qty * price).toFixed(2));
  const margin       = Number((turnover - routingCosts).toFixed(2));
  const ecpm         = Number(((vSent > 0 ? (turnover / vSent) * 1000 : 0)).toFixed(2));
  const marginPct    = turnover > 0 ? Number((margin / turnover).toFixed(4)) : null;

  return { routingCosts, turnover, margin, ecpm, marginPct };
}

export function autoFromCampaign(name?: string) {
  const c = findCampaignByName(name);
  return { advertiser: c?.advertiser ?? '' };
}

export function autoFromDatabase(name?: string) {
  const db = findDatabaseByName(name);
  return { geo: db?.geo ?? '', dbType: (db?.dbType as any) ?? '' };
}

export function autoInvoiceOffice(geo?: string, partner?: string) {
  return resolveInvoiceOffice(geo || undefined, partner || undefined);
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\lib\client.ts =====
'use client';

import { createClient, SupabaseClient } from '@supabase/supabase-js';

let _client: SupabaseClient | null = null;

export function supabaseBrowser(): SupabaseClient {
  if (_client) return _client;
  const url = process.env.NEXT_PUBLIC_SUPABASE_URL!;
  const anon = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
  _client = createClient(url, anon, {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
    },
  });
  return _client;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\lib\indexes.ts =====
// lib/indexes.ts
import type { NormalizedCampaignRow } from '@/hooks/useNormalizedCampaignRows';
import { normalizeString } from '@/lib/strings';

export type ColumnIndex = Map<string, Set<number>>;

export type CampaignIndexes = {
  byPartner: ColumnIndex;
  byTheme: ColumnIndex;
  byDatabase: ColumnIndex;
  byType: ColumnIndex;
  byGeo: ColumnIndex;
  byDbType: ColumnIndex;
  byInvoiceOffice: ColumnIndex;
  byMonth: ColumnIndex; // YYYY-MM
};

/** Util: aÃ±ade un Ã­ndice a un mapa Set<number> */
function addToIndex(map: ColumnIndex, key: string | undefined, idx: number) {
  if (!key) return;
  const k = normalizeString(key);
  if (!k) return;
  let set = map.get(k);
  if (!set) {
    set = new Set<number>();
    map.set(k, set);
  }
  set.add(idx);
}

/** Deriva YYYY-MM con fallback robusto */
function toMonthKey(date: string | undefined): string | undefined {
  if (!date) return undefined;
  const s = String(date).trim();
  if (/^\d{4}-\d{2}-\d{2}$/.test(s)) return s.slice(0, 7);
  if (/^\d{4}-\d{2}$/.test(s)) return s;
  const t = new Date(s);
  if (Number.isFinite(t.getTime())) return t.toISOString().slice(0, 7);
  return undefined;
}

/** Construye todos los Ã­ndices por columna */
export function buildIndexes(rows: NormalizedCampaignRow[]): CampaignIndexes {
  const byPartner: ColumnIndex = new Map();
  const byTheme: ColumnIndex = new Map();
  const byDatabase: ColumnIndex = new Map();
  const byType: ColumnIndex = new Map();
  const byGeo: ColumnIndex = new Map();
  const byDbType: ColumnIndex = new Map();
  const byInvoiceOffice: ColumnIndex = new Map();
  const byMonth: ColumnIndex = new Map();

  rows.forEach((row, i) => {
    // leemos normalizados si existen, si no normalizamos on the fly
    const partner = (row as any).nPartner ?? row.partner;
    const theme = (row as any).nTheme ?? row.theme;
    const database = (row as any).nDatabase ?? row.database;
    const type = (row as any).nType ?? row.type;
    const geo = (row as any).nGeo ?? row.geo;
    const dbType = (row as any).nDbType ?? row.databaseType;
    const invoiceOffice = (row as any).nInvoiceOffice ?? row.invoiceOffice;
    const month = (row as any).monthKey ?? toMonthKey(row.date);

    addToIndex(byPartner, partner, i);
    addToIndex(byTheme, theme, i);
    addToIndex(byDatabase, database, i);
    addToIndex(byType, type, i);
    addToIndex(byGeo, geo, i);
    addToIndex(byDbType, dbType, i);
    addToIndex(byInvoiceOffice, invoiceOffice, i);
    addToIndex(byMonth, month, i);
  });

  return {
    byPartner,
    byTheme,
    byDatabase,
    byType,
    byGeo,
    byDbType,
    byInvoiceOffice,
    byMonth,
  };
}

/* =========================
   Set operations helpers
   ========================= */

/** IntersecciÃ³n de varios sets (optimizada por tamaÃ±o) */
export function intersectSets(sets: Array<Set<number> | undefined | null>): Set<number> {
  const filtered = sets.filter((s): s is Set<number> => !!s && s.size > 0);
  if (filtered.length === 0) return new Set<number>(); // sin restricciÃ³n -> vacÃ­o (Ãºtil para early-bail callers)
  // ordena por tamaÃ±o asc para menos iteraciones
  filtered.sort((a, b) => a.size - b.size);
  const [first, ...rest] = filtered;
  const out = new Set<number>();
  main: for (const v of first) {
    for (const s of rest) {
      if (!s.has(v)) continue main;
    }
    out.add(v);
  }
  return out;
}

/** UniÃ³n de varios sets */
export function unionSets(sets: Array<Set<number> | undefined | null>): Set<number> {
  const out = new Set<number>();
  for (const s of sets) {
    if (!s) continue;
    for (const v of s) out.add(v);
  }
  return out;
}

/** Convierte selecciÃ³n mÃºltiple en un set de Ã­ndices (OR dentro de la dimensiÃ³n) */
export function setForSelection(index: ColumnIndex, selected: string[] | undefined | null): Set<number> | null {
  const arr = (selected || []).map(normalizeString).filter(Boolean);
  if (arr.length === 0) return null; // sin restricciÃ³n
  const sets: Array<Set<number>> = [];
  for (const v of arr) {
    const s = index.get(v);
    if (s && s.size) sets.push(s);
  }
  return sets.length ? unionSets(sets) : new Set<number>(); // selecciÃ³n sin matches -> vacÃ­o
}

/** Filtra filas por un set de Ã­ndices conservando el orden de entrada */
export function filterByIndexSet<T>(rows: T[], idxSet: Set<number>): T[] {
  if (!idxSet.size) return [];
  const out: T[] = [];
  for (let i = 0; i < rows.length; i++) {
    if (idxSet.has(i)) out.push(rows[i]);
  }
  return out;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\lib\roles.ts =====
import { Role } from '@/types/auth';

export const isAdmin = (r?: Role | null) => r === 'admin';
export const isEditor = (r?: Role | null) => r === 'editor' || r === 'admin';

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\lib\strings.ts =====
// lib/strings.ts
'use client';

/**
 * Quita acentos/diacrÃ­ticos usando NFKD.
 */
export function stripDiacritics(input: string): string {
  return (input ?? '')
    .normalize('NFKD')
    .replace(/[\u0300-\u036f]/g, '');
}

/**
 * NormalizaciÃ³n base: trim + lowercase + sin diacrÃ­ticos + colapsa espacios.
 * Ãštil para: claves de Ã­ndice, comparaciones de igualdad, etc.
 */
export function normalizeStr(input?: string | null): string {
  const s = String(input ?? '')
    .trim();
  if (!s) return '';
  return stripDiacritics(s)
    .toLowerCase()
    .replace(/\s+/g, ' ');
}

/**
 * Alias para compatibilidad: varios mÃ³dulos importan `normalizeString`.
 * MantÃ©n el mismo comportamiento que `normalizeStr`.
 */
export const normalizeString = normalizeStr;

/**
 * NormalizaciÃ³n agresiva para bÃºsqueda libre:
 * - minÃºsculas, sin diacrÃ­ticos
 * - reemplaza puntuaciÃ³n por espacios
 * - colapsa espacios
 */
export function normalizeForSearch(input?: string | null): string {
  const s = String(input ?? '').trim();
  if (!s) return '';
  return stripDiacritics(s)
    .toLowerCase()
    // sustituye todo lo no alfanumÃ©rico por espacio
    .replace(/[^a-z0-9]+/gi, ' ')
    .replace(/\s+/g, ' ')
    .trim();
}

/**
 * YYYY-MM a partir de un ISO date (YYYY-MM-DD). Si no viene bien, devuelve ''.
 */
export function toMonthKey(dateISO?: string | null): string {
  const d = String(dateISO ?? '');
  if (d.length >= 7) return d.slice(0, 7);
  return '';
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\lib\auth\server.ts =====
import { cookies } from 'next/headers';
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs';

type AppUserRow = { role: 'admin' | 'editor'; is_active: boolean } | null;

export async function getSessionAndAppUser() {
  const supabase = createServerComponentClient({ cookies });
  const { data: { session } } = await supabase.auth.getSession();

  if (!session) return { session: null, appUser: null as AppUserRow };

  const { data, error } = await supabase
    .from('app_users')
    .select('role,is_active')
    .eq('user_id', session.user.id)
    .single();

  // Si no hay fila en app_users, consideramos null (caerÃ¡ en DEFAULT_ROLE en el cliente)
  const appUser: AppUserRow = error ? null : (data ?? null);

  return { session, appUser };
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\lib\supabase\admin.ts =====
import { createClient, SupabaseClient } from '@supabase/supabase-js';

/**
 * Cliente con Service Role para uso EXCLUSIVO en servidor
 * (route handlers / server actions). NO importar desde componentes cliente.
 */
let _admin: SupabaseClient | null = null;

export function supabaseAdmin(): SupabaseClient {
  if (_admin) return _admin;

  const url = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

  if (!url || !serviceKey) {
    throw new Error('Faltan variables de entorno de Supabase (URL o SERVICE_ROLE_KEY).');
  }

  _admin = createClient(url, serviceKey, {
    auth: { persistSession: false, autoRefreshToken: false },
  });
  return _admin;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\lib\supabase\client.ts =====
// lib/supabase/client.ts
import { createClient, type SupabaseClient } from '@supabase/supabase-js';

/**
 * Singleton del cliente de Supabase para el NAVEGADOR.
 * Lo creamos una vez y lo reutilizamos en todo el cliente.
 */
let _client: SupabaseClient | null = null;

export function supabaseBrowser(): SupabaseClient {
  if (_client) return _client;
  const url = process.env.NEXT_PUBLIC_SUPABASE_URL!;
  const anon = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
  _client = createClient(url, anon, {
    auth: {
      persistSession: true,
      detectSessionInUrl: true,
    },
  });
  return _client;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\lib\supabase\server.ts =====
import { cookies } from 'next/headers';
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs';

export function createServerSupabase() {
  return createServerComponentClient({ cookies });
}


===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\z_reposummary\root_public.txt =====
===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\public\dvlogo2.svg =====
<?xml version="1.0" encoding="UTF-8"?><svg id="Calque_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 600 400"><defs><style>.cls-1{fill:#fff;}.cls-2{fill:url(#DÃ©gradÃ©_sans_nom_402);}.cls-3{fill:url(#DÃ©gradÃ©_sans_nom_401);}</style><linearGradient id="DÃ©gradÃ©_sans_nom_401" x1="296.49" y1="225.66" x2="460.12" y2="62.03" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#1901ff"/><stop offset=".29" stop-color="#6418fc"/><stop offset=".59" stop-color="#ad30fa"/><stop offset=".81" stop-color="#db3ef8"/><stop offset=".91" stop-color="#ed44f8"/></linearGradient><linearGradient id="DÃ©gradÃ©_sans_nom_402" x1="178.22" y1="104.11" x2="307.43" y2="233.32" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#00e3ff"/><stop offset=".11" stop-color="#02d0ff"/><stop offset=".35" stop-color="#09a0ff"/><stop offset=".67" stop-color="#1453ff"/><stop offset="1" stop-color="#2100ff"/></linearGradient></defs><path class="cls-3" d="m335.72,184.46c.06.13.12.27.17.4l8.36-18.98h0s27.85-63.2,27.85-63.2c7.93-17.99,15.85-35.98,23.75-53.98,1.9-4.33,5.64-6.81,10.25-6.81.2,0,.41,0,.63.01,1.38.06,2.77.05,4.15.03.68,0,1.35-.01,2.03-.01h27.09s-5.41,13.08-5.41,13.08c-.17.42-.31.75-.45,1.07l-15.37,34.96c-24.29,55.27-48.59,107.54-72.88,162.81-2.68,6.1-7.88,6.76-10,6.76h-.17c-2.07-.03-7.18-.75-9.8-6.71-3.83-8.71-11.12-23.45-14.95-32.16l17.25-20.97,7.49-16.29Z"/><path class="cls-2" d="m327.5,206.38c-16.34,30.57-42.11,48.41-76.58,53-4.2.55-8.74.8-13.54.85-10.74.05-21.48.05-32.22.05h-27.28c-9.89,0-17.88-8.04-17.88-17.88v-25.88c12.56-28.7,25.13-57.29,37.84-85.93l.28,40.97v37.72c0,7.74,6.29,14.04,14.09,13.99,11.34,0,25.98-.1,30.12-.3,20.13-.95,36.32-10.14,48.06-27.33,16.98-24.93,18.13-58.1,3-84.22-12.29-21.23-30.27-31.82-55-32.32-5.3-.1-11.04-.15-17.93-.15h-.5l12.44-27.62c.2-.45.45-.9.75-1.35v-.05c2.85-4.94,8.34-7.94,14.09-7.39,19.68,1.75,37.27,8.54,52.35,20.23,18.78,14.54,31.37,33.97,37.42,57.75,7.79,30.62,4.6,59.5-9.49,85.87Z"/><path class="cls-1" d="m78.32,313.04v-23.52h8.88v60.64h-8.72v-6c-3.73,4.69-8.56,7.04-14.48,7.04-6.24,0-11.39-2.16-15.44-6.48-4.11-4.43-6.16-9.81-6.16-16.16s2.05-11.63,6.16-16c4.05-4.38,9.17-6.56,15.36-6.56,5.71,0,10.51,2.35,14.4,7.04Zm.64,15.52c0-4.05-1.28-7.47-3.84-10.24-2.56-2.83-5.89-4.24-10-4.24s-7.44,1.41-10,4.24c-2.56,2.77-3.84,6.19-3.84,10.24s1.28,7.63,3.84,10.4,5.89,4.16,10,4.16,7.44-1.39,10-4.16,3.84-6.24,3.84-10.4Z"/><path class="cls-1" d="m133.84,313.04v-6h8.48v43.12h-8.48v-5.92c-3.89,4.64-8.8,6.96-14.72,6.96-6.24,0-11.39-2.19-15.44-6.56-4.05-4.38-6.08-9.81-6.08-16.32s2.03-11.79,6.08-16c4.05-4.21,9.2-6.32,15.44-6.32,5.92,0,10.83,2.35,14.72,7.04Zm-13.52,30.08c4,0,7.33-1.41,10-4.24,2.61-2.77,3.92-6.21,3.92-10.32s-1.31-7.47-3.92-10.24c-2.67-2.83-6-4.24-10-4.24s-7.44,1.41-10,4.24c-2.56,2.77-3.84,6.22-3.84,10.32s1.28,7.54,3.84,10.32,5.89,4.16,10,4.16Z"/><path class="cls-1" d="m181.36,340.72l3.04,6.88c-3.2,2.4-7.17,3.6-11.92,3.6s-8.16-1.41-10.56-4.24-3.6-6.91-3.6-12.24v-20.16h-7.44v-7.52h7.52v-15.28h8.72v15.28h14.88v7.52h-14.88v20.32c0,5.49,2.21,8.24,6.64,8.24,2.35,0,4.88-.8,7.6-2.4Z"/><path class="cls-1" d="m225.6,313.04v-6h8.48v43.12h-8.48v-5.92c-3.89,4.64-8.8,6.96-14.72,6.96-6.24,0-11.39-2.19-15.44-6.56-4.05-4.38-6.08-9.81-6.08-16.32s2.03-11.79,6.08-16c4.05-4.21,9.2-6.32,15.44-6.32,5.92,0,10.83,2.35,14.72,7.04Zm-13.52,30.08c4,0,7.33-1.41,10-4.24,2.61-2.77,3.92-6.21,3.92-10.32s-1.31-7.47-3.92-10.24c-2.67-2.83-6-4.24-10-4.24s-7.44,1.41-10,4.24c-2.56,2.77-3.84,6.22-3.84,10.32s1.28,7.54,3.84,10.32c2.56,2.77,5.89,4.16,10,4.16Z"/><path class="cls-1" d="m264.4,337.84l12.32-30.8h9.68l-18.88,43.04h-6.4l-18.88-43.04h9.76l12.4,30.8Z"/><path class="cls-1" d="m335.2,327.76c0,1.39-.11,2.8-.32,4.24h-33.68c.64,3.47,2.17,6.21,4.6,8.24,2.43,2.03,5.67,3.04,9.72,3.04,2.45,0,5.02-.42,7.72-1.28s5-1.97,6.92-3.36l3.68,6.48c-5.39,4-11.6,6-18.64,6-7.58,0-13.32-2.22-17.24-6.64-3.92-4.43-5.88-9.76-5.88-16s2.03-11.87,6.08-16.08c4.11-4.27,9.41-6.4,15.92-6.4s11.31,1.95,15.2,5.84c3.95,3.95,5.92,9.25,5.92,15.92Zm-21.12-14.16c-3.31,0-6.12,1.03-8.44,3.08-2.32,2.06-3.8,4.76-4.44,8.12h25.12c-.38-3.36-1.69-6.06-3.96-8.12-2.27-2.05-5.03-3.08-8.28-3.08Z"/><path class="cls-1" d="m354.24,350.16h-8.8v-43.12h8.64v6.08c1.28-2.24,3.12-4,5.52-5.28,2.4-1.28,5.12-1.92,8.16-1.92,4.75,0,8.75,1.55,12,4.64,3.31,3.15,4.96,7.6,4.96,13.36v26.24h-8.88v-23.76c0-3.89-.93-6.92-2.8-9.08-1.87-2.16-4.38-3.24-7.52-3.24-3.31,0-6.02,1.16-8.12,3.48-2.11,2.32-3.16,5.32-3.16,9v23.6Z"/><path class="cls-1" d="m423.2,340.72l3.04,6.88c-3.2,2.4-7.17,3.6-11.92,3.6s-8.16-1.41-10.56-4.24c-2.4-2.83-3.6-6.91-3.6-12.24v-20.16h-7.44v-7.52h7.52v-15.28h8.72v15.28h14.88v7.52h-14.88v20.32c0,5.49,2.21,8.24,6.64,8.24,2.35,0,4.88-.8,7.6-2.4Z"/><path class="cls-1" d="m452.08,351.2c-5.76,0-10.35-1.68-13.76-5.04s-5.12-7.92-5.12-13.68v-25.44h8.8v25.36c0,3.25.89,5.84,2.68,7.76s4.25,2.88,7.4,2.88,5.68-.93,7.44-2.8c1.76-1.87,2.64-4.48,2.64-7.84v-25.36h8.88v25.44c0,5.87-1.68,10.45-5.04,13.76-3.36,3.31-8,4.96-13.92,4.96Z"/><path class="cls-1" d="m492.24,350.16h-8.8v-43.12h8.4v6.16c2.56-4.85,6.64-7.28,12.24-7.28,1.81,0,3.52.24,5.12.72l-.8,8.56c-1.44-.53-3.01-.8-4.72-.8-3.47,0-6.24,1.18-8.32,3.52-2.08,2.35-3.12,5.74-3.12,10.16v22.08Z"/><path class="cls-1" d="m557.6,327.76c0,1.39-.11,2.8-.32,4.24h-33.68c.64,3.47,2.17,6.21,4.6,8.24,2.43,2.03,5.67,3.04,9.72,3.04,2.45,0,5.02-.42,7.72-1.28s5-1.97,6.92-3.36l3.68,6.48c-5.39,4-11.6,6-18.64,6-7.58,0-13.32-2.22-17.24-6.64-3.92-4.43-5.88-9.76-5.88-16s2.03-11.87,6.08-16.08c4.11-4.27,9.41-6.4,15.92-6.4s11.31,1.95,15.2,5.84c3.95,3.95,5.92,9.25,5.92,15.92Zm-21.12-14.16c-3.31,0-6.12,1.03-8.44,3.08-2.32,2.06-3.8,4.76-4.44,8.12h25.12c-.38-3.36-1.69-6.06-3.96-8.12-2.27-2.05-5.03-3.08-8.28-3.08Z"/></svg>


===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\z_reposummary\root_scripts.txt =====
===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\scripts\build-catalogs.mjs =====
// scripts/build-catalogs.mjs
import fs from 'node:fs';
import path from 'node:path';

const ROOT = process.cwd();
const SRC_DIR = path.join(ROOT, 'data', 'catalogs');

const ensureDir = (p) => { if (!fs.existsSync(p)) fs.mkdirSync(p, { recursive: true }); };
ensureDir(SRC_DIR);

function detectDelimiter(headerLine) {
  if (headerLine.includes('\t')) return '\t';
  if (headerLine.includes(';')) return ';';
  return ',';
}
function parseCSV(str) {
  const lines = str.replace(/\r/g, '').split('\n').filter(l => l.trim() !== '');
  if (lines.length === 0) return [];
  const delim = detectDelimiter(lines[0]);
  const headers = lines[0].split(delim).map(h => h.trim());
  const rows = [];
  for (let i = 1; i < lines.length; i++) {
    const raw = lines[i];
    const parts = raw.split(delim).map(x => x.trim());
    const row = {};
    headers.forEach((h, idx) => { row[h] = (parts[idx] ?? '').trim(); });
    rows.push(row);
  }
  return rows;
}
const trimCollapse = (s) => (s || '').trim().replace(/\s+/g, ' ');

// ---- CAMPAIGNS ----
function buildCampaigns() {
  const csvPath = path.join(SRC_DIR, 'campaigns.csv');
  if (!fs.existsSync(csvPath)) { console.warn(`(info) No campaigns.csv`); return; }
  const rows = parseCSV(fs.readFileSync(csvPath, 'utf8'));

  const NAME_FIX = new Map([
    ['movistar + cpc', 'Movistar+ CPC'],
    ['inteligenza artificiale', 'Intelligenza artificiale'],
    ['national disreoair claims', 'National Disrepair Claims'],
    ['bussines alarm', 'Business alarm'],
    ['murprotect es', 'Murprotec ES'],
    ['murprotect it', 'Murprotec IT'],
    ['invesstiment immobilier', 'Investiment immobilier'],
  ]);

  const cleaned = rows
    .map(r => {
      const name = trimCollapse(r.name ?? '');
      const key = name.toLowerCase();
      return { name: NAME_FIX.get(key) ?? name, advertiser: trimCollapse(r.advertiser ?? '') };
    })
    .filter(r => r.name && r.advertiser);

  fs.writeFileSync(path.join(SRC_DIR, 'campaigns.json'), JSON.stringify(cleaned, null, 2));
  console.log(`âœ… campaigns.json (${cleaned.length})`);
}

// ---- PARTNERS ----
function buildPartners() {
  const csvPath = path.join(SRC_DIR, 'partners.csv');
  if (!fs.existsSync(csvPath)) { console.warn(`(info) No partners.csv`); return; }
  const rows = parseCSV(fs.readFileSync(csvPath, 'utf8'));

  const cleaned = rows
    .map(r => ({ name: trimCollapse(r.name ?? ''), invoiceOffice: trimCollapse(r.invoiceoffice ?? '') }))
    .filter(r => r.name && r.invoiceOffice);

  fs.writeFileSync(path.join(SRC_DIR, 'partners.json'), JSON.stringify(cleaned, null, 2));
  console.log(`âœ… partners.json (${cleaned.length})`);
}

// ---- DATABASES ----
function buildDatabases() {
  const csvPath = path.join(SRC_DIR, 'databases.csv');
  if (!fs.existsSync(csvPath)) { console.warn(`(info) No databases.csv`); return; }
  const rows = parseCSV(fs.readFileSync(csvPath, 'utf8'));

  const mapDbType = (t) => {
    const v = trimCollapse((t || '').toString()).toLowerCase();
    if (v === 'b2b') return 'B2B';
    if (v === 'b2c') return 'B2C';
    return 'Mixed'; // default seguro
  };
  const fixGeo = (g) => {
    const v = trimCollapse(g || '').toUpperCase();
    // Normalizaciones suaves (confÃ­rmame si prefieres otras):
    if (v === 'IR') return 'IE'; // Ireland
    // UK lo dejamos como 'UK' salvo que prefieras 'GB'
    return v || 'MULTI';
  };

  const uniq = new Set();
  const cleaned = [];
  for (const r of rows) {
    const name = trimCollapse(r.name ?? '');
    const geo = fixGeo(r.geo);
    const dbType = mapDbType(r.dbType);
    if (!name) continue;

    // id slug basado en name
    const base = name
      .normalize('NFKD').replace(/[\u0300-\u036f]/g, '')
      .toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '').slice(0, 60);
    let id = base || 'db';
    let n = 2; while (uniq.has(id)) id = `${base}-${n++}`;
    uniq.add(id);

    cleaned.push({ id, name, geo, dbType });
  }

  fs.writeFileSync(path.join(SRC_DIR, 'databases.json'), JSON.stringify(cleaned, null, 2));
  console.log(`âœ… databases.json (${cleaned.length})`);
}

// ---- THEMES ----
function buildThemes() {
  const csvPath = path.join(SRC_DIR, 'themes.csv');
  if (!fs.existsSync(csvPath)) { console.warn(`(info) No themes.csv`); return; }
  const rows = parseCSV(fs.readFileSync(csvPath, 'utf8'));

  // soporta cabecera "theme" o una Ãºnica columna
  const cleaned = rows
    .map(r => {
      const label = trimCollapse(r.theme ?? r[Object.keys(r)[0]] ?? '');
      return { label };
    })
    .filter(r => r.label);

  fs.writeFileSync(path.join(SRC_DIR, 'themes.json'), JSON.stringify(cleaned, null, 2));
  console.log(`âœ… themes.json (${cleaned.length})`);
}

function main() {
  buildCampaigns();
  buildPartners();
  buildDatabases();
  buildThemes();
}
main();

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\scripts\test-catalogs.mjs =====
// scripts/test-catalogs.mjs
import fs from 'node:fs';
import path from 'node:path';
import { execSync } from 'node:child_process';

const DIR = path.join(process.cwd(), 'data', 'catalogs');
const ok = (m) => console.log('âœ…', m);
const fail = (m) => { console.error('âŒ', m); process.exitCode = 1; };

const readJson = (f) => JSON.parse(fs.readFileSync(path.join(DIR, f), 'utf8'));

try {
  // 1) Genera los JSON
  execSync('node scripts/build-catalogs.mjs', { stdio: 'inherit' });

  // 2) Carga
  const campaigns = readJson('campaigns.json');
  const partners  = readJson('partners.json');
  const databases = readJson('databases.json');
  const themes    = readJson('themes.json');

  // 3) Validaciones bÃ¡sicas
  // campaigns
  if (!Array.isArray(campaigns) || campaigns.length === 0) fail('campaigns.json vacÃ­o');
  for (const r of campaigns) {
    if (!r.name?.trim() || !r.advertiser?.trim()) fail('campaign sin name/advertiser');
  }
  ok(`campaigns.json (${campaigns.length})`);

  // partners
  const OFFICES = new Set(['CAR','DAT','INT']);
  for (const p of partners) {
    if (!p.name?.trim() || !OFFICES.has(String(p.invoiceOffice).toUpperCase())) {
      fail(`partner invÃ¡lido: ${JSON.stringify(p)}`);
    }
  }
  ok(`partners.json (${partners.length})`);

  // databases
  const ids = new Set();
  for (const d of databases) {
    if (!d.id?.trim() || ids.has(d.id)) fail(`database id duplicado o vacÃ­o: ${d.id}`);
    ids.add(d.id);
    if (!d.name?.trim()) fail('database sin name');
    if (!d.dbType || !['B2B','B2C','Mixed'].includes(d.dbType)) fail(`dbType invÃ¡lido: ${d.dbType}`);
    if (!d.geo?.trim() || d.geo !== d.geo.toUpperCase()) fail(`geo debe ir en MAYÃšSCULAS: ${d.geo}`);
  }
  ok(`databases.json (${databases.length})`);

  // themes (Ãºnicos case-insensitive)
  const seen = new Set();
  for (const t of themes) {
    const label = (t.label ?? '').trim();
    if (!label) fail('theme sin label');
    const key = label.toLowerCase();
    if (seen.has(key)) fail(`theme duplicado (case-insensitive): ${label}`);
    seen.add(key);
  }
  ok(`themes.json (${themes.length})`);

  console.log('\nâœ¨ CatÃ¡logos OK');
} catch (e) {
  console.error(e);
  fail('Fallo en test-catalogs');
}


===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\z_reposummary\root_styles.txt =====
===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\styles\tw.input.css =====
/* @config "../tailwind.config.ts" */
@import "tailwindcss";

/* Solo tipografía base; nada de colores globales aquí */
@layer base {
  body {
    font-family: "Inter", ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, sans-serif;
  }
}

/* ---- Date inputs: wrapper con botón + ocultar icono nativo ---- */
@layer components {
  .date-wrap {
    position: relative;
    display: inline-flex;
    align-items: center;
  }

  .date-wrap > input[type="date"] {
    /* espacio para el botón del calendario */
    padding-right: 2.25rem;
    /* tema claro: evita el contraste duro del picker nativo oscuro */
    color-scheme: light;
  }

  /* Oculta el icono nativo SOLO cuando usamos .date-wrap */
  .date-wrap > input[type="date"]::-webkit-calendar-picker-indicator {
    opacity: 0 !important;
  }

  .date-btn {
    position: absolute;
    right: 0.5rem;
    top: 50%;
    transform: translateY(-50%);
    width: 1.25rem;
    height: 1.25rem;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border: 0;
    background: transparent;
    /* usa el token del tema en lugar de un hex duro */
    color: var(--color-text);
    opacity: 0.6;
    cursor: pointer;
    border-radius: 0.375rem; /* ~rounded-md */
  }
  .date-btn:hover { opacity: 0.85; }
  .date-btn:focus-visible {
    outline: 2px solid color-mix(in oklab, var(--color-primary) 55%, transparent);
    outline-offset: 2px;
  }
}


===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\z_reposummary\root_types.txt =====
===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\types\auth.ts =====
export type Role = 'admin' | 'editor';

export type SessionUser = {
  id: string;
  email: string | null;
  role: Role;
};

export const DEFAULT_ROLE: Role = 'editor';

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\types\campaign.ts =====
import type { DBType, InvoiceOffice } from '@/data/reference';

export type CampaignRow = {
  id: string;
  date: string;             // ISO: "2025-07-01"
  campaign: string;
  advertiser: string;
  invoiceOffice: InvoiceOffice; // 'DAT' | 'CAR' | 'INT'
  partner: string;
  theme: string;
  price: number;
  priceCurrency: 'EUR';
  type: 'CPL' | 'CPM' | 'CPC' | 'CPA';
  vSent: number;
  routingCosts: number;
  qty: number;
  turnover: number;
  margin: number;
  ecpm: number;
  database: string;
  geo: string;              // "ES", "FR", "UK", ...
  databaseType: DBType;     // 'B2B' | 'B2C' | 'Mixed'
};

// Entrada del formulario (sin id; el provider lo genera)
export type NewCampaignInput = Omit<CampaignRow, 'id'>;

// Tipo interno del store para orden estable
export type RowWithIdx = CampaignRow & { _idx: number };

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\types\reports.ts =====
// types/reports.ts
import type { DBType } from '@/data/reference';

// MÃ©tricas soportadas en Reports
export type Metric = 'turnover' | 'margin' | 'ecpm' | 'vSent';

export const METRIC_LABELS: Record<Metric, string> = {
  turnover: 'Turnover',
  margin: 'Margin',
  ecpm: 'eCPM',
  vSent: 'V Sent',
};

// Dimensiones por las que podemos agrupar el ranking / tabla
export type GroupBy =
  | 'database'
  | 'partner'
  | 'campaign'
  | 'advertiser'
  | 'theme'
  | 'geo'
  | 'type'
  | 'databaseType';

export const GROUP_LABELS: Record<GroupBy, string> = {
  database: 'Database',
  partner: 'Partner',
  campaign: 'Campaign',
  advertiser: 'Advertiser',
  theme: 'Theme',
  geo: 'GEO',
  type: 'Type',
  databaseType: 'DB Type',
};

// Filtros de alto nivel del reporte
export type ReportFilters = {
  from?: string;                 // yyyy-mm-dd (inclusive)
  to?: string;                   // yyyy-mm-dd (inclusive)
  geos?: string[];               // cÃ³digos en mayÃºsculas (ES, FR, ...)
  partners?: string[];           // nombres visibles
  campaigns?: string[];          // nombres visibles
  advertisers?: string[];        // nombres visibles
  themes?: string[];             // etiquetas
  databases?: string[];          // nombres visibles
  types?: Array<'CPL' | 'CPM' | 'CPC' | 'CPA'>;
  databaseTypes?: DBType[];      // <- tipado fuerte desde catÃ¡logos
  onlyInternalPartners?: boolean;
};

// Fila agregada (resultado de agrupar por GroupBy)
export type AggregateRow = {
  /** clave cruda (ej. nombre de database o partner) */
  key: string;
  /** etiqueta presentable (por si en el futuro mapeamos idsâ†’labels) */
  label: string;

  /** mÃ©tricas agregadas */
  vSent: number;
  turnover: number;
  margin: number;
  /** eCPM ponderado por vSent del agregado */
  ecpm: number;

  /** opcional: suma de qty cuando aplica (CPL, etc.) */
  qty?: number;

  /** nÂº de filas subyacentes en el agregado */
  count: number;
};

// Punto de serie temporal para tendencias
export type TrendPoint = {
  date: string;     // yyyy-mm-dd
  ecpm: number;     // ponderado en ese dÃ­a
  vSent: number;    // total del dÃ­a (Ãºtil para tooltips)
  turnover: number; // total del dÃ­a (Ãºtil para tooltips)
};

// Resultado calculado por el hook de datos
export type ReportData = {
  filteredCount: number;
  kpis: {
    vSent: number;
    turnover: number;
    margin: number;
    ecpm: number;         // ponderado global
    marginPct: number | null;
  };
  ranking: AggregateRow[]; // ordenado y ya cortado por TopN
  trend: TrendPoint[];     // eCPM por dÃ­a (ordenado asc)
};


===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\z_reposummary\root_utils.txt =====
===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\utils\exporters.ts =====
// utils/exporters.ts
import type { CampaignRow } from '@/types/campaign';

export type ExportFormat = 'csv-excel' | 'csv-rfc' | 'json';
export type ExportScope = 'all' | 'page';
export type ExportColumnsKind = 'visible' | 'all';

export type ColumnSpec = {
  id: string;
  label: string;
  // devuelve el valor â€œcrudoâ€ (no formateado). Puede ser string | number | null | undefined
  accessor: (r: CampaignRow) => any;
};

export type BuildRowsOpts = {
  rows: CampaignRow[];
  columns: ColumnSpec[];
  includeSummary?: boolean;
};

export function buildExportRows(opts: BuildRowsOpts): Array<Record<string, any>> {
  const { rows, columns, includeSummary } = opts;
  const out: Array<Record<string, any>> = [];

  for (const r of rows) {
    const o: Record<string, any> = {};
    for (const c of columns) {
      let v = c.accessor(r);
      // normaliza nÃºmeros (punto decimal)
      if (typeof v === 'number') v = normalizeNumber(v);
      o[c.label] = v ?? '';
    }
    out.push(o);
  }

  if (includeSummary) {
    // calculamos como en la tabla
    let vSent = 0, routing = 0, qty = 0, turnover = 0, margin = 0, wEcpm = 0;
    for (const r of rows) {
      vSent     += r.vSent || 0;
      routing   += r.routingCosts || 0;
      qty       += r.qty || 0;
      turnover  += r.turnover || 0;
      margin    += r.margin || 0;
      wEcpm     += (r.ecpm || 0) * (r.vSent || 0);
    }
    const weightedEcpm = vSent > 0 ? wEcpm / vSent : 0;
    const marginPct = turnover > 0 ? margin / turnover : null;

    const summary: Record<string, any> = {};
    if (columns.length > 0) {
      // mete "SUMMARY" en la primera columna visible y deja el resto vacÃ­o salvo agregados conocidos
      summary[columns[0].label] = 'SUMMARY';
      for (let i = 1; i < columns.length; i++) summary[columns[i].label] = '';
    }
    setIfPresent(summary, columns, 'V SENT', vSent);
    setIfPresent(summary, columns, 'ROUTING COSTS', routing);
    setIfPresent(summary, columns, 'QTY', qty);
    setIfPresent(summary, columns, 'TURNOVER', turnover);
    setIfPresent(summary, columns, 'MARGIN', margin);
    setIfPresent(summary, columns, 'MARGIN (%)', marginPct);
    setIfPresent(summary, columns, 'ECPM', weightedEcpm);

    out.unshift(summary);
  }

  return out;
}

function setIfPresent(
  row: Record<string, any>,
  cols: ColumnSpec[],
  label: string,
  val: number | null
) {
  const c = cols.find(c => c.label.toUpperCase() === label);
  if (!c) return;
  row[c.label] = val == null ? '' : normalizeNumber(val);
}

function normalizeNumber(n: number, decimals?: number) {
  // valores por defecto razonables
  const d =
    decimals ?? (Number.isInteger(n) ? 0 : 2);
  return Number(n.toFixed(d));
}

export function rowsToCSV(
  rows: Array<Record<string, any>>,
  delimiter: ';' | ','
): Blob {
  if (!rows.length) return new Blob([''], { type: 'text/csv;charset=utf-8' });

  const headers = Object.keys(rows[0]);
  const esc = (v: any) => {
    if (v == null) return '';
    const s = String(v);
    // si contiene comillas, separador o saltos de lÃ­nea -> comillado y escape ""
    if (/[",\n\r;]/.test(s) || s.includes(delimiter)) {
      return `"${s.replace(/"/g, '""')}"`;
    }
    return s;
  };

  const lines: string[] = [];
  lines.push(headers.map(h => esc(h)).join(delimiter));
  for (const r of rows) {
    lines.push(headers.map(h => esc(r[h])).join(delimiter));
  }
  const text = lines.join('\r\n');
  return new Blob([text], { type: 'text/csv;charset=utf-8' });
}

export function rowsToJSON(
  rows: Array<Record<string, any>>
): Blob {
  return new Blob([JSON.stringify(rows, null, 2)], { type: 'application/json;charset=utf-8' });
}

export function downloadBlob(blob: Blob, filename: string) {
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  a.click();
  URL.revokeObjectURL(url);
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\utils\format.ts =====
// utils/format.ts
import type { Metric } from '@/types/reports';

/** Formateadores base */
export const fmtEUR0 = new Intl.NumberFormat('es-ES', {
  style: 'currency',
  currency: 'EUR',
  maximumFractionDigits: 0,
});

export const fmtEUR2 = new Intl.NumberFormat('es-ES', {
  style: 'currency',
  currency: 'EUR',
  maximumFractionDigits: 2,
});

export const fmtINT = new Intl.NumberFormat('es-ES', {
  maximumFractionDigits: 0,
});

/** Formatea un valor en funciÃ³n de la mÃ©trica seleccionada */
export function formatByMetric(metric: Metric, value: number): string {
  if (metric === 'turnover' || metric === 'margin') return fmtEUR2.format(value || 0);
  if (metric === 'ecpm') return fmtEUR2.format(value || 0);
  return fmtINT.format(value || 0);
}

/** Y-axis tick formatter para Recharts segÃºn mÃ©trica */
export function makeYAxisTick(metric: Metric) {
  return (v: number) => {
    if (metric === 'turnover' || metric === 'margin') return compactEuro(v);
    if (metric === 'ecpm') return fmtEUR2.format(v || 0);
    return fmtINT.format(v || 0);
  };
}

/** Muestra cantidades en â‚¬ con sufijo K/M manteniendo contexto de divisa */
export function compactEuro(v: number): string {
  const n = Number(v || 0);
  const abs = Math.abs(n);
  if (abs >= 1_000_000) return `${fmtEUR0.format(n / 1_000_000)}M`;
  if (abs >= 1_000) return `${fmtEUR0.format(n / 1_000)}K`;
  return fmtEUR0.format(n);
}

/** Utilidad simple para fechas ISO (yyyy-mm-dd) */
export const toISODate = (s?: string | null) => (s || '').slice(0, 10);

// --- Back-compat: `fmtNum` usable como funciÃ³n y como `.format(...)`
type FmtNum = ((n: number) => string) & { format: (n: number) => string };

export const fmtNum: FmtNum = Object.assign(
  (n: number) => fmtINT.format(n),
  { format: (n: number) => fmtINT.format(n) }
);


===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\utils\geo.ts =====
// utils/geo.ts
export function trimCollapse(s: string) {
  return (s ?? '').trim().replace(/\s+/g, ' ');
}

export function isIsoCountry(code: string): boolean {
  const c = (code || '').toUpperCase();
  if (!/^[A-Z]{2}$/.test(c)) return false;
  try {
    const dn = new (Intl as any).DisplayNames(['en'], { type: 'region' });
    const name = dn?.of?.(c);
    return typeof name === 'string' && name && name !== c;
  } catch {
    return false;
  }
}

/** Acepta ISO-2 (ES, FR, â€¦) o MULTI. Mapea UKâ†’GB. Devuelve null si no es vÃ¡lido. */
export function normalizeGeoStrict(raw?: string): string | null {
  const g = trimCollapse(raw || '').toUpperCase();
  if (!g) return null;
  if (g === 'MULTI') return 'MULTI';
  const mapped = g === 'UK' ? 'GB' : g;
  return isIsoCountry(mapped) ? mapped : null;
}


