===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ActionsCard.tsx =====

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\AppHeader.tsx =====
'use client';

import Image from 'next/image';
import { useAuth } from '@/context/AuthContext';
import SignOutButton from '@/components/auth/SignOutButton';

export default function AppHeader() {
  const { user, role, loading } = useAuth();

  return (
    <header role="banner" className="app-header">
      <div className="bar mx-auto w-full px-3 md:px-4 lg:px-6 flex items-center justify-between gap-3">
        {/* Logo principal (SVG) */}
        <div className="flex items-center">
          <Image
            src="/dvlogo2.svg"
            alt="Dataventure"
            width={180}
            height={56}
            priority
            style={{ height: 'var(--logo-h)', width: 'auto' }}
            className="brand-logo"
          />
        </div>

        {/* Acciones */}
        <nav aria-label="Header actions" className="flex items-center gap-2">
          <button className="btn-ghost h-9 px-3" aria-label="Toggle theme">ðŸŒ“</button>

          {/* Info de usuario (solo cuando ya sabemos el estado y hay sesiÃ³n) */}
          {!loading && user && (
            <div className="hidden sm:flex items-center gap-2 pr-1">
              <span className="text-sm opacity-70">{user.email}</span>
              {role && (
                <span className="inline-flex items-center rounded-md border px-2 py-0.5 text-xs opacity-80">
                  {role}
                </span>
              )}
            </div>
          )}

          {/* BotÃ³n de cerrar sesiÃ³n solo si hay sesiÃ³n */}
          {!loading && user ? <SignOutButton /> : null}
        </nav>
      </div>
    </header>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\CampaignFilters.tsx =====
'use client';

import { useEffect, useMemo, useRef, useState } from 'react';
import Chip from '@/components/ui/Chip';
import type { Filters } from '@/hooks/useCampaignFilterEngine';

type DatePreset =
  | 'today' | 'yesterday' | 'thisWeek' | 'lastWeek'
  | 'thisMonth' | 'lastMonth' | 'last7' | 'last30' | 'custom';

export default function CampaignFilters({
  filters,
  updateFilters,
  resetFilters,
  options,
  pending = false,
  onOpenColumns,
  onOpenExport,           // â† NUEVO
  exportCount,            // â† NUEVO
}: {
  filters: Filters;
  updateFilters: (patch: Partial<Filters>) => void;
  resetFilters: () => void;
  options: {
    geos: string[];
    partners: string[];
    themes: string[];
    types: string[];
    dbTypes: Array<'B2B' | 'B2C' | 'Mixed'>;
  };
  pending?: boolean;
  onOpenColumns?: () => void;
  onOpenExport?: () => void;   // â† NUEVO
  exportCount?: number;        // â† NUEVO
}) {
  const [qDraft, setQDraft] = useState(filters.q ?? '');
  useEffect(() => { setQDraft(filters.q ?? ''); }, [filters.q]);

  // ---- helpers de fecha
  const fmtLocal = (d: Date) => {
    const y = d.getFullYear();
    const m = String(d.getMonth() + 1).padStart(2, '0');
    const day = String(d.getDate()).padStart(2, '0');
    return `${y}-${m}-${day}`;
  };
  const startOfWeek = (d: Date) => {
    const n = new Date(d.getFullYear(), d.getMonth(), d.getDate());
    const w = (n.getDay() || 7) - 1;
    n.setDate(n.getDate() - w);
    return n;
  };
  const endOfWeek = (d: Date) => {
    const s = startOfWeek(d);
    return new Date(s.getFullYear(), s.getMonth(), s.getDate() + 6);
  };
  const startOfMonth = (d: Date) => new Date(d.getFullYear(), d.getMonth(), 1);
  const endOfMonth   = (d: Date) => new Date(d.getFullYear(), d.getMonth() + 1, 0);

  const rangeForPreset = (p: Exclude<DatePreset,'custom'>): [string, string] => {
    const now = new Date();
    if (p === 'today') {
      const a = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      const s = fmtLocal(a); return [s, s];
    }
    if (p === 'yesterday') {
      const a = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1);
      const s = fmtLocal(a); return [s, s];
    }
    if (p === 'thisWeek') return [fmtLocal(startOfWeek(now)), fmtLocal(endOfWeek(now))];
    if (p === 'lastWeek') {
      const k = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7);
      return [fmtLocal(startOfWeek(k)), fmtLocal(endOfWeek(k))];
    }
    if (p === 'thisMonth') return [fmtLocal(startOfMonth(now)), fmtLocal(endOfMonth(now))];
    if (p === 'lastMonth') {
      const k = new Date(now.getFullYear(), now.getMonth() - 1, 15);
      return [fmtLocal(startOfMonth(k)), fmtLocal(endOfMonth(k))];
    }
    if (p === 'last7') {
      const a = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 6);
      const b = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      return [fmtLocal(a), fmtLocal(b)];
    }
    const a = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 29);
    const b = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    return [fmtLocal(a), fmtLocal(b)];
  };

  const startDate = filters.dateRange?.[0] ?? '';
  const endDate   = filters.dateRange?.[1] ?? '';
  const hasRange  = !!(startDate || endDate);

  const activePreset: DatePreset | null = useMemo(() => {
    if (!startDate || !endDate) return null;
    const candidates: Exclude<DatePreset,'custom'>[] = [
      'today','yesterday','thisWeek','lastWeek','thisMonth','lastMonth','last7','last30',
    ];
    for (const p of candidates) {
      const [s, e] = rangeForPreset(p);
      if (s === startDate && e === endDate) return p;
    }
    return null;
  }, [startDate, endDate]);

  function choosePreset(p: Exclude<DatePreset,'custom'> | 'custom') {
    if (p === 'custom') return;
    const [s, e] = rangeForPreset(p);
    updateFilters({ dateRange: [s, e] });
  }
  function onStartChange(v: string){ updateFilters({ dateRange: [v || null, endDate || null] }); }
  function onEndChange(v: string){ updateFilters({ dateRange: [startDate || null, v || null] }); }

  const inputRef = useRef<HTMLInputElement | null>(null);
  useEffect(() => {
    const el = inputRef.current;
    if (!el) return;
    const handle = (e: KeyboardEvent) => {
      if (e.key === 'Enter') updateFilters({ q: qDraft });
      if (e.key === 'Escape') { setQDraft(''); updateFilters({ q: '' }); }
    };
    el.addEventListener('keydown', handle);
    return () => el.removeEventListener('keydown', handle);
  }, [qDraft, updateFilters]);

  const setTypes   = (v: string) => updateFilters({ types: v === 'ALL' ? [] : [v] });
  const setGeo     = (v: string) => updateFilters({ geos: v === 'ALL' ? [] : [v] });
  const setPartner = (v: string) => updateFilters({ partners: v === 'ALL' ? [] : [v] });
  const setTheme   = (v: string) => updateFilters({ themes: v === 'ALL' ? [] : [v] });
  const setDbType  = (v: string) => updateFilters({ dbTypes: v === 'ALL' ? [] : [v as any] });

  const typeValue  = (filters.types?.[0] ?? 'ALL') as string;
  const geoValue   = (filters.geos?.[0] ?? 'ALL') as string;
  const partnerVal = (filters.partners?.[0] ?? 'ALL') as string;
  const themeVal   = (filters.themes?.[0] ?? 'ALL') as string;
  const dbTypeVal  = (filters.dbTypes?.[0] ?? 'ALL') as string;

  const activeStyle = (on: boolean): React.CSSProperties | undefined =>
    on
      ? {
          borderColor: 'var(--color-primary)',
          boxShadow: '0 0 0 2px color-mix(in oklab, var(--color-primary) 45%, transparent)',
          transition: 'box-shadow 120ms ease, border-color 120ms ease',
        }
      : undefined;

  const spinner = pending ? (
    <span className="ml-2 text-xs opacity-70" role="status" aria-live="polite">recalculandoâ€¦</span>
  ) : null;

  const startRef = useRef<HTMLInputElement | null>(null);
  const endRef   = useRef<HTMLInputElement | null>(null);
  const openPicker = (ref: React.RefObject<HTMLInputElement>) => {
    const el = ref.current;
    if (!el) return;
    // @ts-ignore
    if (el.showPicker) el.showPicker(); else el.focus();
  };

  const activeChips = useMemo(() => {
    const chips: { key: string; label: string; onClear: () => void }[] = [];
    if (qDraft.trim())      chips.push({ key: 'q',      label: `â€œ${qDraft.trim()}â€`, onClear: () => { setQDraft(''); updateFilters({ q: '' }); } });
    if (typeValue !== 'ALL')   chips.push({ key: 'type',   label: `Type: ${typeValue}`,   onClear: () => setTypes('ALL') });
    if (geoValue !== 'ALL')    chips.push({ key: 'geo',    label: `GEO: ${geoValue}`,     onClear: () => setGeo('ALL') });
    if (partnerVal !== 'ALL')  chips.push({ key: 'partner',label: `Partner: ${partnerVal}`, onClear: () => setPartner('ALL') });
    if (themeVal !== 'ALL')    chips.push({ key: 'theme',  label: `Theme: ${themeVal}`,   onClear: () => setTheme('ALL') });
    if (dbTypeVal !== 'ALL')   chips.push({ key: 'db',     label: `DB: ${dbTypeVal}`,     onClear: () => setDbType('ALL') });
    if (hasRange) {
      const label = activePreset ? presetLabel(activePreset) : `${startDate} â†’ ${endDate}`;
      chips.push({ key: 'date', label, onClear: () => updateFilters({ dateRange: [null, null] }) });
    }
    return chips;
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [qDraft, typeValue, geoValue, partnerVal, themeVal, dbTypeVal, startDate, endDate, hasRange, activePreset]);

  return (
    <section className="card p-4 md:p-5">
      {/* Wrapper con gap vertical controlado por --filters-row-gap */}
      <div className="filters-stack">
        {/* BÃºsqueda libre */}
        <div>
          <input
            ref={inputRef}
            placeholder="Search campaign, partner, theme, dbâ€¦"
            value={qDraft}
            onChange={(e) => { setQDraft(e.target.value); updateFilters({ q: e.target.value }); }}
            className="input w-full"
            style={activeStyle(!!qDraft.trim())}
          />
          {spinner}
        </div>

        {/* Selectores rÃ¡pidos */}
        <div className="flex flex-wrap gap-3">
          <select value={typeValue}   onChange={(e) => setTypes(e.target.value)}   className="input" style={activeStyle(typeValue !== 'ALL')}>
            <option value="ALL">Type: All</option>
            {options.types.map(t => <option key={t} value={t}>{t}</option>)}
          </select>

          <select value={geoValue}    onChange={(e) => setGeo(e.target.value)}     className="input" style={activeStyle(geoValue !== 'ALL')}>
            <option value="ALL">GEO: All</option>
            {options.geos.map(g => <option key={g} value={g}>{g}</option>)}
          </select>

          <select value={partnerVal}  onChange={(e) => setPartner(e.target.value)} className="input" style={activeStyle(partnerVal !== 'ALL')}>
            <option value="ALL">Partner: All</option>
            {options.partners.map(x => <option key={x} value={x}>{x}</option>)}
          </select>

          <select value={themeVal}    onChange={(e) => setTheme(e.target.value)}   className="input" style={activeStyle(themeVal !== 'ALL')}>
            <option value="ALL">Theme: All</option>
            {options.themes.map(x => <option key={x} value={x}>{x}</option>)}
          </select>

          <select value={dbTypeVal}   onChange={(e) => setDbType(e.target.value)}  className="input" style={activeStyle(dbTypeVal !== 'ALL')}>
            <option value="ALL">DB Type: All</option>
            {options.dbTypes.map(x => <option key={x} value={x}>{x}</option>)}
          </select>
        </div>

        {/* Presets de fecha */}
        <div className="flex flex-wrap items-center gap-3">
          {([
            ['today','Today'],
            ['yesterday','Yesterday'],
            ['last7','Last 7'],
            ['last30','Last 30'],
            ['thisWeek','This week'],
            ['lastWeek','Last week'],
            ['thisMonth','This month'],
            ['lastMonth','Last month'],
            ['custom','Custom'],
          ] as [DatePreset,string][])
            .map(([key,label]) => {
              const isActive =
                (key !== 'custom' && activePreset === key) ||
                (key === 'custom' && hasRange && !activePreset);
              return (
                <Chip key={key} active={isActive} onClick={() => choosePreset(key === 'custom' ? 'custom' : key)}>
                  {label}
                </Chip>
              );
            })}
        </div>

        {/* Rango de fechas + acciones */}
        <div className="flex flex-wrap items-center gap-3 md:gap-4">
          {/* Start */}
          <div className="relative">
            <input
              ref={startRef}
              type="date"
              value={startDate}
              onChange={e => onStartChange(e.target.value)}
              className="input input-date w-40 pr-9"
              style={activeStyle(!!startDate)}
            />
            <button
              type="button"
              className="absolute inset-y-0 right-0 px-2 rounded-r-lg hover:bg-black/5 focus:outline-none focus:ring-2 focus:ring-primary/40"
              aria-label="Open start date picker"
              onClick={() => openPicker(startRef)}
            >
              <CalendarIcon />
            </button>
          </div>

          {/* End */}
          <div className="relative">
            <input
              ref={endRef}
              type="date"
              value={endDate}
              onChange={e => onEndChange(e.target.value)}
              className="input input-date w-40 pr-9"
              style={activeStyle(!!endDate)}
            />
            <button
              type="button"
              className="absolute inset-y-0 right-0 px-2 rounded-r-lg hover:bg-black/5 focus:outline-none focus:ring-2 focus:ring-primary/40"
              aria-label="Open end date picker"
              onClick={() => openPicker(endRef)}
            >
              <CalendarIcon />
            </button>
          </div>

          <div className="flex-1" />

          {/* === Acciones: Primario | divisor | Secundario === */}
          <div className="flex items-center gap-2 md:gap-3">
            {/* Grupo primario */}
            <div className="flex items-center gap-2 md:gap-3">
              <button onClick={() => updateFilters({ q: qDraft })} className="btn-primary">Apply</button>
              <button onClick={() => { setQDraft(''); resetFilters(); }} className="btn-ghost">Reset</button>
            </div>

            {/* Divisor visual */}
            <div className="h-6 w-px bg-[--color-border] mx-1 md:mx-2" aria-hidden />

            {/* Grupo secundario */}
            <div className="flex items-center gap-2 md:gap-2.5">
              <button
                type="button"
                className="btn-ghost text-sm px-3 py-1.5"
                aria-haspopup="dialog"
                title="Show/Hide columns"
                onClick={() => onOpenColumns?.()}
              >
                Columnsâ€¦
              </button>

              {onOpenExport && (
                <button
                  type="button"
                  className="text-sm px-3 py-1.5 rounded-md border border-[--color-border] hover:border-[--color-primary] hover:bg-[color-mix(in_oklab,var(--color-primary)_12%,transparent)] transition-colors inline-flex items-center gap-1.5"
                  aria-haspopup="dialog"
                  title="Export current view"
                  onClick={() => onOpenExport?.()}
                >
                  <DownloadIcon />
                  <span>Export</span>
                  {typeof exportCount === 'number' && exportCount > 0 && (
                    <span className="ml-0.5 text-[10px] opacity-70">({exportCount})</span>
                  )}
                </button>
              )}
            </div>
          </div>
        </div>

        {/* Chips activos */}
        {activeChips.length > 0 && (
          <div className="pt-2 md:pt-3 border-t border-[--color-border] flex flex-wrap items-center gap-2">
            {activeChips.map(c => (
              <span
                key={c.key}
                className="inline-flex items-center gap-2 rounded-full border border-[--color-border] bg-[color:var(--color-surface-2)] px-3 py-1 text-xs"
              >
                {c.label}
                <button
                  type="button"
                  aria-label={`Clear ${c.key}`}
                  className="rounded-full px-2 py-[2px] hover:bg-black/5"
                  onClick={c.onClear}
                >
                  Ã—
                </button>
              </span>
            ))}
            <button
              className="ml-2 text-xs underline decoration-dotted hover:opacity-80"
              onClick={() => { setQDraft(''); resetFilters(); }}
            >
              Clear all
            </button>
          </div>
        )}
      </div>
    </section>
  );
}

function CalendarIcon() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
      width="16" height="16" fill="none" stroke="currentColor"
      strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" aria-hidden="true"
    >
      <rect x="3" y="4" width="18" height="18" rx="2" ry="2"/>
      <line x1="16" y1="2" x2="16" y2="6"/>
      <line x1="8" y1="2" x2="8" y2="6"/>
      <line x1="3" y1="10" x2="21" y2="10"/>
    </svg>
  );
}

function DownloadIcon() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
      width="14" height="14" fill="none" stroke="currentColor"
      strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" aria-hidden="true"
    >
      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
      <path d="M7 10l5 5 5-5"/>
      <path d="M12 15V3"/>
    </svg>
  );
}

function presetLabel(p: Exclude<DatePreset,'custom'>) {
  switch (p) {
    case 'today': return 'Today';
    case 'yesterday': return 'Yesterday';
    case 'last7': return 'Last 7';
    case 'last30': return 'Last 30';
    case 'thisWeek': return 'This week';
    case 'lastWeek': return 'Last week';
    case 'thisMonth': return 'This month';
    case 'lastMonth': return 'Last month';
  }
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\CampaignKpis.tsx =====
'use client';

import { CampaignRow } from '@/types/campaign';

type Props = { data: CampaignRow[] };

const fmtEUR = new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' });
const fmtInt = new Intl.NumberFormat('es-ES');

export default function CampaignKpis({ data }: Props) {
  const total = data.length;

  let vSent = 0, turnover = 0, margin = 0;
  for (const r of data) {
    vSent   += r.vSent || 0;
    turnover += r.turnover || 0;
    margin  += r.margin || 0;
  }

  // eCPM ponderado por vSent (mÃ¡s representativo que el promedio simple)
  const weightedEcpm = vSent > 0 ? (turnover / vSent) * 1000 : 0;

  const cards: Array<{ label: string; value: string; tone?: 'pos'|'neg'|null }> = [
    { label: 'Campaigns',     value: fmtInt.format(total) },
    { label: 'Total V Sent',  value: fmtInt.format(vSent) },
    { label: 'Turnover',      value: fmtEUR.format(turnover) },
    { label: 'Margin',        value: fmtEUR.format(margin), tone: margin > 0 ? 'pos' : margin < 0 ? 'neg' : null },
    { label: 'Weighted eCPM', value: fmtEUR.format(weightedEcpm) },
  ];

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-3 mb-4">
      {cards.map((c) => (
        <div
          key={c.label}
          className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-4 shadow-sm"
        >
          <div className="text-xs uppercase opacity-70">{c.label}</div>
          <div
            className={[
              'text-xl font-semibold mt-1',
              c.tone === 'pos' ? 'text-[--color-primary]' : '',
              c.tone === 'neg' ? 'text-[--color-accent]'  : '',
            ].join(' ')}
          >
            {c.value}
          </div>
        </div>
      ))}
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\CampaignTable.tsx =====
'use client';

import { useEffect, useMemo, useRef, useState } from 'react';
import { CampaignRow } from '@/types/campaign';
import { useCampaignData } from '@/context/CampaignDataContext';
import CampaignFilters from './CampaignFilters';
import { useCampaignFilterEngine } from '@/hooks/useCampaignFilterEngine';

import ColumnPicker from '@/components/ui/ColumnPicker';
import RowActions from '@/components/table/RowActions';
import CreateCampaignModal from './create-campaign/CreateCampaignModal';
import type { DBType } from '@/data/reference';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';

import ExportModal from '@/components/export/ExportModal';          // [EXPORT]
import { type ColumnSpec } from '@/utils/exporters';                // [EXPORT]

/* ====== formatters ====== */
const fmtEUR = new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' });
const fmtInt = new Intl.NumberFormat('es-ES');
const fmtPct = new Intl.NumberFormat('es-ES', { style: 'percent', maximumFractionDigits: 2 });

type SortKey = keyof CampaignRow | 'marginPct' | '_idx' | 'none';

const COLVIS_STORAGE_KEY = 'monet_colvis_v1';
const ALWAYS_VISIBLE = new Set(['date', 'campaign']);

/* ====== helpers ====== */
const lc = (s?: string) => (s ?? '').trim().toLowerCase();

/* Canoniza DB Type a su forma correcta o null si no cuadra */
function canonDbType(s?: string): DBType | null {
  const n = lc(s);
  if (n === 'b2b') return 'B2B';
  if (n === 'b2c') return 'B2C';
  if (n === 'mixed') return 'Mixed';
  return null;
}

/* ====== tipos ====== */
type SummaryAgg = {
  vSent: number; routingCosts: number; qty: number; turnover: number; margin: number;
  weightedEcpm: number; marginPct: number | null; count: number;
};

type ColumnDef = {
  id:
    | 'date' | 'campaign' | 'advertiser' | 'invoiceOffice' | 'partner' | 'theme'
    | 'price' | 'type' | 'vSent' | 'routingCosts' | 'qty' | 'turnover'
    | 'margin' | 'marginPct' | 'ecpm' | 'database' | 'geo' | 'databaseType';
  label: string;
  numeric?: boolean;
  defaultVisible?: boolean;
  sortable?: boolean;
  sortKey?: SortKey;
  renderCell: (r: CampaignRow) => React.ReactNode;
  renderSummary?: (s: SummaryAgg) => React.ReactNode;
};

/* ====== helpers de estilo ====== */
type MarginTier = 'green' | 'amber' | 'red' | null;
function marginPctTier(pct: number | null | undefined): MarginTier {
  if (pct == null) return null;
  if (pct >= 0.70) return 'green';
  if (pct >= 0.01) return 'amber';
  return 'red';
}
function marginPctTextClass(pct: number | null | undefined) {
  const t = marginPctTier(pct);
  switch (t) {
    case 'green': return 'text-[color:var(--color-primary)]';
    case 'amber': return 'text-[color-mix(in_oklab,var(--color-accent)_58%,var(--color-primary)_42%)]';
    case 'red':   return 'text-[color:var(--color-accent)]';
    default:      return 'opacity-70';
  }
}

/* === iconos === */
function SortIcon({ active, dir }: { active: boolean; dir: 'asc' | 'desc' }) {
  if (!active) {
    return (
      <svg width="10" height="10" viewBox="0 0 24 24" aria-hidden>
        <path d="M7 10l5-5 5 5" fill="none" stroke="currentColor" strokeWidth="2"/>
        <path d="M7 14l5 5 5-5" fill="none" stroke="currentColor" strokeWidth="2" opacity=".6"/>
      </svg>
    );
  }
  return dir === 'asc' ? (
    <svg width="10" height="10" viewBox="0 0 24 24" aria-hidden>
      <path d="M7 14l5-5 5 5" fill="none" stroke="currentColor" strokeWidth="2"/>
    </svg>
  ) : (
    <svg width="10" height="10" viewBox="0 0 24 24" aria-hidden>
      <path d="M7 10l5 5 5-5" fill="none" stroke="currentColor" strokeWidth="2"/>
    </svg>
  );
}
function DownIcon() {
  return (
    <svg width="12" height="12" viewBox="0 0 24 24" aria-hidden>
      <path d="M7 10l5 5 5-5" fill="none" stroke="currentColor" strokeWidth="2"/>
    </svg>
  );
}

/* ====== columnas ====== */
const COLUMN_DEFS: ColumnDef[] = [
  { id: 'date', label: 'DATE', defaultVisible: true, sortable: true, sortKey: 'date',
    renderCell: (r) => new Date(r.date).toLocaleDateString('es-ES') },
  { id: 'campaign', label: 'CAMPAIGN', defaultVisible: true, sortable: true, sortKey: 'campaign',
    renderCell: (r) => r.campaign },
  { id: 'advertiser', label: 'ADVERTISER', defaultVisible: true, sortable: true, sortKey: 'advertiser',
    renderCell: (r) => r.advertiser },
  { id: 'invoiceOffice', label: 'INVOICE OFFICE', defaultVisible: true, sortable: true, sortKey: 'invoiceOffice',
    renderCell: (r) => r.invoiceOffice },
  { id: 'partner', label: 'PARTNER', defaultVisible: true, sortable: true, sortKey: 'partner',
    renderCell: (r) => r.partner },
  { id: 'theme', label: 'THEME', defaultVisible: true, sortable: true, sortKey: 'theme',
    renderCell: (r) => r.theme },
  { id: 'price', label: 'PRICE', numeric: true, defaultVisible: true, sortable: true, sortKey: 'price',
    renderCell: (r) => fmtEUR.format(r.price) },
  { id: 'type', label: 'TYPE', defaultVisible: true, sortable: true, sortKey: 'type',
    renderCell: (r) => r.type },
  { id: 'vSent', label: 'V SENT', numeric: true, defaultVisible: true, sortable: true, sortKey: 'vSent',
    renderCell: (r) => fmtInt.format(r.vSent), renderSummary: (s) => fmtInt.format(s.vSent) },
  { id: 'routingCosts', label: 'ROUTING COSTS', numeric: true, defaultVisible: true, sortable: true, sortKey: 'routingCosts',
    renderCell: (r) => fmtEUR.format(r.routingCosts), renderSummary: (s) => fmtEUR.format(s.routingCosts) },
  { id: 'qty', label: 'QTY', numeric: true, defaultVisible: true, sortable: true, sortKey: 'qty',
    renderCell: (r) => fmtInt.format(r.qty), renderSummary: (s) => fmtInt.format(s.qty) },
  { id: 'turnover', label: 'TURNOVER', numeric: true, defaultVisible: true, sortable: true, sortKey: 'turnover',
    renderCell: (r) => fmtEUR.format(r.turnover), renderSummary: (s) => fmtEUR.format(s.turnover) },
  { id: 'margin', label: 'MARGIN', numeric: true, defaultVisible: true, sortable: true, sortKey: 'margin',
    renderCell: (r) => {
      const pct = r.turnover > 0 ? r.margin / r.turnover : null;
      return <span className={marginPctTextClass(pct)}>{fmtEUR.format(r.margin)}</span>;
    },
    renderSummary: (s) => (
      <span className={marginPctTextClass(s.marginPct)}>{fmtEUR.format(s.margin)}</span>
    ) },
  { id: 'marginPct', label: 'MARGIN (%)', numeric: true, defaultVisible: true, sortable: true, sortKey: 'marginPct',
    renderCell: (r) => {
      const pct = r.turnover > 0 ? r.margin / r.turnover : null;
      return <span className={marginPctTextClass(pct)}>{pct == null ? 'â€”' : fmtPct.format(pct)}</span>;
    },
    renderSummary: (s) => {
      const tier = marginPctTier(s.marginPct);
      const badge =
        tier === 'green' ? 'badge-positive'
        : tier === 'amber' ? 'badge-warn'
        : tier === 'red'   ? 'badge-negative'
        : '';
      return (
        <span className={`font-bold ${marginPctTextClass(s.marginPct)} ${badge}`}>
          {s.marginPct == null ? 'â€”' : fmtPct.format(s.marginPct)}
        </span>
      );
    } },
  { id: 'ecpm', label: 'ECPM', numeric: true, defaultVisible: true, sortable: true, sortKey: 'ecpm',
    renderCell: (r) => fmtEUR.format(r.ecpm), renderSummary: (s) => fmtEUR.format(s.weightedEcpm) },
  { id: 'database', label: 'DATABASE', defaultVisible: true, sortable: true, sortKey: 'database',
    renderCell: (r) => r.database },
  { id: 'geo', label: 'GEO', defaultVisible: true, sortable: true, sortKey: 'geo',
    renderCell: (r) => r.geo },
  { id: 'databaseType', label: 'DB TYPE', defaultVisible: true, sortable: true, sortKey: 'databaseType',
    renderCell: (r) => r.databaseType },
];

/* ====== [EXPORT] columnas crudas para export ====== */
const EXPORT_COLS_ALL: ColumnSpec[] = [
  { id: 'date',         label: 'DATE',            accessor: r => r.date },
  { id: 'campaign',     label: 'CAMPAIGN',        accessor: r => r.campaign },
  { id: 'advertiser',   label: 'ADVERTISER',      accessor: r => r.advertiser },
  { id: 'invoiceOffice',label: 'INVOICE OFFICE',  accessor: r => r.invoiceOffice },
  { id: 'partner',      label: 'PARTNER',         accessor: r => r.partner },
  { id: 'theme',        label: 'THEME',           accessor: r => r.theme },
  { id: 'price',        label: 'PRICE',           accessor: r => r.price },
  { id: 'type',         label: 'TYPE',            accessor: r => r.type },
  { id: 'vSent',        label: 'V SENT',          accessor: r => r.vSent },
  { id: 'routingCosts', label: 'ROUTING COSTS',   accessor: r => r.routingCosts },
  { id: 'qty',          label: 'QTY',             accessor: r => r.qty },
  { id: 'turnover',     label: 'TURNOVER',        accessor: r => r.turnover },
  { id: 'margin',       label: 'MARGIN',          accessor: r => r.margin },
  { id: 'marginPct',    label: 'MARGIN (%)',      accessor: r => (r.turnover > 0 ? r.margin / r.turnover : null) },
  { id: 'ecpm',         label: 'ECPM',            accessor: r => r.ecpm },
  { id: 'database',     label: 'DATABASE',        accessor: r => r.database },
  { id: 'geo',          label: 'GEO',             accessor: r => r.geo },
  { id: 'databaseType', label: 'DB TYPE',         accessor: r => r.databaseType },
];

/* ====== helpers periodo (badge en KPIs) ====== */
function fmtLocal(d: Date) {
  const y = d.getFullYear();
  const m = String(d.getMonth() + 1).padStart(2, '0');
  const day = String(d.getDate()).padStart(2, '0');
  return `${y}-${m}-${day}`;
}
function startOfWeek(d: Date) {
  const n = new Date(d.getFullYear(), d.getMonth(), d.getDate());
  const w = (n.getDay() || 7) - 1;
  n.setDate(n.getDate() - w);
  return n;
}
function endOfWeek(d: Date) {
  const s = startOfWeek(d);
  return new Date(s.getFullYear(), s.getMonth(), s.getDate() + 6);
}
function startOfMonth(d: Date) { return new Date(d.getFullYear(), d.getMonth(), 1); }
function endOfMonth(d: Date) { return new Date(d.getFullYear(), d.getMonth() + 1, 0); }
function rangeForPresetKey(
  key: 'today'|'yesterday'|'thisWeek'|'lastWeek'|'thisMonth'|'lastMonth'|'last7'|'last30'
): [string,string] {
  const now = new Date();
  if (key==='today')     { const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()); const s=fmtLocal(a); return [s,s]; }
  if (key==='yesterday') { const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()-1); const s=fmtLocal(a); return [s,s]; }
  if (key==='thisWeek')  return [fmtLocal(startOfWeek(now)), fmtLocal(endOfWeek(now))];
  if (key==='lastWeek')  { const k=new Date(now.getFullYear(),now.getMonth(),now.getDate()-7); return [fmtLocal(startOfWeek(k)), fmtLocal(endOfWeek(k))]; }
  if (key==='thisMonth') return [fmtLocal(startOfMonth(now)), fmtLocal(endOfMonth(now))];
  if (key==='lastMonth') { const k=new Date(now.getFullYear(),now.getMonth()-1,15); return [fmtLocal(startOfMonth(k)), fmtLocal(endOfMonth(k))]; }
  if (key==='last7')     { const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()-6); const b=new Date(now.getFullYear(),now.getMonth(),now.getDate()); return [fmtLocal(a),fmtLocal(b)]; }
  const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()-29);
  const b=new Date(now.getFullYear(),now.getMonth(),now.getDate());
  return [fmtLocal(a),fmtLocal(b)];
}
function activePresetLabelFromRange(range?: [string|null,string|null] | null) {
  const start = range?.[0], end = range?.[1];
  if (!start || !end) return null;
  const entries = [
    ['today','Today'],['yesterday','Yesterday'],['thisWeek','This week'],['lastWeek','Last week'],
    ['thisMonth','This month'],['lastMonth','Last month'],['last7','Last 7'],['last30','Last 30'],
  ] as const;
  for (const [k,label] of entries) {
    const [s,e] = rangeForPresetKey(k as any);
    if (s===start && e===end) return label;
  }
  return `${start} â†’ ${end}`;
}

/* ====== KPI tile ====== */
function KpiTile({
  label, value, tone, asBadge = false, subValue, rightHint, title,
}: {
  label: string; value: string; tone?: 'pos' | 'warn' | 'neg' | null;
  asBadge?: boolean; subValue?: string | null; rightHint?: string | null; title?: string;
}) {
  const toneText =
    tone === 'pos'  ? 'text-[color:var(--color-primary)]' :
    tone === 'neg'  ? 'text-[color:var(--color-accent)]' :
    tone === 'warn' ? 'text-[color-mix(in_oklab,var(--color-accent)_58%,var(--color-primary)_42%)]'
                    : 'opacity-90';

  const badgeClass =
    tone === 'pos'
      ? 'text-[color:var(--color-primary)] bg-[color-mix(in_oklab,var(--color-primary)_32%,transparent)] border border-[color-mix(in_oklab,var(--color-primary)_55%,transparent)]'
      : tone === 'neg'
      ? 'text-[color:var(--color-accent)] bg-[color-mix(in_oklab,var(--color-accent)_30%,transparent)] border border-[color-mix(in_oklab,var(--color-accent)_55%,transparent)]'
      : tone === 'warn'
      ? 'text-[color-mix(in_oklab,var(--color-accent)_58%,var(--color-primary)_42%)] bg-[color-mix(in_oklab,var(--color-accent)_22%,var(--color-primary)_22%)] border border-[color-mix(in_oklab,var(--color-accent)_45%,var(--color-primary)_20%)]'
      : 'bg-[color-mix(in_oklab,var(--color-text)_14%,transparent)] text-[color-mix(in_oklab,var(--color-text)_90%,black)] border border-[color-mix(in_oklab,var(--color-text)_22%,transparent)]';

  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface-2)]/60 p-3 md:p-4 min-h-[92px]" title={title}>
      <div className="text-[11px] md:text-xs uppercase tracking-wide opacity-70">{label}</div>
      {asBadge ? (
        <div className="mt-2">
          <span className={['inline-flex items-center gap-1 px-2 py-0.5 rounded-full text-sm font-bold tabular-nums leading-tight', badgeClass].join(' ')}>
            {tone === 'neg' ? <DownIcon /> : null}
            {value}
          </span>
          {subValue ? <div className={['mt-1 text-xs tabular-nums leading-tight', toneText].join(' ')}>{subValue}</div> : null}
        </div>
      ) : (
        <div className={['mt-1 flex items-baseline gap-2', toneText].join(' ')}>
          <span className="text-lg md:text-xl font-semibold tabular-nums leading-tight">{value}</span>
          {rightHint ? <span className="text-[11px] md:text-xs opacity-70">{rightHint}</span> : null}
        </div>
      )}
    </div>
  );
}

/* =================================================================== */

export default function CampaignTable() {
  const { rows, removeCampaign } = useCampaignData();

  /* ====== CatÃ¡logos canÃ³nicos ====== */
  const catalogs = useCatalogOverrides();
  const PARTNERS = catalogs?.PARTNERS ?? [];
  const THEMES = (catalogs?.THEMES ?? []) as string[];
  const TYPES = (catalogs?.TYPES ?? ['CPL', 'CPM', 'CPC', 'CPA']).slice();

  /* ====== Filtros ====== */
  const engine = useCampaignFilterEngine(rows);
  const dataSource = engine.filteredRows as unknown as (CampaignRow & { _idx: number })[];

  // Opciones sin duplicados y con etiquetas canÃ³nicas
  const options = useMemo(() => {
    // quÃ© hay presente en el dataset (normalizado)
    const presentTypesLc = new Set(rows.map(r => lc(r.type)).filter(Boolean));
    const presentPartners = new Set(rows.map(r => lc(r.partner)).filter(Boolean));
    const presentThemes = new Set(rows.map(r => lc(r.theme)).filter(Boolean));
    const presentGeos = new Set(rows.map(r => (r.geo ?? '').trim().toUpperCase()).filter(Boolean));
    const presentDbTypes = new Set(
      rows.map(r => canonDbType(r.databaseType)).filter((x): x is DBType => !!x)
    );

    // mapas canÃ³nicos (lc -> etiqueta canÃ³nica)
    const partnerMap = new Map(PARTNERS.map(p => [lc(p.name), p.name]));
    const themeMap = new Map(THEMES.map(t => [lc(t), t]));

    // TYPE: intersecciÃ³n entre canÃ³nicos y presentes (evita cpl/CPL)
    const typeOpts = TYPES.filter(t => presentTypesLc.has(lc(t)));

    // PARTNER/THEME: colapsa por lc y etiqueta con la canÃ³nica si existe
    const partnerOpts = Array.from(presentPartners)
      .map(k => partnerMap.get(k) ?? (rows.find(r => lc(r.partner) === k)?.partner ?? k))
      .sort((a, b) => a.localeCompare(b, 'es'));

    const themeOpts = Array.from(presentThemes)
      .map(k => themeMap.get(k) ?? (rows.find(r => lc(r.theme) === k)?.theme ?? k))
      .sort((a, b) => a.localeCompare(b, 'es'));

    // GEO: mayÃºsculas
    const geoOpts = Array.from(presentGeos).sort();

    // DB TYPE: orden estable canÃ³nico
    const dbOrder: DBType[] = ['B2B', 'B2C', 'Mixed'];
    const dbTypeOpts = dbOrder.filter(t => presentDbTypes.has(t));

    return {
      geos: geoOpts,
      partners: partnerOpts,
      themes: themeOpts,
      types: typeOpts,
      dbTypes: dbTypeOpts,
    };
  }, [rows, PARTNERS, THEMES, TYPES]);

  /* ====== Orden/paginaciÃ³n ====== */
  const [sortKey, setSortKey] = useState<SortKey>('none');
  const [sortDir, setSortDir] = useState<'asc' | 'desc'>('asc');
  const [page, setPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);

  const [editing, setEditing] = useState<CampaignRow | null>(null);
  const [seedCreate, setSeedCreate] = useState<CampaignRow | null>(null);
  const [flashId, setFlashId] = useState<string | null>(null);

  // [EXPORT]
  const [openExport, setOpenExport] = useState(false);

  /* ====== Column visibility persistente ====== */
  const defaults = useMemo(
    () => COLUMN_DEFS.filter(c => c.defaultVisible !== false).map(c => c.id),
    []
  );
  const defaultVisibleSet = useMemo(() => {
    const s = new Set<string>(defaults);
    for (const id of ALWAYS_VISIBLE) s.add(id);
    return s;
  }, [defaults]);

  const [visibleIds, setVisibleIds] = useState<Set<string>>(
    () => new Set(defaultVisibleSet)
  );
  useEffect(() => {
    try {
      const raw = localStorage.getItem(COLVIS_STORAGE_KEY);
      if (!raw) return;
      const arr = JSON.parse(raw) as string[];
      const next = new Set(arr.filter(id => COLUMN_DEFS.some(c => c.id === id)));
      for (const id of ALWAYS_VISIBLE) next.add(id);
      let changed = next.size !== defaultVisibleSet.size;
      if (!changed) for (const id of next) if (!defaultVisibleSet.has(id)) { changed = true; break; }
      if (changed) setVisibleIds(next);
    } catch {}
  }, [defaultVisibleSet]);

  const applyVisible = (next: Set<string>) => {
    for (const id of ALWAYS_VISIBLE) next.add(id);
    if (sortKey !== 'none') {
      const sortedCol = COLUMN_DEFS.find(c => (c.sortKey ?? (c.id as SortKey)) === sortKey);
      if (sortedCol && !next.has(sortedCol.id)) setSortKey('none');
    }
    setVisibleIds(new Set(next));
    try { localStorage.setItem(COLVIS_STORAGE_KEY, JSON.stringify([...next])); } catch {}
  };

  useEffect(() => { setPage(1); }, [dataSource, sortKey, sortDir, pageSize, visibleIds]);

  const visibleCols = useMemo(
    () => COLUMN_DEFS.filter(c => visibleIds.has(c.id)),
    [visibleIds]
  );
  const marginPctOf = (r: CampaignRow) => (r.turnover > 0 ? r.margin / r.turnover : null);

  useEffect(() => {
    if (!flashId) return;
    const t = setTimeout(() => setFlashId(null), 1400);
    return () => clearTimeout(t);
  }, [flashId]);

  const sortedAll = useMemo(() => {
    const arr = [...dataSource];
    if (sortKey === 'none') return arr;
    return arr.sort((a, b) => {
      let va: any, vb: any;
      if (sortKey === 'marginPct') { va = marginPctOf(a); vb = marginPctOf(b); }
      else { va = (a as any)[sortKey]; vb = (b as any)[sortKey]; }

      if (va == null && vb == null) return a._idx - b._idx;
      if (va == null) return 1;
      if (vb == null) return -1;

      let cmp = typeof va === 'number' && typeof vb === 'number'
        ? va - vb
        : String(va).localeCompare(String(vb));
      if (cmp === 0) cmp = a._idx - b._idx;
      return sortDir === 'asc' ? cmp : -cmp;
    });
  }, [dataSource, sortKey, sortDir]);

  type Totals = { vSent: number; routingCosts: number; qty: number; turnover: number; margin: number; weightedEcpm: number; };
  const summary = useMemo<SummaryAgg>(() => {
    const init: Totals = { vSent: 0, routingCosts: 0, qty: 0, turnover: 0, margin: 0, weightedEcpm: 0 };
    const totals = sortedAll.reduce<Totals>((acc, r) => {
      acc.vSent += r.vSent || 0;
      acc.routingCosts += r.routingCosts || 0;
      acc.qty += r.qty || 0;
      acc.turnover += r.turnover || 0;
      acc.margin += r.margin || 0;
      acc.weightedEcpm += (r.ecpm || 0) * (r.vSent || 0);
      return acc;
    }, init);
    const weightedEcpm = totals.vSent > 0 ? totals.weightedEcpm / totals.vSent : 0;
    const marginPct = totals.turnover > 0 ? totals.margin / totals.turnover : null;
    return { ...totals, weightedEcpm, marginPct, count: sortedAll.length };
  }, [sortedAll]);

  const pageCount = Math.max(1, Math.ceil(sortedAll.length / pageSize));
  const start = (page - 1) * pageSize;
  const end = start + pageSize;
  const pageRows = sortedAll.slice(start, end);

  function setSortBy(k: SortKey) {
    if (sortKey !== k) { setSortKey(k); setSortDir('asc'); }
    else { setSortDir(sortDir === 'asc' ? 'desc' : 'asc'); }
  }

  /* ====== MediciÃ³n de alturas para la lÃ¡mina / offset ====== */
  const refFilters = useRef<HTMLDivElement>(null);
  const refKpis = useRef<HTMLDivElement>(null);
  const [sizes, setSizes] = useState({ filters: 0, kpis: 0 });

  const bandGapPx = 16; // debe casar con --band-gap-y

  useEffect(() => {
    const update = () => {
      setSizes({
        filters: refFilters.current?.offsetHeight ?? 0,
        kpis: refKpis.current?.offsetHeight ?? 0,
      });
    };
    const ro = new ResizeObserver(update);
    if (refFilters.current) ro.observe(refFilters.current);
    if (refKpis.current) ro.observe(refKpis.current);
    window.addEventListener('resize', update);
    update();
    return () => {
      ro.disconnect();
      window.removeEventListener('resize', update);
    };
  }, []);

  // Offset donde debe â€œpegarseâ€ el thead (debajo del stack sticky)
  const stackedBottom = `calc(var(--content-sticky-top) + ${sizes.filters}px + ${bandGapPx}px + ${sizes.kpis}px)`;

  /* === Header de columna sticky â€” usa la regla CSS global === */
  const Th = ({ col }: { col: ColumnDef }) => {
    const active = col.sortable && sortKey === (col.sortKey ?? (col.id as SortKey));
    const ariaSort =
      col.sortable
        ? (active ? (sortDir === 'asc' ? 'ascending' : 'descending') : 'none')
        : undefined;
    return (
      <th
        onClick={col.sortable ? () => setSortBy(col.sortKey ?? (col.id as SortKey)) : undefined}
        aria-sort={ariaSort as any}
        className={`${col.numeric ? 'text-right whitespace-nowrap' : 'text-left'} ${col.sortable ? 'cursor-pointer select-none' : ''}`}
      >
        <div className="flex items-center gap-1 justify-between">
          <span>{col.label}</span>
          {col.sortable && <SortIcon active={!!active} dir={sortDir} />}
        </div>
      </th>
    );
  };

  /* ====== Column picker ====== */
  const [pickerOpen, setPickerOpen] = useState(false);
  const pickerColumns = useMemo(
    () => COLUMN_DEFS.map(c => ({ id: c.id, label: c.label, disabled: ALWAYS_VISIBLE.has(c.id) })), []
  );

  // [EXPORT] columnas visibles para export, en el mismo orden actual
  const exportVisibleCols: ColumnSpec[] = useMemo(() => {
    const ids = visibleCols.map(c => c.id);
    return EXPORT_COLS_ALL.filter(c => ids.includes(c.id));
  }, [visibleCols]);

  // [EXPORT] nombre sugerido de archivo con periodo + timestamp corto
  const exportFileBase = useMemo(() => {
    const period = activePresetLabelFromRange(engine.filters.dateRange ?? null) || 'All';
    const stamp = new Date().toISOString().slice(0,16).replace(/[:T]/g,'');
    return `campaigns_${String(period).toLowerCase().replace(/\s+/g,'-')}_${stamp}`;
  }, [engine.filters.dateRange]);

  return (
    <div className="w-full px-2 md:px-3 lg:px-4">
      {/* ===== Sticky stack: Filtros + Backplate + KPIs ===== */}
      <div
        className="-mx-2 md:-mx-3 lg:-mx-4 px-2 md:px-3 lg:px-4"
        style={{ ['--band-gap-y' as any]: `${bandGapPx}px` }}
      >
        {/* Filtros (sticky) */}
        <div
          ref={refFilters}
          style={{
            position: 'sticky',
            top: 'var(--content-sticky-top)',
            zIndex: 60,
            marginBottom: 'var(--band-gap-y)',
          }}
        >
          <CampaignFilters
            filters={engine.filters}
            updateFilters={engine.updateFilters}
            resetFilters={engine.resetFilters}
            options={options}
            pending={engine.pending}
            onOpenColumns={() => setPickerOpen(true)}
            onOpenExport={() => setOpenExport(true)}     // â† NUEVO
            exportCount={sortedAll.length}    // â† NUEVO contador para el botÃ³n Export
          />
        </div>

        {/* LÃ¡mina de fondo â€” debajo de thead */}
        <div
          aria-hidden
          style={{
            position: 'sticky',
            top: 'var(--content-sticky-top)',
            zIndex: 20,      // por debajo de thead (45), KPIs (50) y filtros (60)
            height: 0,
            pointerEvents: 'none',
          }}
        >
          <div
            style={{
              position: 'absolute',
              left: '-0.5rem',
              right: '-0.5rem',
              height: `calc(${sizes.filters}px + ${bandGapPx}px + ${sizes.kpis}px)`,
              background: 'var(--color-bg-outer)',
              borderBottom: '1px solid var(--color-border)',
              boxShadow: '0 6px 16px rgba(0,0,0,.06)',
            }}
          />
        </div>

        {/* KPIs (sticky) */}
        <div
          ref={refKpis}
          style={{
            position: 'sticky',
            top: `calc(var(--content-sticky-top) + ${sizes.filters}px + var(--band-gap-y))`,
            zIndex: 50,
          }}
        >
          <div
            role="region"
            aria-labelledby="kpi-recap-title"
            aria-live="polite"
            className="rounded-xl border border-[--color-border] ring-1 ring-white/10 bg-[color:var(--color-surface)]/90 backdrop-blur-md shadow-xl"
          >
            <h2 id="kpi-recap-title" className="sr-only">Resumen de KPIs</h2>

            {/* badge de periodo + acciones */}
            <div className="px-3 md:px-4 pt-2 flex justify-end">
              <span className="text-[11px] md:text-xs rounded-full px-2 py-1
                                bg-[color-mix(in_oklab,var(--color-text)_10%,transparent)]
                                text-[color-mix(in_oklab,var(--color-text)_85%,black)]">
                {activePresetLabelFromRange(engine.filters.dateRange ?? null) || 'All data'}
              </span>
            </div>
            
            {/* KPIs */}
            <div className="p-3 md:p-4 grid grid-cols-2 sm:grid-cols-4 gap-2 md:gap-3">
              <KpiTile label="Turnover" value={fmtEUR.format(summary.turnover)} title="Suma de turnover del dataset filtrado" />
              <KpiTile
                label="Margin (%)"
                value={summary.marginPct == null ? 'â€”' : fmtPct.format(summary.marginPct)}
                tone={(() => {
                  const tier = marginPctTier(summary.marginPct);
                  return tier === 'green' ? 'pos' : tier === 'amber' ? 'warn' : tier === 'red' ? 'neg' : null;
                })()}
                asBadge
                subValue={fmtEUR.format(summary.margin)}
                title="Margin% = Margin / Turnover"
              />
              <KpiTile label="V Sent" value={fmtInt.format(summary.vSent)} title="Volumen de envÃ­os en el periodo" />
              <KpiTile label="eCPM" value={fmtEUR.format(summary.weightedEcpm)} rightHint="â‚¬/k" title="eCPM ponderado = Î£(ecpmÂ·vSent) / Î£(vSent)" />
            </div>

            <div className="px-3 md:px-4 pb-3 -mt-1 border-t border-white/10 text-xs opacity-80">
              <span className="tabular-nums">
                Routing: <strong>{fmtEUR.format(summary.routingCosts)}</strong> â€¢ QTY: <strong>{fmtInt.format(summary.qty)}</strong>
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* ColumnPicker */}
      {pickerOpen && (
        <ColumnPicker
          columns={pickerColumns}
          visible={visibleIds}
          onChange={applyVisible}
          onClose={() => setPickerOpen(false)}
          defaults={defaults}
        />
      )}

      {/* ====== Tabla ====== */}
      <div
        className="table-wrap mt-6"
        style={{
          // por si en CSS usas la var para el offset
          ['--table-sticky-offset' as any]: stackedBottom,
        }}
      >
        <table className="table min-w-[1280px] tabular-nums">
          <thead>
            <tr>
              {visibleCols.map(col => (
                <Th key={col.id} col={col} />
              ))}
              <th className="w-[1%] text-right pr-2">â‹¯</th>
            </tr>
          </thead>

          <tbody>
            {/* SUMMARY */}
            <tr className="row-summary">
              {visibleCols.map((col, idx) => {
                if (idx === 0) {
                  return <td key={col.id} className="px-3 py-2 text-sm">SUMMARY ({summary.count})</td>;
                }
                const content = col.renderSummary ? col.renderSummary(summary) : null;
                return (
                  <td key={col.id} className={`px-3 py-2 text-sm ${col.numeric ? 'text-right whitespace-nowrap' : ''}`}>
                    {content}
                  </td>
                );
              })}
              <td />
            </tr>

            {/* Filas */}
            {pageRows.map((r) => {
              const rowFlash = r.id === flashId ? 'row-flash' : '';
              return (
                <tr
                  key={r.id}
                  className={`hover:bg-white/5 transition-colors ${rowFlash}`}
                  onDoubleClick={() => setEditing(r)}
                >
                  {visibleCols.map((col) => (
                    <td key={col.id} className={`px-3 py-2 text-sm ${col.numeric ? 'text-right whitespace-nowrap' : ''}`}>
                      {col.renderCell(r)}
                    </td>
                  ))}
                  <td className="px-2 py-2 text-sm">
                    <RowActions
                      onEdit={() => setEditing(r)}
                      onDuplicate={() => setSeedCreate(r)}
                      onDelete={() => {
                        if (!confirm('Delete this campaign? This cannot be undone.')) return;
                        removeCampaign(r.id);
                      }}
                    />
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>

      {/* PaginaciÃ³n */}
      <div className="flex flex-wrap items-center justify-between gap-3 mt-3">
        <div className="text-sm opacity-80">
          Showing {sortedAll.length === 0 ? 0 : start + 1}â€“{Math.min(end, sortedAll.length)} of {sortedAll.length}
        </div>
        <div className="flex items-center gap-2">
          <label className="text-sm">Rows per page</label>
          <select value={pageSize} onChange={(e) => setPageSize(Number(e.target.value))} className="input w-24 py-1 text-sm">
            {[10, 20, 50, 100].map(n => <option key={n} value={n}>{n}</option>)}
          </select>

          <button onClick={() => setPage(p => Math.max(1, p - 1))} disabled={page <= 1} className="btn-ghost disabled:opacity-40 text-sm">
            Previous
          </button>
          <span className="text-sm">Page {page} / {pageCount}</span>
          <button onClick={() => setPage(p => Math.min(pageCount, p + 1))} disabled={page >= pageCount} className="btn-primary disabled:opacity-40 text-sm">
            Next
          </button>
        </div>
      </div>

      {/* Modales */}
      {editing && (
        <CreateCampaignModal
          mode="edit"
          initialRow={editing}
          onClose={() => setEditing(null)}
          onSaved={(id) => { setEditing(null); setFlashId(id); }}
        />
      )}
      {seedCreate && (
        <CreateCampaignModal
          mode="create"
          seed={seedCreate}
          onClose={() => setSeedCreate(null)}
        />
      )}

      {/* [EXPORT] Modal de exportaciÃ³n */}
      {openExport && (
        <ExportModal
          onClose={() => setOpenExport(false)}
          allRows={sortedAll}
          pageRows={pageRows}
          visibleColumns={exportVisibleCols}
          allColumns={EXPORT_COLS_ALL}
          defaultFilename={exportFileBase}
        />
      )}
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\Sidebar.tsx =====
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/context/AuthContext';            // ðŸ†•
import CreateCampaignModal from './create-campaign/CreateCampaignModal';
import ManageCatalogsModal from './catalogs/ManageCatalogsModal';
import ImportCsvModal from './import/ImportCsvModal';
import ManageUsersModal from '@/components/admin/ManageUsersModal'; // ðŸ†•

type Props = {
  collapsed: boolean;
  onToggleCollapse: () => void;
  hideCollapseToggle?: boolean;
  onActionDone?: () => void;
};

export default function Sidebar({
  collapsed,
  onToggleCollapse,
  hideCollapseToggle = false,
  onActionDone,
}: Props) {
  const router = useRouter();
  const { isAdmin, isEditor } = useAuth();                  // ðŸ†•

  const [openCreate, setOpenCreate] = useState(false);
  const [openManage, setOpenManage] = useState(false);
  const [openImport, setOpenImport] = useState(false);
  const [openUsers, setOpenUsers]   = useState(false);      // ðŸ†•

  const btnBase = (extra = '') =>
    collapsed
      ? `flex justify-center items-center rounded-xl border border-[--color-border] px-2 py-2 hover:bg-black/5 transition-colors ${extra}`
      : `w-full rounded-xl border border-[--color-border] px-3 py-2 text-left hover:bg-black/5 transition-colors ${extra}`;

  const BtnCreate = (
    <button
      onClick={() => isEditor && setOpenCreate(true)}
      disabled={!isEditor}
      aria-disabled={!isEditor}
      className={btnBase('disabled:opacity-50 disabled:pointer-events-none')}
      title={isEditor ? 'Create campaign' : 'Editors/Admins only'}
      aria-label="Create campaign"
    >
      <span className="text-lg leading-none">ï¼‹</span>
      {!collapsed && <span className="ml-2">Create campaign{!isEditor ? ' (locked)' : ''}</span>}
    </button>
  );

  const BtnImport = (
    <button
      onClick={() => isAdmin && setOpenImport(true)}
      disabled={!isAdmin}
      aria-disabled={!isAdmin}
      className={btnBase('mt-2 disabled:opacity-50 disabled:pointer-events-none')}
      title={isAdmin ? 'Import from CSV' : 'Admins only'}
      aria-label="Import from CSV"
    >
      <span className="text-lg leading-none">ðŸ“¥</span>
      {!collapsed && <span className="ml-2">Import from CSV{!isAdmin ? ' (admin)' : ''}</span>}
    </button>
  );

  const BtnManage = (
    <button
      onClick={() => isEditor && setOpenManage(true)}
      disabled={!isEditor}
      aria-disabled={!isEditor}
      className={btnBase('mt-2 disabled:opacity-50 disabled:pointer-events-none')}
      title={isEditor ? 'Manage catalogs' : 'Editors/Admins only'}
      aria-label="Manage catalogs"
    >
      <span className="text-lg leading-none">âš™</span>
      {!collapsed && <span className="ml-2">Manage catalogs{!isEditor ? ' (locked)' : ''}</span>}
    </button>
  );

  const BtnUsers = (
    <button
      onClick={() => isAdmin && setOpenUsers(true)}
      disabled={!isAdmin}
      aria-disabled={!isAdmin}
      className={btnBase('mt-2 disabled:opacity-50 disabled:pointer-events-none')}
      title={isAdmin ? 'Manage users' : 'Admins only'}
      aria-label="Manage users"
    >
      <span className="text-lg leading-none">ðŸ‘¥</span>
      {!collapsed && <span className="ml-2">Manage users{!isAdmin ? ' (admin)' : ''}</span>}
    </button>
  );

  const BtnReports = (
    <button
      onClick={() => router.push('/reports')}
      className={btnBase()}
      title="Reports"
      aria-label="Reports"
    >
      <span className="text-lg leading-none">ðŸ“Š</span>
      {!collapsed && <span className="ml-2">Reports</span>}
    </button>
  );

  return (
    <div className={collapsed ? 'shrink-0 self-start w-[56px]' : 'shrink-0 self-start w-full md:w-full'}>
      <div className="grid gap-3">
        <div className={collapsed ? 'card p-2' : 'card p-4'}>
          <div className={['flex items-center mb-2', collapsed ? 'justify-center' : 'justify-between'].join(' ')}>
            {!collapsed && (
              <div>
                <h2 className="text-base font-semibold">Actions</h2>
                <p className="muted text-xs">Quick tools</p>
              </div>
            )}
            {!hideCollapseToggle && (
              <button
                onClick={onToggleCollapse}
                className="rounded-lg border border-[--color-border] px-2 py-1 text-xs hover:bg-black/5 transition-colors"
                aria-label={collapsed ? 'Expand sidebar' : 'Collapse sidebar'}
                title={collapsed ? 'Expand' : 'Collapse'}
              >
                {collapsed ? 'â€º' : 'â€¹'}
              </button>
            )}
          </div>

          {!collapsed ? (
            <div className="space-y-3">
              {BtnCreate}
              {BtnImport}
              {BtnManage}
              {BtnUsers} {/* ðŸ†• */}
            </div>
          ) : (
            <>
              {BtnCreate}
              {BtnImport}
              {BtnManage}
              {BtnUsers} {/* ðŸ†• */}
            </>
          )}
        </div>

        <div className={collapsed ? 'card p-2' : 'card p-4'}>
          <div className={['flex items-center mb-2', collapsed ? 'justify-center' : 'justify-between'].join(' ')}>
            {!collapsed && (
              <div>
                <h2 className="text-base font-semibold">Analytics</h2>
                <p className="muted text-xs">Insights & reports</p>
              </div>
            )}
          </div>
          {!collapsed ? <div className="space-y-3">{BtnReports}</div> : <>{BtnReports}</>}
        </div>
      </div>

      {openCreate && (
        <CreateCampaignModal
          onClose={() => {
            setOpenCreate(false);
            onActionDone?.();
          }}
        />
      )}
      {openImport && (
        <ImportCsvModal
          onClose={() => {
            setOpenImport(false);
            onActionDone?.();
          }}
        />
      )}
      {openManage && (
        <ManageCatalogsModal
          onClose={() => {
            setOpenManage(false);
            onActionDone?.();
          }}
        />
      )}
      {openUsers && (
        <ManageUsersModal
          onClose={() => {
            setOpenUsers(false);
            onActionDone?.();
          }}
        />
      )}
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\UserMenu.tsx =====
'use client';

import { useEffect, useState } from 'react';
import { supabase } from '@/lib/supabase/client';
import { useRouter } from 'next/navigation';

export default function UserMenu() {
  const router = useRouter();
  const [email, setEmail] = useState<string | null>(null);

  useEffect(() => {
    supabase.auth.getUser().then(({ data }) => setEmail(data.user?.email ?? null));
    const { data: sub } = supabase.auth.onAuthStateChange(async () => {
      const { data } = await supabase.auth.getUser();
      setEmail(data.user?.email ?? null);
    });
    return () => sub.subscription.unsubscribe();
  }, []);

  const logout = async () => {
    await supabase.auth.signOut();
    router.replace('/login');
  };

  return (
    <div className="flex items-center gap-3">
      <span className="text-sm text-neutral-600">{email}</span>
      <button
        onClick={logout}
        className="text-sm rounded-md border px-3 py-1 hover:bg-neutral-50"
        title="Cerrar sesiÃ³n"
      >
        Salir
      </button>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\admin\ManageUsersModal.tsx =====
'use client';

import { createPortal } from 'react-dom';
import { useEffect, useMemo, useState } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { useAuth } from '@/context/AuthContext';

type Row = {
  user_id: string | null;
  email: string;
  role: 'admin' | 'editor';
  is_active: boolean;
  created_at: string | null;
  updated_at: string | null;
};

type TabState = 'list' | 'invite';

export default function ManageUsersModal({ onClose }: { onClose: () => void }) {
  const { isAdmin } = useAuth();
  const sb = useMemo(() => createClientComponentClient(), []);
  const [tab, setTab] = useState<TabState>('list');

  const [rows, setRows] = useState<Row[]>([]);
  const [loading, setLoading] = useState(true);
  const [banner, setBanner] = useState<null | { text: string; tone: 'ok'|'err'|'info' }>(null);

  const show = (text: string, tone: 'ok'|'err'|'info'='info') => {
    setBanner({ text, tone });
    window.clearTimeout((show as any)._t);
    (show as any)._t = window.setTimeout(() => setBanner(null), 3200);
  };

  // ---- helpers: detecciÃ³n de "Ãºltimo admin" y traducciÃ³n de errores del trigger
  const isLastActiveAdmin = (email: string) => {
    const admins = rows.filter(r => r.role === 'admin' && !!r.is_active);
    return admins.length === 1 && admins[0].email.toLowerCase() === email.toLowerCase();
  };

  const friendlyDbError = (raw?: string) => {
    const msg = String(raw || '');
    if (/Cannot remove the last active admin/i.test(msg)) {
      return 'No puedes quitar al Ãºltimo administrador activo.';
    }
    if (/Cannot delete the last active admin/i.test(msg)) {
      return 'No puedes borrar la fila del Ãºltimo administrador activo.';
    }
    return msg || 'Se produjo un error inesperado.';
  };

  // Buscar usuarios
  const fetchUsers = async () => {
    setLoading(true);
    const { data, error } = await sb
      .from('app_users')
      .select('user_id,email,role,is_active,created_at,updated_at')
      .order('email', { ascending: true });
    if (error) {
      show(error.message, 'err');
    } else {
      setRows((data || []) as Row[]);
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchUsers();
    // ESC para cerrar
    const onKey = (e: KeyboardEvent) => { if (e.key === 'Escape') onClose(); };
    document.addEventListener('keydown', onKey);
    return () => document.removeEventListener('keydown', onKey);
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Mutaciones
  const updateRole = async (email: string, role: 'admin'|'editor') => {
    // Bloqueo local: no permitir degradar al Ãºltimo admin
    if (role !== 'admin' && isLastActiveAdmin(email)) {
      return show('No puedes quitar al Ãºltimo administrador activo.', 'err');
    }
    const { error } = await sb.from('app_users').update({ role }).eq('email', email);
    if (error) return show(friendlyDbError(error.message), 'err');
    show('Role updated', 'ok');
    setRows(prev => prev.map(r => r.email === email ? { ...r, role } : r));
  };

  const updateActive = async (email: string, is_active: boolean) => {
    // Bloqueo local: no permitir desactivar al Ãºltimo admin
    if (!is_active && isLastActiveAdmin(email)) {
      return show('No puedes desactivar al Ãºltimo administrador activo.', 'err');
    }
    const { error } = await sb.from('app_users').update({ is_active }).eq('email', email);
    if (error) return show(friendlyDbError(error.message), 'err');
    show(is_active ? 'User activated' : 'User deactivated', 'ok');
    setRows(prev => prev.map(r => r.email === email ? { ...r, is_active } : r));
  };

  const removeRow = async (email: string) => {
    // Bloqueo local: no permitir borrar al Ãºltimo admin
    if (isLastActiveAdmin(email)) {
      return show('No puedes borrar la fila del Ãºltimo administrador activo.', 'err');
    }
    if (!confirm(`Delete row for "${email}"? (no borra la cuenta auth)`)) return;
    const { error } = await sb.from('app_users').delete().eq('email', email);
    if (error) return show(friendlyDbError(error.message), 'err');
    show('Row deleted', 'ok');
    setRows(prev => prev.filter(r => r.email !== email));
  };

  // Invite (OTP + upsert fila)
  const [invEmail, setInvEmail] = useState('');
  const [invRole, setInvRole] = useState<'admin'|'editor'>('editor');

  const invite = async () => {
    const email = invEmail.trim().toLowerCase();
    if (!email) return;

    const { error: upErr } = await sb
      .from('app_users')
      .upsert({ email, role: invRole, is_active: true }, { onConflict: 'email' });
    if (upErr) return show(friendlyDbError(upErr.message), 'err');

    try {
      const { error: otpErr } = await sb.auth.signInWithOtp({
        email,
        options: {
          emailRedirectTo:
            typeof window !== 'undefined'
              ? `${location.origin}/auth/callback`
              : undefined,
        },
      });
      if (otpErr) show(`Upsert ok, invite mail failed: ${otpErr.message}`, 'err');
      else show('Invitation sent', 'ok');
    } catch (e: any) {
      show(`Invite failed: ${e?.message || e}`, 'err');
    }

    setInvEmail('');
    setInvRole('editor');
    setTab('list');
    fetchUsers();
  };

  const resendInvite = async (email: string) => {
    try {
      const { error } = await sb.auth.signInWithOtp({
        email,
        options: {
          emailRedirectTo:
            typeof window !== 'undefined'
              ? `${location.origin}/auth/callback`
              : undefined,
        },
      });
      if (error) throw error;
      show('Invitation re-sent', 'ok');
    } catch (e: any) {
      show(e?.message || 'Could not resend invite', 'err');
    }
  };

  // UI
  const body = (
    <div
      className="fixed inset-0 z-[140] flex items-center justify-center p-4"
      role="dialog"
      aria-modal="true"
      onMouseDown={(e) => { if (e.target === e.currentTarget) onClose(); }}
    >
      <div className="absolute inset-0 bg-black/55 backdrop-blur-sm" />
      <div
        className="relative card w-full max-w-4xl max-h-[90vh] overflow-hidden border border-[--color-border] shadow-xl"
        style={{ background: 'var(--color-surface)' }}
        onMouseDown={(e) => e.stopPropagation()}
      >
        {/* Header */}
        <div className="sticky top-0 z-10 modal-chrome modal-header px-5 py-3">
          <div className="accent-strip" aria-hidden />
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold">Manage users</h3>
            <button className="btn-ghost" onClick={onClose} aria-label="Close">âœ•</button>
          </div>
        </div>

        {/* Body */}
        <div className="overflow-y-auto px-5 py-4 space-y-4 relative">
          {banner && (
            <div
              className={`rounded-lg border px-3 py-2 text-sm ${
                banner.tone === 'ok'
                  ? 'border-emerald-500/40 bg-emerald-500/10 text-emerald-700'
                  : banner.tone === 'info'
                    ? 'border-sky-500/40 bg-sky-500/10 text-sky-700'
                    : 'border-[--color-accent]/50 bg-[--color-accent]/10 text-[--color-accent]'
              }`}
            >
              {banner.text}
            </div>
          )}

          {!isAdmin && (
            <div className="rounded-lg border px-3 py-2 text-sm border-amber-400/40 bg-amber-400/10 text-amber-700">
              Read-only. Only admins can edit or invite.
            </div>
          )}

          {/* Tabs */}
          <div className="segmented">
            <button className="segmented-tab" aria-selected={tab==='list'} onClick={()=>setTab('list')}>
              Users
            </button>
            <button className="segmented-tab" aria-selected={tab==='invite'} onClick={()=>setTab('invite')}>
              Invite
            </button>
          </div>

          {tab === 'invite' && (
            <div className="subcard p-4 grid gap-3 max-w-xl">
              <label className="text-sm grid gap-1">
                <span className="muted">Email</span>
                <input
                  className="input"
                  value={invEmail}
                  onChange={(e)=>setInvEmail(e.target.value)}
                  placeholder="user@example.com"
                />
              </label>
              <label className="text-sm grid gap-1">
                <span className="muted">Role</span>
                <select
                  className="input"
                  value={invRole}
                  onChange={(e)=>setInvRole(e.target.value as any)}
                >
                  <option value="editor">Editor</option>
                  <option value="admin">Admin</option>
                </select>
              </label>
              <div className="flex gap-2">
                <button
                  className="btn-primary disabled:opacity-50 disabled:pointer-events-none"
                  onClick={invite}
                  disabled={!invEmail.trim() || !isAdmin}
                >
                  Send invitation
                </button>
                <button className="btn-ghost" onClick={()=>setTab('list')}>Cancel</button>
              </div>
            </div>
          )}

          {tab === 'list' && (
            <div className="manage-table">
              <table className="w-full text-sm">
                <thead>
                  <tr>
                    <th className="text-left font-medium px-3 py-2">Email</th>
                    <th className="text-left font-medium px-3 py-2">Role</th>
                    <th className="text-left font-medium px-3 py-2">Active</th>
                    <th className="text-left font-medium px-3 py-2">Updated</th>
                    <th className="text-left font-medium px-3 py-2" />
                  </tr>
                </thead>
              </table>
              <div className="manage-rows divide-y divide-[--color-border]/60">
                {loading ? (
                  <div className="px-3 py-5 text-sm opacity-70">Loadingâ€¦</div>
                ) : rows.length === 0 ? (
                  <div className="px-3 py-5 text-sm opacity-70">No users.</div>
                ) : rows.map((r) => (
                  <div
                    key={r.email}
                    className="grid grid-cols-[1.6fr_0.8fr_0.7fr_1fr_auto] gap-3 px-3 py-2 items-center"
                  >
                    <div className="truncate">{r.email}</div>

                    <div className="flex items-center gap-2">
                      <select
                        className="input"
                        value={r.role}
                        onChange={(e)=>updateRole(r.email, e.target.value as any)}
                        disabled={!isAdmin}
                      >
                        <option value="editor">Editor</option>
                        <option value="admin">Admin</option>
                      </select>
                    </div>

                    <div className="flex items-center gap-2">
                      <input
                        type="checkbox"
                        className="accent-[--color-primary]"
                        checked={r.is_active}
                        onChange={(e)=>updateActive(r.email, e.target.checked)}
                        disabled={!isAdmin}
                      />
                    </div>

                    <div className="text-xs opacity-70 truncate">
                      {r.updated_at || r.created_at || 'â€”'}
                    </div>

                    <div className="justify-self-end flex items-center gap-1">
                      {!r.user_id && (
                        <button
                          className="btn-ghost text-xs border border-[--color-border] px-2 py-1 disabled:opacity-50 disabled:pointer-events-none"
                          onClick={() => resendInvite(r.email)}
                          disabled={!isAdmin}
                          title="Resend invitation"
                        >
                          Resend
                        </button>
                      )}
                      <button
                        className="btn-ghost text-[--color-accent] disabled:opacity-50 disabled:pointer-events-none"
                        onClick={()=>removeRow(r.email)}
                        disabled={!isAdmin}
                        title="Delete row"
                      >
                        âœ•
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="sticky bottom-0 z-10 modal-chrome modal-footer px-5 py-3 flex items-center justify-end gap-2">
          <button className="btn-ghost" onClick={onClose}>Close</button>
        </div>
      </div>
    </div>
  );

  if (typeof document === 'undefined') return null;
  return createPortal(body, document.body);
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\auth\SignOutButton.tsx =====
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';

export default function SignOutButton() {
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [loading, setLoading] = useState(false);

  const onClick = () => {
    setLoading(true);

    // Lanzamos el signOut en segundo plano (sin bloquear la UI)
    const p = supabase.auth.signOut().catch(console.error);

    // Redirigimos ya â€” asÃ­ no dependemos de la red
    const fallback = setTimeout(() => {
      router.replace('/login');
    }, 200); // pequeÃ±o delay para que el click se vea â€œrespondidoâ€

    // Si el signOut termina antes/ despuÃ©s, volvemos a asegurar la redirecciÃ³n
    p.finally(() => {
      clearTimeout(fallback);
      router.replace('/login');
    });
  };

  return (
    <button
      type="button"
      onClick={onClick}
      disabled={loading}
      aria-busy={loading}
      aria-label="Sign out"
      title="Sign out"
      className="btn-ghost h-9 px-3"
    >
      {loading ? 'Signing outâ€¦' : 'Sign out'}
    </button>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\catalogs\ManageCatalogsModal.tsx =====
'use client';

import { createPortal } from 'react-dom';
import { useEffect, useMemo, useRef, useState } from 'react';
import { useCatalogs } from '@/context/CatalogOverridesContext';
import RowActions from '@/components/table/RowActions';
import { useAuth } from '@/context/AuthContext'; // ðŸ†• roles
import { normalizeGeoStrict } from '@/utils/geo'; // ðŸ†• GEO strict

type TabKey = 'campaigns' | 'partners' | 'databases' | 'themes' | 'types';

export default function ManageCatalogsModal({ onClose }: { onClose: () => void }) {
  const {
    CAMPAIGNS, PARTNERS, DATABASES, THEMES, TYPES,
    addCampaignRef, updateCampaignRef, removeCampaignRef,
    addPartnerRef, updatePartnerRef, removePartnerRef,
    addDatabaseRef, updateDatabaseRef, removeDatabaseRef,
    addTheme, removeTheme, addType, removeType,
    exportOverrides, resetOverrides,
    hasLocalChanges, importOverrides,
  } = useCatalogs();

  // ðŸ†• auth/roles
  const auth = useAuth?.();
  const role = (auth?.role as 'admin' | 'editor' | 'viewer' | undefined) ?? (auth?.isAdmin ? 'admin' : auth?.isEditor ? 'editor' : 'viewer');
  const isAdmin = role === 'admin' || !!auth?.isAdmin;
  const isEditor = role === 'editor' || !!auth?.isEditor;
  const canEdit = isAdmin || isEditor;    // puede CRUD unitario
  const canBulk = isAdmin;                // puede importar/exportar/reset

  const trapRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [tab, setTab] = useState<TabKey>('campaigns');

  // banner simple de feedback
  const [banner, setBanner] = useState<null | { text: string; variant: 'success' | 'error' | 'info' }>(null);
  const showBanner = (b: { text: string; variant: 'success' | 'error' | 'info' }) => {
    setBanner(b);
    window.clearTimeout((showBanner as any)._t);
    (showBanner as any)._t = window.setTimeout(() => setBanner(null), 3200);
  };

  // ESC -> cerrar
  useEffect(() => {
    const onKey = (e: KeyboardEvent) => { if (e.key === 'Escape') onClose(); };
    document.addEventListener('keydown', onKey);
    return () => document.removeEventListener('keydown', onKey);
  }, [onClose]);

  // Export JSON (delta de overrides)
  const download = () => {
    if (!canBulk) {
      showBanner({ text: 'Only admins can export overrides.', variant: 'error' });
      return;
    }
    if (!hasLocalChanges) return;
    const blob = new Blob([exportOverrides()], { type: 'application/json;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'catalog_overrides.json';
    a.click();
    URL.revokeObjectURL(url);
  };

  // Import JSON
  const triggerImport = () => {
    if (!canBulk) {
      showBanner({ text: 'Only admins can import overrides.', variant: 'error' });
      return;
    }
    fileInputRef.current?.click();
  };

  const onFilePicked: React.ChangeEventHandler<HTMLInputElement> = (e) => {
    const f = e.target.files?.[0];
    e.currentTarget.value = ''; // permite re-seleccionar el mismo archivo
    if (!f) return;
    if (!canBulk) {
      showBanner({ text: 'Only admins can import overrides.', variant: 'error' });
      return;
    }
    const reader = new FileReader();
    reader.onload = () => {
      const text = String(reader.result || '');
      const res = importOverrides(text);
      if (res.ok) {
        showBanner({ text: 'Overrides imported successfully.', variant: 'success' });
      } else {
        showBanner({ text: `Import failed: ${res.reason}`, variant: 'error' });
      }
    };
    reader.onerror = () => showBanner({ text: 'Could not read file.', variant: 'error' });
    reader.readAsText(f);
  };

  const body = (
    <div
      className="fixed inset-0 z-[120] flex items-center justify-center p-4"
      role="dialog" aria-modal="true"
      onMouseDown={(e) => { if (e.target === e.currentTarget) onClose(); }}
    >
      <div className="absolute inset-0 bg-black/55 backdrop-blur-sm" />
      <div
        ref={trapRef}
        className="relative card w-full max-w-5xl max-h[90vh] max-h-[90vh] overflow-hidden border border-[--color-border] shadow-xl"
        style={{ background: 'var(--color-surface)' }}
        onMouseDown={(e) => e.stopPropagation()}
      >
        {/* Header (chrome unificado) */}
        <div className="sticky top-0 z-10 modal-chrome modal-header px-5 py-3">
          <div className="accent-strip" aria-hidden />
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold flex items-center gap-2">
              Manage catalogs
              {/* ðŸ†• insignia de rol */}
              <RolePill role={isAdmin ? 'Admin' : isEditor ? 'Editor' : 'Viewer'} />
            </h3>
            <button className="btn-ghost" onClick={onClose} aria-label="Close">âœ•</button>
          </div>
        </div>

        {/* Body (con edge fades para scroll) */}
        <div className="overflow-y-auto px-5 py-4 space-y-4 relative">
          <div className="edge-fade edge-top" aria-hidden />

          {/* banner */}
          {banner && (
            <div
              className={`rounded-lg border px-3 py-2 text-sm ${
                banner.variant === 'success'
                  ? 'border-emerald-500/40 bg-emerald-500/10 text-emerald-600'
                  : banner.variant === 'info'
                    ? 'border-sky-500/40 bg-sky-500/10 text-sky-700'
                    : 'border-[--color-accent]/50 bg-[--color-accent]/10 text-[--color-accent]'
              }`}
              role="status"
            >
              {banner.text}
            </div>
          )}

          {/* Aviso de permisos */}
          {!canEdit && (
            <div className="rounded-lg border px-3 py-2 text-sm border-sky-500/40 bg-sky-500/10 text-sky-700">
              Read-only. Ask an admin for edit access.
            </div>
          )}
          {canEdit && !canBulk && (
            <div className="rounded-lg border px-3 py-2 text-sm border-amber-400/40 bg-amber-400/10 text-amber-700">
              Editors can edit items but only admins can import/export or reset overrides.
            </div>
          )}

          {/* resumen (tiles tipo KPI/subcard) */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-3">
            <Stat label="Campaigns" value={CAMPAIGNS.length} />
            <Stat label="Partners" value={PARTNERS.length} />
            <Stat label="Databases" value={DATABASES.length} />
            <Stat label="Themes" value={THEMES.length} />
            <Stat label="Types" value={TYPES.length} />
          </div>

          {/* tabs (pill/segmented) */}
          <TabBar value={tab} onChange={setTab} />

          {/* panels */}
          {tab === 'campaigns' && (
            <CampaignsPanel
              items={CAMPAIGNS}
              onAdd={(name, advertiser) => canEdit && addCampaignRef({ name, advertiser })}
              onUpdate={(oldName, patch) => canEdit && updateCampaignRef(oldName, patch)}
              onRemove={(name) => {
                if (!canEdit) return;
                if (confirm(`Remove local override for campaign "${name}"?`)) removeCampaignRef(name);
              }}
              disabled={!canEdit}
            />
          )}

          {tab === 'partners' && (
            <PartnersPanel
              items={PARTNERS}
              onAdd={(name, invoiceOffice) => canEdit && addPartnerRef({ name, invoiceOffice })}
              onUpdate={(oldName, patch) => canEdit && updatePartnerRef(oldName, patch)}
              onRemove={(name) => {
                if (!canEdit) return;
                if (confirm(`Remove local override for partner "${name}"?`)) removePartnerRef(name);
              }}
              disabled={!canEdit}
            />
          )}

          {tab === 'databases' && (
            <DatabasesPanel
              items={DATABASES}
              onAdd={(payload) => canEdit && addDatabaseRef(payload)}
              onUpdate={(oldName, patch) => canEdit && updateDatabaseRef(oldName, patch)}
              onRemove={(name) => {
                if (!canEdit) return;
                if (confirm(`Remove local override for database "${name}"?`)) removeDatabaseRef(name);
              }}
              disabled={!canEdit}
            />
          )}

          {tab === 'themes' && (
            <ThemesPanel
              items={THEMES}
              onAdd={(t) => canEdit && addTheme(t)}
              onRemove={(t) => {
                if (!canEdit) return;
                if (confirm(`Remove theme "${t}" from local overrides?`)) removeTheme(t);
              }}
              disabled={!canEdit}
            />
          )}

          {tab === 'types' && (
            <TypesPanel
              items={TYPES}
              onAdd={(t) => canEdit && addType(t)}
              onRemove={(t) => {
                if (!canEdit) return;
                if (confirm(`Remove type "${t}" from local overrides?`)) removeType(t);
              }}
              disabled={!canEdit}
            />
          )}

          <div className="edge-fade edge-bottom" aria-hidden />
        </div>

        {/* Footer (chrome unificado) */}
        <div className="sticky bottom-0 z-10 modal-chrome modal-footer px-5 py-3 flex items-center justify-end gap-2">
          {/* input oculto para importar */}
          <input
            ref={fileInputRef}
            type="file"
            accept="application/json,.json"
            className="hidden"
            onChange={onFilePicked}
          />
          {canBulk && (
            <button type="button" className="btn-ghost" onClick={triggerImport}>
              Import
            </button>
          )}
          <button
            type="button"
            className="btn-ghost disabled:opacity-50 disabled:pointer-events-none"
            onClick={() => {
              if (!canBulk) {
                showBanner({ text: 'Only admins can reset overrides.', variant: 'error' });
                return;
              }
              resetOverrides();
            }}
            disabled={!hasLocalChanges || !canBulk}
            title={
              !canBulk
                ? 'Only admins can reset overrides'
                : hasLocalChanges
                  ? 'Clear local overrides'
                  : 'No local changes'
            }
          >
            Reset local changes
          </button>
          <button
            type="button"
            className="btn-primary disabled:opacity-50 disabled:pointer-events-none"
            onClick={download}
            disabled={!hasLocalChanges || !canBulk}
            title={
              !canBulk
                ? 'Only admins can export overrides'
                : hasLocalChanges
                  ? 'Export local overrides as JSON'
                  : 'Nothing to export'
            }
          >
            Export changes
          </button>
        </div>
      </div>
    </div>
  );

  if (typeof document === 'undefined') return null;
  return createPortal(body, document.body);
}

/* -------------------------------- UI bits -------------------------------- */

function RolePill({ role }: { role: 'Admin' | 'Editor' | 'Viewer' }) {
  const cls =
    role === 'Admin'
      ? 'bg-emerald-500/12 text-emerald-700 border-emerald-300/60'
      : role === 'Editor'
        ? 'bg-amber-500/12 text-amber-700 border-amber-300/60'
        : 'bg-slate-400/15 text-slate-700 border-slate-300/60';
  return (
    <span className={`px-2 py-0.5 rounded-full text-[11px] font-semibold border ${cls}`}>
      {role}
    </span>
  );
}

function TabBar({ value, onChange }: { value: TabKey; onChange: (k: TabKey) => void }) {
  const tabs: { k: TabKey; label: string }[] = [
    { k: 'campaigns', label: 'Campaigns' },
    { k: 'partners',  label: 'Partners'  },
    { k: 'databases', label: 'Databases' },
    { k: 'themes',    label: 'Themes'    },
    { k: 'types',     label: 'Types'     },
  ];

  return (
    <nav className="sticky top-0 z-[1] pt-1" aria-label="Catalog sections">
      <div className="segmented">
        {tabs.map(({ k, label }) => (
          <button
            key={k}
            type="button"
            role="tab"
            aria-selected={value === k}
            className="segmented-tab"
            onClick={() => onChange(k)}
          >
            {label}
          </button>
        ))}
      </div>
    </nav>
  );
}

function Stat({ label, value }: { label: string; value: number | string }) {
  return (
    <div className="stat-tile p-3">
      <div className="text-[11px] uppercase text-[color:var(--color-text)]/65">{label}</div>
      <div className="text-xl font-semibold mt-1" style={{ fontVariantNumeric: 'tabular-nums' }}>
        {value}
      </div>
    </div>
  );
}

/* ------------------------------- Panels ---------------------------------- */

function CampaignsPanel(props: {
  items: { id: string; name: string; advertiser: string }[];
  onAdd: (name: string, advertiser?: string) => void;
  onUpdate: (oldName: string, patch: Partial<{ name: string; advertiser: string }>) => void;
  onRemove: (name: string) => void;
  disabled?: boolean;
}) {
  const { items, onAdd, onUpdate, onRemove, disabled } = props;
  const [q, setQ] = useState('');
  const [name, setName] = useState('');
  const [adv, setAdv] = useState('');

  const list = useMemo(() => {
    const s = q.trim().toLowerCase();
    if (!s) return items;
    return items.filter(i => i.name.toLowerCase().includes(s) || i.advertiser.toLowerCase().includes(s));
  }, [items, q]);

  return (
    <section className="grid gap-3">
      <SearchAndAdd
        searchValue={q}
        onSearch={setQ}
        addArea={
          disabled ? null : (
            <>
              <input value={name} onChange={(e)=>setName(e.target.value)} placeholder="Campaign name" className="input" />
              <input value={adv}  onChange={(e)=>setAdv(e.target.value)}  placeholder="Advertiser (optional)" className="input" />
              <button
                className="btn-primary"
                onClick={() => { if (name.trim()) { onAdd(name, adv || undefined); setName(''); setAdv(''); } }}
              >
                Add
              </button>
            </>
          )
        }
      />
      <EditableTable
        cols={['Name', 'Advertiser', '']}
        rows={list.map(i => ({
          key: i.id,
          cells: [
            <EditableText key="n" value={i.name} onSave={(v)=> v && onUpdate(i.name,{name:v})} disabled={disabled} />,
            <EditableText key="a" value={i.advertiser} onSave={(v)=> onUpdate(i.name,{advertiser:v})} disabled={disabled} />,
            <div key="act" className="shrink-0">
              {disabled ? null : (
                <RowActions
                  onEdit={() => {}}
                  onDuplicate={() => {
                    const newName = `${i.name} (copy)`;
                    onAdd(newName, i.advertiser);
                  }}
                  onDelete={() => onRemove(i.name)}
                />
              )}
            </div>
          ],
        }))}
      />
    </section>
  );
}

function PartnersPanel(props: {
  items: { id: string; name: string; defaultInvoiceOffice: 'DAT'|'CAR'|'INT'; isInternal?: boolean }[];
  onAdd: (name: string, invoiceOffice: string) => void;
  onUpdate: (oldName: string, patch: Partial<{ name: string; invoiceOffice: string }>) => void;
  onRemove: (name: string) => void;
  disabled?: boolean;
}) {
  const { items, onAdd, onUpdate, onRemove, disabled } = props;
  const [q, setQ] = useState('');
  const [name, setName] = useState('');
  const [office, setOffice] = useState<'DAT'|'CAR'|'INT'>('DAT');

  const list = useMemo(() => {
    const s = q.trim().toLowerCase();
    if (!s) return items;
    return items.filter(i => i.name.toLowerCase().includes(s));
  }, [items, q]);

  return (
    <section className="grid gap-3">
      <SearchAndAdd
        searchValue={q}
        onSearch={setQ}
        addArea={
          disabled ? null : (
            <>
              <input value={name} onChange={(e)=>setName(e.target.value)} placeholder="Partner name" className="input" />
              <select className="input" value={office} onChange={(e)=>setOffice(e.target.value as any)}>
                <option value="DAT">DAT</option><option value="CAR">CAR</option><option value="INT">INT</option>
              </select>
              <button className="btn-primary" onClick={()=>{ if (name.trim()) { onAdd(name, office); setName(''); setOffice('DAT'); }}}>Add</button>
            </>
          )
        }
      />
      <EditableTable
        cols={['Name', 'Invoice office', '']}
        rows={list.map(i => ({
          key: i.id,
          cells: [
            <EditableText key="n" value={i.name} onSave={(v)=> v && onUpdate(i.name,{name:v})} disabled={disabled} />,
            <EditableSelect
              key="o"
              value={i.defaultInvoiceOffice}
              options={['DAT','CAR','INT']}
              onSave={(v)=> onUpdate(i.name,{invoiceOffice:v})}
              disabled={disabled}
            />,
            <div key="act" className="shrink-0">
              {disabled ? null : (
                <RowActions
                  onEdit={() => {}}
                  onDuplicate={() => onAdd(`${i.name} (copy)`, i.defaultInvoiceOffice)}
                  onDelete={() => onRemove(i.name)}
                />
              )}
            </div>,
          ],
        }))}
      />
    </section>
  );
}

function DatabasesPanel(props: {
  items: { id: string; name: string; geo: string; dbType: 'B2B'|'B2C'|'Mixed'|string }[];
  onAdd: (d: { name: string; id?: string; geo: string; dbType: 'B2B'|'B2C'|'Mixed'|string }) => void;
  onUpdate: (oldName: string, patch: Partial<{ name: string; id?: string; geo: string; dbType: 'B2B'|'B2C'|'Mixed'|string }>) => void;
  onRemove: (name: string) => void;
  disabled?: boolean;
}) {
  const { items, onAdd, onUpdate, onRemove, disabled } = props;
  const [q, setQ] = useState('');
  const [name, setName] = useState('');
  const [geo, setGeo] = useState('');
  const [dbType, setDbType] = useState<'B2B'|'B2C'|'Mixed'>('B2C');

  const geoStrict = normalizeGeoStrict(geo);

  const list = useMemo(() => {
    const s = q.trim().toLowerCase();
    if (!s) return items;
    return items.filter(i => i.name.toLowerCase().includes(s) || i.geo.toLowerCase().includes(s));
  }, [items, q]);

  return (
    <section className="grid gap-3">
      <SearchAndAdd
        searchValue={q}
        onSearch={setQ}
        addArea={
          disabled ? null : (
            <>
              <input value={name} onChange={(e)=>setName(e.target.value)} placeholder="Database name" className="input" />
              <input
                value={geo}
                onChange={(e)=>setGeo(e.target.value.toUpperCase().slice(0,5))}
                placeholder="GEO (ES, FR, GB, MULTI)"
                className={`input ${geo && !geoStrict ? 'input-error' : ''}`}
                aria-invalid={geo && !geoStrict || undefined}
              />
              <select className="input" value={dbType} onChange={(e)=>setDbType(e.target.value as any)}>
                <option value="B2C">B2C</option>
                <option value="B2B">B2B</option>
                <option value="Mixed">Mixed</option>
              </select>
              <button
                className="btn-primary"
                disabled={!name.trim() || !geoStrict}
                onClick={()=>{
                  if (!name.trim() || !geoStrict) return;
                  onAdd({ name, geo: geoStrict, dbType });
                  setName(''); setGeo(''); setDbType('B2C');
                }}
              >
                Add
              </button>
            </>
          )
        }
      />
      <EditableTable
        cols={['Name', 'GEO', 'DB Type', '']}
        rows={list.map(i => ({
          key: i.id,
          cells: [
            <EditableText key="n" value={i.name} onSave={(v)=> v && onUpdate(i.name,{name:v})} disabled={disabled} />,
            <GeoCell key="g" value={i.geo} onValid={(g)=> onUpdate(i.name,{geo:g})} disabled={disabled} />,
            <EditableSelect
              key="t"
              value={i.dbType}
              options={['B2C','B2B','Mixed']}
              onSave={(v)=> onUpdate(i.name,{dbType:v})}
              disabled={disabled}
            />,
            <div key="act" className="shrink-0">
              {disabled ? null : (
                <RowActions
                  onEdit={() => {}}
                  onDuplicate={() =>
                    onAdd({ name: `${i.name} (copy)`, geo: i.geo, dbType: (i.dbType as any) || 'B2C' })
                  }
                  onDelete={() => onRemove(i.name)}
                />
              )}
            </div>,
          ],
        }))}
      />
    </section>
  );
}

function ThemesPanel(props: {
  items: string[];
  onAdd: (t: string) => void;
  onRemove: (t: string) => void;
  disabled?: boolean;
}) {
  const { items, onAdd, onRemove, disabled } = props;
  const [q, setQ] = useState('');
  const [val, setVal] = useState('');

  const list = useMemo(() => {
    const s = q.trim().toLowerCase();
    if (!s) return items;
    return items.filter(i => i.toLowerCase().includes(s));
  }, [items, q]);

  return (
    <section className="grid gap-3">
      <SearchAndAdd
        searchValue={q}
        onSearch={setQ}
        addArea={
          disabled ? null : (
            <>
              <input value={val} onChange={(e)=>setVal(e.target.value)} placeholder="Theme" className="input" />
              <button className="btn-primary" onClick={()=>{ if (val.trim()) { onAdd(val); setVal(''); }}}>Add</button>
            </>
          )
        }
      />
      <EditableTable
        cols={['Theme', '']}
        rows={list.map(v => ({
          key: v,
          cells: [
            <span key="t" className="px-1.5 py-0.5 rounded bg-white/5 border border-[--color-border]">{v}</span>,
            <div key="d" className="shrink-0">
              {disabled ? null : <DangerButton onClick={()=>onRemove(v)} />}
            </div>,
          ],
        }))}
      />
    </section>
  );
}

function TypesPanel(props: {
  items: string[];
  onAdd: (t: string) => void;
  onRemove: (t: string) => void;
  disabled?: boolean;
}) {
  const { items, onAdd, onRemove, disabled } = props;
  const [q, setQ] = useState('');
  const [val, setVal] = useState('');

  const list = useMemo(() => {
    const s = q.trim().toLowerCase();
    if (!s) return items;
    return items.filter(i => i.toLowerCase().includes(s));
  }, [items, q]);

  return (
    <section className="grid gap-3">
      <SearchAndAdd
        searchValue={q}
        onSearch={setQ}
        addArea={
          disabled ? null : (
            <>
              <input value={val} onChange={(e)=>setVal(e.target.value)} placeholder="Type (e.g., CPL)" className="input" />
              <button className="btn-primary" onClick={()=>{ if (val.trim()) { onAdd(val); setVal(''); }}}>Add</button>
            </>
          )
        }
      />
      <EditableTable
        cols={['Type', '']}
        rows={list.map(v => ({
          key: v,
          cells: [
            <span key="t" className="px-1.5 py-0.5 rounded bg-white/5 border border-[--color-border]">{v}</span>,
            <div key="d" className="shrink-0">
              {disabled ? null : <DangerButton onClick={()=>onRemove(v)} />}
            </div>,
          ],
        }))}
      />
    </section>
  );
}

/* ---------------------------- Reusable pieces ----------------------------- */

function SearchAndAdd({
  searchValue, onSearch, addArea,
}: {
  searchValue: string;
  onSearch: (v: string) => void;
  addArea: React.ReactNode | null;
}) {
  return (
    <div className="subcard p-3 md:p-4 grid gap-2">
      <div className="flex items-center gap-2">
        <input
          className="input w-full"
          placeholder="Searchâ€¦"
          value={searchValue}
          onChange={(e)=>onSearch(e.target.value)}
        />
      </div>
      {addArea && <div className="flex flex-wrap items-center gap-2">{addArea}</div>}
    </div>
  );
}

function EditableTable({ cols, rows }: {
  cols: string[];
  rows: { key: string; cells: React.ReactNode[] }[];
}) {
  return (
    <div className="manage-table">
      <table className="w-full text-sm">
        <thead className="sticky top-0 bg-[--color-surface] z-[1]">
          <tr>
            {cols.map((c) => (
              <th key={c} className="text-left font-medium px-3 py-2">{c}</th>
            ))}
          </tr>
        </thead>
      </table>

      {/* ðŸ†• Scroll vertical para todas las listas */}
      <div className="manage-rows divide-y divide-[--color-border]/60 max-h-[60vh] overflow-y-auto pr-1">
        {rows.map(r => (
          <div
            key={r.key}
            className="grid grid-cols-[1fr_1fr_auto] md:grid-cols-[1.2fr_1fr_1fr_auto] gap-3 px-3 py-2 items-center"
          >
            {r.cells.map((cell, i) => <div key={i} className="min-w-0">{cell}</div>)}
          </div>
        ))}
        {rows.length === 0 && (
          <div className="px-3 py-5 text-sm opacity-70">No items.</div>
        )}
      </div>
    </div>
  );
}

function EditableText({ value, onSave, disabled }: { value: string; onSave: (v: string) => void; disabled?: boolean }) {
  const [v, setV] = useState(value);
  useEffect(()=>setV(value),[value]);
  return (
    <div className="flex items-center gap-2">
      <input className="input w-full" value={v} onChange={(e)=>setV(e.target.value)} disabled={disabled} />
      <button className="btn-ghost disabled:opacity-50" title="Save" onClick={()=>onSave(v)} disabled={disabled}>âœ”</button>
    </div>
  );
}

function EditableSelect({
  value, options, onSave, disabled,
}: { value: string; options: string[]; onSave: (v: string) => void; disabled?: boolean }) {
  const [v, setV] = useState(value);
  useEffect(()=>setV(value),[value]);
  return (
    <div className="flex items-center gap-2">
      <select className="input" value={v} onChange={(e)=>setV(e.target.value)} disabled={disabled}>
        {options.map(o => <option key={o} value={o}>{o}</option>)}
      </select>
      <button className="btn-ghost disabled:opacity-50" title="Save" onClick={()=>onSave(v)} disabled={disabled}>âœ”</button>
    </div>
  );
}

/** ðŸ†• Celda con validaciÃ³n estricta de GEO */
function GeoCell({
  value, onValid, disabled,
}: {
  value: string;
  onValid: (geo: string) => void; // sÃ³lo se llama con GEO vÃ¡lido
  disabled?: boolean;
}) {
  const [v, setV] = useState(value);
  useEffect(() => setV(value), [value]);

  const valid = normalizeGeoStrict(v);

  return (
    <div className="flex items-center gap-2">
      <input
        className={`input w-full ${v && !valid ? 'input-error' : ''}`}
        value={v}
        onChange={(e)=>setV(e.target.value.toUpperCase().slice(0,5))}
        onBlur={()=>{
          const norm = normalizeGeoStrict(v);
          if (norm && norm !== value) onValid(norm);
          else setV(value); // vuelve si no es vÃ¡lido
        }}
        placeholder="ES / FR / GB / MULTI"
        aria-invalid={v && !valid || undefined}
        disabled={disabled}
      />
      <button
        className="btn-ghost disabled:opacity-50"
        title="Save"
        onClick={()=>{ const norm = normalizeGeoStrict(v); if (norm) onValid(norm); }}
        disabled={disabled || !valid}
      >
        âœ”
      </button>
    </div>
  );
}

function DangerButton({ onClick, disabled }: { onClick: () => void; disabled?: boolean }) {
  return (
    <button className="btn-ghost text-[--color-accent] disabled:opacity-50 disabled:pointer-events-none" title="Remove" onClick={onClick} disabled={disabled}>
      âœ•
    </button>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\charts\theme.ts =====
// components/charts/theme.ts
export const chartTheme = {
  tick: { fill: 'var(--chart-axis)', fontSize: 12 },
  axisLine: { stroke: 'var(--chart-grid)' },
  tickLine: { stroke: 'var(--chart-grid)' },
  grid: 'var(--chart-grid)',
  tooltip: {
    contentStyle: {
      background: 'var(--chart-tooltip-bg)',
      border: '1px solid var(--color-border)',
      borderRadius: 8,
    },
    itemStyle: { color: 'var(--color-text)' },
    labelStyle: { color: 'var(--color-text)' },
  },
  palette: ['var(--chart-1)','var(--chart-2)','var(--chart-3)','var(--chart-4)','var(--chart-5)'],
};

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\create-campaign\CreateCampaignModal.tsx =====
'use client';

import { createPortal } from 'react-dom';
import { useEffect, useRef, useState } from 'react';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { useCampaignData } from '@/context/CampaignDataContext';
import { CampaignRow } from '@/types/campaign';
import Combobox from '@/components/ui/Combobox';
import Tooltip from '@/components/ui/Tooltip';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';
import QuickAddCampaignModal from '@/components/create-campaign/QuickAddCampaignModal';
import QuickAddPartnerModal from '@/components/create-campaign/QuickAddPartnerModal';
import QuickAddDatabaseModal from '@/components/create-campaign/QuickAddDatabaseModal';
import FieldWithAddon from '@/components/ui/FieldWithAddon';
import type { DBType, InvoiceOffice } from '@/data/reference';
import { useAuth } from '@/context/AuthContext'; // ðŸ†• roles para quick-add

// ======================= Utils =======================

const fmtEUR = new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' });
const fmtPct = new Intl.NumberFormat('es-ES', { style: 'percent', maximumFractionDigits: 2 });
const fmtNum = new Intl.NumberFormat('es-ES', { maximumFractionDigits: 2 });

function parseNum(v: any): number {
  if (v === '' || v == null) return 0;
  if (typeof v === 'number') return Number.isFinite(v) ? v : 0;

  let s = String(v).trim().replace(/\s/g, '');
  if (s === '') return 0;

  const hasComma = s.includes(',');
  const hasDot = s.includes('.');

  if (hasComma && hasDot) {
    const lastComma = s.lastIndexOf(',');
    const lastDot = s.lastIndexOf('.');
    if (lastComma > lastDot) s = s.replace(/\./g, '').replace(',', '.');
    else s = s.replace(/,/g, '');
  } else if (hasComma) {
    s = s.replace(',', '.');
  }

  const n = Number(s);
  return Number.isFinite(n) ? n : 0;
}

// Toast sin dependencias (ajustado a tema claro)
function showToast(message: string, opts?: { variant?: 'success' | 'error'; duration?: number }) {
  if (typeof document === 'undefined') return;
  const { variant = 'success', duration = 2600 } = opts || {};
  const host = document.createElement('div');
  host.className = 'fixed bottom-4 right-4 z-[200]';
  const toast = document.createElement('div');
  toast.className = 'pointer-events-auto select-none rounded-lg border px-3 py-2 shadow-xl text-sm';
  toast.style.borderColor = 'var(--color-border)';
  toast.style.background = 'var(--color-surface)';
  toast.style.color = 'var(--color-text)';
  toast.style.transition = 'transform 180ms ease, opacity 180ms ease';
  toast.style.transform = 'translateY(8px)';
  toast.style.opacity = '0';
  toast.textContent = message;

  if (variant === 'error') {
    toast.style.outline = '1px solid #ff6b6b55';
    toast.style.boxShadow = '0 10px 30px rgba(239,68,68,0.12)';
  } else {
    toast.style.outline = '1px solid rgba(16,185,129,.25)';
    toast.style.boxShadow = '0 10px 30px rgba(16,185,129,.12)';
  }

  host.appendChild(toast);
  document.body.appendChild(host);

  requestAnimationFrame(() => {
    toast.style.transform = 'translateY(0px)';
    toast.style.opacity = '1';
  });

  setTimeout(() => {
    toast.style.transform = 'translateY(8px)';
    toast.style.opacity = '0';
    setTimeout(() => {
      try { document.body.removeChild(host); } catch {}
    }, 200);
  }, duration);
}

type Mode = 'create' | 'edit';

// ===== Enums fuertes (sin casts) =====
const DEAL_TYPES = ['CPL', 'CPM', 'CPC', 'CPA'] as const;
type DealType = typeof DEAL_TYPES[number];

const DB_TYPES = ['B2B', 'B2C', 'Mixed'] as const;
const INVOICE_OFFICES = ['DAT', 'CAR', 'INT'] as const;

const isDBType = (x: any): x is DBType => (DB_TYPES as readonly string[]).includes(x);
const isInvoiceOffice = (x: any): x is InvoiceOffice => (INVOICE_OFFICES as readonly string[]).includes(x);

// Zod helpers
const ZDealType = z.enum(DEAL_TYPES);
const ZDBType = z.enum(DB_TYPES);
const ZInvoiceOffice = z.enum(INVOICE_OFFICES);

// ======================= Component =======================
export default function CreateCampaignModal({
  mode = 'create',
  initialRow,
  seed,
  onClose,
  onSaved,
}: {
  mode?: Mode;
  initialRow?: CampaignRow;
  seed?: Partial<CampaignRow>;
  onClose: () => void;
  onSaved?: (id: string) => void;
}) {
  const { addCampaign, updateCampaign } = useCampaignData();

  // ðŸ†• flag de permisos para quick-add
  const { isAdmin, isEditor } = useAuth();
  const canQuickAdd = isAdmin || isEditor;

  // === CatÃ¡logos dinÃ¡micos ===
  const catalogs = useCatalogOverrides();
  const CAMPAIGNS = catalogs?.CAMPAIGNS ?? [];
  const PARTNERS = catalogs?.PARTNERS ?? [];
  const DATABASES = catalogs?.DATABASES ?? [];
  const THEMES = catalogs?.THEMES ?? [];
  const TYPES = (catalogs?.TYPES ?? DEAL_TYPES.slice()).slice();

  // Resolver de oficina de facturaciÃ³n tipado y seguro
  function resolveOffice(geo?: string, partner?: string): InvoiceOffice {
    const res = catalogs?.resolveInvoiceOfficeMerged
      ? catalogs.resolveInvoiceOfficeMerged(geo, partner)
      : 'DAT';
    return isInvoiceOffice(res) ? res : 'DAT';
  }

  // == Scroll lock mientras el modal estÃ¡ abierto ==
  useEffect(() => {
    const html = document.documentElement;
    const prevOverflow = html.style.overflow;
    const prevPadRight = html.style.paddingRight;

    const scrollbarW = window.innerWidth - html.clientWidth;
    html.style.overflow = 'hidden';
    if (scrollbarW > 0) html.style.paddingRight = `${scrollbarW}px`;

    return () => {
      html.style.overflow = prevOverflow;
      html.style.paddingRight = prevPadRight;
    };
  }, []);

  // funciones locales
  const findCampaignByName = (name: string) =>
    CAMPAIGNS.find(
      (c: any) => (c?.name || '').trim().toLowerCase() === (name || '').trim().toLowerCase()
    );

  const [submitMode, setSubmitMode] = useState<'save' | 'save_add'>('save');
  const [openAddCampaign, setOpenAddCampaign] = useState(false);
  const [openAddPartner, setOpenAddPartner] = useState(false);
  const [openAddDatabase, setOpenAddDatabase] = useState(false);

  // ValidaciÃ³n con campaÃ±as dinÃ¡micas
  const allowedCampaigns = new Set(CAMPAIGNS.map((c: any) => String(c?.name || '').toLowerCase()));

  const schema = z.object({
    date: z.string().min(1, 'Required'),
    campaign: z
      .string()
      .min(1, 'Required')
      .refine((v) => {
        const val = (v ?? '').trim().toLowerCase();
        if (allowedCampaigns.has(val)) return true;
        if (mode === 'edit' && initialRow) return val === initialRow.campaign.trim().toLowerCase();
        return false;
      }, 'Selecciona una campaÃ±a de la lista'),
    advertiser: z.string().min(1, 'Required'),
    invoiceOffice: ZInvoiceOffice, // <- enum fuerte
    partner: z.string().min(1, 'Required'),
    theme: z.string().min(1, 'Required'),
    price: z.coerce.number().nonnegative(),
    priceCurrency: z.string().default('EUR'),
    type: ZDealType, // <- enum fuerte
    vSent: z.coerce.number().int().nonnegative(),
    routingCosts: z.coerce.number().nonnegative(),
    qty: z.coerce.number().int().nonnegative(),
    turnover: z.coerce.number().nonnegative(),
    margin: z.coerce.number(),
    marginPct: z.number().nullable().default(null),
    ecpm: z.coerce.number().nonnegative(),
    database: z.string().min(1, 'Required'),
    geo: z.string().min(1, 'Required'),
    databaseType: ZDBType, // <- enum fuerte
  });
  type FormValues = z.infer<typeof schema>;
  type FieldName = keyof FormValues;

  // Helpers
  const safeDealType = (t: any): DealType =>
    (DEAL_TYPES as readonly string[]).includes(t) ? (t as DealType) : 'CPL';

  // RHF
  const { register, handleSubmit, formState, reset, watch, setValue, getValues } =
    useForm<FormValues>({
      resolver: zodResolver(schema),
      mode: 'onSubmit',
      defaultValues:
        mode === 'edit' && initialRow
          ? {
              date: initialRow.date,
              campaign: initialRow.campaign,
              advertiser: initialRow.advertiser,
              invoiceOffice: isInvoiceOffice(initialRow.invoiceOffice)
                ? initialRow.invoiceOffice
                : resolveOffice(initialRow.geo, initialRow.partner),
              partner: initialRow.partner || '',
              theme: initialRow.theme || '',
              price: initialRow.price,
              priceCurrency: initialRow.priceCurrency || 'EUR',
              type: safeDealType(initialRow.type),
              vSent: initialRow.vSent,
              routingCosts: initialRow.routingCosts,
              qty: initialRow.qty,
              turnover: initialRow.turnover,
              margin: initialRow.margin,
              marginPct:
                initialRow.turnover > 0 ? initialRow.margin / initialRow.turnover : null,
              ecpm: initialRow.ecpm,
              database: initialRow.database,
              geo: initialRow.geo,
              databaseType: isDBType(initialRow.databaseType) ? initialRow.databaseType : 'B2B',
            }
          : {
              date: seed?.date ?? new Date().toISOString().slice(0, 10),
              campaign: seed?.campaign ?? '',
              advertiser: seed?.advertiser ?? '',
              invoiceOffice: isInvoiceOffice(seed?.invoiceOffice)
                ? seed!.invoiceOffice!
                : resolveOffice(undefined, undefined),
              partner: seed?.partner ?? '',
              theme: seed?.theme ?? '',
              price: seed?.price ?? 0,
              priceCurrency: seed?.priceCurrency ?? 'EUR',
              type: safeDealType(seed?.type ?? TYPES[0] ?? 'CPL'),
              vSent: seed?.vSent ?? 0,
              routingCosts: seed?.routingCosts ?? 0,
              qty: seed?.qty ?? 0,
              turnover: seed?.turnover ?? 0,
              margin: seed?.margin ?? 0,
              marginPct: seed?.turnover ? (seed.margin ?? 0) / (seed.turnover ?? 1) : null,
              ecpm: seed?.ecpm ?? 0,
              database: seed?.database ?? '',
              // geo y databaseType se autocompletan tras escoger DB
            } as Partial<FormValues>,
    });

  const { errors, isSubmitting, isDirty, isSubmitted, touchedFields, dirtyFields } = formState;

  const showErr = (name: FieldName) =>
    !!(errors as any)[name] &&
    (isSubmitted || (touchedFields as any)[name] || (dirtyFields as any)[name]);

  const firstRef = useRef<HTMLInputElement>(null);
  const formRef = useRef<HTMLFormElement>(null);
  const trapRef = useRef<HTMLDivElement>(null);

  // Watches
  const campaign = watch('campaign');
  const database = watch('database');
  const geo = watch('geo');
  const partner = watch('partner');
  const price = watch('price');
  const qty = watch('qty');
  const vSent = watch('vSent');
  const watchTurnover = watch('turnover');
  const watchMargin = watch('margin');
  const watchEcpm = watch('ecpm');
  const watchMarginPct = watch('marginPct');

  // === Reglas automÃ¡ticas con catÃ¡logos dinÃ¡micos ===

  // (1) Campaign -> Advertiser (aÃ±ade CAMPAIGNS a deps)
  useEffect(() => {
    const c = findCampaignByName(campaign || '');
    setValue('advertiser', c?.advertiser ?? '', { shouldValidate: !!c });
  }, [campaign, CAMPAIGNS, setValue]);

  // Database -> GEO + DB Type (idempotente)
  useEffect(() => {
    const db = DATABASES.find((d: any) => d?.name === database);
    const nextGeo = db?.geo ?? '';
    const nextDbType: DBType | undefined = isDBType(db?.dbType) ? db!.dbType : undefined;

    const currGeo = getValues('geo');
    const currDbt = getValues('databaseType');

    if (currGeo !== nextGeo) {
      setValue('geo', nextGeo, { shouldValidate: !!db, shouldDirty: !!db });
    }
    if (nextDbType && currDbt !== nextDbType) {
      setValue('databaseType', nextDbType, { shouldValidate: !!db, shouldDirty: !!db });
    }
  }, [database, DATABASES, getValues, setValue]);

  // (2) GEO + Partner -> Invoice office (no ensuciar si no cambia)
  useEffect(() => {
    const inv = resolveOffice(geo || undefined, partner || undefined);
    const curr = getValues('invoiceOffice');
    if (curr !== inv) {
      setValue('invoiceOffice', inv, { shouldValidate: false, shouldDirty: true });
    }
  }, [geo, partner, setValue, getValues]);

  // CÃ¡lculos en vivo
  useEffect(() => {
    const _price = parseNum(price);
    const _qty = parseNum(qty);
    const _vSent = parseNum(vSent);

    const routingCosts = (_vSent / 1000) * 0.18;
    const turnover = _qty * _price;
    const margin = turnover - routingCosts;
    const marginPct = turnover > 0 ? margin / turnover : null;
    const ecpm = _vSent > 0 ? (turnover / _vSent) * 1000 : 0;

    setValue('routingCosts', Number(routingCosts.toFixed(2)));
    setValue('turnover', Number(turnover.toFixed(2)));
    setValue('margin', Number(margin.toFixed(2)));
    setValue('marginPct', marginPct == null ? null : Number(marginPct.toFixed(4)));
    setValue('ecpm', Number(ecpm.toFixed(2)));
  }, [price, qty, vSent, setValue]);

  // EnvÃ­o
  const onSubmit = async (data: FormValues) => {
    try {
      const _price = parseNum(data.price);
      const _qty = parseNum(data.qty);
      const _vSent = parseNum(data.vSent);
      const routingCosts = Number(((_vSent / 1000) * 0.18).toFixed(2));
      const turnover = Number((_qty * _price).toFixed(2));
      const margin = Number((turnover - routingCosts).toFixed(2));
      const ecpm = Number((_vSent > 0 ? (turnover / _vSent) * 1000 : 0).toFixed(2));

      const payload: Omit<CampaignRow, 'id'> = {
        date: data.date,
        campaign: data.campaign,
        advertiser: data.advertiser,
        invoiceOffice: data.invoiceOffice,
        partner: data.partner,
        theme: data.theme,
        price: _price,
        priceCurrency: data.priceCurrency || 'EUR',
        type: data.type,
        vSent: _vSent,
        routingCosts,
        qty: _qty,
        turnover,
        margin,
        ecpm,
        database: data.database,
        geo: data.geo,
        databaseType: data.databaseType,
      };

      if (mode === 'edit' && initialRow) {
        updateCampaign(initialRow.id, payload);
        showToast('Campaign updated successfully');
        onSaved?.(initialRow.id);
        onClose();
        return;
      }

      await Promise.resolve(addCampaign(payload));
      showToast(
        submitMode === 'save_add' ? 'Campaign saved. Add anotherâ€¦' : 'Campaign saved successfully'
      );

      if (submitMode === 'save_add') {
        reset();
        setTimeout(() => firstRef.current?.focus(), 0);
      } else {
        reset();
        onClose();
      }
    } catch (e) {
      console.error(e);
      showToast('Something went wrong while saving', { variant: 'error' });
    }
  };

  const onInvalid = () => {
    showToast('Please fix the highlighted fields', { variant: 'error' });
  };

  const requestClose = () => {
    if (mode === 'edit' && isDirty) {
      const ok = confirm('You have unsaved changes. Discard them?');
      if (!ok) return;
    }
    onClose();
  };

  // ESC + foco inicial + atajos
  useEffect(() => {
    const onKey = (e: KeyboardEvent) => {
      if (e.key === 'Escape') requestClose();
      if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === 's') {
        e.preventDefault();
        setSubmitMode('save');
        formRef.current?.requestSubmit();
      }
      const target = e.target as HTMLElement | null;
      const role = target?.getAttribute?.('role');
      if (!e.ctrlKey && !e.metaKey && !e.altKey && e.key === 'Enter' && role !== 'combobox') {
        setSubmitMode('save');
      }
    };
    document.addEventListener('keydown', onKey);
    setTimeout(() => firstRef.current?.focus(), 0);
    return () => document.removeEventListener('keydown', onKey);
  }, []); // eslint-disable-line

  // Focus trap
  useEffect(() => {
    const node = trapRef.current;
    if (!node) return;

    const selector = [
      'a[href]',
      'button:not([disabled])',
      'textarea:not([disabled])',
      'input:not([disabled])',
      'select:not([disabled])',
      '[tabindex]:not([tabindex="-1"])',
    ].join(',');

    const handle = (e: KeyboardEvent) => {
      if (e.key !== 'Tab') return;
      const focusables = Array.from(node.querySelectorAll<HTMLElement>(selector)).filter(
        (el) => el.offsetParent !== null
      );
      if (!focusables.length) return;
      const first = focusables[0];
      const last = focusables[focusables.length - 1];
      const active = document.activeElement as HTMLElement | null;

      if (e.shiftKey) {
        if (active === first || !node.contains(active)) {
          last.focus();
          e.preventDefault();
        }
      } else {
        if (active === last) {
          first.focus();
          e.preventDefault();
        }
      }
    };

    node.addEventListener('keydown', handle);
    return () => node.removeEventListener('keydown', handle);
  }, []);

  const marginTextClass =
    watchMargin > 0
      ? 'text-[--color-primary]'
      : watchMargin < 0
      ? 'text-[--color-accent]'
      : 'opacity-70';

  // Inputs de solo lectura â€” compacto + contraste
  const roInput = 'input h-10 border-dotted bg-[color:var(--color-surface-2)]/70';
  const roErr = (bad?: boolean) => `${roInput} ${bad ? 'input-error' : ''}`;
  const errId = (name: string) => `err-${name}`;

  const routingHint =
    vSent > 0 ? `${fmtNum.format(vSent)}/1000 Ã— 0.18` : 'vSent / 1000 Ã— 0.18';
  const turnoverHint =
    qty > 0 || price > 0
      ? `${fmtNum.format(qty || 0)} Ã— ${fmtNum.format(price || 0)}`
      : 'qty Ã— price';
  const marginHint =
    watchTurnover > 0 || (watch('routingCosts') ?? 0) > 0
      ? `${fmtEUR.format(watchTurnover || 0)} âˆ’ ${fmtEUR.format(watch('routingCosts') || 0)}`
      : 'turnover âˆ’ routing';
  const ecpmHint =
    vSent > 0
      ? `(${fmtEUR.format(watchTurnover || 0)} / ${fmtNum.format(vSent)}) Ã— 1000`
      : '(turnover / vSent) Ã— 1000';

  // === UI ===
  const modal = (
    <div
      className="fixed inset-0 z-[100] flex items-center justify-center p-4"
      role="dialog"
      aria-modal="true"
    >
      {/* Backdrop (oscuro + blur) */}
      <div
        className="absolute inset-0 bg-black/55 backdrop-blur-sm"
        data-backdrop="true"
        onMouseDown={requestClose}
        aria-hidden="true"
      />

      {/* Card */}
      <div
        ref={trapRef}
        className="relative card w-full max-w-5xl max-h-[90vh] overflow-hidden border border-[--color-border] shadow-xl"
        style={{ background: 'var(--color-surface)' }}
        onMouseDown={(e) => {
          // Evita que el click dentro del card burbujee al backdrop
          e.stopPropagation();
        }}
      >
        {/* Header sticky */}
        <div className="sticky top-0 z-10 modal-chrome modal-header px-5 py-3">
          <div className="accent-strip" aria-hidden />
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold">
              {mode === 'edit' ? 'Edit campaign' : 'Create campaign'}
            </h3>
            <button className="btn-ghost" onClick={requestClose} aria-label="Close">âœ•</button>
          </div>
        </div>

        {/* Body */}
        <div className="overflow-y-auto px-5 py-4 relative">
          <div className="edge-fade edge-top" aria-hidden />

          <form
            ref={formRef}
            id="create-edit-campaign-form"
            onSubmit={handleSubmit(onSubmit, onInvalid)}
            className="grid grid-cols-12 gap-3"
          >
            {/* A) Basics */}
            <Section title="Basics">
              <div className="grid grid-cols-12 gap-2">
                <div className="col-span-12 md:col-span-4">
                  <Field label="Date">
                    <div className="relative">
                      <input
                        ref={firstRef as any}
                        type="date"
                        {...register('date')}
                        aria-invalid={showErr('date') || undefined}
                        aria-describedby={showErr('date') ? errId('date') : undefined}
                        className={`input input-date h-10 ${showErr('date') ? 'input-error' : ''}`}
                      />
                      {showErr('date') && (
                        <Tooltip
                          content={errors.date?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err id={errId('date')} e={showErr('date') ? errors.date : undefined} />
                  </Field>
                </div>
                <div className="col-span-12 md:col-span-8">
                  <Field label="Campaign">
                    <FieldWithAddon
                      onAdd={canQuickAdd ? () => setOpenAddCampaign(true) : undefined} // ðŸ†•
                      addAriaLabel="Add campaign"
                      className="w-full"
                    >
                      <div className="w-full rounded-r-none">
                        <Combobox
                          id="campaign"
                          ariaLabel="Campaign"
                          className="w-full"
                          options={CAMPAIGNS.map((c: any) => ({ id: c.id, value: c.name }))}
                          value={watch('campaign')}
                          onChange={(v) =>
                            setValue('campaign', v, { shouldValidate: true, shouldDirty: true })
                          }
                          invalid={showErr('campaign')}
                          ariaDescribedby={showErr('campaign') ? errId('campaign') : undefined}
                        />
                      </div>
                    </FieldWithAddon>

                    <Err
                      id={errId('campaign')}
                      e={showErr('campaign') ? errors.campaign : undefined}
                    />
                  </Field>
                </div>
                <div className="col-span-12 md:col-span-6">
                  <Field label="Advertiser" badge="AUTO">
                    <div className="relative">
                      <input
                        type="text"
                        {...register('advertiser')}
                        readOnly
                        aria-invalid={showErr('advertiser') || undefined}
                        aria-describedby={showErr('advertiser') ? errId('advertiser') : undefined}
                        className={roErr(showErr('advertiser'))}
                      />
                      {showErr('advertiser') && (
                        <Tooltip
                          content={errors.advertiser?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err
                      id={errId('advertiser')}
                      e={showErr('advertiser') ? errors.advertiser : undefined}
                    />
                  </Field>
                </div>

                <div className="col-span-12 md:col-span-6">
                  <Field label="Invoice office" badge="AUTO">
                    <div className="relative">
                      <input
                        type="text"
                        {...register('invoiceOffice')}
                        readOnly
                        aria-invalid={showErr('invoiceOffice') || undefined}
                        aria-describedby={
                          showErr('invoiceOffice') ? errId('invoiceOffice') : undefined
                        }
                        className={roErr(showErr('invoiceOffice'))}
                      />
                      {showErr('invoiceOffice') && (
                        <Tooltip
                          content={errors.invoiceOffice?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err
                      id={errId('invoiceOffice')}
                      e={showErr('invoiceOffice') ? errors.invoiceOffice : undefined}
                    />
                  </Field>
                </div>

                <div className="col-span-12 md:col-span-6">
                  <Field label="Partner">
                    <FieldWithAddon
                      onAdd={canQuickAdd ? () => setOpenAddPartner(true) : undefined} // ðŸ†•
                      addAriaLabel="Add partner"
                    >
                      <select
                        {...register('partner')}
                        className="input h-10 rounded-r-none"
                        aria-invalid={showErr('partner') || undefined}
                        aria-describedby={showErr('partner') ? errId('partner') : undefined}
                      >
                        <option value="">-- Select --</option>
                        {PARTNERS.map((p: any) => (
                          <option key={p.id} value={p.name}>
                            {p.name}
                            {p.isInternal ? ' (INT)' : ''}
                          </option>
                        ))}
                      </select>
                    </FieldWithAddon>
                    <Err id={errId('partner')} e={showErr('partner') ? errors.partner : undefined} />
                  </Field>
                </div>

                <div className="col-span-12 md:col-span-6">
                  <Field label="Theme">
                    <div className="relative">
                      <select
                        {...register('theme')}
                        aria-invalid={showErr('theme') || undefined}
                        aria-describedby={showErr('theme') ? errId('theme') : undefined}
                        className={`input h-10 ${showErr('theme') ? 'input-error' : ''}`}
                      >
                        <option value="">-- Select --</option>
                        {THEMES.map((t: string) => (
                          <option key={t} value={t}>
                            {t}
                          </option>
                        ))}
                      </select>
                      {showErr('theme') && (
                        <Tooltip
                          content={errors.theme?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err id={errId('theme')} e={showErr('theme') ? errors.theme : undefined} />
                  </Field>
                </div>
              </div>
            </Section>

            {/* B) Commercial */}
            <Section title="Commercial">
              <div className="grid grid-cols-12 gap-2">
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="Type">
                    <div className="relative">
                      <select
                        {...register('type')}
                        aria-invalid={showErr('type') || undefined}
                        aria-describedby={showErr('type') ? errId('type') : undefined}
                        className={`input h-10 ${showErr('type') ? 'input-error' : ''}`}
                      >
                        {TYPES.filter((t: string) =>
                          (DEAL_TYPES as readonly string[]).includes(t)
                        ).map((t: string) => (
                          <option key={t} value={t}>
                            {t}
                          </option>
                        ))}
                      </select>
                      {showErr('type') && (
                        <Tooltip
                          content={errors.type?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err id={errId('type')} e={showErr('type') ? errors.type : undefined} />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="Price (â‚¬)">
                    <div className="relative">
                      <input
                        type="number"
                        step="0.01"
                        {...register('price')}
                        aria-invalid={showErr('price') || undefined}
                        aria-describedby={showErr('price') ? errId('price') : undefined}
                        className={`input h-10 ${showErr('price') ? 'input-error' : ''}`}
                      />
                      {showErr('price') && (
                        <Tooltip
                          content={errors.price?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err id={errId('price')} e={showErr('price') ? errors.price : undefined} />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="QTY">
                    <div className="relative">
                      <input
                        type="number"
                        step="1"
                        {...register('qty')}
                        aria-invalid={showErr('qty') || undefined}
                        aria-describedby={showErr('qty') ? errId('qty') : undefined}
                        className={`input h-10 ${showErr('qty') ? 'input-error' : ''}`}
                      />
                      {showErr('qty') && (
                        <Tooltip
                          content={errors.qty?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err id={errId('qty')} e={showErr('qty') ? errors.qty : undefined} />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="V Sent">
                    <div className="relative">
                      <input
                        type="number"
                        {...register('vSent')}
                        aria-invalid={showErr('vSent') || undefined}
                        aria-describedby={showErr('vSent') ? errId('vSent') : undefined}
                        className={`input h-10 ${showErr('vSent') ? 'input-error' : ''}`}
                      />
                      {showErr('vSent') && (
                        <Tooltip
                          content={errors.vSent?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err id={errId('vSent')} e={showErr('vSent') ? errors.vSent : undefined} />
                  </Field>
                </div>
              </div>
            </Section>

            {/* C) Data source */}
            <Section title="Data source">
              <div className="grid grid-cols-12 gap-2">
                <div className="col-span-12 md:col-span-6">
                  <Field label="Database">
                    <FieldWithAddon
                      onAdd={canQuickAdd ? () => setOpenAddDatabase(true) : undefined} // ðŸ†•
                      addAriaLabel="Add database"
                    >
                      <select
                        {...register('database')}
                        className="input h-10 rounded-r-none"
                        aria-invalid={showErr('database') || undefined}
                        aria-describedby={showErr('database') ? errId('database') : undefined}
                      >
                        <option value="">-- Select --</option>
                        {DATABASES.map((d: any) => (
                          <option key={d.id} value={d.name}>
                            {d.name}
                          </option>
                        ))}
                      </select>
                    </FieldWithAddon>
                    <Err
                      id={errId('database')}
                      e={showErr('database') ? errors.database : undefined}
                    />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="GEO" badge="AUTO">
                    <div className="relative">
                      <input
                        type="text"
                        {...register('geo')}
                        readOnly
                        aria-invalid={showErr('geo') || undefined}
                        aria-describedby={showErr('geo') ? errId('geo') : undefined}
                        className={roErr(showErr('geo'))}
                      />
                      {showErr('geo') && (
                        <Tooltip
                          content={errors.geo?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err id={errId('geo')} e={showErr('geo') ? errors.geo : undefined} />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="DB Type" badge="AUTO">
                    <div className="relative">
                      <input
                        type="text"
                        {...register('databaseType')}
                        readOnly
                        aria-invalid={showErr('databaseType') || undefined}
                        aria-describedby={
                          showErr('databaseType') ? errId('databaseType') : undefined
                        }
                        className={roErr(showErr('databaseType'))}
                      />
                      {showErr('databaseType') && (
                        <Tooltip
                          content={errors.databaseType?.message}
                          className="absolute right-2 inset-y-0 flex items-center"
                        >
                          <span aria-hidden className="text-[--color-accent] text-sm">âš </span>
                        </Tooltip>
                      )}
                    </div>
                    <Err
                      id={errId('databaseType')}
                      e={showErr('databaseType') ? errors.databaseType : undefined}
                    />
                  </Field>
                </div>
              </div>
            </Section>

            {/* KPI BAR */}
            <div className="col-span-12">
              <KPIBar
                turnover={watchTurnover || 0}
                margin={watchMargin || 0}
                marginPct={watchMarginPct}
                ecpm={watchEcpm || 0}
                fmtEUR={fmtEUR}
                fmtPct={fmtPct}
                positiveClass="text-[--color-primary]"
                negativeClass="text-[--color-accent]"
              />
            </div>

            {/* D) Results */}
            <Section title="Results">
              <div className="grid grid-cols-12 gap-2">
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="Routing costs (â‚¬)" badge="CALC" hint={`Formula: ${routingHint}`}>
                    <input
                      type="number"
                      step="0.01"
                      {...register('routingCosts')}
                      className={roInput}
                      readOnly
                    />
                    <Err
                      id={errId('routingCosts')}
                      e={showErr('routingCosts') ? errors.routingCosts : undefined}
                    />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="Turnover (â‚¬)" badge="CALC" hint={`Formula: ${turnoverHint}`}>
                    <div className="relative group">
                      <input
                        type="number"
                        step="0.01"
                        {...register('turnover')}
                        className={`${roInput} pr-16`}
                        readOnly
                      />
                      <span className="absolute inset-y-0 right-2 flex items-center text-xs opacity-0 group-hover:opacity-70 group-focus-within:opacity-70 transition-opacity">
                        {fmtEUR.format(watchTurnover || 0)}
                      </span>
                    </div>
                    <Err
                      id={errId('turnover')}
                      e={showErr('turnover') ? errors.turnover : undefined}
                    />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="Margin" badge="CALC" hint={`Formula: ${marginHint}`}>
                    <div className="relative group">
                      <input
                        type="number"
                        step="0.01"
                        {...register('margin')}
                        className={`${roInput} pr-24 ${marginTextClass}`}
                        readOnly
                        aria-live="polite"
                      />
                      <span
                        className={`absolute inset-y-0 right-2 flex items-center text-xs opacity-0 group-hover:opacity-90 group-focus-within:opacity-90 transition-opacity ${marginTextClass}`}
                      >
                        {fmtEUR.format(watchMargin || 0)}
                        {watchMarginPct == null ? '' : ` (${fmtPct.format(watchMarginPct)})`}
                      </span>
                    </div>
                    <Err id={errId('margin')} e={showErr('margin') ? errors.margin : undefined} />
                  </Field>
                </div>
                <div className="col-span-12 sm:col-span-6 md:col-span-3">
                  <Field label="eCPM (â‚¬)" badge="CALC" hint={`Formula: ${ecpmHint}`}>
                    <div className="relative group">
                      <input
                        type="number"
                        step="0.01"
                        {...register('ecpm')}
                        className={`${roInput} pr-16`}
                        readOnly
                      />
                      <span className="absolute inset-y-0 right-2 flex items-center text-xs opacity-0 group-hover:opacity-70 group-focus-within:opacity-70 transition-opacity">
                        {fmtEUR.format(watchEcpm || 0)}
                      </span>
                    </div>
                    <Err id={errId('ecpm')} e={showErr('ecpm') ? errors.ecpm : undefined} />
                  </Field>
                </div>
              </div>
            </Section>
          </form>

          <div className="edge-fade edge-bottom" aria-hidden />
        </div>

        {/* Footer */}
        <div className="sticky bottom-0 z-10 modal-chrome modal-footer px-5 py-3">
          <div className="flex items-center justify-end gap-2">
            <button type="button" onClick={requestClose} className="btn-ghost">Cancel</button>
            {mode === 'create' && (
              <button
                type="button"
                disabled={isSubmitting}
                className="btn-ghost"
                onClick={() => { setSubmitMode('save_add'); formRef.current?.requestSubmit(); }}
              >
                Save & add another
              </button>
            )}
            <button
              type="button"
              disabled={isSubmitting}
              className="btn-primary"
              onClick={() => { setSubmitMode('save'); formRef.current?.requestSubmit(); }}
            >
              {isSubmitting ? 'Savingâ€¦' : mode === 'edit' ? 'Save changes' : 'Save'}
            </button>
          </div>
        </div>
      </div>

      {/* Quick-add modals */}
      {openAddCampaign && (
        <QuickAddCampaignModal
          onClose={() => setOpenAddCampaign(false)}
          onCreated={(newName) => {
            setValue('campaign', newName, { shouldDirty: true, shouldValidate: true });
          }}
        />
      )}
      {openAddPartner && (
        <QuickAddPartnerModal
          onClose={() => setOpenAddPartner(false)}
          onCreated={(newName) => {
            setValue('partner', newName, { shouldDirty: true, shouldValidate: true });
          }}
        />
      )}
      {openAddDatabase && (
        <QuickAddDatabaseModal
          onClose={() => setOpenAddDatabase(false)}
          onCreated={(newName) => {
            setValue('database', newName, { shouldDirty: true, shouldValidate: true });
          }}
        />
      )}
    </div>
  );

  if (typeof document === 'undefined') return null;
  return createPortal(modal, document.body);
}

// ======================= UI helpers =======================
function Field({
  label,
  children,
  badge,
  hint,
}: {
  label: string;
  children: React.ReactNode;
  badge?: 'AUTO' | 'CALC';
  hint?: string;
}) {
  return (
    <label className="text-[13px] grid gap-1">
      <span className="muted font-medium flex items-center gap-2">
        {label}
        {badge ? <FieldBadge type={badge} /> : null}
      </span>
      {children}
      {hint ? <span className="text-[11px] opacity-60">{hint}</span> : null}
    </label>
  );
}

function FieldBadge({ type }: { type: 'AUTO' | 'CALC' }) {
  return (
    <span
      className="badge-field"
      data-variant={type === 'CALC' ? 'calc' : undefined}
      aria-label={type === 'AUTO' ? 'Auto-filled' : 'Calculated'}
      title={type === 'AUTO' ? 'Auto-filled' : 'Calculated'}
    >
      {type}
    </span>
  );
}

function Err({ id, e }: { id: string; e?: { message?: string } }) {
  if (!e?.message) return null;
  return (
    <span id={id} role="status" className="text-[--color-accent] text-xs">
      {e.message}
    </span>
  );
}

function Section({ title, children }: { title: string; children: React.ReactNode }) {
  return (
    <section className="col-span-12 grid gap-2">
      <div className="sticky -top-px z-[1] bg-[color:var(--color-surface)] pt-1">
        <h4 className="text-sm font-semibold text-[color:var(--color-text)]/85">{title}</h4>
      </div>
      <div className="subcard p-3 md:p-4">
        {children}
      </div>
    </section>
  );
}

function KPIBar({
  turnover,
  margin,
  marginPct,
  ecpm,
  fmtEUR,
  fmtPct,
  positiveClass,
  negativeClass,
}: {
  turnover: number;
  margin: number;
  marginPct: number | null;
  ecpm: number;
  fmtEUR: Intl.NumberFormat;
  fmtPct: Intl.NumberFormat;
  positiveClass?: string;
  negativeClass?: string;
}) {
  const marginClass =
    margin > 0
      ? (positiveClass || 'text-green-600')
      : margin < 0
      ? (negativeClass || 'text-red-600')
      : 'opacity-80';

  return (
    <div className="grid grid-cols-12 gap-3">
      <div className="col-span-12">
        <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)]/80 p-3 md:sticky md:top-2">
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
            <div className="rounded-lg bg-[color:var(--color-surface-2)]/60 p-3">
              <div className="text-xs uppercase text-[color:var(--color-text)]/65">Turnover</div>
              <div className="text-xl font-semibold" style={{ fontVariantNumeric: 'tabular-nums' }}>
                {fmtEUR.format(turnover || 0)}
              </div>
            </div>
            <div className="rounded-lg bg-[color:var(--color-surface-2)]/60 p-3">
              <div className="text-xs uppercase text-[color:var(--color-text)]/65">Margin</div>
              <div className={`text-xl font-semibold ${marginClass}`} style={{ fontVariantNumeric: 'tabular-nums' }}>
                {fmtEUR.format(margin || 0)}
                {marginPct == null ? '' : ` (${fmtPct.format(marginPct)})`}
              </div>
            </div>
            <div className="rounded-lg bg-[color:var(--color-surface-2)]/60 p-3">
              <div className="text-xs uppercase text-[color:var(--color-text)]/65">eCPM</div>
              <div className="text-xl font-semibold" style={{ fontVariantNumeric: 'tabular-nums' }}>
                {fmtEUR.format(ecpm || 0)}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\create-campaign\QuickAddCampaignModal.tsx =====
'use client';

import { useEffect, useRef, useState } from 'react';
import MiniModal from '@/components/ui/MiniModal';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';
import { trimCollapse } from '@/data/reference';

const trim = trimCollapse;
const norm = (s: string) => trimCollapse(s).toLowerCase();

export default function QuickAddCampaignModal({
  onClose,
  onCreated,
}: {
  onClose: () => void;
  onCreated: (campaignName: string) => void;
}) {
  const { CAMPAIGNS, addCampaignRef } = useCatalogOverrides();
  const [name, setName] = useState('');
  const [advertiser, setAdvertiser] = useState('');
  const [err, setErr] = useState<string>('');

  const nameRef = useRef<HTMLInputElement | null>(null);

  useEffect(() => {
    const t = setTimeout(() => nameRef.current?.focus(), 0);
    return () => clearTimeout(t);
  }, []);

  const submit = () => {
    const n = trim(name);
    const a = trim(advertiser) || 'White Label';
    if (!n) { setErr('Name is required'); return; }

    const exists = CAMPAIGNS.some(c => norm(c.name) === norm(n));
    if (exists) { setErr('Campaign already exists'); return; }

    addCampaignRef({ name: n, advertiser: a });
    onCreated(n);
    onClose();
  };

  const onKeyDown: React.KeyboardEventHandler<HTMLDivElement> = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      submit();
    }
  };

  const hasErr = Boolean(err);
  const errId = 'quick-add-campaign-error';

  return (
    <MiniModal
      title="Add campaign"
      onClose={onClose}
      footer={(
        <>
          <button className="btn-ghost" onClick={onClose}>Cancel</button>
          <button className="btn-primary disabled:opacity-50 disabled:pointer-events-none" onClick={submit} disabled={!trim(name)}>
            Add
          </button>
        </>
      )}
    >
      <div className="grid gap-3" onKeyDown={onKeyDown}>
        <label className="text-sm grid gap-1">
          <span className="muted">Name</span>
          <input
            ref={nameRef}
            className={`input ${hasErr ? 'input-error' : ''}`}
            value={name}
            onChange={e => { setName(e.target.value); setErr(''); }}
            aria-invalid={hasErr || undefined}
            aria-describedby={hasErr ? errId : undefined}
          />
        </label>
        <label className="text-sm grid gap-1">
          <span className="muted">Advertiser</span>
          <input
            className="input"
            value={advertiser}
            onChange={e => setAdvertiser(e.target.value)}
            placeholder="White Label"
          />
        </label>
        {hasErr ? (
          <div id={errId} className="text-[--color-accent] text-sm">{err}</div>
        ) : null}
      </div>
    </MiniModal>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\create-campaign\QuickAddDatabaseModal.tsx =====
'use client';

import { useEffect, useMemo, useRef, useState } from 'react';
import MiniModal from '@/components/ui/MiniModal';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';
import { trimCollapse, type DBType } from '@/data/reference';

const norm = (s: string) => trimCollapse(s).toLowerCase();

/** --- ISO-3166 validator (estricto) con compat UKâ†’GB + MULTI --- */
function isIsoCountry(code: string): boolean {
  const c = code.toUpperCase();
  if (!/^[A-Z]{2}$/.test(c)) return false;
  try {
    // Si el cÃ³digo es vÃ¡lido, devuelve un nombre localizado distinto al propio cÃ³digo
    const dn = new (Intl as any).DisplayNames(['en'], { type: 'region' });
    const name = dn?.of?.(c);
    return typeof name === 'string' && name && name !== c;
  } catch {
    return false;
  }
}
function normalizeGeoStrict(raw: string): string | null {
  const g = trimCollapse(raw).toUpperCase();
  if (!g) return null;
  if (g === 'MULTI') return 'MULTI';
  const mapped = g === 'UK' ? 'GB' : g; // compatibilidad
  return isIsoCountry(mapped) ? mapped : null;
}

export default function QuickAddDatabaseModal({
  onClose,
  onCreated,
}: {
  onClose: () => void;
  onCreated: (dbName: string) => void;
}) {
  const { DATABASES, addDatabaseRef } = useCatalogOverrides();
  const [name, setName] = useState('');
  const [geo, setGeo] = useState('ES');
  const [dbType, setDbType] = useState<DBType>('B2B');
  const [err, setErr] = useState<string>('');

  const nameRef = useRef<HTMLInputElement | null>(null);
  useEffect(() => {
    const t = setTimeout(() => nameRef.current?.focus(), 0);
    return () => clearTimeout(t);
  }, []);

  const geoNormalized = useMemo(() => normalizeGeoStrict(geo), [geo]);
  const geoValid = geoNormalized !== null;

  const hasErr = Boolean(err);
  const errId = 'quick-add-db-error';

  const submit = () => {
    const n = trimCollapse(name);
    if (!n) { setErr('Name is required'); return; }

    // GEO estricto
    if (!geoValid) {
      setErr('Invalid GEO. Use ISO-3166-1 alpha-2 (e.g., ES, FR, GB) or MULTI.');
      return;
    }

    // 1) Evitar duplicado por NOMBRE (case-insensitive)
    const existsByName = DATABASES.some(d => norm(d.name) === norm(n));
    if (existsByName) { setErr('Database already exists'); return; }

    addDatabaseRef({
      name: n,
      geo: geoNormalized!,          // ya validado (incluye UKâ†’GB y MULTI)
      dbType,
    });
    onCreated(n);
    onClose();
  };

  const onKeyDown: React.KeyboardEventHandler<HTMLDivElement> = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      submit();
    }
  };

  return (
    <MiniModal
      title="Add database"
      onClose={onClose}
      footer={(
        <>
          <button className="btn-ghost" onClick={onClose}>Cancel</button>
          <button
            className="btn-primary disabled:opacity-50 disabled:pointer-events-none"
            onClick={submit}
            disabled={!trimCollapse(name) || !geoValid}
          >
            Add
          </button>
        </>
      )}
    >
      <div className="grid gap-3" onKeyDown={onKeyDown}>
        <label className="text-sm grid gap-1">
          <span className="muted">Name</span>
          <input
            ref={nameRef}
            className={`input ${hasErr ? 'input-error' : ''}`}
            value={name}
            onChange={e => { setName(e.target.value); setErr(''); }}
            aria-invalid={hasErr || undefined}
            aria-describedby={hasErr ? errId : undefined}
          />
        </label>

        <div className="grid grid-cols-2 gap-3">
          <label className="text-sm grid gap-1">
            <span className="muted">GEO</span>
            <input
              className={`input ${!geoValid ? 'input-error' : ''}`}
              value={geo}
              onChange={e => { setGeo(e.target.value.toUpperCase()); setErr(''); }}
              placeholder="ES / FR / GB / MULTI (UK â†’ GB)"
              aria-invalid={!geoValid || undefined}
            />
            {!geoValid && (
              <span className="text-[--color-accent] text-xs">
                Use ISO-3166-1 alpha-2 (p. ej., ES, FR, GB) o MULTI. (UK se normaliza a GB)
              </span>
            )}
          </label>

          <label className="text-sm grid gap-1">
            <span className="muted">DB Type</span>
            <select
              className="input"
              value={dbType}
              onChange={e => setDbType(e.target.value as DBType)}
            >
              <option value="B2B">B2B</option>
              <option value="B2C">B2C</option>
              <option value="Mixed">Mixed</option>
            </select>
          </label>
        </div>

        {hasErr ? <div id={errId} className="text-[--color-accent] text-sm">{err}</div> : null}
      </div>
    </MiniModal>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\create-campaign\QuickAddPartnerModal.tsx =====
'use client';

import { useEffect, useRef, useState } from 'react';
import MiniModal from '@/components/ui/MiniModal';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';
import { toSlug, trimCollapse, type InvoiceOffice } from '@/data/reference';

const norm = (s: string) => trimCollapse(s).toLowerCase();

export default function QuickAddPartnerModal({
  onClose,
  onCreated,
}: {
  onClose: () => void;
  onCreated: (partnerName: string) => void;
}) {
  const { PARTNERS, addPartnerRef } = useCatalogOverrides();
  const [name, setName] = useState('');
  const [office, setOffice] = useState<InvoiceOffice>('DAT');
  const [err, setErr] = useState<string>('');

  const nameRef = useRef<HTMLInputElement | null>(null);
  useEffect(() => {
    const t = setTimeout(() => nameRef.current?.focus(), 0);
    return () => clearTimeout(t);
  }, []);

  const hasErr = Boolean(err);
  const errId = 'quick-add-partner-error';

  const submit = () => {
    const n = trimCollapse(name);
    if (!n) { setErr('Name is required'); return; }

    // 1) Evitar duplicado por NOMBRE (case-insensitive)
    const existsByName = PARTNERS.some(p => norm(p.name) === norm(n));
    if (existsByName) { setErr('Partner already exists'); return; }

    // 2) Generar id Ãºnico (slug) a partir del nombre
    const base = toSlug(n) || 'partner';
    // Algunos overrides podrÃ­an no tener id; fallback al slug del nombre
    const usedIds = new Set(
      PARTNERS.map(p => (p.id ? p.id : toSlug(p.name))).filter(Boolean).map(x => x.toLowerCase())
    );

    let finalId = base;
    let k = 2;
    while (usedIds.has(finalId.toLowerCase())) {
      finalId = `${base}-${k++}`;
    }

    const payload: any = {
      id: finalId,
      name: n,
      invoiceOffice: office,
      // marcar interno si procede (Ãºtil para mostrar "(INT)" en selects)
      ...(office === 'INT' ? { isInternal: true } : {}),
    };

    addPartnerRef(payload);
    onCreated(n);
    onClose();
  };

  const onKeyDown: React.KeyboardEventHandler<HTMLDivElement> = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      submit();
    }
  };

  return (
    <MiniModal
      title="Add partner"
      onClose={onClose}
      footer={(
        <>
          <button className="btn-ghost" onClick={onClose}>Cancel</button>
          <button
            className="btn-primary disabled:opacity-50 disabled:pointer-events-none"
            onClick={submit}
            disabled={!trimCollapse(name)}
          >
            Add
          </button>
        </>
      )}
    >
      <div className="grid gap-3" onKeyDown={onKeyDown}>
        <label className="text-sm grid gap-1">
          <span className="muted">Name</span>
          <input
            ref={nameRef}
            className={`input ${hasErr ? 'input-error' : ''}`}
            value={name}
            onChange={e => { setName(e.target.value); setErr(''); }}
            aria-invalid={hasErr || undefined}
            aria-describedby={hasErr ? errId : undefined}
          />
        </label>

        <label className="text-sm grid gap-1">
          <span className="muted">Invoice office</span>
          <select
            className="input"
            value={office}
            onChange={e => setOffice(e.target.value as InvoiceOffice)}
          >
            <option value="DAT">DAT</option>
            <option value="CAR">CAR</option>
            <option value="INT">INT (Internal)</option>
          </select>
        </label>

        {hasErr ? <div id={errId} className="text-[--color-accent] text-sm">{err}</div> : null}
      </div>
    </MiniModal>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\export\ExportModal.tsx =====
// components/export/ExportModal.tsx
'use client';

import { useMemo, useState } from 'react';
import MiniModal from '@/components/ui/MiniModal';
import { useAuth } from '@/context/AuthContext'; // ðŸ†• admin guard
import type { CampaignRow } from '@/types/campaign';
import {
  buildExportRows,
  rowsToCSV,
  rowsToJSON,
  downloadBlob,
  type ColumnSpec,
  type ExportScope,
  type ExportColumnsKind,
} from '@/utils/exporters';

type Props = {
  onClose: () => void;
  // filas ya filtradas y ordenadas (todas)
  allRows: CampaignRow[];
  // filas de la pÃ¡gina actual (para scope=page)
  pageRows: CampaignRow[];
  // columnas visibles (para "visible")
  visibleColumns: ColumnSpec[];
  // columnas completas (para "all")
  allColumns: ColumnSpec[];
  defaultFilename?: string; // sin extensiÃ³n
};

export default function ExportModal({
  onClose,
  allRows,
  pageRows,
  visibleColumns,
  allColumns,
  defaultFilename = 'campaigns_export',
}: Props) {
  const { isAdmin } = useAuth(); // ðŸ†•

  const [format, setFormat] = useState<'csv-excel' | 'csv-rfc' | 'json'>('csv-excel');
  const [scope, setScope] = useState<ExportScope>('all');
  const [colsKind, setColsKind] = useState<ExportColumnsKind>('visible');
  const [includeSummary, setIncludeSummary] = useState(false);
  const [fileBase, setFileBase] = useState(defaultFilename);

  const effectiveRows = scope === 'all' ? allRows : pageRows;
  const effectiveColumns = colsKind === 'visible' ? visibleColumns : allColumns;
  const count = effectiveRows.length;

  const ext = format === 'json' ? 'json' : 'csv';
  const filename = `${fileBase}.${ext}`;

  // base y efectivo (admin-only)
  const canExportBase = count > 0 && effectiveColumns.length > 0;
  const canExport = canExportBase && !!isAdmin;

  function doExport() {
    if (!canExport) return;
    const rows = buildExportRows({
      rows: effectiveRows,
      columns: effectiveColumns,
      includeSummary,
    });

    if (format === 'json') {
      const blob = rowsToJSON(rows);
      downloadBlob(blob, filename);
      return;
    }

    const delimiter = format === 'csv-excel' ? ';' : ',';
    const blob = rowsToCSV(rows, delimiter);
    downloadBlob(blob, filename);
  }

  return (
    <MiniModal
      title="Export data"
      onClose={onClose}
      solid={false}
      widthClass="max-w-2xl w-[min(100vw-2rem,720px)]"
      footer={
        <>
          <div className="mr-auto text-xs opacity-80">
            {count === 0 ? 'No rows to export' : `Will export ${count} row${count === 1 ? '' : 's'}`}
          </div>
          {!isAdmin && (
            <div className="mr-2 text-xs text-[--color-accent]">
              Admin-only: exporting is disabled for your account.
            </div>
          )}
          <button className="btn-ghost" onClick={onClose}>Cancel</button>
          <button
            className="btn-primary disabled:opacity-50 disabled:pointer-events-none"
            onClick={doExport}
            disabled={!canExport}
            aria-disabled={!canExport}
            title={!isAdmin ? 'Admins only' : undefined}
          >
            Export
          </button>
        </>
      }
    >
      <div className="grid gap-4">
        {/* Aviso admin-only */}
        {!isAdmin && (
          <div className="rounded-lg border border-[--color-accent]/40 bg-[--color-accent]/10 p-3 text-sm">
            <strong>Admin-only.</strong> You can adjust options, but exporting is disabled for non-admin users.
          </div>
        )}

        {/* Formato */}
        <fieldset className="grid gap-2">
          <legend className="text-sm font-semibold">Format</legend>
          <div className="flex flex-wrap gap-2">
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="radio" name="fmt" checked={format === 'csv-excel'} onChange={() => setFormat('csv-excel')} />
              CSV (Excel-friendly ; )
            </label>
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="radio" name="fmt" checked={format === 'csv-rfc'} onChange={() => setFormat('csv-rfc')} />
              CSV (RFC 4180 , )
            </label>
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="radio" name="fmt" checked={format === 'json'} onChange={() => setFormat('json')} />
              JSON
            </label>
          </div>
        </fieldset>

        {/* Ãmbito */}
        <fieldset className="grid gap-2">
          <legend className="text-sm font-semibold">Scope</legend>
          <div className="flex flex-wrap gap-2">
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="radio" name="scope" checked={scope === 'all'} onChange={() => setScope('all')} />
              All filtered rows
            </label>
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="radio" name="scope" checked={scope === 'page'} onChange={() => setScope('page')} />
              Current page only
            </label>
          </div>
        </fieldset>

        {/* Columnas */}
        <fieldset className="grid gap-2">
          <legend className="text-sm font-semibold">Columns</legend>
          <div className="flex flex-wrap gap-2">
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="radio" name="cols" checked={colsKind === 'visible'} onChange={() => setColsKind('visible')} />
              Visible only (default)
            </label>
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="radio" name="cols" checked={colsKind === 'all'} onChange={() => setColsKind('all')} />
              All columns
            </label>
          </div>
        </fieldset>

        {/* Opciones extra */}
        <div className="flex items-center gap-2">
          <input
            id="incl-summary"
            type="checkbox"
            checked={includeSummary}
            onChange={(e) => setIncludeSummary(e.target.checked)}
          />
          <label htmlFor="incl-summary" className="text-sm">Include summary row</label>
        </div>

        {/* Nombre archivo */}
        <label className="text-sm grid gap-1">
          <span className="muted">File name</span>
          <div className="flex">
            <input
              className="input flex-1 rounded-r-none"
              value={fileBase}
              onChange={(e) => setFileBase(e.target.value.replace(/\.(csv|json)$/i, ''))}
            />
            <div className="input bg-[color:var(--color-surface-2)]/70 w-28 pointer-events-none rounded-l-none">
              .{format === 'json' ? 'json' : 'csv'}
            </div>
          </div>
        </label>
      </div>
    </MiniModal>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\guards\IfAdmin.tsx =====
'use client';

import { PropsWithChildren } from 'react';
import { useAuth } from '@/context/AuthContext';

export default function IfAdmin({ children }: PropsWithChildren) {
  const { isAdmin, loading } = useAuth();
  if (loading) return null;
  return isAdmin ? <>{children}</> : null;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\guards\IfEditorOrAdmin.tsx =====
'use client';

import { PropsWithChildren } from 'react';
import { useAuth } from '@/context/AuthContext';

export default function IfEditorOrAdmin({ children }: PropsWithChildren) {
  const { isEditor, loading } = useAuth();
  if (loading) return null;
  return isEditor ? <>{children}</> : null;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\import\ImportCsvModal.tsx =====
// components/import/ImportCsvModal.tsx
'use client';

import { useEffect, useMemo, useRef, useState } from 'react';
import { useAuth } from '@/context/AuthContext';                 // ðŸ†• admin guard
import MiniModal from '@/components/ui/MiniModal';
import { useCampaignData } from '@/context/CampaignDataContext';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';
import type { CampaignRow } from '@/types/campaign';

type Draft = Omit<CampaignRow, 'id'>;

type RowState = 'OK' | 'WARN' | 'ERROR';
type RowIssue = { level: RowState; msg: string };

const REQUIRED_HEADERS = [
  'date','campaign','partner','theme','price','type','vSent','qty','database'
] as const;
type RequiredHeader = typeof REQUIRED_HEADERS[number];

const OPTIONAL_HEADERS = ['priceCurrency'] as const;

const fmtEUR = new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' });

/* =======================
   Utils
   ======================= */

function parseNum(v: any): number {
  if (v === '' || v == null) return 0;
  if (typeof v === 'number') return Number.isFinite(v) ? v : 0;

  let s = String(v).trim();
  if (!s) return 0;
  s = s.replace(/\s/g, '');
  s = s.replace(/[^\d,.\-]/g, '');

  if (s === '' || s === '-' || s === ',' || s === '.') return 0;

  const hasComma = s.includes(',');
  const hasDot = s.includes('.');

  if (hasComma && hasDot) {
    if (s.lastIndexOf(',') > s.lastIndexOf('.')) {
      s = s.replace(/\./g, '').replace(',', '.');
    } else {
      s = s.replace(/,/g, '');
    }
  } else if (hasComma) {
    s = s.replace(',', '.');
  }
  const n = Number(s);
  return Number.isFinite(n) ? n : 0;
}

function normalizeDate(d: string): string | null {
  const s = (d || '').trim();
  if (!s) return null;
  if (/^\d{4}-\d{2}-\d{2}$/.test(s)) return s;
  const m = /^(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})$/.exec(s);
  if (m) {
    const dd = String(m[1]).padStart(2, '0');
    const mm = String(m[2]).padStart(2, '0');
    const yyyy = m[3];
    return `${yyyy}-${mm}-${dd}`;
  }
  const t = new Date(s);
  if (isNaN(t.getTime())) return null;
  return t.toISOString().slice(0, 10);
}

// CSV parser con autodetecciÃ³n de delimitador
function parseCSV(text: string): { headers: string[]; rows: Record<string, string>[] } {
  const lines = text.replace(/\r/g, '\n').split('\n').filter(l => l.trim() !== '');
  if (lines.length === 0) return { headers: [], rows: [] };

  const firstLine = lines[0];
  const delim = detectDelimiter(firstLine);

  const headers = splitCSVLine(firstLine, delim).map(h => h.trim());
  const rows: Record<string, string>[] = [];

  for (let i = 1; i < lines.length; i++) {
    const cols = splitCSVLine(lines[i], delim);
    if (cols.length === 1 && cols[0].trim() === '') continue;
    const row: Record<string, string> = {};
    headers.forEach((h, idx) => { row[h] = (cols[idx] ?? '').trim(); });
    rows.push(row);
  }
  return { headers, rows };
}

function detectDelimiter(sample: string): string {
  const count = (d: string) => {
    let c = 0, inQ = false;
    for (let i = 0; i < sample.length; i++) {
      const ch = sample[i];
      if (ch === '"') {
        if (inQ && sample[i + 1] === '"') { i++; continue; }
        inQ = !inQ;
      } else if (!inQ && ch === d) c++;
    }
    return c;
  };
  const candidates: readonly string[] = [',',';','\t'];
  let best = candidates[0], bestCount = -1;
  for (const d of candidates) {
    const n = count(d);
    if (n > bestCount) { best = d; bestCount = n; }
  }
  return best;
}

function splitCSVLine(line: string, d: string): string[] {
  const out: string[] = [];
  let cur = '';
  let inQuotes = false;

  for (let i = 0; i < line.length; i++) {
    const ch = line[i];
    if (ch === '"') {
      if (inQuotes && line[i + 1] === '"') { cur += '"'; i++; continue; }
      inQuotes = !inQuotes;
      continue;
    }
    if (ch === d && !inQuotes) { out.push(cur); cur = ''; continue; }
    if ((ch === '\n' || ch === '\r') && !inQuotes) { continue; }
    cur += ch;
  }
  out.push(cur);
  return out;
}

// Lectura case-insensitive de celdas
function getCI(obj: Record<string, string>, key: string): string {
  const target = key.trim().toLowerCase();
  for (const k of Object.keys(obj)) {
    if (k.trim().toLowerCase() === target) return obj[k];
  }
  return '';
}

/* =======================
   Componente
   ======================= */
export default function ImportCsvModal({ onClose }: { onClose: () => void }) {
  const { isAdmin } = useAuth();                                  // ðŸ†•
  const { addManyCampaigns } = useCampaignData();

  const catalogs = useCatalogOverrides();
  const {
    CAMPAIGNS = [], PARTNERS = [], DATABASES = [], THEMES = [], TYPES = ['CPL','CPM','CPC','CPA'],
    resolveInvoiceOfficeMerged = () => 'DAT',
  } = catalogs || {};

  // ðŸ”’ Guard: solo admins pueden importar
  if (!isAdmin) {
    return (
      <MiniModal
        title="Import from CSV"
        onClose={onClose}
        solid={false}
        footer={<button className="btn-primary" onClick={onClose}>Close</button>}
      >
        <div className="p-2 text-sm">
          This action is restricted to <strong>admins</strong>. If you think this is a mistake, please contact an administrator.
        </div>
      </MiniModal>
    );
  }

  // archivo + datos parseados
  const [fileName, setFileName] = useState('');
  const [rawHeaders, setRawHeaders] = useState<string[]>([]);
  const [rawRows, setRawRows] = useState<Record<string, string>[]>([]);

  // preview
  const [issues, setIssues] = useState<RowIssue[][]>([]);
  const [drafts, setDrafts] = useState<Draft[]>([]);
  const [parsing, setParsing] = useState(false);
  const [importing, setImporting] = useState(false);
  const inputRef = useRef<HTMLInputElement | null>(null);

  const headerOk = useMemo(() => {
    const hset = new Set(rawHeaders.map(h => h.trim().toLowerCase()));
    return REQUIRED_HEADERS.every(h => hset.has(h.toLowerCase()));
  }, [rawHeaders]);

  // Helpers de catÃ¡logo
  const findCampaign = (name: string) =>
    CAMPAIGNS.find((c: any) => (c?.name || '').trim().toLowerCase() === (name||'').trim().toLowerCase());
  const partnerExists = (name: string) =>
    PARTNERS.some((p: any) => (p?.name || '').trim().toLowerCase() === (name||'').trim().toLowerCase());
  const findDatabase = (name: string) =>
    DATABASES.find((d: any) => (d?.name || '').trim().toLowerCase() === (name||'').trim().toLowerCase());
  const themeExists = (name: string) =>
    THEMES.some((t: string) => t.trim().toLowerCase() === (name||'').trim().toLowerCase());
  const typeExists = (name: string) =>
    TYPES.some((t: string) => t.trim().toLowerCase() === (name||'').trim().toLowerCase());

  // Parse + validar
  useEffect(() => {
    if (!rawRows.length || !headerOk) { setIssues([]); setDrafts([]); return; }

    const nextDrafts: Draft[] = [];
    const nextIssues: RowIssue[][] = [];

    for (const row of rawRows) {
      const rowIssues: RowIssue[] = [];

      const date = normalizeDate(getCI(row, 'date'));
      if (!date) rowIssues.push({ level: 'ERROR', msg: 'Fecha invÃ¡lida' });

      const campaign = (getCI(row, 'campaign') || '').trim();
      if (!campaign) rowIssues.push({ level: 'ERROR', msg: 'Campaign requerida' });
      const cRef = findCampaign(campaign);
      if (!cRef) rowIssues.push({ level: 'ERROR', msg: 'Campaign no existe en catÃ¡logo' });
      const advertiser = cRef?.advertiser || '';

      const partner = (getCI(row, 'partner') || '').trim();
      if (!partner) rowIssues.push({ level: 'ERROR', msg: 'Partner requerido' });
      if (partner && !partnerExists(partner)) rowIssues.push({ level: 'ERROR', msg: 'Partner no existe en catÃ¡logo' });

      const theme = (getCI(row, 'theme') || '').trim();
      if (!theme) rowIssues.push({ level: 'ERROR', msg: 'Theme requerido' });
      if (theme && !themeExists(theme)) rowIssues.push({ level: 'ERROR', msg: 'Theme no existe en catÃ¡logo' });

      const type = (getCI(row, 'type') || '').trim();
      if (!type) rowIssues.push({ level: 'ERROR', msg: 'Type requerido' });
      if (type && !typeExists(type)) rowIssues.push({ level: 'ERROR', msg: 'Type no existe en catÃ¡logo' });

      const price = parseNum(getCI(row, 'price'));
      if (price < 0) rowIssues.push({ level: 'ERROR', msg: 'Price < 0' });

      const vSent = parseNum(getCI(row, 'vSent'));
      if (vSent < 0) rowIssues.push({ level: 'ERROR', msg: 'vSent < 0' });
      if (vSent === 0) rowIssues.push({ level: 'WARN', msg: 'vSent = 0' });

      const qty = parseNum(getCI(row, 'qty'));
      if (qty < 0) rowIssues.push({ level: 'ERROR', msg: 'qty < 0' });

      const database = (getCI(row, 'database') || '').trim();
      if (!database) rowIssues.push({ level: 'ERROR', msg: 'Database requerida' });
      const dbRef = findDatabase(database);
      if (!dbRef) rowIssues.push({ level: 'ERROR', msg: 'Database no existe en catÃ¡logo' });

      const priceCurrency = (getCI(row, 'priceCurrency') || 'EUR').trim() || 'EUR';

      const geo = dbRef?.geo || '';
      const databaseType = (dbRef?.dbType || '') as CampaignRow['databaseType'];
      const invoiceOffice = resolveInvoiceOfficeMerged(geo || undefined, partner || undefined) as CampaignRow['invoiceOffice'];

      const routingCosts = Number(((vSent / 1000) * 0.18).toFixed(2));
      const turnover = Number((qty * price).toFixed(2));
      const margin = Number((turnover - routingCosts).toFixed(2));
      const ecpm = Number((vSent > 0 ? (turnover / vSent) * 1000 : 0).toFixed(2));

      const draft: Draft = {
        date: date || '',
        campaign,
        advertiser,
        invoiceOffice,
        partner,
        theme,
        price,
        priceCurrency,
        type: type as CampaignRow['type'],
        vSent,
        routingCosts,
        qty,
        turnover,
        margin,
        ecpm,
        database,
        geo,
        databaseType: (databaseType || '') as CampaignRow['databaseType'],
      };

      nextDrafts.push(draft);
      nextIssues.push(rowIssues);
    }

    setDrafts(nextDrafts);
    setIssues(nextIssues);
  }, [rawRows, headerOk]); // eslint-disable-line

  const totals = useMemo(() => {
    let ok = 0, warn = 0, err = 0;
    let vSent = 0, turnover = 0, margin = 0, wEcpm = 0;
    drafts.forEach((d, i) => {
      const rowErr = issues[i]?.some(x => x.level === 'ERROR');
      const rowWarn = !rowErr && issues[i]?.some(x => x.level === 'WARN');
      if (rowErr) err++; else if (rowWarn) warn++; else ok++;
      vSent += d.vSent || 0;
      turnover += d.turnover || 0;
      margin += d.margin || 0;
      wEcpm += (d.ecpm || 0) * (d.vSent || 0);
    });
    const ecpm = vSent > 0 ? wEcpm / vSent : 0;
    return { ok, warn, err, vSent, turnover, margin, ecpm };
  }, [drafts, issues]);

  const canImport = drafts.length > 0 && totals.err === 0;

  function onPickFile() { inputRef.current?.click(); }
  async function onFileChange(e: React.ChangeEvent<HTMLInputElement>) {
    const f = e.target.files?.[0];
    e.currentTarget.value = '';
    if (!f) return;
    setParsing(true);
    setFileName(f.name);
    try {
      const text = await f.text();
      const parsed = parseCSV(text);
      setRawHeaders(parsed.headers);
      setRawRows(parsed.rows);
    } finally {
      setParsing(false);
    }
  }

  // Dropzone
  function onDropFile(e: React.DragEvent<HTMLDivElement>) {
    e.preventDefault();
    const f = e.dataTransfer.files?.[0];
    if (!f) return;
    const fakeEvt = { target: { files: [f] }, currentTarget: { value: '' } } as any;
    onFileChange(fakeEvt);
  }
  function onDragOver(e: React.DragEvent<HTMLDivElement>) { e.preventDefault(); }

  async function doImport() {
    if (!canImport) return;
    try {
      setImporting(true);
      const res = await Promise.resolve(
        addManyCampaigns(drafts, { upsertBy: 'composite', onConflict: 'update' })
      );

      alert(
        `Import done:
Added: ${res.added}
Updated: ${res.updated}
Skipped: ${res.skipped}
Total: ${res.total}`
      );
      onClose();
    } catch (e) {
      console.error(e);
      alert('Import failed. See console for details.');
    } finally {
      setImporting(false);
    }
  }

  function downloadTemplate() {
    const headers = [...REQUIRED_HEADERS, ...OPTIONAL_HEADERS].join(',');
    const sample = [
      headers,
      '2025-01-15,Winter Sale,Partner A,Retail,1.2,CPL,100000,8000,DB_ES,EUR'
    ].join('\n');
    const blob = new Blob([sample], { type: 'text/csv;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = 'campaigns_template.csv'; a.click();
    URL.revokeObjectURL(url);
  }

  // === Responsive modal width: compacto vs preview ===
  const preview = headerOk && drafts.length > 0;
  const modalWidthClass = preview
    ? 'w-full max-w-[min(95vw,1400px)]'
    : 'w-full max-w-[720px]';

  // === Fades locales para overflow-x del Ã¡rea de tabla ===
  const hWrapRef = useRef<HTMLDivElement>(null);
  const [showLeftFade, setShowLeftFade] = useState(false);
  const [showRightFade, setShowRightFade] = useState(false);

  function updateHFades() {
    const el = hWrapRef.current;
    if (!el) return;
    const { scrollLeft, clientWidth, scrollWidth } = el;
    setShowLeftFade(scrollLeft > 0);
    setShowRightFade(scrollLeft + clientWidth < scrollWidth - 1);
  }
  useEffect(() => {
    const el = hWrapRef.current;
    if (!el) return;
    updateHFades();
    el.addEventListener('scroll', updateHFades);
    window.addEventListener('resize', updateHFades);
    return () => {
      el.removeEventListener('scroll', updateHFades);
      window.removeEventListener('resize', updateHFades);
    };
  }, [preview]);

  /* =======================
     UI
     ======================= */
  return (
    <MiniModal
      title="Import from CSV"
      onClose={onClose}
      widthClass={modalWidthClass}
      solid={false}
      headerClassName="modal-chrome py-2.5"
      footerClassName="modal-chrome py-2.5"
      accentStrip
      /* edgeFades quitado aquÃ­ para que no oscurezca todo el body */
      footer={(
        <>
          <button className="btn-ghost" onClick={downloadTemplate}>Download template</button>
          <button className="btn-ghost" onClick={onClose}>Cancel</button>
          <button
            className="btn-primary disabled:opacity-50 disabled:pointer-events-none"
            disabled={!canImport || importing}
            onClick={doImport}
            style={{ fontVariantNumeric: 'tabular-nums' }}
          >
            {importing ? 'Importingâ€¦' : `Import ${totals.ok + totals.warn} rows`}
          </button>
        </>
      )}
    >
      {/* Hidden file input */}
      <input
        ref={inputRef}
        type="file"
        className="hidden"
        accept=".csv,text/csv"
        onChange={onFileChange}
      />

      {/* Uploader / Dropzone */}
      <div className="grid gap-3">
        <div
          role="button"
          tabIndex={0}
          aria-label="Select or drop a CSV file"
          onDragOver={onDragOver}
          onDrop={onDropFile}
          onKeyDown={(e) => {
            if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); onPickFile(); }
          }}
          className="rounded-lg border border-[--color-border] p-3 flex items-center justify-between
                     bg-[color:var(--color-surface)] outline-none transition
                     hover:shadow-md focus:shadow-md"
        >
          <div className="text-sm">
            <div className="font-medium">CSV file</div>
            <div className="opacity-70" style={{ fontVariantNumeric: 'tabular-nums' }}>
              {fileName || (parsing ? 'Parsingâ€¦' : 'No file selected')}
            </div>
          </div>
          <button className="btn-ghost" onClick={onPickFile} disabled={parsing}>
            {parsing ? 'Parsingâ€¦' : 'Select CSV'}
          </button>
        </div>

        {/* Headers check */}
        {rawHeaders.length > 0 && (
          <div
            className={`rounded-lg border p-3 ${
              headerOk
                ? 'border-emerald-500/40 bg-emerald-500/10'
                : 'border-[--color-accent]/40 bg-[--color-accent]/10'
            }`}
          >
            <div className="text-sm font-medium mb-1">Headers detected</div>
            <div className="text-xs opacity-80 break-words">{rawHeaders.join(', ')}</div>
            {!headerOk && (
              <div className="text-xs mt-2">
                Missing required headers:{' '}
                <strong>
                  {REQUIRED_HEADERS
                    .filter(h => !rawHeaders.map(x=>x.trim().toLowerCase()).includes(h.toLowerCase()))
                    .join(', ')}
                </strong>
              </div>
            )}
          </div>
        )}

        {/* Preview & summary */}
        {preview && (
          <>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-3">
              <Stat label="Rows" value={drafts.length} />
              <Stat label="OK" value={totals.ok} />
              <Stat label="Warnings" value={totals.warn} />
              <Stat label="Errors" value={totals.err} />
              <Stat label="Turnover" value={fmtEUR.format(totals.turnover)} />
            </div>

            <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)]">
              {/* Wrapper relativo para los fades locales */}
              <div className="relative">
                <div ref={hWrapRef} className="overflow-x-auto">
                  {/* Header */}
                  <table className="w-full min-w-[1000px] lg:min-w-[1200px] xl:min-w-[1400px] text-sm">
                    <thead className="bg-[color:var(--color-surface-2)]/60">
                      <tr>
                        <Th>State</Th>
                        <Th>Date</Th>
                        <Th>Campaign</Th>
                        <Th>Partner</Th>
                        <Th>Theme</Th>
                        <Th>Type</Th>
                        <Th className="text-right">Price</Th>
                        <Th className="text-right">QTY</Th>
                        <Th className="text-right">V Sent</Th>
                        <Th>Database</Th>
                        <Th>GEO</Th>
                        <Th>DB Type</Th>
                        <Th className="text-right">Turnover</Th>
                        <Th className="text-right">Margin</Th>
                        <Th className="text-right">eCPM</Th>
                      </tr>
                    </thead>
                  </table>

                  {/* Body (scroll) */}
                  <div className="max-h-[50vh] overflow-y-auto">
                    <div className="min-w-[1000px] lg:min-w-[1200px] xl:min-w-[1400px] divide-y divide-[--color-border]/60">
                      {drafts.map((d, i) => {
                        const isErr = issues[i]?.some(x => x.level === 'ERROR');
                        const isWarn = !isErr && issues[i]?.some(x => x.level === 'WARN');
                        const badge =
                          isErr ? <Badge className="bg-[--color-accent]/15 text-[--color-accent] border border-[--color-accent]/30">ERROR</Badge> :
                          isWarn ? <Badge className="bg-amber-500/12 text-amber-700 border border-amber-300/60">WARN</Badge> :
                          <Badge className="bg-emerald-500/12 text-emerald-700 border border-emerald-300/60">OK</Badge>;

                        return (
                          <div
                            key={i}
                            className="grid grid-cols-[auto_auto_auto_auto_auto_auto_auto_auto_auto_auto_auto_auto_auto_auto_auto] gap-3 px-3 py-2 items-center hover:bg-black/[0.03] transition-colors"
                            style={{ fontVariantNumeric: 'tabular-nums' }}
                          >
                            <div>{badge}</div>
                            <Cell>{d.date}</Cell>
                            <Cell>{d.campaign}</Cell>
                            <Cell>{d.partner}</Cell>
                            <Cell>{d.theme}</Cell>
                            <Cell>{d.type}</Cell>
                            <Cell className="text-right">{d.price.toFixed(2)}</Cell>
                            <Cell className="text-right">{d.qty}</Cell>
                            <Cell className="text-right">{d.vSent}</Cell>
                            <Cell>{d.database}</Cell>
                            <Cell>{d.geo}</Cell>
                            <Cell>{d.databaseType || 'â€”'}</Cell>
                            <Cell className="text-right">{d.turnover.toFixed(2)}</Cell>
                            <Cell
                              className={`text-right ${
                                d.margin > 0 ? 'text-[--color-primary]' :
                                d.margin < 0 ? 'text-[--color-accent]' : ''
                              }`}
                            >
                              {d.margin.toFixed(2)}
                            </Cell>
                            <Cell className="text-right">{d.ecpm.toFixed(2)}</Cell>

                            {(issues[i] && issues[i].length > 0) && (
                              <div className="col-span-full text-xs opacity-80 -mt-1">
                                {issues[i].map((it, k) => (
                                  <span
                                    key={k}
                                    className="inline-block mr-2 mt-1 px-1.5 py-0.5 rounded border border-[--color-border] bg-[color:var(--color-surface)]"
                                  >
                                    {it.level}: {it.msg}
                                  </span>
                                ))}
                              </div>
                            )}
                          </div>
                        );
                      })}
                      {drafts.length === 0 && (
                        <div className="px-3 py-5 text-sm opacity-70">No rows.</div>
                      )}
                    </div>
                  </div>
                </div>

                {/* Fades locales solo si hay overflow-x */}
                {showLeftFade && (
                  <div
                    aria-hidden
                    className="pointer-events-none absolute inset-y-0 left-0 w-6
                               bg-gradient-to-r from-[color:var(--color-surface)] to-transparent"
                  />
                )}
                {showRightFade && (
                  <div
                    aria-hidden
                    className="pointer-events-none absolute inset-y-0 right-0 w-6
                               bg-gradient-to-l from-[color:var(--color-surface)] to-transparent"
                  />
                )}
              </div>
            </div>
          </>
        )}
      </div>
    </MiniModal>
  );
}

/* =======================
   Subcomponentes
   ======================= */
function Th({ children, className = '' }: { children: React.ReactNode; className?: string }) {
  return (
    <th className={`text-left font-medium px-3 py-2 border-b border-[--color-border]/60 ${className}`}>
      {children}
    </th>
  );
}
function Cell({ children, className = '' }: { children: React.ReactNode; className?: string }) {
  return <div className={`min-w-0 ${className}`}>{children}</div>;
}
function Badge({ children, className = '' }: { children: React.ReactNode; className?: string }) {
  return (
    <span className={`px-2 py-0.5 rounded-full text-[11px] font-semibold ${className}`}>
      {children}
    </span>
  );
}
function Stat({ label, value }: { label: string; value: number | string }) {
  return (
    <div className="rounded-lg border border-[--color-border] bg-[color:var(--color-surface)]/70 p-3">
      <div className="text-xs uppercase text-[color:var(--color-text)]/65">{label}</div>
      <div className="text-xl font-semibold mt-1" style={{ fontVariantNumeric: 'tabular-nums' }}>
        {String(value)}
      </div>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsChart.tsx =====
// components/reports/ReportsChart.tsx
'use client';

import {
  ResponsiveContainer,
  BarChart, Bar,
  XAxis, YAxis,
  CartesianGrid,
  Tooltip,
  LabelList,
} from 'recharts';
import type { AggregateRow, Metric } from '@/types/reports';
import { fmtEUR2, fmtINT, formatByMetric, makeYAxisTick } from '@/utils/format';

type Props = {
  data: AggregateRow[];
  metric: Metric;
  title?: string;
  height?: number;
  showTable?: boolean;
  groupLabel?: string;
};

const chartTheme = {
  tick: { fill: 'var(--chart-axis)', fontSize: 12 },
  axisLine: { stroke: 'var(--chart-grid)' },
  tickLine: { stroke: 'var(--chart-grid)' },
  grid: 'var(--chart-grid)',
  gridStrong: 'var(--chart-grid-strong)',
  tooltip: {
    contentStyle: {
      background: 'var(--chart-tooltip-bg)',
      border: '1px solid var(--color-border)',
      borderRadius: 8,
    } as React.CSSProperties,
    itemStyle: { color: 'var(--color-text)' } as React.CSSProperties,
    labelStyle: { color: 'var(--color-text)' } as React.CSSProperties,
  },
};

export default function ReportsChart({
  data,
  metric,
  title = 'Top ranking',
  height = 360,
  showTable = true,
  groupLabel = 'Group',
}: Props) {
  const yTick = makeYAxisTick(metric);
  const hStyle = { height: `${height}px` }; // â¬…ï¸ altura explÃ­cita para el contenedor

  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-3">
      <div className="flex items-center justify-between px-1 pb-2">
        <div className="text-sm opacity-80">{title}</div>
        <div className="text-xs opacity-60">Right click â†’ â€œSave imageâ€</div>
      </div>

      {/* â¬‡ï¸ altura fija en inline-style (nada de variables CSS) */}
      <div style={hStyle}>
        {data.length === 0 ? (
          <div className="h-full flex items-center justify-center text-sm opacity-70">
            No data for current filters
          </div>
        ) : (
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={data} margin={{ top: 8, right: 12, left: 12, bottom: 40 }}>
              <CartesianGrid stroke={chartTheme.grid} vertical={false} />
              <XAxis
                dataKey="label"
                interval={0}
                angle={-25}
                textAnchor="end"
                height={55}
                tick={chartTheme.tick}
                axisLine={chartTheme.axisLine}
                tickLine={chartTheme.tickLine}
              />
              <YAxis
                tickFormatter={yTick}
                tick={chartTheme.tick}
                axisLine={chartTheme.axisLine}
                tickLine={chartTheme.tickLine}
              />
              <Tooltip
                cursor={{ stroke: chartTheme.gridStrong }}
                contentStyle={chartTheme.tooltip.contentStyle}
                itemStyle={chartTheme.tooltip.itemStyle}
                labelStyle={chartTheme.tooltip.labelStyle}
                formatter={(v: any, name: any) => {
                  const val = Number(v || 0);
                  if (metric === 'ecpm') return [fmtEUR2.format(val), 'eCPM'];
                  if (metric === 'turnover' || metric === 'margin') return [fmtEUR2.format(val), name];
                  return [fmtINT.format(val), name];
                }}
                labelFormatter={(label: any) => String(label)}
              />
              <Bar dataKey={metric} name={legendName(metric)} radius={[6, 6, 0, 0]} fill="var(--chart-1)">
                <LabelList
                  dataKey={metric}
                  position="top"
                  formatter={(v: number) => formatByMetric(metric, v)}
                  style={{ fontSize: 11, opacity: 0.9 }}
                />
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        )}
      </div>

      {showTable && data.length > 0 && (
        <div className="overflow-x-auto mt-3">
          <table className="min-w-[720px] w-full text-sm">
            <thead className="bg-white/5">
              <tr>
                <th className="text-left px-3 py-2">{groupLabel}</th>
                <th className="text-right px-3 py-2">Turnover</th>
                <th className="text-right px-3 py-2">Margin</th>
                <th className="text-right px-3 py-2">eCPM</th>
                <th className="text-right px-3 py-2">V Sent</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-[--color-border]/60">
              {data.map((d) => (
                <tr key={d.key}>
                  <td className="px-3 py-2">{d.label}</td>
                  <td className="px-3 py-2 text-right">{fmtEUR2.format(d.turnover)}</td>
                  <td className={`px-3 py-2 text-right ${d.margin>0?'text-[--color-primary]':d.margin<0?'text-[--color-accent]':''}`}>
                    {fmtEUR2.format(d.margin)}
                  </td>
                  <td className="px-3 py-2 text-right">{fmtEUR2.format(d.ecpm)}</td>
                  <td className="px-3 py-2 text-right">{fmtINT.format(d.vSent)}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}

function legendName(m: Metric) {
  return m === 'turnover' ? 'Turnover' : m === 'margin' ? 'Margin' : m === 'ecpm' ? 'eCPM' : 'V Sent';
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsGeoBreakdown.tsx =====
'use client';

import Card from '@/components/ui/Card';
import { useReportData } from '@/hooks/useReportData';

const fmtEUR = new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' });
const fmtPct = new Intl.NumberFormat('es-ES', { style: 'percent', maximumFractionDigits: 2 });

function Block({
  title,
  turnover,
  margin,
  marginPct,
}: {
  title: string;
  turnover: number;
  margin: number;
  marginPct: number | null;
}) {
  const tone =
    marginPct == null ? ''
    : marginPct >= 0.70 ? 'text-[color:var(--color-primary)]'
    : marginPct >= 0.01 ? 'text-[color-mix(in_oklab,var(--color-accent)_58%,var(--color-primary)_42%)]'
    : 'text-[color:var(--color-accent)]';

  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface-2)]/60 p-4">
      <div className="text-xs uppercase opacity-70">{title}</div>
      <div className="mt-2 grid gap-1">
        <div className="text-sm">Turnover</div>
        <div className="text-lg font-semibold tabular-nums">{fmtEUR.format(turnover)}</div>
        <div className="mt-1 text-sm">Margin (%)</div>
        <div className={`text-lg font-semibold tabular-nums ${tone}`}>
          {marginPct == null ? 'â€”' : fmtPct.format(marginPct)}
        </div>
        <div className="text-xs opacity-75 tabular-nums">Margin: <strong>{fmtEUR.format(margin)}</strong></div>
      </div>
    </div>
  );
}

export default function ReportsGeoBreakdown() {
  const { computeTotals } = useReportData();

  const isFR    = (g?: string) => (g || '').toUpperCase() === 'FR';
  const isB2C   = (t?: string) => t === 'B2C';
  const isB2B   = (t?: string) => t === 'B2B';

  const frB2C = computeTotals(r => isFR(r.geo) && isB2C(r.databaseType));
  const frB2B = computeTotals(r => isFR(r.geo) && isB2B(r.databaseType));
  const intl  = computeTotals(r => !isFR(r.geo)); // todos los geos â‰  FR, incluye B2B+B2C (y geos vacÃ­os si los hay)
  const total = computeTotals(); // summary sobre el filtro activo

  return (
    <Card title="France vs INTL">
      <div className="grid grid-cols-1 md:grid-cols-4 gap-3">
        <Block title="France Â· B2C" turnover={frB2C.turnover} margin={frB2C.margin} marginPct={frB2C.marginPct} />
        <Block title="France Â· B2B" turnover={frB2B.turnover} margin={frB2B.margin} marginPct={frB2B.marginPct} />
        <Block title="INTL (â‰ FR)"   turnover={intl.turnover} margin={intl.margin}   marginPct={intl.marginPct} />
        <Block title="Summary (Total filtro)" turnover={total.turnover} margin={total.margin} marginPct={total.marginPct} />
      </div>
    </Card>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsHeader.tsx =====
'use client';

import { useMemo, useRef, useState, useEffect } from 'react';
import Link from 'next/link';
import Chip from '@/components/ui/Chip';
import { useCatalogOverrides } from '@/context/CatalogOverridesContext';
import type { GroupBy, Metric, ReportFilters } from '@/types/reports';

type Props = {
  groupBy: GroupBy;
  metric: Metric;
  topN: number;

  filters: ReportFilters;
  onChangeFilters: (next: ReportFilters) => void;

  onChangeGroupBy: (g: GroupBy) => void;
  onChangeMetric: (m: Metric) => void;
  onChangeTopN: (n: number) => void;

  onQuickLast30?: () => void;
  onExportCsv?: () => void;

  summary?: { filteredCount?: number; groupCount?: number; };
};

const groupByOptions: { value: GroupBy; label: string }[] = [
  { value: 'database',     label: 'Database' },
  { value: 'partner',      label: 'Partner' },
  { value: 'campaign',     label: 'Campaign' },
  { value: 'advertiser',   label: 'Advertiser' },
  { value: 'theme',        label: 'Theme' },
  { value: 'geo',          label: 'GEO' },
  { value: 'type',         label: 'Type' },
  { value: 'databaseType', label: 'DB Type' },
];

const metrics: Metric[] = ['turnover', 'margin', 'ecpm', 'vSent'];

/** Presets iguales a CampaÃ±as */
type DatePreset =
  | 'today' | 'yesterday' | 'thisWeek' | 'lastWeek'
  | 'thisMonth' | 'lastMonth' | 'last7' | 'last30' | 'custom';

function fmtLocal(d: Date) {
  const y = d.getFullYear();
  const m = String(d.getMonth() + 1).padStart(2, '0');
  const day = String(d.getDate()).padStart(2, '0');
  return `${y}-${m}-${day}`;
}
function startOfWeek(d: Date) {
  const n = new Date(d.getFullYear(), d.getMonth(), d.getDate());
  const w = (n.getDay() || 7) - 1; // lunes
  n.setDate(n.getDate() - w);
  return n;
}
function endOfWeek(d: Date) {
  const s = startOfWeek(d);
  return new Date(s.getFullYear(), s.getMonth(), s.getDate() + 6);
}
function startOfMonth(d: Date) { return new Date(d.getFullYear(), d.getMonth(), 1); }
function endOfMonth(d: Date)   { return new Date(d.getFullYear(), d.getMonth() + 1, 0); }

function rangeForPreset(p: Exclude<DatePreset,'custom'>): [string, string] {
  const now = new Date();
  if (p === 'today')     { const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()); const s=fmtLocal(a); return [s,s]; }
  if (p === 'yesterday') { const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()-1); const s=fmtLocal(a); return [s,s]; }
  if (p === 'thisWeek')  return [fmtLocal(startOfWeek(now)), fmtLocal(endOfWeek(now))];
  if (p === 'lastWeek')  { const k=new Date(now.getFullYear(),now.getMonth(),now.getDate()-7); return [fmtLocal(startOfWeek(k)), fmtLocal(endOfWeek(k))]; }
  if (p === 'thisMonth') return [fmtLocal(startOfMonth(now)), fmtLocal(endOfMonth(now))];
  if (p === 'lastMonth') { const k=new Date(now.getFullYear(),now.getMonth()-1,15); return [fmtLocal(startOfMonth(k)), fmtLocal(endOfMonth(k))]; }
  if (p === 'last7')     { const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()-6); const b=new Date(now.getFullYear(),now.getMonth(),now.getDate()); return [fmtLocal(a),fmtLocal(b)]; }
  // last30
  const a=new Date(now.getFullYear(),now.getMonth(),now.getDate()-29);
  const b=new Date(now.getFullYear(),now.getMonth(),now.getDate());
  return [fmtLocal(a),fmtLocal(b)];
}

export default function ReportsHeader({
  groupBy,
  metric,
  topN,
  filters,
  onChangeFilters,
  onChangeGroupBy,
  onChangeMetric,
  onChangeTopN,
  onQuickLast30,
  onExportCsv,
  summary,
}: Props) {
  const { PARTNERS, DATABASES, THEMES, TYPES } = useCatalogOverrides();

  const geoOptions = useMemo(() => {
    const set = new Set<string>();
    DATABASES.forEach(d => d.geo && set.add((d.geo || '').toUpperCase()));
    return Array.from(set).sort();
  }, [DATABASES]);

  const partnerOptions = useMemo(
    () => PARTNERS.map(p => ({ id: p.id, name: p.name, isInternal: !!p.isInternal })),
    [PARTNERS],
  );
  const themeOptions = useMemo(() => THEMES, [THEMES]);
  const typeOptions  = useMemo(() => TYPES, [TYPES]);
  const dbTypeOptions = ['B2C', 'B2B', 'Mixed'] as const;

  const s = summary || {};
  const set = <K extends keyof ReportFilters>(key: K, value: ReportFilters[K]) =>
    onChangeFilters({ ...filters, [key]: value });

  const toggleOnlyInternal = () =>
    onChangeFilters({ ...filters, onlyInternalPartners: !filters.onlyInternalPartners });

  // --- periodo activo (solo para resaltar chips)
  const startDate = filters.from || '';
  const endDate   = filters.to   || '';
  const hasRange  = !!(startDate && endDate);
  const [activePreset, setActivePreset] = useState<DatePreset>('custom');

  useEffect(() => {
    if (!hasRange) { setActivePreset('custom'); return; }
    const candidates: Exclude<DatePreset,'custom'>[] =
      ['today','yesterday','thisWeek','lastWeek','thisMonth','lastMonth','last7','last30'];
    for (const key of candidates) {
      const [s,e] = rangeForPreset(key);
      if (s === startDate && e === endDate) { setActivePreset(key); return; }
    }
    setActivePreset('custom');
  }, [startDate, endDate, hasRange]);

  function choosePreset(p: Exclude<DatePreset,'custom'> | 'custom') {
    if (p === 'custom') { setActivePreset('custom'); return; }
    const [s, e] = rangeForPreset(p);
    setActivePreset(p);
    onChangeFilters({ ...filters, from: s, to: e });
  }

  // refs para botÃ³n del picker (UX igual que CampaÃ±as)
  const startRef = useRef<HTMLInputElement | null>(null);
  const endRef   = useRef<HTMLInputElement | null>(null);
  const openPicker = (ref: React.RefObject<HTMLInputElement>) => {
    const el = ref.current;
    if (!el) return;
    // @ts-ignore
    if (el.showPicker) el.showPicker(); else el.focus();
  };

  return (
    <div className="grid gap-4">
      {/* TÃ­tulo + acciones */}
      <div className="flex items-center justify-between gap-3">
        <div>
          <h1 className="text-2xl font-semibold">Reports</h1>
          <p className="muted">
            {groupByLabel(groupBy)} performance Â·{' '}
            <span className="opacity-80">
              {s.filteredCount != null ? `${s.filteredCount} rows` : ''}{s.filteredCount!=null && s.groupCount!=null ? ' Â· ' : ''}
              {s.groupCount != null ? `${s.groupCount} groups` : ''}
            </span>
          </p>
        </div>
        <div className="flex items-center gap-2">
          {onExportCsv && <button className="btn-ghost" onClick={onExportCsv}>â¬‡ Export CSV</button>}
          <Link href="/" className="btn-ghost">â† Back to campaigns</Link>
        </div>
      </div>

      {/* Stack de filtros */}
      <div className="filters-stack">
        {/* Row A â€” mÃ©trica, groupBy, TopN */}
        <div className="grid gap-3 md:grid-cols-12 items-end">
          <div className="md:col-span-2">
            <label className="text-sm grid gap-1">
              <span className="muted">Group by</span>
              <select className="input" value={groupBy} onChange={(e) => onChangeGroupBy(e.target.value as GroupBy)}>
                {groupByOptions.map(o => <option key={o.value} value={o.value}>{o.label}</option>)}
              </select>
            </label>
          </div>

          <div className="md:col-span-8">
            <span className="muted text-sm mb-1 inline-block">Metric</span>
            <div className="flex gap-1 flex-wrap">
              {metrics.map(m => (
                <Chip key={m} active={metric === m} onClick={() => onChangeMetric(m)} title={`Rank by ${m}`}>
                  {m === 'turnover' ? 'Turnover' : m === 'margin' ? 'Margin' : m === 'ecpm' ? 'eCPM' : 'V Sent'}
                </Chip>
              ))}
            </div>
          </div>

          <div className="md:col-span-2">
            <label className="text-sm grid gap-1">
              <span className="muted">Top N</span>
              <input
                type="number"
                className="input"
                min={1}
                max={50}
                value={topN}
                onChange={(e) => onChangeTopN(Math.max(1, Math.min(50, Number(e.target.value || 1))))}
              />
            </label>
          </div>
        </div>

        {/* Row B â€” chips de periodo */}
        <div className="flex flex-wrap items-center gap-3">
          {([
            ['today','Today'],
            ['yesterday','Yesterday'],
            ['last7','Last 7'],
            ['last30','Last 30'],
            ['thisWeek','This week'],
            ['lastWeek','Last week'],
            ['thisMonth','This month'],
            ['lastMonth','Last month'],
            ['custom','Custom'],
          ] as [DatePreset,string][])
            .map(([key,label]) => (
              <Chip
                key={key}
                active={activePreset === key}
                onClick={() => choosePreset(key === 'custom' ? 'custom' : key)}
              >
                {label}
              </Chip>
            ))}
        </div>

        {/* Row C â€” rango de fechas + toggles */}
        <div className="flex flex-wrap items-center gap-3 md:gap-4">
          {/* Start */}
          <div className="relative">
            <input
              ref={startRef}
              type="date"
              value={startDate}
              onChange={(e) => onChangeFilters({ ...filters, from: e.target.value || undefined })}
              className="input input-date w-40 pr-9"
            />
            <button
              type="button"
              className="absolute inset-y-0 right-0 px-2 rounded-r-lg hover:bg-black/5 focus:outline-none focus:ring-2 focus:ring-primary/40"
              aria-label="Open start date picker"
              onClick={() => openPicker(startRef)}
            >
              ðŸ“…
            </button>
          </div>

          {/* End */}
          <div className="relative">
            <input
              ref={endRef}
              type="date"
              value={endDate}
              onChange={(e) => onChangeFilters({ ...filters, to: e.target.value || undefined })}
              className="input input-date w-40 pr-9"
            />
            <button
              type="button"
              className="absolute inset-y-0 right-0 px-2 rounded-r-lg hover:bg-black/5 focus:outline-none focus:ring-2 focus:ring-primary/40"
              aria-label="Open end date picker"
              onClick={() => openPicker(endRef)}
            >
              ðŸ“…
            </button>
          </div>

          <div className="flex-1" />

          <label className="inline-flex items-center gap-2 text-sm">
            <input
              type="checkbox"
              className="accent-[--color-primary]"
              checked={!!filters.onlyInternalPartners}
              onChange={toggleOnlyInternal}
            />
            <span className="muted">Only internal</span>
          </label>

          <button
            className="btn-ghost"
            onClick={() => onChangeFilters({})}
            title="Clear filters"
          >
            Clear
          </button>
        </div>

        {/* Row D â€” filtros de entidad */}
        <div className="grid gap-3 md:grid-cols-12">
          <div className="md:col-span-2">
            <label className="text-sm grid gap-1">
              <span className="muted">GEO</span>
              <select
                className="input"
                value={(filters.geos && filters.geos[0]) || ''}
                onChange={(e) => set('geos', e.target.value ? [e.target.value] : undefined)}
              >
                <option value="">All</option>
                {geoOptions.map(g => <option key={g} value={g}>{g}</option>)}
              </select>
            </label>
          </div>

          <div className="md:col-span-3">
            <label className="text-sm grid gap-1">
              <span className="muted">Partner</span>
              <select
                className="input"
                value={(filters.partners && filters.partners[0]) || ''}
                onChange={(e) => set('partners', e.target.value ? [e.target.value] : undefined)}
              >
                <option value="">All</option>
                {partnerOptions.map(p => (
                  <option key={p.id} value={p.name}>
                    {p.name}{p.isInternal ? ' Â· INT' : ''}
                  </option>
                ))}
              </select>
            </label>
          </div>

          <div className="md:col-span-2">
            <label className="text-sm grid gap-1">
              <span className="muted">Theme</span>
              <select
                className="input"
                value={(filters.themes && filters.themes[0]) || ''}
                onChange={(e) => set('themes', e.target.value ? [e.target.value] : undefined)}
              >
                <option value="">All</option>
                {themeOptions.map(t => <option key={t} value={t}>{t}</option>)}
              </select>
            </label>
          </div>

          <div className="md:col-span-2">
            <label className="text-sm grid gap-1">
              <span className="muted">Type</span>
              <select
                className="input"
                value={(filters.types && filters.types[0]) || ''}
                onChange={(e) => set('types', e.target.value ? [e.target.value as any] : undefined)}
              >
                <option value="">All</option>
                {typeOptions.map(t => <option key={t} value={t}>{t}</option>)}
              </select>
            </label>
          </div>

          <div className="md:col-span-2">
            <label className="text-sm grid gap-1">
              <span className="muted">DB Type</span>
              <select
                className="input"
                value={(filters.databaseTypes && filters.databaseTypes[0]) || ''}
                onChange={(e) => set('databaseTypes', e.target.value ? [e.target.value as any] : undefined)}
              >
                <option value="">All</option>
                {dbTypeOptions.map(t => <option key={t} value={t}>{t}</option>)}
              </select>
            </label>
          </div>
        </div>
      </div>
    </div>
  );
}

function groupByLabel(g: GroupBy) {
  return groupByOptions.find(o => o.value === g)?.label ?? 'Group';
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsKpis.tsx =====
// components/reports/ReportsKpis.tsx
'use client';

import { fmtEUR2, fmtINT as fmtNum } from '@/utils/format';

type Kpis = {
  vSent: number;
  turnover: number;
  margin: number;
  ecpm: number;
  marginPct: number | null;
};

export default function ReportsKpis({ kpis }: { kpis: Kpis }) {
  const marginText =
    `${fmtEUR2.format(kpis.margin)}${
      kpis.marginPct == null ? '' : ` (${(kpis.marginPct * 100).toFixed(1)}%)`
    }`;

  const highlight: 'pos' | 'neg' | undefined =
    kpis.margin > 0 ? 'pos' : kpis.margin < 0 ? 'neg' : undefined;

  return (
    <div className="grid gap-3 mt-4 sm:grid-cols-2 lg:grid-cols-4">
      <Kpi title="Total V Sent" value={fmtNum.format(kpis.vSent)} />
      <Kpi title="Turnover" value={fmtEUR2.format(kpis.turnover)} />
      <Kpi title="Margin" value={marginText} highlight={highlight} />
      <Kpi title="Weighted eCPM" value={fmtEUR2.format(kpis.ecpm)} />
    </div>
  );
}

function Kpi({
  title,
  value,
  highlight,
}: {
  title: string;
  value: string;
  highlight?: 'pos' | 'neg';
}) {
  const color =
    highlight === 'pos'
      ? 'text-[--color-primary]'
      : highlight === 'neg'
      ? 'text-[--color-accent]'
      : 'opacity-100';
  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)]/80 p-3">
      <div className="text-xs uppercase opacity-70">{title}</div>
      <div className={`text-xl font-semibold mt-1 ${color}`}>{value}</div>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsTimeSeries.tsx =====
// components/reports/ReportsTimeSeries.tsx
'use client';

import { useMemo, useState } from 'react';
import type { UseReportDataResult } from '@/hooks/useReportData';
import { fmtEUR2, fmtINT } from '@/utils/format';
import {
  ResponsiveContainer, LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend,
} from 'recharts';

type MetricOpt = 'ecpm' | 'turnover' | 'margin' | 'marginPct' | 'vSent';
type GroupOpt = 'none' | 'database' | 'partner' | 'geo';

const fmtPCT1 = new Intl.NumberFormat('es-ES', { style: 'percent', maximumFractionDigits: 1 });

export default function ReportsTimeSeries({
  makeSeries,
  title = 'Time series',
  height = 300,
}: {
  makeSeries: UseReportDataResult['makeTimeSeries'];
  title?: string;
  height?: number;
}) {
  const [metric, setMetric] = useState<MetricOpt>('ecpm');
  const [by, setBy] = useState<GroupOpt>('none');
  const [topN, setTopN] = useState(5);
  const [includeOthers, setIncludeOthers] = useState(true);
  const [focus, setFocus] = useState<string>(''); // '' = All

  const { data, keys } = useMemo(
    () => makeSeries({ metric, by, topN, includeOthers }),
    [makeSeries, metric, by, topN, includeOthers],
  );

  const visibleKeys = focus ? keys.filter(k => k === focus) : keys;

  const tickFormatter = (v: any) =>
    metric === 'marginPct'
      ? fmtPCT1.format(Number(v || 0))
      : metric === 'vSent'
      ? fmtINT.format(Number(v || 0))
      : fmtEUR2.format(Number(v || 0));

  const tooltipFormatter = (value: any) => [
    metric === 'marginPct'
      ? fmtPCT1.format(Number(value || 0))
      : metric === 'vSent'
      ? fmtINT.format(Number(value || 0))
      : fmtEUR2.format(Number(value || 0)),
    labelOf(metric),
  ];

  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-3">
      <div className="flex items-center justify-between mb-2">
        <div className="text-sm font-medium">{title}</div>

        <div className="flex gap-2 items-center">
          <label className="text-sm">
            <span className="muted mr-2">Group lines by</span>
            <select className="input" value={by} onChange={e => { setBy(e.target.value as GroupOpt); setFocus(''); }}>
              <option value="none">Total</option>
              <option value="database">Database</option>
              <option value="partner">Partner</option>
              <option value="geo">GEO</option>
            </select>
          </label>

          <label className="text-sm">
            <span className="muted mr-2">Metric</span>
            <select className="input" value={metric} onChange={e => setMetric(e.target.value as MetricOpt)}>
              <option value="ecpm">eCPM</option>
              <option value="turnover">Turnover</option>
              <option value="margin">Margin</option>
              <option value="marginPct">Margin %</option>
              <option value="vSent">V Sent</option>
            </select>
          </label>

          {by !== 'none' && (
            <>
              <label className="text-sm">
                <span className="muted mr-2">Top N</span>
                <input
                  className="input w-[88px]"
                  type="number"
                  min={1}
                  max={10}
                  value={topN}
                  onChange={e => setTopN(Math.max(1, Math.min(10, Number(e.target.value || 1))))}
                />
              </label>
              <label className="text-sm inline-flex items-center gap-2">
                <input
                  type="checkbox"
                  className="accent-[--color-primary]"
                  checked={includeOthers}
                  onChange={e => setIncludeOthers(e.target.checked)}
                />
                <span className="muted">Include â€œOthersâ€</span>
              </label>
              <label className="text-sm">
                <span className="muted mr-2">Focus</span>
                <select className="input min-w-[160px]" value={focus} onChange={e => setFocus(e.target.value)}>
                  <option value="">All</option>
                  {keys.map(k => <option key={k} value={k}>{k}</option>)}
                </select>
              </label>
            </>
          )}
        </div>
      </div>

      <div className="h-[--h]" style={{ ['--h' as any]: `${height}px` }}>
        {data.length === 0 ? (
          <div className="h-full flex items-center justify-center text-sm opacity-70">No data for current filters</div>
        ) : (
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={data} margin={{ left: 8, right: 8, top: 8, bottom: 0 }}>
              <CartesianGrid stroke="var(--chart-grid)" vertical={false} />
              <XAxis
                dataKey="date"
                tick={{ fill: 'var(--chart-axis)', fontSize: 12 }}
                axisLine={{ stroke: 'var(--chart-grid)' }}
                tickLine={{ stroke: 'var(--chart-grid)' }}
              />
              <YAxis
                tick={{ fill: 'var(--chart-axis)', fontSize: 12 }}
                axisLine={{ stroke: 'var(--chart-grid)' }}
                tickLine={{ stroke: 'var(--chart-grid)' }}
                tickFormatter={tickFormatter}
              />
              <Tooltip
                cursor={{ stroke: 'var(--chart-grid-strong)' }}
                contentStyle={{ background: 'var(--chart-tooltip-bg)', border: '1px solid var(--color-border)', borderRadius: 8 }}
                itemStyle={{ color: 'var(--color-text)' }}
                labelStyle={{ color: 'var(--color-text)' }}
                formatter={tooltipFormatter}
              />
              <Legend />
              {visibleKeys.map((k) => (
                <Line
                  key={k}
                  type="monotone"
                  dataKey={k}
                  dot={false}
                  name={k}
                  strokeWidth={focus && k !== focus ? 1 : 2}
                  strokeOpacity={focus && k !== focus ? 0.25 : 1}
                  stroke={colorFor(k)}
                />
              ))}
            </LineChart>
          </ResponsiveContainer>
        )}
      </div>
    </div>
  );
}

/* Color estable por clave */
function colorFor(key: string) {
  const palette = [
    'var(--chart-1)', 'var(--chart-2)', 'var(--chart-3)', 'var(--chart-4)', 'var(--chart-5)',
    '#6B7280', '#10B981', '#F59E0B', '#EF4444', '#3B82F6',
  ];
  let h = 0;
  for (let i = 0; i < key.length; i++) h = (h * 31 + key.charCodeAt(i)) >>> 0;
  return palette[h % palette.length];
}
function labelOf(m: MetricOpt) {
  return m === 'ecpm' ? 'eCPM' : m === 'marginPct' ? 'Margin %' : m === 'vSent' ? 'V Sent' : m[0].toUpperCase() + m.slice(1);
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsTopTable.tsx =====
// components/reports/ReportsTopTable.tsx
'use client';

import type { AggregateRow } from '@/types/reports';
import { fmtEUR2, fmtINT as fmtNum } from '@/utils/format';

type RowLike = Pick<AggregateRow, 'label' | 'vSent' | 'turnover' | 'margin' | 'ecpm'> & {
  key?: string;
};

export default function ReportsTopTable({
  data,
  rows,
  groupLabel = 'Group',
}: {
  /** Nueva prop opcional para retro-compat: */
  rows?: RowLike[];
  /** Prop â€œcanÃ³nicaâ€: */
  data?: RowLike[];
  groupLabel?: string;
}) {
  const list: RowLike[] = (data ?? rows ?? []);

  if (!list.length) {
    return (
      <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-3">
        <div className="text-sm opacity-70">No data for current filters.</div>
      </div>
    );
  }

  return (
    <div className="overflow-x-auto mt-3">
      <table className="w-full text-sm min-w-[720px]">
        <thead>
          <tr className="border-b border-[--color-border]/60">
            <Th>{groupLabel}</Th>
            <Th className="text-right">V Sent</Th>
            <Th className="text-right">Turnover</Th>
            <Th className="text-right">Margin</Th>
            <Th className="text-right">eCPM</Th>
          </tr>
        </thead>
        <tbody className="divide-y divide-[--color-border]/60">
          {list.map((r) => (
            <tr key={r.key ?? r.label}>
              <Td>{r.label}</Td>
              <Td className="text-right">{fmtNum.format(r.vSent)}</Td>
              <Td className="text-right">{fmtEUR2.format(r.turnover)}</Td>
              <Td
                className={[
                  'text-right',
                  r.margin > 0 ? 'text-[--color-primary]' : r.margin < 0 ? 'text-[--color-accent]' : '',
                ].join(' ')}
              >
                {fmtEUR2.format(r.margin)}
              </Td>
              <Td className="text-right">{fmtEUR2.format(r.ecpm)}</Td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

function Th({ children, className = '' }: { children: React.ReactNode; className?: string }) {
  return <th className={`text-left font-medium px-3 py-2 ${className}`}>{children}</th>;
}
function Td({ children, className = '' }: { children: React.ReactNode; className?: string }) {
  return <td className={`px-3 py-2 ${className}`}>{children}</td>;
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsTrend.tsx =====
// components/reports/ReportsTrend.tsx
'use client';

import type { TrendPoint } from '@/types/reports';
import { fmtEUR2 } from '@/utils/format';
import {
  ResponsiveContainer,
  LineChart, Line,
  CartesianGrid, XAxis, YAxis, Tooltip, Legend,
} from 'recharts';

export default function ReportsTrend({ data }: { data: TrendPoint[] }) {
  const hasData = Array.isArray(data) && data.length > 0;

  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-3">
      <div className="text-sm font-medium mb-2">eCPM trend</div>
      <div className="h-[280px]">
        {!hasData ? (
          <div className="h-full flex items-center justify-center text-sm opacity-70">
            No data for current filters
          </div>
        ) : (
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={data} margin={{ left: 8, right: 8, top: 8, bottom: 0 }}>
              <CartesianGrid stroke="var(--chart-grid)" vertical={false} />
              <XAxis
                dataKey="date"
                tick={{ fill: 'var(--chart-axis)', fontSize: 12 }}
                axisLine={{ stroke: 'var(--chart-grid)' }}
                tickLine={{ stroke: 'var(--chart-grid)' }}
              />
              <YAxis
                tick={{ fill: 'var(--chart-axis)', fontSize: 12 }}
                axisLine={{ stroke: 'var(--chart-grid)' }}
                tickLine={{ stroke: 'var(--chart-grid)' }}
                tickFormatter={(v: number) => fmtEUR2.format(Number(v || 0))}
              />
              <Tooltip
                cursor={{ stroke: 'var(--chart-grid-strong)' }}
                contentStyle={{
                  background: 'var(--chart-tooltip-bg)',
                  border: '1px solid var(--color-border)',
                  borderRadius: 8,
                }}
                itemStyle={{ color: 'var(--color-text)' }}
                labelStyle={{ color: 'var(--color-text)' }}
                formatter={(value: any) => [fmtEUR2.format(Number(value || 0)), 'eCPM']}
              />
              <Legend />
              <Line
                type="monotone"
                dataKey="ecpm"
                dot={false}
                activeDot={{ r: 4 }}
                stroke="var(--chart-2)"
                strokeWidth={2}
              />
            </LineChart>
          </ResponsiveContainer>
        )}
      </div>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsTurnoverTrend.tsx =====
'use client';

import { fmtEUR2 } from '@/utils/format';
import {
  ResponsiveContainer,
  LineChart, Line,
  CartesianGrid, XAxis, YAxis, Tooltip, Legend,
} from 'recharts';

type By = 'none' | 'database' | 'partner' | 'geo';

export default function ReportsTurnoverTrend(props: {
  data: Array<Record<string, any>>;
  keys: string[];
  by: By;
  onChangeBy: (v: By) => void;
  topN: number;
  onChangeTopN: (n: number) => void;
  includeOthers: boolean;
  onToggleOthers: (v: boolean) => void;

  // NUEVO: focus
  focusKey?: string | null;
  focusOptions?: string[];
  onChangeFocus?: (k: string | null) => void;
}) {
  const {
    data, keys, by, onChangeBy,
    topN, onChangeTopN,
    includeOthers, onToggleOthers,
    focusKey, focusOptions, onChangeFocus,
  } = props;

  const disabledByFocus = !!focusKey;

  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-3">
      <div className="flex flex-wrap gap-3 items-end mb-2">
        <div className="text-sm font-medium mr-auto">Turnover trend</div>

        <label className="text-sm grid gap-1">
          <span className="muted">Group lines by</span>
          <select
            className="input"
            value={by}
            onChange={e => onChangeBy(e.target.value as By)}
          >
            <option value="none">Total</option>
            <option value="database">Database</option>
            <option value="partner">Partner</option>
            <option value="geo">GEO</option>
          </select>
        </label>

        {by !== 'none' && (
          <>
            <label className="text-sm grid gap-1">
              <span className="muted">Focus</span>
              <select
                className="input"
                value={focusKey ?? ''}
                onChange={e => onChangeFocus?.(e.target.value || null)}
              >
                <option value="">All</option>
                {(focusOptions ?? []).map(k => (
                  <option key={k} value={k}>{k}</option>
                ))}
              </select>
            </label>

            <label className="text-sm grid gap-1">
              <span className="muted">Top N</span>
              <input
                type="number"
                className="input"
                min={1}
                max={20}
                value={topN}
                onChange={e => onChangeTopN(Math.max(1, Math.min(20, Number(e.target.value || 1))))}
                disabled={disabledByFocus}
              />
            </label>

            <label className="text-sm inline-flex items-center gap-2 mt-6 ml-1">
              <input
                type="checkbox"
                checked={includeOthers}
                onChange={e => onToggleOthers(e.target.checked)}
                disabled={disabledByFocus}
              />
              <span className={disabledByFocus ? 'opacity-50' : ''}>Include â€œOthersâ€</span>
            </label>
          </>
        )}
      </div>

      <div className="h-[300px]">
        {(!data || data.length === 0) ? (
          <div className="h-full flex items-center justify-center text-sm opacity-70">
            No data for current filters
          </div>
        ) : (
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={data} margin={{ left: 8, right: 8, top: 8, bottom: 0 }}>
              <CartesianGrid stroke="var(--chart-grid)" vertical={false} />
              <XAxis
                dataKey="date"
                tick={{ fill: 'var(--chart-axis)', fontSize: 12 }}
                axisLine={{ stroke: 'var(--chart-grid)' }}
                tickLine={{ stroke: 'var(--chart-grid)' }}
              />
              <YAxis
                tick={{ fill: 'var(--chart-axis)', fontSize: 12 }}
                axisLine={{ stroke: 'var(--chart-grid)' }}
                tickLine={{ stroke: 'var(--chart-grid)' }}
                tickFormatter={(v: number) => fmtEUR2.format(Number(v || 0))}
              />
              <Tooltip
                cursor={{ stroke: 'var(--chart-grid-strong)' }}
                contentStyle={{
                  background: 'var(--chart-tooltip-bg)',
                  border: '1px solid var(--color-border)',
                  borderRadius: 8,
                }}
                itemStyle={{ color: 'var(--color-text)' }}
                labelStyle={{ color: 'var(--color-text)' }}
                formatter={(value: any, name: any) => [fmtEUR2.format(Number(value || 0)), String(name)]}
              />
              <Legend />
              {keys.map((k) => (
                <Line
                  key={k}
                  type="monotone"
                  dataKey={k}
                  dot={false}
                  activeDot={{ r: 3 }}
                  strokeWidth={2}
                />
              ))}
            </LineChart>
          </ResponsiveContainer>
        )}
      </div>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsUnifiedTrend.tsx =====
// components/reports/ReportsUnifiedTrend.tsx
'use client';

import {
  ResponsiveContainer,
  LineChart, Line,
  CartesianGrid,
  XAxis, YAxis,
  Tooltip, Legend,
} from 'recharts';
import { fmtEUR2, fmtINT } from '@/utils/format';

type TrendMetric = 'ecpm' | 'turnover' | 'margin' | 'marginPct' | 'vSent';
type GroupBy = 'none' | 'database' | 'partner' | 'geo';

type Props = {
  data: Array<Record<string, number | string>>;
  keys: string[];

  // controles
  metric: TrendMetric;
  onChangeMetric: (m: TrendMetric) => void;

  by: GroupBy;
  onChangeBy: (b: GroupBy) => void;

  topN: number;
  onChangeTopN: (n: number) => void;

  includeOthers: boolean;
  onToggleOthers: (v: boolean) => void;

  // ðŸ”Ž Focus (opcional)
  focusKey?: string | null;
  focusOptions?: string[];
  onChangeFocus?: (key: string | null) => void;
};

const chartTheme = {
  tick: { fill: 'var(--chart-axis)', fontSize: 12 },
  axisLine: { stroke: 'var(--chart-grid)' },
  tickLine: { stroke: 'var(--chart-grid)' },
  grid: 'var(--chart-grid)',
  gridStrong: 'var(--chart-grid-strong)',
  palette: [
    'var(--chart-1)',
    'var(--chart-2)',
    'var(--chart-3)',
    'var(--chart-4)',
    'var(--chart-5)',
    'var(--chart-6)',
    'var(--chart-7)',
    'var(--chart-8)',
  ],
};

function colorAt(i: number) {
  const p = chartTheme.palette;
  return p[i % p.length];
}

function formatByMetric(m: TrendMetric, v: number): string {
  const n = Number(v || 0);
  if (m === 'ecpm' || m === 'turnover' || m === 'margin') return fmtEUR2.format(n);
  if (m === 'marginPct') return `${(n * 100).toFixed(1)}%`;
  return fmtINT.format(n); // vSent
}

function yTickFormatter(m: TrendMetric) {
  return (v: number) => {
    if (m === 'marginPct') return `${(Number(v || 0) * 100).toFixed(0)}%`;
    if (m === 'ecpm' || m === 'turnover' || m === 'margin') return fmtEUR2.format(Number(v || 0));
    return fmtINT.format(Number(v || 0));
  };
}

export default function ReportsUnifiedTrend({
  data,
  keys,
  metric,
  onChangeMetric,
  by,
  onChangeBy,
  topN,
  onChangeTopN,
  includeOthers,
  onToggleOthers,
  // Focus
  focusKey = null,
  focusOptions = [],
  onChangeFocus,
}: Props) {
  const hasData = Array.isArray(data) && data.length > 0 && keys.length > 0;

  const focusEnabled = by !== 'none' && !!onChangeFocus;
  const hasFocus = focusEnabled && !!focusKey;

  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-3">
      <div className="flex items-center justify-between gap-3 mb-2">
        <div className="text-sm font-medium">Time series</div>

        {/* Controles */}
        <div className="flex items-end gap-2">
          <label className="text-sm grid gap-1">
            <span className="muted">Metric</span>
            <select
              className="input"
              value={metric}
              onChange={e => onChangeMetric(e.target.value as TrendMetric)}
            >
              <option value="ecpm">eCPM</option>
              <option value="turnover">Turnover</option>
              <option value="margin">Margin</option>
              <option value="marginPct">Margin %</option>
              <option value="vSent">V Sent</option>
            </select>
          </label>

          <label className="text-sm grid gap-1">
            <span className="muted">Group lines by</span>
            <select
              className="input"
              value={by}
              onChange={e => onChangeBy(e.target.value as GroupBy)}
            >
              <option value="none">Total</option>
              <option value="database">Database</option>
              <option value="partner">Partner</option>
              <option value="geo">GEO</option>
            </select>
          </label>

          {/* ðŸ”Ž Focus selector */}
          <label className="text-sm grid gap-1">
            <span className="muted">Focus</span>
            <select
              className="input"
              value={focusKey ?? ''}
              onChange={e => onChangeFocus?.(e.target.value ? e.target.value : null)}
              disabled={!focusEnabled}
            >
              <option value="">All</option>
              {focusOptions.map(k => (
                <option key={k} value={k}>{k}</option>
              ))}
            </select>
          </label>

          <label className="text-sm grid gap-1">
            <span className="muted">Top N</span>
            <input
              type="number"
              className="input"
              min={1}
              max={20}
              value={topN}
              onChange={e => onChangeTopN(Math.max(1, Math.min(20, Number(e.target.value || 1))))}
              disabled={by === 'none' || hasFocus}
              title={hasFocus ? 'Disabled when Focus is active' : undefined}
            />
          </label>

          <label
            className={`text-sm inline-flex items-center gap-2 ${
              by === 'none' || hasFocus ? 'opacity-50' : ''
            }`}
            title={hasFocus ? 'Disabled when Focus is active' : undefined}
          >
            <input
              type="checkbox"
              className="accent-[--color-primary]"
              checked={includeOthers}
              onChange={e => onToggleOthers(e.target.checked)}
              disabled={by === 'none' || hasFocus}
            />
            <span className="muted">Include â€œOthersâ€</span>
          </label>
        </div>
      </div>

      <div className="h-[320px]">
        {!hasData ? (
          <div className="h-full flex items-center justify-center text-sm opacity-70">
            No data for current filters
          </div>
        ) : (
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={data} margin={{ left: 8, right: 8, top: 8, bottom: 0 }}>
              <CartesianGrid stroke={chartTheme.grid} vertical={false} />
              <XAxis
                dataKey="date"
                tick={chartTheme.tick}
                axisLine={chartTheme.axisLine}
                tickLine={chartTheme.tickLine}
              />
              <YAxis
                tick={chartTheme.tick}
                axisLine={chartTheme.axisLine}
                tickLine={chartTheme.tickLine}
                tickFormatter={yTickFormatter(metric)}
              />
              <Tooltip
                cursor={{ stroke: chartTheme.gridStrong }}
                contentStyle={{
                  background: 'var(--chart-tooltip-bg)',
                  border: '1px solid var(--color-border)',
                  borderRadius: 8,
                }}
                itemStyle={{ color: 'var(--color-text)' }}
                labelStyle={{ color: 'var(--color-text)' }}
                formatter={(value: any, name: any) => [formatByMetric(metric, Number(value || 0)), String(name)]}
              />
              <Legend />
              {keys.map((k, idx) => (
                <Line
                  key={k}
                  type="monotone"
                  dataKey={k}
                  name={k}
                  dot={false}
                  stroke={colorAt(idx)}
                  strokeWidth={2}
                  activeDot={{ r: 4 }}
                />
              ))}
            </LineChart>
          </ResponsiveContainer>
        )}
      </div>

      <div className="text-xs opacity-60 mt-2 text-right">Right click â†’ â€œSave imageâ€</div>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\reports\ReportsView.tsx =====
'use client';

import { useMemo, useState } from 'react';

import Card from '@/components/ui/Card';
import ReportsHeader from '@/components/reports/ReportsHeader';
import ReportsKpis from '@/components/reports/ReportsKpis';
import ReportsUnifiedTrend from '@/components/reports/ReportsUnifiedTrend';
import ReportsChart from '@/components/reports/ReportsChart';
import ReportsTopTable from '@/components/reports/ReportsTopTable';

import { useReportData } from '@/hooks/useReportData';
import type { Metric } from '@/types/reports';

const fmtEUR = new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' });
const fmtInt = new Intl.NumberFormat('es-ES');
const fmtPct = new Intl.NumberFormat('es-ES', { style: 'percent', maximumFractionDigits: 2 });

export default function ReportsView() {
  const {
    filters, setFilters,
    groupBy, setGroupBy,
    metric, setMetric,
    topN, setTopN,
    ranking, fullRanking,
    summary,
    quickLast30,
    makeTrendSeries,          // â¬…ï¸ unificado
    listAvailableKeys,
    computeTotals,            // â¬…ï¸ nuevo helper para FR/INTL
  } = useReportData();

  // Estado del unified trend
  const [trendMetric, setTrendMetric] =
    useState<'ecpm' | 'turnover' | 'margin' | 'marginPct' | 'vSent'>('turnover');
  const [trendBy, setTrendBy] = useState<'none' | 'database' | 'partner' | 'geo'>('database');
  const [trendTopN, setTrendTopN] = useState<number>(5);
  const [trendIncludeOthers, setTrendIncludeOthers] = useState<boolean>(true);
  const [trendFocusKey, setTrendFocusKey] = useState<string | null>(null);

  const focusOptions = useMemo(
    () => (trendBy === 'none' ? [] : listAvailableKeys(trendBy)),
    [trendBy, listAvailableKeys]
  );

  const trendSeries = useMemo(
    () => makeTrendSeries({
      metric: trendMetric,
      by: trendBy,
      topN: trendFocusKey ? 1 : trendTopN,
      includeOthers: trendFocusKey ? false : trendIncludeOthers,
      only: trendFocusKey ? [trendFocusKey] : undefined,
    }),
    [makeTrendSeries, trendMetric, trendBy, trendTopN, trendIncludeOthers, trendFocusKey]
  );

  // Export ranking completo (no solo Top-N)
  const exportCsv = () => {
    const header = ['group', 'vSent', 'turnover', 'margin', 'ecpm'];
    const lines = [header.join(',')];
    fullRanking.forEach(r => {
      const g = `"${String(r.label).replaceAll('"', '""')}"`;
      lines.push([g, r.vSent, r.turnover.toFixed(2), r.margin.toFixed(2), r.ecpm.toFixed(2)].join(','));
    });
    const blob = new Blob([lines.join('\n')], { type: 'text/csv;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = `${groupBy}_ranking.csv`; a.click();
    URL.revokeObjectURL(url);
  };

  // ====== Geo mix (France B2C, France B2B, INTL) ======
  const frB2C = computeTotals(r => (r.geo || '').toUpperCase() === 'FR' && r.databaseType === 'B2C');
  const frB2B = computeTotals(r => (r.geo || '').toUpperCase() === 'FR' && r.databaseType === 'B2B');
  const intl   = computeTotals(r => (r.geo || '').toUpperCase() !== 'FR' && (r.databaseType === 'B2B' || r.databaseType === 'B2C'));

  const subtotal = {
    vSent: frB2C.vSent + frB2B.vSent + intl.vSent,
    turnover: frB2C.turnover + frB2B.turnover + intl.turnover,
    margin: frB2C.margin + frB2B.margin + intl.margin,
  };
  const subtotalMarginPct = subtotal.turnover > 0 ? subtotal.margin / subtotal.turnover : null;

  return (
    <div className="grid gap-6">
      {/* Filtros (en tarjeta) */}
      <Card>
        <ReportsHeader
          groupBy={groupBy}
          metric={metric}
          topN={topN}
          filters={filters}
          onChangeFilters={setFilters}
          onChangeGroupBy={setGroupBy}
          onChangeMetric={(m: Metric) => setMetric(m)}
          onChangeTopN={setTopN}
          onQuickLast30={quickLast30}
          onExportCsv={exportCsv}
          summary={{ filteredCount: summary.filteredRows, groupCount: summary.groups }}
        />
      </Card>

      {/* KPIs globales */}
      <Card>
        <ReportsKpis kpis={summary.totals} />
      </Card>

      {/* Unified time series â€” inmediatamente tras KPIs */}
      <Card>
        <ReportsUnifiedTrend
          data={trendSeries.data}
          keys={trendSeries.keys}
          metric={trendMetric}
          onChangeMetric={setTrendMetric}
          by={trendBy}
          onChangeBy={setTrendBy}
          topN={trendTopN}
          onChangeTopN={setTrendTopN}
          includeOthers={trendIncludeOthers}
          onToggleOthers={setTrendIncludeOthers}
          focusKey={trendFocusKey}
          focusOptions={focusOptions}
          onChangeFocus={setTrendFocusKey}
        />
      </Card>

      {/* Geo mix: France B2C / France B2B / INTL + subtotal */}
      <Card>
        <div className="mb-3 text-sm font-medium">Geo mix</div>
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
          <GeoTile title="France B2C" v={frB2C} />
          <GeoTile title="France B2B" v={frB2B} />
          <GeoTile title="INTL (B2B+B2C, no FR)" v={intl} />
        </div>
        <div className="mt-3 pt-3 border-t border-[--color-border] text-sm flex flex-wrap items-center gap-4">
          <span className="opacity-70">Subtotal (B2B+B2C):</span>
          <span><strong>Turnover:</strong> {fmtEUR.format(subtotal.turnover)}</span>
          <span>
            <strong>Margin (%):</strong>{' '}
            {subtotalMarginPct == null ? 'â€”' : fmtPct.format(subtotalMarginPct)}{' '}
            <span className="opacity-70">({fmtEUR.format(subtotal.margin)})</span>
          </span>
          <span><strong>V Sent:</strong> {fmtInt.format(subtotal.vSent)}</span>
        </div>
      </Card>

      {/* Top-N (grÃ¡fico de barras) */}
      <Card>
        <ReportsChart
          data={ranking}
          metric={metric}
          title={`Top ${topN} by ${legendName(metric)}`}
          height={360}
          showTable={false}
          groupLabel={groupLabel(groupBy)}
        />
      </Card>

      {/* Top-N (tabla) */}
      <Card>
        <ReportsTopTable
          data={ranking}
          groupLabel={groupLabel(groupBy)}
        />
      </Card>
    </div>
  );
}

function GeoTile({ title, v }: {
  title: string;
  v: { vSent: number; turnover: number; margin: number; ecpm: number; marginPct: number | null };
}) {
  return (
    <div className="rounded-xl border border-[--color-border] bg-[color:var(--color-surface)] p-4">
      <div className="text-xs uppercase opacity-70">{title}</div>
      <div className="mt-2 grid grid-cols-2 gap-2 text-sm">
        <div><span className="opacity-70">Turnover</span><br /><strong>{fmtEUR.format(v.turnover)}</strong></div>
        <div>
          <span className="opacity-70">Margin (%)</span><br />
          <strong>{v.marginPct == null ? 'â€”' : fmtPct.format(v.marginPct)}</strong>
          <span className="opacity-70"> Â· {fmtEUR.format(v.margin)}</span>
        </div>
        <div><span className="opacity-70">V Sent</span><br /><strong>{fmtInt.format(v.vSent)}</strong></div>
        <div><span className="opacity-70">eCPM</span><br /><strong>{fmtEUR.format(v.ecpm)}</strong></div>
      </div>
    </div>
  );
}

function legendName(m: Metric) {
  return m === 'turnover' ? 'Turnover' : m === 'margin' ? 'Margin' : m === 'ecpm' ? 'eCPM' : 'V Sent';
}
function groupLabel(g: string) {
  switch (g) {
    case 'database': return 'Database';
    case 'partner': return 'Partner';
    case 'campaign': return 'Campaign';
    case 'advertiser': return 'Advertiser';
    case 'theme': return 'Theme';
    case 'geo': return 'GEO';
    case 'type': return 'Type';
    case 'databaseType': return 'DB Type';
    default: return 'Group';
  }
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\table\RowActions.tsx =====
'use client';

import { useEffect, useRef, useState } from 'react';

export default function RowActions({
  onEdit,
  onDuplicate,
  onDelete,
}: {
  onEdit: () => void;
  onDuplicate: () => void;
  onDelete: () => void;
}) {
  const [open, setOpen] = useState(false);
  const wrapRef = useRef<HTMLDivElement | null>(null);

  // Cerrar al hacer click fuera
  useEffect(() => {
    const onDoc = (e: MouseEvent) => {
      if (!wrapRef.current?.contains(e.target as Node)) setOpen(false);
    };
    document.addEventListener('mousedown', onDoc);
    return () => document.removeEventListener('mousedown', onDoc);
  }, []);

  return (
    <div ref={wrapRef} className="relative flex justify-end">
      <button
        type="button"
        className="rounded-md border border-[--color-border] px-2 py-1 text-sm
                   hover:bg-black/5 focus:outline-none focus:ring-2 focus:ring-primary/30"
        aria-haspopup="menu"
        aria-expanded={open}
        title="Row actions"
        onClick={(e) => { e.stopPropagation(); setOpen(o => !o); }}
        onMouseDown={(e) => e.stopPropagation()}
        onKeyDown={(e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            setOpen(o => !o);
          }
          if (e.key === 'Escape') setOpen(false);
        }}
      >
        â‹¯
      </button>

      {open && (
        <div
          role="menu"
          className="absolute right-0 top-full z-50 mt-1 min-w-36 rounded-md border border-[--color-border]
                     bg-[color:var(--color-surface-2)] p-1 shadow-[0_12px_32px_rgba(0,0,0,.12)]"
          onMouseDown={(e) => e.stopPropagation()}
        >
          <button
            type="button"
            role="menuitem"
            className="w-full rounded px-3 py-2 text-left text-sm
                       hover:bg-black/5 focus:bg-primary/5 focus:outline-none focus:ring-1 focus:ring-primary/30"
            onClick={() => { setOpen(false); onEdit(); }}
          >
            Edit
          </button>

          <button
            type="button"
            role="menuitem"
            className="w-full rounded px-3 py-2 text-left text-sm
                       hover:bg-black/5 focus:bg-primary/5 focus:outline-none focus:ring-1 focus:ring-primary/30"
            onClick={() => { setOpen(false); onDuplicate(); }}
          >
            Duplicateâ€¦
          </button>

          <button
            type="button"
            role="menuitem"
            className="w-full rounded px-3 py-2 text-left text-sm text-[--color-accent]
                       hover:bg-black/5 focus:bg-primary/5 focus:outline-none focus:ring-1 focus:ring-primary/30"
            onClick={() => { setOpen(false); onDelete(); }}
          >
            Delete
          </button>
        </div>
      )}
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\Card.tsx =====
'use client';

export default function Card({
  title,
  right,
  className = '',
  children,
}: {
  title?: React.ReactNode;
  right?: React.ReactNode;
  className?: string;
  children: React.ReactNode;
}) {
  return (
    <section className={`card ${title || right ? '' : ''} ${className}`}>
      {(title || right) && (
        <header className="flex items-center justify-between px-4 pt-4 pb-2">
          <div className="text-sm font-medium">{title}</div>
          <div className="flex items-center gap-2">{right}</div>
        </header>
      )}
      <div className={title || right ? 'px-4 pb-4' : 'p-4'}>{children}</div>
    </section>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\Chip.tsx =====
type Props = {
  active?: boolean;
  children: React.ReactNode;
  onClick?: () => void;
  title?: string;
};

export default function Chip({ active = false, children, onClick, title }: Props) {
  return (
    <button
      type="button"
      title={title}
      aria-pressed={active}
      onClick={onClick}
      className={[
        'px-3 py-1.5 rounded-full border text-sm transition',
        'focus:outline-none focus:ring-2',
        'focus:ring-[color:var(--color-primary)] focus:ring-opacity-30',
        active
          ? [
              'bg-[color:var(--color-primary)]',
              'hover:bg-[color:color-mix(in oklab,var(--color-primary) 88%, black)]',
              'text-white border-transparent shadow-sm',
            ].join(' ')
          : [
              'bg-[color:var(--color-surface-2)]',
              'hover:bg-[color:var(--color-surface)]',
              'text-[color:var(--color-text)]/80',
              'border-[color:var(--color-border)]',
            ].join(' '),
      ].join(' ')}
    >
      {children}
    </button>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\ColumnPicker.tsx =====
'use client';

import { createPortal } from 'react-dom';
import { useEffect, useRef, useState, useId } from 'react';

type ColumnItem = { id: string; label: string; disabled?: boolean };

export default function ColumnPicker({
  columns,
  visible,
  onChange,
  onClose,
  defaults,
}: {
  columns: ColumnItem[];
  visible: Set<string>;
  onChange: (next: Set<string>) => void;
  onClose: () => void;
  /** ids visibles por defecto (para reset) */
  defaults?: string[];
}) {
  const [mounted, setMounted] = useState(false);
  const trapRef = useRef<HTMLDivElement | null>(null);
  const firstFocusRef = useRef<HTMLButtonElement | null>(null);
  const titleId = useId();

  useEffect(() => { setMounted(true); }, []);

  // Cerrar con Esc
  useEffect(() => {
    const onKey = (e: KeyboardEvent) => { if (e.key === 'Escape') onClose(); };
    document.addEventListener('keydown', onKey);
    return () => document.removeEventListener('keydown', onKey);
  }, [onClose]);

  // Focus trap simple (Tab/Shift+Tab)
  useEffect(() => {
    const node = trapRef.current;
    if (!node) return;

    const selector = [
      'a[href]','button:not([disabled])','textarea:not([disabled])','input:not([disabled])',
      'select:not([disabled])','[tabindex]:not([tabindex="-1"])',
    ].join(',');

    const onKeyDown = (e: KeyboardEvent) => {
      if (e.key !== 'Tab') return;
      const focusables = Array.from(node.querySelectorAll<HTMLElement>(selector))
        .filter(el => el.offsetParent !== null);
      if (!focusables.length) return;

      const first = focusables[0];
      const last  = focusables[focusables.length - 1];
      const active = document.activeElement as HTMLElement | null;

      if (e.shiftKey) {
        if (active === first || !node.contains(active)) {
          last.focus(); e.preventDefault();
        }
      } else {
        if (active === last) {
          first.focus(); e.preventDefault();
        }
      }
    };

    node.addEventListener('keydown', onKeyDown);
    const t = setTimeout(() => firstFocusRef.current?.focus(), 0);
    return () => { node.removeEventListener('keydown', onKeyDown); clearTimeout(t); };
  }, []);

  // Bloquear scroll de la pÃ¡gina mientras el modal estÃ© abierto
  useEffect(() => {
    const prev = document.body.style.overflow;
    document.body.style.overflow = 'hidden';
    return () => { document.body.style.overflow = prev; };
  }, []);

  // Acciones
  const toggle = (id: string) => {
    const next = new Set(visible);
    if (next.has(id)) next.delete(id);
    else next.add(id);
    onChange(next);
  };
  const selectAll = () => {
    const next = new Set(visible);
    for (const c of columns) next.add(c.id);
    onChange(next);
  };
  const resetDefaults = () => {
    if (!defaults?.length) return;
    onChange(new Set(defaults));
  };

  if (!mounted) return null;

  return createPortal(
    <div
      className="fixed inset-0 z-[200] flex items-center justify-center p-4"
      role="dialog"
      aria-modal="true"
      aria-labelledby={titleId}
      onMouseDown={(e) => { if (e.target === e.currentTarget) onClose(); }}
    >
      {/* Backdrop alineado con otros modales */}
      <div
        className="absolute inset-0"
        style={{ background: 'rgba(0,0,0,0.55)', backdropFilter: 'blur(6px)' }}
      />

      {/* Panel */}
      <div
        ref={trapRef}
        className="relative card w-full max-w-lg max-h-[85vh] overflow-hidden border border-[--color-border] shadow-xl"
        style={{ background: 'var(--color-surface)' }}
        onMouseDown={(e) => e.stopPropagation()}
      >
        {/* Header (chrome unificado) */}
        <div className="sticky top-0 z-10 modal-chrome modal-header px-5 py-3">
          <div className="accent-strip" aria-hidden />
          <div className="flex items-center justify-between">
            <h3 id={titleId} className="text-base font-semibold">Columns</h3>
            <button className="btn-ghost" onClick={onClose} aria-label="Close">âœ•</button>
          </div>
        </div>

        {/* Body */}
        <div className="px-5 pb-4 pt-0 overflow-y-auto relative">
          <div className="edge-fade edge-top" aria-hidden />

          {/* Toolbar sticky dentro del scroll */}
          <div className="sticky top-0 z-[1] -mx-5 px-5 py-2 bg-[color:var(--color-surface)]/95 backdrop-blur-sm border-b border-[--color-border]">
            <div className="flex items-center gap-2 text-xs">
              <button ref={firstFocusRef} className="btn-ghost" onClick={selectAll}>
                Select all
              </button>
              {defaults?.length ? (
                <button className="btn-ghost" onClick={resetDefaults}>
                  Reset defaults
                </button>
              ) : null}
            </div>
          </div>

          {/* Lista en subcard con divisores suaves */}
          <div className="subcard p-0 mt-3">
            <ul className="max-h-[52vh] overflow-y-auto">
              {columns.map(col => {
                const checked = visible.has(col.id);
                const disabled = !!col.disabled;
                return (
                  <li key={col.id} className="group">
                    <label
                      className={[
                        'flex items-center gap-3 px-3 py-2.5',
                        disabled
                          ? 'opacity-55 cursor-not-allowed'
                          : 'cursor-pointer hover:bg-[color:var(--color-surface)]',
                        'rounded-md focus-within:outline-none focus-within:ring-2 focus-within:ring-[color:var(--color-primary)]/30',
                      ].join(' ')}
                    >
                      <input
                        type="checkbox"
                        checked={checked}
                        disabled={disabled}
                        onChange={() => { if (!disabled) toggle(col.id); }}
                        className="h-4 w-4 rounded-sm"
                        style={{ accentColor: 'var(--color-primary)' }}
                      />
                      <span className="text-sm select-none">{col.label}</span>
                    </label>
                    <div className="divider-soft mx-2" />
                  </li>
                );
              })}
            </ul>
          </div>

          <div className="edge-fade edge-bottom" aria-hidden />
        </div>

        {/* Footer (chrome unificado) */}
        <div className="sticky bottom-0 z-10 modal-chrome modal-footer px-5 py-3">
          <div className="flex items-center justify-end">
            <button className="btn-primary" onClick={onClose}>Done</button>
          </div>
        </div>
      </div>
    </div>,
    document.body
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\Combobox.tsx =====
'use client';
import { useEffect, useMemo, useRef, useState, useId } from 'react';

type Option = { id?: string; value: string; label?: string };

export default function Combobox({
  options,
  value,
  onChange,
  placeholder = 'Start typing to searchâ€¦',
  ariaLabel,
  id,
  invalid = false,
  ariaDescribedby,
  className,
}: {
  options: Option[];
  value?: string;
  onChange: (v: string) => void;
  placeholder?: string;
  ariaLabel?: string;
  id?: string;
  invalid?: boolean;
  ariaDescribedby?: string;
  className?: string;
}) {
  const autoId = useId();
  const inputId = id ?? `cb_${autoId}`;
  const listboxId = `${inputId}-listbox`;

  const [open, setOpen] = useState(false);
  const [q, setQ] = useState(value || '');
  const [activeIndex, setActiveIndex] = useState<number>(-1);
  const [suppressNextOpen, setSuppressNextOpen] = useState(false);

  const wrapRef = useRef<HTMLDivElement | null>(null);
  const listRef = useRef<HTMLUListElement | null>(null);
  const inputRef = useRef<HTMLInputElement | null>(null);

  // Sincroniza valor externo
  useEffect(() => {
    setQ(value || '');
  }, [value]);

  // Cierre al hacer click fuera
  useEffect(() => {
    const onDoc = (e: MouseEvent) => {
      if (!wrapRef.current?.contains(e.target as Node)) {
        setOpen(false);
        setActiveIndex(-1);
      }
    };
    document.addEventListener('mousedown', onDoc);
    return () => document.removeEventListener('mousedown', onDoc);
  }, []);

  // Filtrado + dedupe + truncado a 50
  const filtered = useMemo(() => {
    const s = q.trim().toLowerCase();
    const base = s ? options.filter(o => (o.label || o.value).toLowerCase().includes(s)) : options;
    const seen = new Set<string>();
    const out: Option[] = [];
    for (const o of base) {
      const k = (o.label || o.value).toLowerCase();
      if (seen.has(k)) continue;
      seen.add(k);
      out.push(o);
      if (out.length >= 50) break;
    }
    return out;
  }, [q, options]);

  // Determina Ã­ndice "seleccionado" dentro del array filtrado (si coincide el valor exacto)
  const selectedIndex = useMemo(() => {
    const val = (q || '').toLowerCase();
    return filtered.findIndex(o => (o.value || '').toLowerCase() === val);
  }, [filtered, q]);

  // Al abrir, sitÃºa el foco en el elemento seleccionado o el primero si hay query
  useEffect(() => {
    if (!open) return;
    if (selectedIndex >= 0) {
      setActiveIndex(selectedIndex);
    } else if (q && filtered.length) {
      setActiveIndex(0);
    } else {
      setActiveIndex(-1);
    }
  }, [open, selectedIndex, q, filtered.length]);

  // Asegura que el elemento activo quede visible en el scroll
  useEffect(() => {
    if (!open || activeIndex < 0) return;
    const el = document.getElementById(`${listboxId}-opt-${activeIndex}`);
    el?.scrollIntoView({ block: 'nearest' });
  }, [activeIndex, open, listboxId]);

  // Roving focus dentro del listbox
  const focusItem = (index: number) => {
    const btns = listRef.current?.querySelectorAll<HTMLButtonElement>('button[role="option"]');
    if (!btns || !btns.length) return;
    const i = Math.max(0, Math.min(index, btns.length - 1));
    setActiveIndex(i);
    btns[i].focus();
  };

  // Resalta todas las coincidencias
  const renderHighlighted = (text: string, query: string) => {
    if (!query) return text;
    const ql = query.trim().toLowerCase();
    if (!ql) return text;
    const parts: Array<string | JSX.Element> = [];
    let start = 0;
    const lower = text.toLowerCase();
    while (true) {
      const i = lower.indexOf(ql, start);
      if (i === -1) {
        parts.push(text.slice(start));
        break;
      }
      if (i > start) parts.push(text.slice(start, i));
      const mid = text.slice(i, i + ql.length);
      parts.push(
        <mark
          key={`${i}-${mid}`}
          className="px-0.5 rounded bg-[color:var(--color-primary)]/18 text-[color:var(--color-text)]"
        >
          {mid}
        </mark>
      );
      start = i + ql.length;
    }
    return <>{parts}</>;
  };

  const selectValue = (val: string) => {
    onChange(val);
    setQ(val);
    setOpen(false);
    setActiveIndex(-1);
    setSuppressNextOpen(true);
  };

  return (
    <div ref={wrapRef} className={`relative w-full min-w-0 ${className ?? ''}`}>
      {/* Input + acciones inline */}
      <div className="relative">
        <input
          ref={inputRef}
          id={inputId}
          role="combobox"
          aria-expanded={open}
          aria-controls={open ? listboxId : undefined}
          aria-activedescendant={open && activeIndex >= 0 ? `${listboxId}-opt-${activeIndex}` : undefined}
          aria-label={ariaLabel}
          aria-invalid={invalid || undefined}
          aria-describedby={ariaDescribedby}
          aria-autocomplete="list"
          className={`input h-10 w-full pr-18 ${invalid ? 'input-error' : ''}`}
          placeholder={placeholder}
          value={q}
          autoComplete="off" autoCorrect="off" autoCapitalize="off" spellCheck={false}
          inputMode="search" data-gramm="false" data-lt-active="false"
          onFocus={() => {
            if (suppressNextOpen) { setSuppressNextOpen(false); return; }
            setOpen(true);
          }}
          onChange={(e) => {
            const v = e.target.value;
            setQ(v);
            setOpen(true);
            setActiveIndex(v ? 0 : -1);
            onChange(v);
          }}
          onKeyDown={(e) => {
            if (e.key === 'ArrowDown') {
              e.preventDefault();
              if (!open) setOpen(true);
              focusItem(activeIndex >= 0 ? activeIndex + 1 : 0);
            }
            if (e.key === 'ArrowUp') {
              if (!open) return;
              e.preventDefault();
              if (activeIndex <= 0) {
                setActiveIndex(-1);
                inputRef.current?.focus();
              } else {
                focusItem(activeIndex - 1);
              }
            }
            if (e.key === 'PageDown') {
              if (!open) return;
              e.preventDefault();
              focusItem(activeIndex + 10);
            }
            if (e.key === 'PageUp') {
              if (!open) return;
              e.preventDefault();
              focusItem(activeIndex - 10);
            }
            if (e.key === 'Home') { if (open) { e.preventDefault(); focusItem(0); } }
            if (e.key === 'End')  { if (open) { e.preventDefault(); focusItem(filtered.length - 1); } }
            if (e.key === 'Enter') {
              e.preventDefault();
              if (open && activeIndex >= 0 && filtered[activeIndex]) {
                selectValue(filtered[activeIndex].value);
              } else if (selectedIndex >= 0) {
                // Si el texto coincide exactamente con una opciÃ³n, selecciÃ³nala
                selectValue(filtered[selectedIndex].value);
              } else {
                setOpen(false);
              }
            }
            if (e.key === 'Escape') {
              e.preventDefault();
              if (q) {
                // Escape limpia primero; segundo Escape cierra
                setQ('');
                onChange('');
                setActiveIndex(-1);
              } else {
                setOpen(false);
                setActiveIndex(-1);
              }
            }
          }}
        />

        {/* Botones: clear + toggle */}
        {q ? (
          <button
            type="button"
            aria-label="Clear"
            title="Clear"
            className="absolute right-9 top-1/2 -translate-y-1/2 rounded-md px-1.5 py-0.5 text-sm border border-[--color-border] bg-[color:var(--color-surface-2)] hover:bg-[color:var(--color-surface)]"
            onMouseDown={(e) => e.preventDefault()}
            onClick={() => {
              setQ('');
              onChange('');
              setActiveIndex(-1);
              inputRef.current?.focus();
              setOpen(true);
            }}
          >
            Ã—
          </button>
        ) : null}

        <button
          type="button"
          aria-label={open ? 'Close options' : 'Open options'}
          title={open ? 'Close' : 'Open'}
          className="absolute right-1.5 top-1/2 -translate-y-1/2 rounded-md px-2 py-1 border border-[--color-border] bg-[color:var(--color-surface-2)] hover:bg-[color:var(--color-surface)]"
          onMouseDown={(e) => e.preventDefault()}
          onClick={() => {
            const next = !open;
            setOpen(next);
            if (next) {
              inputRef.current?.focus();
              setActiveIndex(selectedIndex >= 0 ? selectedIndex : (q ? 0 : -1));
            }
          }}
        >
          â–¾
        </button>
      </div>

      {open && (
        <ul
          ref={listRef}
          id={listboxId}
          role="listbox"
          className="absolute z-50 mt-1 max-h-60 left-0 right-0 overflow-auto rounded-lg border border-[--color-border] bg-[color:var(--color-surface-2)] p-1 shadow-xl"
        >
          {filtered.length === 0 && (
            <li className="px-3 py-2 text-sm opacity-70">No results</li>
          )}
          {filtered.map((o, idx) => {
            const isSelected = (q || '').toLowerCase() === (o.value || '').toLowerCase();
            const isActive = idx === activeIndex;
            const optId = `${listboxId}-opt-${idx}`;
            return (
              <li key={o.id ?? o.value}>
                <button
                  id={optId}
                  type="button"
                  role="option"
                  aria-selected={isSelected}
                  className={[
                    'w-full rounded px-3 py-2 text-left text-sm flex items-center justify-between',
                    isActive
                      ? 'bg-[color:var(--color-surface)]/80 outline-none'
                      : 'hover:bg-[color:var(--color-surface)]/55 focus:bg-[color:var(--color-surface)]/70',
                  ].join(' ')}
                  onMouseEnter={() => setActiveIndex(idx)}
                  onMouseDown={(e) => {
                    // Evita perder el foco del input antes de seleccionar
                    e.preventDefault();
                  }}
                  onClick={() => selectValue(o.value)}
                  onKeyDown={(e) => {
                    const btns = listRef.current?.querySelectorAll<HTMLButtonElement>('button[role="option"]');
                    const count = btns?.length ?? 0;
                    if (!count) return;
                    if (e.key === 'ArrowDown') {
                      e.preventDefault();
                      focusItem(Math.min(idx + 1, count - 1));
                    }
                    if (e.key === 'ArrowUp') {
                      e.preventDefault();
                      if (idx <= 0) {
                        inputRef.current?.focus();
                        setActiveIndex(-1);
                      } else {
                        focusItem(idx - 1);
                      }
                    }
                    if (e.key === 'Home') { e.preventDefault(); focusItem(0); }
                    if (e.key === 'End') { e.preventDefault(); focusItem(count - 1); }
                    if (e.key === 'Enter') {
                      e.preventDefault();
                      selectValue(o.value);
                    }
                    if (e.key === 'Escape') {
                      e.preventDefault();
                      setOpen(false);
                      setActiveIndex(-1);
                      inputRef.current?.focus();
                    }
                  }}
                >
                  <span className="truncate">{renderHighlighted(o.label || o.value, q)}</span>
                  {isSelected ? (
                    <span aria-hidden className="ml-3 text-[--color-primary]">âœ“</span>
                  ) : null}
                </button>
              </li>
            );
          })}
        </ul>
      )}
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\FieldWithAddon.tsx =====
'use client';

import React from 'react';

type Props = {
  children: React.ReactNode;
  onAdd: () => void;
  addAriaLabel?: string;
  className?: string;
  buttonDisabled?: boolean;
};

export default function FieldWithAddon({
  children,
  onAdd,
  addAriaLabel = 'Add item',
  className = '',
  buttonDisabled = false,
}: Props) {
  return (
    <div className={`grid grid-cols-[1fr_auto] items-stretch ${className}`}>
      {/* Nota: el control hijo deberÃ­a llevar `rounded-r-none` para unirse visualmente */}
      <div className="contents">{children}</div>

      <button
        type="button"
        onClick={onAdd}
        disabled={buttonDisabled}
        aria-disabled={buttonDisabled || undefined}
        aria-label={addAriaLabel}
        title={addAriaLabel}
        className={[
          'btn-ghost h-10 px-3 transition-colors',
          'rounded-l-none -ml-px border border-[--color-border] border-l-0',
          'bg-[color:var(--color-surface-2)] hover:bg-[color:var(--color-surface)]',
          // No anulamos el focus ring global (:focus-visible en globals.css)
          'disabled:opacity-50 disabled:pointer-events-none',
        ].join(' ')}
      >
        {/* Plus en SVG para mejor nitidez y hereda el color actual */}
        <svg
          aria-hidden="true"
          width="14"
          height="14"
          viewBox="0 0 14 14"
          fill="none"
        >
          <path
            d="M7 2v10M2 7h10"
            stroke="currentColor"
            strokeWidth="1.75"
            strokeLinecap="round"
          />
        </svg>
      </button>
    </div>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\FooterBar.tsx =====
'use client';

export default function FooterBar() {
  return (
    <footer
      className="app-footer modal-chrome fixed bottom-0 left-0 right-0 z-[90]"
      role="contentinfo"
      aria-label="Site footer"
    >
      <div className="h-full w-full flex items-center justify-between px-3 sm:px-4">
        <span className="text-[11px] sm:text-xs opacity-80 select-none">
          Â© 2025 Dataventure â€” All Rights Reserved
        </span>

        <span className="text-[11px] sm:text-xs opacity-80 flex items-center whitespace-nowrap select-none">
          Crafted with
          <img
            src="/love1.png"        
            alt=""                      /* decorativo */
            aria-hidden="true"
            width={14}
            height={14}
            className="inline-block h-3 w-3 mx-1 align-[-2px]"
          />
          by David
          <span className="sr-only">with love</span>
        </span>
      </div>
    </footer>
  );
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\MiniModal.tsx =====
'use client';

import { useEffect, useRef, useId } from 'react';
import { createPortal } from 'react-dom';

export default function MiniModal({
  title,
  onClose,
  children,
  footer,
  widthClass = 'max-w-md',
  panelClassName = '',
  headerClassName = '',
  footerClassName = '',
  /** NUEVO: clases extra para el cuerpo */
  bodyClassName = '',
  /** NUEVO: muestra tira de acento en el header */
  accentStrip = false,
  /** NUEVO: aÃ±ade fades superior/inferior dentro del Ã¡rea scroll */
  edgeFades = false,
  /** fuerza panel/header/footer opacos; true por defecto */
  solid = true,
}: {
  title: string;
  onClose: () => void;
  children: React.ReactNode;
  footer?: React.ReactNode;
  widthClass?: string;
  panelClassName?: string;
  headerClassName?: string;
  footerClassName?: string;
  bodyClassName?: string;
  accentStrip?: boolean;
  edgeFades?: boolean;
  solid?: boolean;
}) {
  const trapRef = useRef<HTMLDivElement | null>(null);
  const titleId = useId();

  useEffect(() => {
    const onKey = (e: KeyboardEvent) => { if (e.key === 'Escape') onClose(); };
    document.addEventListener('keydown', onKey);
    return () => document.removeEventListener('keydown', onKey);
  }, [onClose]);

  useEffect(() => {
    const node = trapRef.current;
    if (!node) return;
    const selector = [
      'a[href]',
      'button:not([disabled])',
      'textarea:not([disabled])',
      'input:not([disabled])',
      'select:not([disabled])',
      '[tabindex]:not([tabindex="-1"])',
    ].join(',');
    const onKeyDown = (e: KeyboardEvent) => {
      if (e.key !== 'Tab') return;
      const focusables = Array.from(node.querySelectorAll<HTMLElement>(selector))
        .filter(el => el.offsetParent !== null);
      if (!focusables.length) return;
      const first = focusables[0];
      const last  = focusables[focusables.length - 1];
      const active = document.activeElement as HTMLElement | null;
      if (e.shiftKey) {
        if (active === first || !node.contains(active)) { last.focus(); e.preventDefault(); }
      } else {
        if (active === last) { first.focus(); e.preventDefault(); }
      }
    };
    node.addEventListener('keydown', onKeyDown);
    const t = setTimeout(() => {
      (node.querySelector<HTMLElement>('input,select,button,[tabindex]') || node).focus();
    }, 0);
    return () => { node.removeEventListener('keydown', onKeyDown); clearTimeout(t); };
  }, []);

  useEffect(() => {
    const prev = document.body.style.overflow;
    document.body.style.overflow = 'hidden';
    return () => { document.body.style.overflow = prev; };
  }, []);

  // Backdrop translÃºcido + blur
  const backdropStyle: React.CSSProperties = {
    background: 'rgba(0,0,0,0.55)',
    backdropFilter: 'blur(6px)',
    WebkitBackdropFilter: 'blur(6px)',
  };

  const modal = (
    <div
      className="fixed inset-0 z-[500] flex items-center justify-center p-4"
      role="dialog"
      aria-modal="true"
      aria-labelledby={titleId}
      onMouseDown={(e) => { if (e.target === e.currentTarget) onClose(); }}
    >
      <div className="absolute inset-0" style={backdropStyle} />

      <div
        ref={trapRef}
        className={[
          'relative card w-full',
          widthClass,
          'max-h-[90vh] overflow-hidden border border-[--color-border] shadow-xl',
          panelClassName,
        ].join(' ')}
        style={solid ? { background: 'var(--color-surface)' } : undefined}
        onMouseDown={(e) => e.stopPropagation()}
      >
        {/* Header */}
        <div
          className={[
            'sticky top-0 z-10 border-b border-[--color-border] px-5 py-3 flex items-center justify-between',
            solid
              ? '!bg-[color:var(--color-surface)] !backdrop-blur-0'
              : 'bg-[color:var(--color-surface)]/95 backdrop-blur-sm',
            headerClassName,
          ].join(' ')}
        >
          {accentStrip ? <div className="accent-strip" aria-hidden /> : null}
          <h3 id={titleId} className="text-base font-semibold">{title}</h3>
          <button className="btn-ghost" onClick={onClose} aria-label="Close">âœ•</button>
        </div>

        {/* Body (scroll) */}
        <div className={['px-5 py-4 overflow-y-auto', bodyClassName].join(' ')}>
          {edgeFades && (
            <div
              aria-hidden
              className="pointer-events-none sticky top-0 -mt-4 h-4 bg-gradient-to-b from-[color:var(--color-surface)] to-transparent z-[5]"
            />
          )}

          {children}

          {edgeFades && (
            <div
              aria-hidden
              className="pointer-events-none sticky bottom-0 -mb-4 h-4 bg-gradient-to-t from-[color:var(--color-surface)] to-transparent z-[5]"
            />
          )}
        </div>

        {/* Footer */}
        <div
          className={[
            'sticky bottom-0 z-10 border-t border-[--color-border] px-5 py-3 flex items-center justify-end gap-2',
            solid
              ? '!bg-[color:var(--color-surface)] !backdrop-blur-0'
              : 'bg-[color:var(--color-surface)]/95 backdrop-blur-sm',
            footerClassName,
          ].join(' ')}
        >
          {footer}
        </div>
      </div>
    </div>
  );

  if (typeof document === 'undefined') return null;
  return createPortal(modal, document.body);
}

===== C:\Users\Usuario\Documents\GitHub\mi-app-monet\components\ui\Tooltip.tsx =====
'use client';

import { useEffect, useRef, useState, useId } from 'react';

type Side = 'top' | 'right' | 'bottom' | 'left';

export default function Tooltip({
  content,
  side = 'top',
  children,
  className = '',
  /** Delay en ms para mostrar/ocultar (evita flicker) */
  delay = 80,
}: {
  content: React.ReactNode;
  side?: Side;
  children: React.ReactNode;
  className?: string;
  delay?: number;
}) {
  const [open, setOpen] = useState(false);
  const wrapRef = useRef<HTMLSpanElement | null>(null);
  const tidRef = useRef<number | null>(null);
  const tipId = useId();

  // Cierre al hacer click fuera
  useEffect(() => {
    const onDoc = (e: MouseEvent) => {
      if (!wrapRef.current?.contains(e.target as Node)) setOpen(false);
    };
    document.addEventListener('mousedown', onDoc);
    return () => document.removeEventListener('mousedown', onDoc);
  }, []);

  // Limpia timers al desmontar
  useEffect(() => {
    return () => { if (tidRef.current) window.clearTimeout(tidRef.current); };
  }, []);

  const show = () => {
    if (tidRef.current) window.clearTimeout(tidRef.current);
    tidRef.current = window.setTimeout(() => setOpen(true), delay);
  };
  const hide = () => {
    if (tidRef.current) window.clearTimeout(tidRef.current);
    tidRef.current = window.setTimeout(() => setOpen(false), delay);
  };

  const pos =
    side === 'top'
      ? 'bottom-full left-1/2 -translate-x-1/2 -translate-y-1'
      : side === 'bottom'
      ? 'top-full left-1/2 -translate-x-1/2 translate-y-1'
      : side === 'left'
      ? 'right-full top-1/2 -translate-y-1/2 -translate-x-1'
      : 'left-full top-1/2 -translate-y-1/2 translate-x-1';

  return (
    <span
      ref={wrapRef}
      className={`relative inline-flex ${className}`}
      // Hover / focus accesibles
      onMouseEnter={show}
      onMouseLeave={hide}
      onFocus={show}
      onBlur={hide}
      tabIndex={0}
      aria-describedby={open ? tipId : undefined}
    >
      {children}
      {open && (
        <span
          id={tipId}
          role="tooltip"
          className={`tooltip-panel absolute ${pos}`}
          // TransiciÃ³n sutil (opcional)
          style={{ transition: 'opacity .12s ease, transform .12s ease' }}
        >
          {content}
        </span>
      )}
    </span>
  );
}

